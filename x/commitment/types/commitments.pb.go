// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/commitment/commitments.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the commitment module's genesis state.
type Commitments struct {
	Creator           string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CommittedTokens   []*CommittedTokens   `protobuf:"bytes,2,rep,name=committed_tokens,json=committedTokens,proto3" json:"committed_tokens,omitempty"`
	UncommittedTokens []*UncommittedTokens `protobuf:"bytes,3,rep,name=uncommitted_tokens,json=uncommittedTokens,proto3" json:"uncommitted_tokens,omitempty"`
	VestingTokens     []*VestingTokens     `protobuf:"bytes,4,rep,name=vesting_tokens,json=vestingTokens,proto3" json:"vesting_tokens,omitempty"`
}

func (m *Commitments) Reset()         { *m = Commitments{} }
func (m *Commitments) String() string { return proto.CompactTextString(m) }
func (*Commitments) ProtoMessage()    {}
func (*Commitments) Descriptor() ([]byte, []int) {
	return fileDescriptor_47379c930fe66ed6, []int{0}
}
func (m *Commitments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitments.Merge(m, src)
}
func (m *Commitments) XXX_Size() int {
	return m.Size()
}
func (m *Commitments) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitments.DiscardUnknown(m)
}

var xxx_messageInfo_Commitments proto.InternalMessageInfo

func (m *Commitments) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Commitments) GetCommittedTokens() []*CommittedTokens {
	if m != nil {
		return m.CommittedTokens
	}
	return nil
}

func (m *Commitments) GetUncommittedTokens() []*UncommittedTokens {
	if m != nil {
		return m.UncommittedTokens
	}
	return nil
}

func (m *Commitments) GetVestingTokens() []*VestingTokens {
	if m != nil {
		return m.VestingTokens
	}
	return nil
}

type CommittedTokens struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *CommittedTokens) Reset()         { *m = CommittedTokens{} }
func (m *CommittedTokens) String() string { return proto.CompactTextString(m) }
func (*CommittedTokens) ProtoMessage()    {}
func (*CommittedTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_47379c930fe66ed6, []int{1}
}
func (m *CommittedTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommittedTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommittedTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommittedTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommittedTokens.Merge(m, src)
}
func (m *CommittedTokens) XXX_Size() int {
	return m.Size()
}
func (m *CommittedTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_CommittedTokens.DiscardUnknown(m)
}

var xxx_messageInfo_CommittedTokens proto.InternalMessageInfo

func (m *CommittedTokens) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type UncommittedTokens struct {
	Denom  string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *UncommittedTokens) Reset()         { *m = UncommittedTokens{} }
func (m *UncommittedTokens) String() string { return proto.CompactTextString(m) }
func (*UncommittedTokens) ProtoMessage()    {}
func (*UncommittedTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_47379c930fe66ed6, []int{2}
}
func (m *UncommittedTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UncommittedTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UncommittedTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UncommittedTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UncommittedTokens.Merge(m, src)
}
func (m *UncommittedTokens) XXX_Size() int {
	return m.Size()
}
func (m *UncommittedTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_UncommittedTokens.DiscardUnknown(m)
}

var xxx_messageInfo_UncommittedTokens proto.InternalMessageInfo

func (m *UncommittedTokens) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type VestingTokens struct {
	Denom           string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TotalAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount"`
	UnvestedAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=unvested_amount,json=unvestedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"unvested_amount"`
	EpochIdentifier string                                 `protobuf:"bytes,4,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	NumEpochs       int64                                  `protobuf:"varint,5,opt,name=num_epochs,json=numEpochs,proto3" json:"num_epochs,omitempty"`
	CurrentEpoch    int64                                  `protobuf:"varint,6,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
}

func (m *VestingTokens) Reset()         { *m = VestingTokens{} }
func (m *VestingTokens) String() string { return proto.CompactTextString(m) }
func (*VestingTokens) ProtoMessage()    {}
func (*VestingTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_47379c930fe66ed6, []int{3}
}
func (m *VestingTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingTokens.Merge(m, src)
}
func (m *VestingTokens) XXX_Size() int {
	return m.Size()
}
func (m *VestingTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingTokens.DiscardUnknown(m)
}

var xxx_messageInfo_VestingTokens proto.InternalMessageInfo

func (m *VestingTokens) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *VestingTokens) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *VestingTokens) GetNumEpochs() int64 {
	if m != nil {
		return m.NumEpochs
	}
	return 0
}

func (m *VestingTokens) GetCurrentEpoch() int64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func init() {
	proto.RegisterType((*Commitments)(nil), "elys.commitment.Commitments")
	proto.RegisterType((*CommittedTokens)(nil), "elys.commitment.CommittedTokens")
	proto.RegisterType((*UncommittedTokens)(nil), "elys.commitment.UncommittedTokens")
	proto.RegisterType((*VestingTokens)(nil), "elys.commitment.VestingTokens")
}

func init() { proto.RegisterFile("elys/commitment/commitments.proto", fileDescriptor_47379c930fe66ed6) }

var fileDescriptor_47379c930fe66ed6 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0xa4, 0x2d, 0xea, 0xa6, 0xa9, 0xdb, 0x55, 0x0f, 0x56, 0x05, 0x4e, 0x08, 0x12,
	0x0a, 0x87, 0xda, 0x12, 0x3c, 0x01, 0xad, 0x8a, 0x14, 0x71, 0xaa, 0xc5, 0x87, 0xc4, 0x25, 0x72,
	0xec, 0xad, 0x6b, 0x25, 0xbb, 0x63, 0x76, 0x67, 0x0b, 0x7d, 0x09, 0xc4, 0x23, 0x71, 0xec, 0xb1,
	0x47, 0xc4, 0xa1, 0x42, 0xc9, 0x8b, 0x20, 0xaf, 0xd7, 0x34, 0x75, 0xc4, 0x05, 0xc4, 0xc9, 0x3b,
	0xff, 0xfd, 0xcf, 0x6f, 0x3e, 0xe4, 0x25, 0x8f, 0xd9, 0xfc, 0x4a, 0x85, 0x09, 0x70, 0x9e, 0x23,
	0x67, 0x02, 0x57, 0x8e, 0x2a, 0x28, 0x24, 0x20, 0x50, 0xb7, 0xb4, 0x04, 0x77, 0xfa, 0x61, 0x3f,
	0x03, 0xc8, 0xe6, 0x2c, 0x34, 0xd7, 0x53, 0x7d, 0x1e, 0x62, 0xce, 0x99, 0xc2, 0x98, 0x17, 0x55,
	0xc6, 0xa1, 0xdf, 0x34, 0xa4, 0x5a, 0xc6, 0x98, 0x83, 0xb0, 0xf7, 0x07, 0x19, 0x64, 0x60, 0x8e,
	0x61, 0x79, 0xb2, 0xea, 0xc3, 0x66, 0x2b, 0x45, 0x2c, 0x63, 0x6e, 0xbb, 0x18, 0x7e, 0x69, 0x93,
	0xee, 0xc9, 0x5d, 0x6f, 0xd4, 0x23, 0x0f, 0x12, 0xc9, 0x62, 0x04, 0xe9, 0x39, 0x03, 0x67, 0xb4,
	0x1d, 0xd5, 0x21, 0x7d, 0x4d, 0xf6, 0x2a, 0x08, 0xb2, 0x74, 0x82, 0x30, 0x63, 0x42, 0x79, 0xed,
	0x41, 0x67, 0xd4, 0x7d, 0x3e, 0x08, 0x1a, 0xa3, 0x04, 0x27, 0xb5, 0xf1, 0x8d, 0xf1, 0x45, 0x6e,
	0x72, 0x5f, 0xa0, 0x67, 0x84, 0x6a, 0xb1, 0x86, 0xeb, 0x18, 0xdc, 0x70, 0x0d, 0xf7, 0x56, 0x34,
	0xf2, 0xa3, 0x7d, 0xdd, 0x94, 0xe8, 0x29, 0xd9, 0xbd, 0x64, 0x0a, 0x73, 0x91, 0xd5, 0xb8, 0x0d,
	0x83, 0xf3, 0xd7, 0x70, 0xef, 0x2a, 0x9b, 0x45, 0xf5, 0x2e, 0x57, 0xc3, 0x21, 0x10, 0xb7, 0xd1,
	0x3d, 0x3d, 0x20, 0x9b, 0x29, 0x13, 0xc0, 0xed, 0x46, 0xaa, 0x80, 0xbe, 0x22, 0x5b, 0x31, 0x07,
	0x2d, 0xd0, 0x6b, 0x97, 0xf2, 0x71, 0x70, 0x7d, 0xdb, 0x6f, 0xfd, 0xb8, 0xed, 0x3f, 0xcd, 0x72,
	0xbc, 0xd0, 0xd3, 0xb2, 0x60, 0x98, 0x80, 0xe2, 0xa0, 0xec, 0xe7, 0x48, 0xa5, 0xb3, 0x10, 0xaf,
	0x0a, 0xa6, 0x82, 0xb1, 0xc0, 0xc8, 0x66, 0x0f, 0x3f, 0x92, 0xfd, 0xb5, 0xf9, 0xfe, 0x73, 0xc9,
	0x6f, 0x6d, 0xd2, 0xbb, 0xb7, 0x84, 0x3f, 0xd4, 0x3b, 0x23, 0x3b, 0x08, 0x18, 0xcf, 0x27, 0xff,
	0x54, 0xb5, 0x6b, 0x18, 0x2f, 0x0d, 0x82, 0xbe, 0x27, 0xae, 0x16, 0xe5, 0xc6, 0x59, 0x5a, 0x53,
	0x3b, 0x7f, 0x45, 0xdd, 0xad, 0x31, 0x16, 0xfc, 0x8c, 0xec, 0xb1, 0x02, 0x92, 0x8b, 0x49, 0x9e,
	0x32, 0x81, 0xf9, 0x79, 0xce, 0xa4, 0xb7, 0x61, 0x86, 0x71, 0x8d, 0x3e, 0xfe, 0x2d, 0xd3, 0x47,
	0x84, 0x08, 0xcd, 0x27, 0x46, 0x56, 0xde, 0xe6, 0xc0, 0x19, 0x75, 0xa2, 0x6d, 0xa1, 0xf9, 0xa9,
	0x11, 0xe8, 0x13, 0xd2, 0x4b, 0xb4, 0x94, 0x4c, 0x60, 0x65, 0xf1, 0xb6, 0x8c, 0x63, 0xc7, 0x8a,
	0xc6, 0x75, 0x3c, 0xbe, 0x5e, 0xf8, 0xce, 0xcd, 0xc2, 0x77, 0x7e, 0x2e, 0x7c, 0xe7, 0xeb, 0xd2,
	0x6f, 0xdd, 0x2c, 0xfd, 0xd6, 0xf7, 0xa5, 0xdf, 0xfa, 0x10, 0xae, 0x0c, 0x50, 0xfe, 0x79, 0x47,
	0x82, 0xe1, 0x27, 0x90, 0x33, 0x13, 0x84, 0x9f, 0x57, 0x5f, 0xa2, 0x99, 0x66, 0xba, 0x65, 0x5e,
	0xe2, 0x8b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x23, 0x9d, 0x32, 0xff, 0x34, 0x04, 0x00, 0x00,
}

func (m *Commitments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingTokens) > 0 {
		for iNdEx := len(m.VestingTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.UncommittedTokens) > 0 {
		for iNdEx := len(m.UncommittedTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UncommittedTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CommittedTokens) > 0 {
		for iNdEx := len(m.CommittedTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommittedTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommitments(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommittedTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommittedTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommittedTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UncommittedTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UncommittedTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UncommittedTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VestingTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentEpoch != 0 {
		i = encodeVarintCommitments(dAtA, i, uint64(m.CurrentEpoch))
		i--
		dAtA[i] = 0x30
	}
	if m.NumEpochs != 0 {
		i = encodeVarintCommitments(dAtA, i, uint64(m.NumEpochs))
		i--
		dAtA[i] = 0x28
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.UnvestedAmount.Size()
		i -= size
		if _, err := m.UnvestedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCommitments(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCommitments(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommitments(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommitments(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Commitments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	if len(m.CommittedTokens) > 0 {
		for _, e := range m.CommittedTokens {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	if len(m.UncommittedTokens) > 0 {
		for _, e := range m.UncommittedTokens {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	if len(m.VestingTokens) > 0 {
		for _, e := range m.VestingTokens {
			l = e.Size()
			n += 1 + l + sovCommitments(uint64(l))
		}
	}
	return n
}

func (m *CommittedTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCommitments(uint64(l))
	return n
}

func (m *UncommittedTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCommitments(uint64(l))
	return n
}

func (m *VestingTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	l = m.TotalAmount.Size()
	n += 1 + l + sovCommitments(uint64(l))
	l = m.UnvestedAmount.Size()
	n += 1 + l + sovCommitments(uint64(l))
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovCommitments(uint64(l))
	}
	if m.NumEpochs != 0 {
		n += 1 + sovCommitments(uint64(m.NumEpochs))
	}
	if m.CurrentEpoch != 0 {
		n += 1 + sovCommitments(uint64(m.CurrentEpoch))
	}
	return n
}

func sovCommitments(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommitments(x uint64) (n int) {
	return sovCommitments(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Commitments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommittedTokens = append(m.CommittedTokens, &CommittedTokens{})
			if err := m.CommittedTokens[len(m.CommittedTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UncommittedTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UncommittedTokens = append(m.UncommittedTokens, &UncommittedTokens{})
			if err := m.UncommittedTokens[len(m.UncommittedTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingTokens = append(m.VestingTokens, &VestingTokens{})
			if err := m.VestingTokens[len(m.VestingTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommittedTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommittedTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommittedTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UncommittedTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UncommittedTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UncommittedTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnvestedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnvestedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommitments
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommitments
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochs", wireType)
			}
			m.NumEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			m.CurrentEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommitments(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommitments
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommitments(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommitments
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommitments
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommitments
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommitments
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommitments
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommitments        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommitments          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommitments = fmt.Errorf("proto: unexpected end of group")
)
