// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/commitment/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryShowCommitmentsRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *QueryShowCommitmentsRequest) Reset()         { *m = QueryShowCommitmentsRequest{} }
func (m *QueryShowCommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowCommitmentsRequest) ProtoMessage()    {}
func (*QueryShowCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{2}
}
func (m *QueryShowCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowCommitmentsRequest.Merge(m, src)
}
func (m *QueryShowCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowCommitmentsRequest proto.InternalMessageInfo

func (m *QueryShowCommitmentsRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type QueryShowCommitmentsResponse struct {
	Commitments Commitments `protobuf:"bytes,1,opt,name=commitments,proto3" json:"commitments"`
}

func (m *QueryShowCommitmentsResponse) Reset()         { *m = QueryShowCommitmentsResponse{} }
func (m *QueryShowCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowCommitmentsResponse) ProtoMessage()    {}
func (*QueryShowCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{3}
}
func (m *QueryShowCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowCommitmentsResponse.Merge(m, src)
}
func (m *QueryShowCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowCommitmentsResponse proto.InternalMessageInfo

func (m *QueryShowCommitmentsResponse) GetCommitments() Commitments {
	if m != nil {
		return m.Commitments
	}
	return Commitments{}
}

type QueryNumberOfCommitmentsRequest struct {
}

func (m *QueryNumberOfCommitmentsRequest) Reset()         { *m = QueryNumberOfCommitmentsRequest{} }
func (m *QueryNumberOfCommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNumberOfCommitmentsRequest) ProtoMessage()    {}
func (*QueryNumberOfCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{4}
}
func (m *QueryNumberOfCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumberOfCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumberOfCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumberOfCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumberOfCommitmentsRequest.Merge(m, src)
}
func (m *QueryNumberOfCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumberOfCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumberOfCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumberOfCommitmentsRequest proto.InternalMessageInfo

type QueryNumberOfCommitmentsResponse struct {
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryNumberOfCommitmentsResponse) Reset()         { *m = QueryNumberOfCommitmentsResponse{} }
func (m *QueryNumberOfCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNumberOfCommitmentsResponse) ProtoMessage()    {}
func (*QueryNumberOfCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{5}
}
func (m *QueryNumberOfCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNumberOfCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNumberOfCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNumberOfCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNumberOfCommitmentsResponse.Merge(m, src)
}
func (m *QueryNumberOfCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNumberOfCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNumberOfCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNumberOfCommitmentsResponse proto.InternalMessageInfo

func (m *QueryNumberOfCommitmentsResponse) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryCommittedTokensLockedRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCommittedTokensLockedRequest) Reset()         { *m = QueryCommittedTokensLockedRequest{} }
func (m *QueryCommittedTokensLockedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommittedTokensLockedRequest) ProtoMessage()    {}
func (*QueryCommittedTokensLockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{6}
}
func (m *QueryCommittedTokensLockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommittedTokensLockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommittedTokensLockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommittedTokensLockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommittedTokensLockedRequest.Merge(m, src)
}
func (m *QueryCommittedTokensLockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommittedTokensLockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommittedTokensLockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommittedTokensLockedRequest proto.InternalMessageInfo

func (m *QueryCommittedTokensLockedRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryCommittedTokensLockedResponse struct {
	Address         string                                   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	LockedCommitted github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=locked_committed,json=lockedCommitted,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"locked_committed"`
	TotalCommitted  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=total_committed,json=totalCommitted,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_committed"`
}

func (m *QueryCommittedTokensLockedResponse) Reset()         { *m = QueryCommittedTokensLockedResponse{} }
func (m *QueryCommittedTokensLockedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommittedTokensLockedResponse) ProtoMessage()    {}
func (*QueryCommittedTokensLockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{7}
}
func (m *QueryCommittedTokensLockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommittedTokensLockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommittedTokensLockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommittedTokensLockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommittedTokensLockedResponse.Merge(m, src)
}
func (m *QueryCommittedTokensLockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommittedTokensLockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommittedTokensLockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommittedTokensLockedResponse proto.InternalMessageInfo

func (m *QueryCommittedTokensLockedResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryCommittedTokensLockedResponse) GetLockedCommitted() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.LockedCommitted
	}
	return nil
}

func (m *QueryCommittedTokensLockedResponse) GetTotalCommitted() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalCommitted
	}
	return nil
}

type QueryCommitmentVestingInfoRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryCommitmentVestingInfoRequest) Reset()         { *m = QueryCommitmentVestingInfoRequest{} }
func (m *QueryCommitmentVestingInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentVestingInfoRequest) ProtoMessage()    {}
func (*QueryCommitmentVestingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{8}
}
func (m *QueryCommitmentVestingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentVestingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentVestingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentVestingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentVestingInfoRequest.Merge(m, src)
}
func (m *QueryCommitmentVestingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentVestingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentVestingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentVestingInfoRequest proto.InternalMessageInfo

func (m *QueryCommitmentVestingInfoRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryCommitmentVestingInfoResponse struct {
	Total          cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total"`
	VestingDetails []VestingDetails      `protobuf:"bytes,2,rep,name=vesting_details,json=vestingDetails,proto3" json:"vesting_details"`
}

func (m *QueryCommitmentVestingInfoResponse) Reset()         { *m = QueryCommitmentVestingInfoResponse{} }
func (m *QueryCommitmentVestingInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentVestingInfoResponse) ProtoMessage()    {}
func (*QueryCommitmentVestingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{9}
}
func (m *QueryCommitmentVestingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentVestingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentVestingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentVestingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentVestingInfoResponse.Merge(m, src)
}
func (m *QueryCommitmentVestingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentVestingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentVestingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentVestingInfoResponse proto.InternalMessageInfo

func (m *QueryCommitmentVestingInfoResponse) GetVestingDetails() []VestingDetails {
	if m != nil {
		return m.VestingDetails
	}
	return nil
}

type VestingDetails struct {
	Id              string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalVesting    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_vesting,json=totalVesting,proto3,customtype=cosmossdk.io/math.Int" json:"total_vesting"`
	Claimed         cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=claimed,proto3,customtype=cosmossdk.io/math.Int" json:"claimed"`
	VestedSoFar     cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=vested_so_far,json=vestedSoFar,proto3,customtype=cosmossdk.io/math.Int" json:"vested_so_far"`
	RemainingBlocks int64                 `protobuf:"varint,5,opt,name=remaining_blocks,json=remainingBlocks,proto3" json:"remaining_blocks,omitempty"`
}

func (m *VestingDetails) Reset()         { *m = VestingDetails{} }
func (m *VestingDetails) String() string { return proto.CompactTextString(m) }
func (*VestingDetails) ProtoMessage()    {}
func (*VestingDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{10}
}
func (m *VestingDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingDetails.Merge(m, src)
}
func (m *VestingDetails) XXX_Size() int {
	return m.Size()
}
func (m *VestingDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingDetails.DiscardUnknown(m)
}

var xxx_messageInfo_VestingDetails proto.InternalMessageInfo

func (m *VestingDetails) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VestingDetails) GetRemainingBlocks() int64 {
	if m != nil {
		return m.RemainingBlocks
	}
	return 0
}

type QueryAirDropRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAirDropRequest) Reset()         { *m = QueryAirDropRequest{} }
func (m *QueryAirDropRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAirDropRequest) ProtoMessage()    {}
func (*QueryAirDropRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{11}
}
func (m *QueryAirDropRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirDropRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirDropRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirDropRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirDropRequest.Merge(m, src)
}
func (m *QueryAirDropRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirDropRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirDropRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirDropRequest proto.InternalMessageInfo

func (m *QueryAirDropRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryAirDropResponse struct {
	AtomStaking cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=atom_staking,json=atomStaking,proto3,customtype=cosmossdk.io/math.Int" json:"atom_staking"`
	Cadet       cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=cadet,proto3,customtype=cosmossdk.io/math.Int" json:"cadet"`
	NftHolder   cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=nft_holder,json=nftHolder,proto3,customtype=cosmossdk.io/math.Int" json:"nft_holder"`
	Governor    cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=governor,proto3,customtype=cosmossdk.io/math.Int" json:"governor"`
	Claimed     bool                  `protobuf:"varint,5,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (m *QueryAirDropResponse) Reset()         { *m = QueryAirDropResponse{} }
func (m *QueryAirDropResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAirDropResponse) ProtoMessage()    {}
func (*QueryAirDropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{12}
}
func (m *QueryAirDropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAirDropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAirDropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAirDropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAirDropResponse.Merge(m, src)
}
func (m *QueryAirDropResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAirDropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAirDropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAirDropResponse proto.InternalMessageInfo

func (m *QueryAirDropResponse) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

type QueryTotalAirDropClaimedRequest struct {
}

func (m *QueryTotalAirDropClaimedRequest) Reset()         { *m = QueryTotalAirDropClaimedRequest{} }
func (m *QueryTotalAirDropClaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAirDropClaimedRequest) ProtoMessage()    {}
func (*QueryTotalAirDropClaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{13}
}
func (m *QueryTotalAirDropClaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAirDropClaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAirDropClaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAirDropClaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAirDropClaimedRequest.Merge(m, src)
}
func (m *QueryTotalAirDropClaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAirDropClaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAirDropClaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAirDropClaimedRequest proto.InternalMessageInfo

type QueryTotalAirDropClaimedResponse struct {
	TotalElysClaimed cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_elys_claimed,json=totalElysClaimed,proto3,customtype=cosmossdk.io/math.Int" json:"total_elys_claimed"`
	TotalEdenClaimed cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_eden_claimed,json=totalEdenClaimed,proto3,customtype=cosmossdk.io/math.Int" json:"total_eden_claimed"`
}

func (m *QueryTotalAirDropClaimedResponse) Reset()         { *m = QueryTotalAirDropClaimedResponse{} }
func (m *QueryTotalAirDropClaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalAirDropClaimedResponse) ProtoMessage()    {}
func (*QueryTotalAirDropClaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{14}
}
func (m *QueryTotalAirDropClaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalAirDropClaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalAirDropClaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalAirDropClaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalAirDropClaimedResponse.Merge(m, src)
}
func (m *QueryTotalAirDropClaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalAirDropClaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalAirDropClaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalAirDropClaimedResponse proto.InternalMessageInfo

type QueryKolRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryKolRequest) Reset()         { *m = QueryKolRequest{} }
func (m *QueryKolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKolRequest) ProtoMessage()    {}
func (*QueryKolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{15}
}
func (m *QueryKolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKolRequest.Merge(m, src)
}
func (m *QueryKolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKolRequest proto.InternalMessageInfo

func (m *QueryKolRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryKolResponse struct {
	ElysAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=elys_amount,json=elysAmount,proto3,customtype=cosmossdk.io/math.Int" json:"elys_amount"`
	Claimed    bool                  `protobuf:"varint,2,opt,name=claimed,proto3" json:"claimed,omitempty"`
	Refunded   bool                  `protobuf:"varint,3,opt,name=refunded,proto3" json:"refunded,omitempty"`
}

func (m *QueryKolResponse) Reset()         { *m = QueryKolResponse{} }
func (m *QueryKolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKolResponse) ProtoMessage()    {}
func (*QueryKolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{16}
}
func (m *QueryKolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKolResponse.Merge(m, src)
}
func (m *QueryKolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKolResponse proto.InternalMessageInfo

func (m *QueryKolResponse) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func (m *QueryKolResponse) GetRefunded() bool {
	if m != nil {
		return m.Refunded
	}
	return false
}

type QueryTotalSupplyRequest struct {
}

func (m *QueryTotalSupplyRequest) Reset()         { *m = QueryTotalSupplyRequest{} }
func (m *QueryTotalSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyRequest) ProtoMessage()    {}
func (*QueryTotalSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{17}
}
func (m *QueryTotalSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyRequest.Merge(m, src)
}
func (m *QueryTotalSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyRequest proto.InternalMessageInfo

type QueryTotalSupplyResponse struct {
	TotalEden       cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_eden,json=totalEden,proto3,customtype=cosmossdk.io/math.Int" json:"total_eden"`
	TotalEdenb      cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_edenb,json=totalEdenb,proto3,customtype=cosmossdk.io/math.Int" json:"total_edenb"`
	TotalEdenVested cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_eden_vested,json=totalEdenVested,proto3,customtype=cosmossdk.io/math.Int" json:"total_eden_vested"`
}

func (m *QueryTotalSupplyResponse) Reset()         { *m = QueryTotalSupplyResponse{} }
func (m *QueryTotalSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalSupplyResponse) ProtoMessage()    {}
func (*QueryTotalSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{18}
}
func (m *QueryTotalSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalSupplyResponse.Merge(m, src)
}
func (m *QueryTotalSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalSupplyResponse proto.InternalMessageInfo

type QueryRewardProgramRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRewardProgramRequest) Reset()         { *m = QueryRewardProgramRequest{} }
func (m *QueryRewardProgramRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramRequest) ProtoMessage()    {}
func (*QueryRewardProgramRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{19}
}
func (m *QueryRewardProgramRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramRequest.Merge(m, src)
}
func (m *QueryRewardProgramRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramRequest proto.InternalMessageInfo

func (m *QueryRewardProgramRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryRewardProgramResponse struct {
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Claimed bool                  `protobuf:"varint,2,opt,name=claimed,proto3" json:"claimed,omitempty"`
}

func (m *QueryRewardProgramResponse) Reset()         { *m = QueryRewardProgramResponse{} }
func (m *QueryRewardProgramResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardProgramResponse) ProtoMessage()    {}
func (*QueryRewardProgramResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3594c973c98f55d7, []int{20}
}
func (m *QueryRewardProgramResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardProgramResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardProgramResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardProgramResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardProgramResponse.Merge(m, src)
}
func (m *QueryRewardProgramResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardProgramResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardProgramResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardProgramResponse proto.InternalMessageInfo

func (m *QueryRewardProgramResponse) GetClaimed() bool {
	if m != nil {
		return m.Claimed
	}
	return false
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.commitment.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.commitment.QueryParamsResponse")
	proto.RegisterType((*QueryShowCommitmentsRequest)(nil), "elys.commitment.QueryShowCommitmentsRequest")
	proto.RegisterType((*QueryShowCommitmentsResponse)(nil), "elys.commitment.QueryShowCommitmentsResponse")
	proto.RegisterType((*QueryNumberOfCommitmentsRequest)(nil), "elys.commitment.QueryNumberOfCommitmentsRequest")
	proto.RegisterType((*QueryNumberOfCommitmentsResponse)(nil), "elys.commitment.QueryNumberOfCommitmentsResponse")
	proto.RegisterType((*QueryCommittedTokensLockedRequest)(nil), "elys.commitment.QueryCommittedTokensLockedRequest")
	proto.RegisterType((*QueryCommittedTokensLockedResponse)(nil), "elys.commitment.QueryCommittedTokensLockedResponse")
	proto.RegisterType((*QueryCommitmentVestingInfoRequest)(nil), "elys.commitment.QueryCommitmentVestingInfoRequest")
	proto.RegisterType((*QueryCommitmentVestingInfoResponse)(nil), "elys.commitment.QueryCommitmentVestingInfoResponse")
	proto.RegisterType((*VestingDetails)(nil), "elys.commitment.VestingDetails")
	proto.RegisterType((*QueryAirDropRequest)(nil), "elys.commitment.QueryAirDropRequest")
	proto.RegisterType((*QueryAirDropResponse)(nil), "elys.commitment.QueryAirDropResponse")
	proto.RegisterType((*QueryTotalAirDropClaimedRequest)(nil), "elys.commitment.QueryTotalAirDropClaimedRequest")
	proto.RegisterType((*QueryTotalAirDropClaimedResponse)(nil), "elys.commitment.QueryTotalAirDropClaimedResponse")
	proto.RegisterType((*QueryKolRequest)(nil), "elys.commitment.QueryKolRequest")
	proto.RegisterType((*QueryKolResponse)(nil), "elys.commitment.QueryKolResponse")
	proto.RegisterType((*QueryTotalSupplyRequest)(nil), "elys.commitment.QueryTotalSupplyRequest")
	proto.RegisterType((*QueryTotalSupplyResponse)(nil), "elys.commitment.QueryTotalSupplyResponse")
	proto.RegisterType((*QueryRewardProgramRequest)(nil), "elys.commitment.QueryRewardProgramRequest")
	proto.RegisterType((*QueryRewardProgramResponse)(nil), "elys.commitment.QueryRewardProgramResponse")
}

func init() { proto.RegisterFile("elys/commitment/query.proto", fileDescriptor_3594c973c98f55d7) }

var fileDescriptor_3594c973c98f55d7 = []byte{
	// 1387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0x3a, 0x10, 0x92, 0x67, 0x12, 0x87, 0x21, 0x7c, 0x71, 0x0c, 0x72, 0x92, 0xfd, 0xd2,
	0x2a, 0x04, 0xe2, 0x25, 0x8e, 0x68, 0x11, 0x95, 0xda, 0x26, 0x81, 0xd2, 0x40, 0xc4, 0x0f, 0x07,
	0x81, 0xda, 0xcb, 0x6a, 0xec, 0x1d, 0x3b, 0x2b, 0x7b, 0x67, 0xcc, 0xee, 0x38, 0x69, 0x84, 0x50,
	0xd5, 0xde, 0xab, 0x56, 0xaa, 0xc4, 0xbd, 0x37, 0xd4, 0x13, 0x07, 0xaa, 0x5e, 0x7a, 0xae, 0xe8,
	0x0d, 0xd1, 0x0b, 0xea, 0x81, 0x56, 0xa4, 0x52, 0xff, 0x8d, 0x6a, 0x67, 0x66, 0xed, 0xb5, 0xbd,
	0x5e, 0x62, 0xa7, 0x17, 0xf0, 0xee, 0xbc, 0xf7, 0x79, 0x9f, 0xf7, 0x3e, 0x6f, 0x66, 0xde, 0x06,
	0x4e, 0x91, 0xda, 0xae, 0x67, 0x94, 0x98, 0xe3, 0xd8, 0xdc, 0x21, 0x94, 0x1b, 0x0f, 0x1a, 0xc4,
	0xdd, 0xcd, 0xd5, 0x5d, 0xc6, 0x19, 0x4a, 0xf9, 0x8b, 0xb9, 0xd6, 0x62, 0x66, 0xaa, 0xc2, 0x2a,
	0x4c, 0xac, 0x19, 0xfe, 0x2f, 0x69, 0x96, 0x39, 0x5d, 0x61, 0xac, 0x52, 0x23, 0x06, 0xae, 0xdb,
	0x06, 0xa6, 0x94, 0x71, 0xcc, 0x6d, 0x46, 0x3d, 0xb5, 0x3a, 0x5d, 0x62, 0x9e, 0xc3, 0x3c, 0x53,
	0xba, 0xc9, 0x07, 0xb5, 0xb4, 0x20, 0x9f, 0x8c, 0x22, 0xf6, 0x88, 0x0c, 0x6c, 0x6c, 0x2f, 0x15,
	0x09, 0xc7, 0x4b, 0x46, 0x1d, 0x57, 0x6c, 0x2a, 0x70, 0x82, 0x20, 0x9d, 0x44, 0xeb, 0xd8, 0xc5,
	0x4e, 0x80, 0x34, 0xd7, 0xb9, 0xda, 0xfa, 0x19, 0x98, 0x1c, 0xc3, 0x8e, 0x4d, 0x99, 0x21, 0xfe,
	0x55, 0xaf, 0xb2, 0xe1, 0xf8, 0x41, 0xe4, 0x12, 0xb3, 0x55, 0x4c, 0x7d, 0x0a, 0xd0, 0x1d, 0x9f,
	0xd5, 0x6d, 0x11, 0xaa, 0x40, 0x1e, 0x34, 0x88, 0xc7, 0xf5, 0x0d, 0x38, 0xde, 0xf6, 0xd6, 0xab,
	0x33, 0xea, 0x11, 0x74, 0x11, 0x46, 0x24, 0xa5, 0xb4, 0x36, 0xab, 0xcd, 0x27, 0xf3, 0x27, 0x73,
	0x1d, 0xd5, 0xcb, 0x49, 0x87, 0xd5, 0x43, 0xcf, 0x5f, 0xcf, 0x0c, 0x15, 0x94, 0xb1, 0x7e, 0x07,
	0x4e, 0x09, 0xb4, 0xcd, 0x2d, 0xb6, 0xb3, 0xd6, 0x22, 0xad, 0x82, 0xa1, 0x3c, 0x1c, 0x29, 0xb9,
	0x04, 0x73, 0xe6, 0x0a, 0xd8, 0xb1, 0xd5, 0xf4, 0xcb, 0x67, 0x8b, 0x53, 0xaa, 0x8a, 0x2b, 0x96,
	0xe5, 0x12, 0xcf, 0xdb, 0xe4, 0xae, 0x4d, 0x2b, 0x85, 0xc0, 0x50, 0xb7, 0xe1, 0x74, 0x34, 0xa4,
	0x62, 0xba, 0x0e, 0xc9, 0x50, 0x79, 0x14, 0xdd, 0xd3, 0x5d, 0x74, 0x43, 0xae, 0xab, 0x63, 0x3e,
	0xe7, 0x27, 0xff, 0x3c, 0x5d, 0xd0, 0x0a, 0x61, 0x5f, 0x7d, 0x0e, 0x66, 0x44, 0xa8, 0x9b, 0x0d,
	0xa7, 0x48, 0xdc, 0x5b, 0xe5, 0xee, 0x0c, 0xf4, 0xcb, 0x30, 0xdb, 0xdb, 0x44, 0x31, 0xfa, 0x1f,
	0x8c, 0x50, 0xb1, 0x2c, 0xc8, 0x0c, 0x17, 0xd4, 0x93, 0x7e, 0x1f, 0xe6, 0x84, 0xaf, 0xf4, 0xe1,
	0xc4, 0xba, 0xcb, 0xaa, 0x84, 0x7a, 0x1b, 0xac, 0x54, 0x25, 0x56, 0xa8, 0x44, 0x58, 0x16, 0xe2,
	0xed, 0x25, 0x52, 0x86, 0xfa, 0xaf, 0x09, 0xd0, 0xe3, 0x90, 0x15, 0xaf, 0x01, 0xa0, 0xd1, 0x36,
	0x4c, 0xd6, 0x04, 0x8a, 0x59, 0x0a, 0xb0, 0xd3, 0x89, 0xd9, 0xe1, 0xf9, 0x64, 0x7e, 0x3a, 0xa7,
	0x3c, 0xfd, 0x7e, 0xcb, 0xa9, 0x7e, 0xcb, 0xad, 0x31, 0x9b, 0xae, 0x5e, 0xf0, 0xeb, 0xfb, 0xe3,
	0x9f, 0x33, 0xf3, 0x15, 0x9b, 0x6f, 0x35, 0x8a, 0xbe, 0x0c, 0x6a, 0xab, 0xa8, 0xff, 0x16, 0x3d,
	0xab, 0x6a, 0xf0, 0xdd, 0x3a, 0xf1, 0x84, 0x83, 0x57, 0x48, 0xc9, 0x20, 0x4d, 0xfe, 0x88, 0x43,
	0x8a, 0x33, 0x8e, 0x6b, 0xa1, 0xb0, 0xc3, 0xff, 0x7d, 0xd8, 0x09, 0x11, 0xa3, 0x19, 0xb5, 0x43,
	0x21, 0x5f, 0xd5, 0x7b, 0xc4, 0xe3, 0x36, 0xad, 0xac, 0xd3, 0x32, 0x3b, 0x88, 0x42, 0xbf, 0x68,
	0x6d, 0x0a, 0x75, 0x21, 0x2b, 0x85, 0x56, 0xe0, 0xb0, 0x60, 0xa4, 0x80, 0xcf, 0xf9, 0x09, 0xfd,
	0xf1, 0x7a, 0xe6, 0x84, 0x04, 0xf7, 0xac, 0x6a, 0xce, 0x66, 0x86, 0x83, 0xf9, 0x56, 0x6e, 0x9d,
	0xf2, 0x97, 0xcf, 0x16, 0x41, 0x45, 0x5d, 0xa7, 0xbc, 0x20, 0x3d, 0xd1, 0x26, 0xa4, 0xb6, 0x25,
	0xb2, 0x69, 0x11, 0x8e, 0xed, 0x9a, 0xa7, 0xf4, 0x9a, 0xe9, 0xda, 0x12, 0x8a, 0xc1, 0x15, 0x69,
	0x16, 0xde, 0x15, 0x13, 0xdb, 0x6d, 0x4b, 0xfa, 0x4f, 0x09, 0x98, 0x68, 0xb7, 0x46, 0x13, 0x90,
	0xb0, 0x2d, 0xc9, 0xb3, 0x90, 0xb0, 0x2d, 0x74, 0x1b, 0xc6, 0xa5, 0x60, 0xca, 0x35, 0x9d, 0xe8,
	0x3f, 0x85, 0xa3, 0x02, 0x41, 0x05, 0x42, 0x57, 0xe1, 0x48, 0xa9, 0x86, 0x6d, 0x47, 0x48, 0xdf,
	0x37, 0x56, 0xe0, 0x8b, 0x6e, 0xc1, 0xb8, 0x4f, 0x89, 0x58, 0xa6, 0xc7, 0xcc, 0x32, 0x76, 0xd3,
	0x87, 0xfa, 0x07, 0x4b, 0x4a, 0x84, 0x4d, 0xf6, 0x09, 0x76, 0xd1, 0x59, 0x98, 0x74, 0x89, 0x83,
	0x6d, 0xea, 0xd7, 0xb8, 0xe8, 0x37, 0xae, 0x97, 0x3e, 0x2c, 0x36, 0x7a, 0xaa, 0xf9, 0x7e, 0x55,
	0xbc, 0xd6, 0xd7, 0xd5, 0xe1, 0xba, 0x62, 0xbb, 0x57, 0x5c, 0x56, 0x3f, 0x48, 0x07, 0xbd, 0x4a,
	0xc0, 0x54, 0x3b, 0x96, 0xea, 0x99, 0x9b, 0x70, 0x14, 0x73, 0xe6, 0x98, 0x1e, 0xc7, 0x55, 0xbf,
	0xee, 0x03, 0xb4, 0x4e, 0xd2, 0x07, 0xd8, 0x94, 0xfe, 0x7e, 0x0f, 0x96, 0xb0, 0x45, 0xf8, 0x20,
	0x02, 0x4a, 0x4f, 0x74, 0x1d, 0x80, 0x96, 0xb9, 0xb9, 0xc5, 0x6a, 0x16, 0x71, 0x07, 0x11, 0x6f,
	0x8c, 0x96, 0xf9, 0xa7, 0xc2, 0x1b, 0x5d, 0x83, 0xd1, 0x0a, 0xdb, 0x26, 0x2e, 0x65, 0x03, 0x29,
	0xd7, 0x74, 0x46, 0xe9, 0x56, 0x3b, 0xf9, 0x6a, 0x8d, 0x36, 0x3b, 0xa4, 0x79, 0xec, 0xdf, 0xf5,
	0xbb, 0x4f, 0x95, 0x77, 0x4d, 0xae, 0x05, 0xc7, 0xfe, 0x2b, 0x4d, 0x9d, 0xfb, 0x91, 0x36, 0x4a,
	0x89, 0xcf, 0x00, 0xc9, 0x2d, 0xe0, 0x6f, 0x34, 0x33, 0x08, 0x36, 0x80, 0x1e, 0x93, 0x02, 0xe6,
	0x6a, 0x6d, 0xd7, 0x53, 0x21, 0x42, 0xd0, 0x16, 0xa1, 0x4d, 0xe8, 0xc4, 0xc0, 0xd0, 0x16, 0xa1,
	0x0a, 0x5a, 0xbf, 0x0a, 0x29, 0x91, 0xd9, 0x0d, 0x56, 0x3b, 0x48, 0x7f, 0x3e, 0xd6, 0x60, 0xb2,
	0x85, 0xa3, 0x2a, 0xb2, 0x01, 0x49, 0x51, 0x0b, 0xec, 0xb0, 0x06, 0xe5, 0x83, 0x94, 0x02, 0x7c,
	0xff, 0x15, 0xe1, 0x1e, 0x56, 0x30, 0xd1, 0xa6, 0x20, 0xca, 0xc0, 0xa8, 0x4b, 0xca, 0x0d, 0x6a,
	0xa9, 0xb3, 0x62, 0xb4, 0xd0, 0x7c, 0xd6, 0xa7, 0xe1, 0x64, 0x4b, 0xb9, 0xcd, 0x46, 0xbd, 0x5e,
	0xdb, 0x0d, 0x54, 0xfd, 0x26, 0x01, 0xe9, 0xee, 0x35, 0xc5, 0xfd, 0x3a, 0x40, 0xab, 0xe4, 0x83,
	0x50, 0x1f, 0x6b, 0x96, 0xda, 0xaf, 0x43, 0x0b, 0xab, 0x38, 0x88, 0x6e, 0xd0, 0x04, 0x2b, 0xa2,
	0xfb, 0x70, 0x2c, 0xd4, 0x0c, 0xf2, 0x68, 0x1a, 0x64, 0x97, 0xa5, 0x9a, 0x98, 0xf7, 0x04, 0x86,
	0x7e, 0x0b, 0xa6, 0x45, 0x39, 0x0a, 0x64, 0x07, 0xbb, 0xd6, 0x6d, 0x97, 0x55, 0x5c, 0xec, 0x1c,
	0xa4, 0x29, 0x1e, 0x42, 0x26, 0x0a, 0x50, 0x55, 0x78, 0x0d, 0x46, 0x06, 0x6f, 0x0c, 0xe5, 0xda,
	0xbb, 0x29, 0xf2, 0x3f, 0x8c, 0xc3, 0x61, 0x11, 0x1d, 0x7d, 0xa5, 0xc1, 0x88, 0x1c, 0x57, 0xd1,
	0xff, 0xbb, 0x6e, 0xc1, 0xee, 0x99, 0x38, 0x73, 0x26, 0xde, 0x48, 0xd2, 0xd7, 0xcf, 0x7f, 0xfd,
	0xfb, 0xdf, 0xdf, 0x27, 0xde, 0x45, 0x67, 0x0c, 0xdf, 0x7a, 0x91, 0x12, 0xbe, 0xc3, 0xdc, 0xaa,
	0x11, 0x3d, 0xd9, 0xa3, 0xa7, 0x1a, 0xa4, 0x3a, 0x46, 0x58, 0x74, 0x3e, 0x3a, 0x4e, 0xf4, 0xf0,
	0x9c, 0x59, 0xdc, 0xa7, 0xb5, 0xa2, 0xf7, 0xb1, 0xa0, 0x77, 0x19, 0x5d, 0x8a, 0xa7, 0xe7, 0x6d,
	0xb1, 0x1d, 0x33, 0x34, 0x04, 0x1b, 0x0f, 0xd5, 0xe0, 0xfd, 0x08, 0xfd, 0xa6, 0xc1, 0x89, 0xc8,
	0x89, 0x12, 0xe5, 0xa3, 0xa9, 0xc4, 0x0d, 0xb6, 0x99, 0xe5, 0xbe, 0x7c, 0x54, 0x12, 0xd7, 0x44,
	0x12, 0x2b, 0xe8, 0xa3, 0xf8, 0x24, 0x9a, 0x43, 0xa2, 0xc9, 0x05, 0x8a, 0x29, 0xc7, 0x49, 0xe3,
	0xa1, 0x6a, 0xc4, 0x47, 0xe8, 0x67, 0x0d, 0x8e, 0x47, 0xcc, 0xec, 0xe8, 0x42, 0x34, 0xab, 0xde,
	0x5f, 0x00, 0x99, 0xa5, 0x3e, 0x3c, 0x54, 0x16, 0x1f, 0x88, 0x2c, 0x2e, 0xa2, 0xe5, 0xf8, 0x2c,
	0xe4, 0x67, 0x82, 0xc9, 0xca, 0x61, 0x3d, 0x42, 0x2a, 0x74, 0x4c, 0x8d, 0xf1, 0x2a, 0x44, 0x0f,
	0xaf, 0xf1, 0x2a, 0xf4, 0x18, 0x4b, 0xfb, 0x53, 0xc1, 0xff, 0x19, 0x0c, 0x81, 0xa6, 0x4d, 0xcb,
	0x2c, 0xa4, 0xc2, 0xb7, 0x1a, 0x1c, 0x51, 0x97, 0x27, 0xea, 0xb1, 0xc9, 0xda, 0x47, 0xa5, 0xcc,
	0x3b, 0x6f, 0xb1, 0x52, 0x0c, 0xdf, 0x17, 0x0c, 0x97, 0x90, 0x11, 0xcf, 0x10, 0xdb, 0xae, 0xe5,
	0xb2, 0x7a, 0x47, 0x5f, 0x04, 0x77, 0xba, 0xd5, 0xba, 0xd3, 0x7b, 0xf5, 0x45, 0xef, 0x11, 0xa1,
	0x57, 0x5f, 0xc4, 0x0c, 0x0c, 0xfb, 0xed, 0x0b, 0x79, 0xd8, 0x2b, 0xee, 0xc1, 0xe5, 0x8f, 0xbe,
	0x84, 0xe1, 0x1b, 0xac, 0x86, 0x66, 0xa3, 0xc3, 0xb6, 0x6e, 0xf3, 0xcc, 0x5c, 0x8c, 0x85, 0x22,
	0xb2, 0x2c, 0x88, 0x2c, 0xa2, 0x73, 0xf1, 0x44, 0xaa, 0xac, 0x16, 0x2a, 0xdd, 0x63, 0x0d, 0x92,
	0xa1, 0x8b, 0x13, 0xcd, 0xc7, 0x14, 0xa0, 0xed, 0xde, 0xcd, 0x9c, 0xdd, 0x87, 0xa5, 0x62, 0x96,
	0x17, 0xcc, 0xce, 0xa3, 0x85, 0xfd, 0x94, 0xc8, 0x93, 0x44, 0x9e, 0x68, 0x30, 0xde, 0x76, 0xe3,
	0xa0, 0x85, 0xe8, 0x80, 0x51, 0xf7, 0x5c, 0xe6, 0xdc, 0xbe, 0x6c, 0x15, 0xbd, 0x0f, 0x05, 0xbd,
	0x4b, 0xe8, 0xbd, 0x78, 0x7a, 0xae, 0x70, 0x36, 0xeb, 0xd2, 0xbb, 0x55, 0xc3, 0xd5, 0x8d, 0xe7,
	0x6f, 0xb2, 0xda, 0x8b, 0x37, 0x59, 0xed, 0xaf, 0x37, 0x59, 0xed, 0xbb, 0xbd, 0xec, 0xd0, 0x8b,
	0xbd, 0xec, 0xd0, 0xab, 0xbd, 0xec, 0xd0, 0xe7, 0xf9, 0xd0, 0x47, 0x6c, 0x37, 0xf6, 0xf6, 0x45,
	0xe3, 0x8b, 0xb6, 0xfc, 0xfd, 0x8f, 0xda, 0xe2, 0x88, 0xf8, 0x43, 0xcf, 0xf2, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xd9, 0xea, 0x6a, 0x07, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Commitment item.
	ShowCommitments(ctx context.Context, in *QueryShowCommitmentsRequest, opts ...grpc.CallOption) (*QueryShowCommitmentsResponse, error)
	// Queries sum of committed tokens locked and not unlockable
	CommittedTokensLocked(ctx context.Context, in *QueryCommittedTokensLockedRequest, opts ...grpc.CallOption) (*QueryCommittedTokensLockedResponse, error)
	// Queries the total number of commitment items.
	NumberOfCommitments(ctx context.Context, in *QueryNumberOfCommitmentsRequest, opts ...grpc.CallOption) (*QueryNumberOfCommitmentsResponse, error)
	// Queries a list of CommitmentVestingInfo items.
	CommitmentVestingInfo(ctx context.Context, in *QueryCommitmentVestingInfoRequest, opts ...grpc.CallOption) (*QueryCommitmentVestingInfoResponse, error)
	AirDrop(ctx context.Context, in *QueryAirDropRequest, opts ...grpc.CallOption) (*QueryAirDropResponse, error)
	TotalAirdropClaimed(ctx context.Context, in *QueryTotalAirDropClaimedRequest, opts ...grpc.CallOption) (*QueryTotalAirDropClaimedResponse, error)
	Kol(ctx context.Context, in *QueryKolRequest, opts ...grpc.CallOption) (*QueryKolResponse, error)
	TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error)
	RewardProgram(ctx context.Context, in *QueryRewardProgramRequest, opts ...grpc.CallOption) (*QueryRewardProgramResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowCommitments(ctx context.Context, in *QueryShowCommitmentsRequest, opts ...grpc.CallOption) (*QueryShowCommitmentsResponse, error) {
	out := new(QueryShowCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/ShowCommitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CommittedTokensLocked(ctx context.Context, in *QueryCommittedTokensLockedRequest, opts ...grpc.CallOption) (*QueryCommittedTokensLockedResponse, error) {
	out := new(QueryCommittedTokensLockedResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/CommittedTokensLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NumberOfCommitments(ctx context.Context, in *QueryNumberOfCommitmentsRequest, opts ...grpc.CallOption) (*QueryNumberOfCommitmentsResponse, error) {
	out := new(QueryNumberOfCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/NumberOfCommitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CommitmentVestingInfo(ctx context.Context, in *QueryCommitmentVestingInfoRequest, opts ...grpc.CallOption) (*QueryCommitmentVestingInfoResponse, error) {
	out := new(QueryCommitmentVestingInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/CommitmentVestingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AirDrop(ctx context.Context, in *QueryAirDropRequest, opts ...grpc.CallOption) (*QueryAirDropResponse, error) {
	out := new(QueryAirDropResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/AirDrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalAirdropClaimed(ctx context.Context, in *QueryTotalAirDropClaimedRequest, opts ...grpc.CallOption) (*QueryTotalAirDropClaimedResponse, error) {
	out := new(QueryTotalAirDropClaimedResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/TotalAirdropClaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Kol(ctx context.Context, in *QueryKolRequest, opts ...grpc.CallOption) (*QueryKolResponse, error) {
	out := new(QueryKolResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/Kol", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSupply(ctx context.Context, in *QueryTotalSupplyRequest, opts ...grpc.CallOption) (*QueryTotalSupplyResponse, error) {
	out := new(QueryTotalSupplyResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/TotalSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardProgram(ctx context.Context, in *QueryRewardProgramRequest, opts ...grpc.CallOption) (*QueryRewardProgramResponse, error) {
	out := new(QueryRewardProgramResponse)
	err := c.cc.Invoke(ctx, "/elys.commitment.Query/RewardProgram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Commitment item.
	ShowCommitments(context.Context, *QueryShowCommitmentsRequest) (*QueryShowCommitmentsResponse, error)
	// Queries sum of committed tokens locked and not unlockable
	CommittedTokensLocked(context.Context, *QueryCommittedTokensLockedRequest) (*QueryCommittedTokensLockedResponse, error)
	// Queries the total number of commitment items.
	NumberOfCommitments(context.Context, *QueryNumberOfCommitmentsRequest) (*QueryNumberOfCommitmentsResponse, error)
	// Queries a list of CommitmentVestingInfo items.
	CommitmentVestingInfo(context.Context, *QueryCommitmentVestingInfoRequest) (*QueryCommitmentVestingInfoResponse, error)
	AirDrop(context.Context, *QueryAirDropRequest) (*QueryAirDropResponse, error)
	TotalAirdropClaimed(context.Context, *QueryTotalAirDropClaimedRequest) (*QueryTotalAirDropClaimedResponse, error)
	Kol(context.Context, *QueryKolRequest) (*QueryKolResponse, error)
	TotalSupply(context.Context, *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error)
	RewardProgram(context.Context, *QueryRewardProgramRequest) (*QueryRewardProgramResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ShowCommitments(ctx context.Context, req *QueryShowCommitmentsRequest) (*QueryShowCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCommitments not implemented")
}
func (*UnimplementedQueryServer) CommittedTokensLocked(ctx context.Context, req *QueryCommittedTokensLockedRequest) (*QueryCommittedTokensLockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommittedTokensLocked not implemented")
}
func (*UnimplementedQueryServer) NumberOfCommitments(ctx context.Context, req *QueryNumberOfCommitmentsRequest) (*QueryNumberOfCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumberOfCommitments not implemented")
}
func (*UnimplementedQueryServer) CommitmentVestingInfo(ctx context.Context, req *QueryCommitmentVestingInfoRequest) (*QueryCommitmentVestingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitmentVestingInfo not implemented")
}
func (*UnimplementedQueryServer) AirDrop(ctx context.Context, req *QueryAirDropRequest) (*QueryAirDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirDrop not implemented")
}
func (*UnimplementedQueryServer) TotalAirdropClaimed(ctx context.Context, req *QueryTotalAirDropClaimedRequest) (*QueryTotalAirDropClaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalAirdropClaimed not implemented")
}
func (*UnimplementedQueryServer) Kol(ctx context.Context, req *QueryKolRequest) (*QueryKolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kol not implemented")
}
func (*UnimplementedQueryServer) TotalSupply(ctx context.Context, req *QueryTotalSupplyRequest) (*QueryTotalSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSupply not implemented")
}
func (*UnimplementedQueryServer) RewardProgram(ctx context.Context, req *QueryRewardProgramRequest) (*QueryRewardProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardProgram not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/ShowCommitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowCommitments(ctx, req.(*QueryShowCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CommittedTokensLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommittedTokensLockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CommittedTokensLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/CommittedTokensLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CommittedTokensLocked(ctx, req.(*QueryCommittedTokensLockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NumberOfCommitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNumberOfCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NumberOfCommitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/NumberOfCommitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NumberOfCommitments(ctx, req.(*QueryNumberOfCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CommitmentVestingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitmentVestingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CommitmentVestingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/CommitmentVestingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CommitmentVestingInfo(ctx, req.(*QueryCommitmentVestingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AirDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAirDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AirDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/AirDrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AirDrop(ctx, req.(*QueryAirDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalAirdropClaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalAirDropClaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalAirdropClaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/TotalAirdropClaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalAirdropClaimed(ctx, req.(*QueryTotalAirDropClaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Kol_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Kol(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/Kol",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Kol(ctx, req.(*QueryKolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/TotalSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSupply(ctx, req.(*QueryTotalSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.commitment.Query/RewardProgram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardProgram(ctx, req.(*QueryRewardProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.commitment.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ShowCommitments",
			Handler:    _Query_ShowCommitments_Handler,
		},
		{
			MethodName: "CommittedTokensLocked",
			Handler:    _Query_CommittedTokensLocked_Handler,
		},
		{
			MethodName: "NumberOfCommitments",
			Handler:    _Query_NumberOfCommitments_Handler,
		},
		{
			MethodName: "CommitmentVestingInfo",
			Handler:    _Query_CommitmentVestingInfo_Handler,
		},
		{
			MethodName: "AirDrop",
			Handler:    _Query_AirDrop_Handler,
		},
		{
			MethodName: "TotalAirdropClaimed",
			Handler:    _Query_TotalAirdropClaimed_Handler,
		},
		{
			MethodName: "Kol",
			Handler:    _Query_Kol_Handler,
		},
		{
			MethodName: "TotalSupply",
			Handler:    _Query_TotalSupply_Handler,
		},
		{
			MethodName: "RewardProgram",
			Handler:    _Query_RewardProgram_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/commitment/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryShowCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commitments.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNumberOfCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumberOfCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumberOfCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNumberOfCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNumberOfCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNumberOfCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommittedTokensLockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommittedTokensLockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommittedTokensLockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommittedTokensLockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommittedTokensLockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommittedTokensLockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalCommitted) > 0 {
		for iNdEx := len(m.TotalCommitted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalCommitted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LockedCommitted) > 0 {
		for iNdEx := len(m.LockedCommitted) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedCommitted[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentVestingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentVestingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentVestingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentVestingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentVestingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentVestingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingDetails) > 0 {
		for iNdEx := len(m.VestingDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VestingDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RemainingBlocks != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RemainingBlocks))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.VestedSoFar.Size()
		i -= size
		if _, err := m.VestedSoFar.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Claimed.Size()
		i -= size
		if _, err := m.Claimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalVesting.Size()
		i -= size
		if _, err := m.TotalVesting.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAirDropRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirDropRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirDropRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAirDropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAirDropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAirDropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Governor.Size()
		i -= size
		if _, err := m.Governor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.NftHolder.Size()
		i -= size
		if _, err := m.NftHolder.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Cadet.Size()
		i -= size
		if _, err := m.Cadet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AtomStaking.Size()
		i -= size
		if _, err := m.AtomStaking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalAirDropClaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAirDropClaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAirDropClaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalAirDropClaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalAirDropClaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalAirDropClaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalEdenClaimed.Size()
		i -= size
		if _, err := m.TotalEdenClaimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalElysClaimed.Size()
		i -= size
		if _, err := m.TotalElysClaimed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Refunded {
		i--
		if m.Refunded {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ElysAmount.Size()
		i -= size
		if _, err := m.ElysAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalEdenVested.Size()
		i -= size
		if _, err := m.TotalEdenVested.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalEdenb.Size()
		i -= size
		if _, err := m.TotalEdenb.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalEden.Size()
		i -= size
		if _, err := m.TotalEden.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardProgramRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardProgramResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardProgramResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardProgramResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Claimed {
		i--
		if m.Claimed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShowCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commitments.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNumberOfCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNumberOfCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryCommittedTokensLockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommittedTokensLockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.LockedCommitted) > 0 {
		for _, e := range m.LockedCommitted {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalCommitted) > 0 {
		for _, e := range m.TotalCommitted {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCommitmentVestingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommitmentVestingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.VestingDetails) > 0 {
		for _, e := range m.VestingDetails {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *VestingDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TotalVesting.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Claimed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.VestedSoFar.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.RemainingBlocks != 0 {
		n += 1 + sovQuery(uint64(m.RemainingBlocks))
	}
	return n
}

func (m *QueryAirDropRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAirDropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AtomStaking.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Cadet.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.NftHolder.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Governor.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Claimed {
		n += 2
	}
	return n
}

func (m *QueryTotalAirDropClaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalAirDropClaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalElysClaimed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalEdenClaimed.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ElysAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Claimed {
		n += 2
	}
	if m.Refunded {
		n += 2
	}
	return n
}

func (m *QueryTotalSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalEden.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalEdenb.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalEdenVested.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardProgramRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardProgramResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.Claimed {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commitments.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumberOfCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumberOfCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumberOfCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNumberOfCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNumberOfCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNumberOfCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommittedTokensLockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommittedTokensLockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommittedTokensLockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommittedTokensLockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommittedTokensLockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommittedTokensLockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedCommitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedCommitted = append(m.LockedCommitted, types.Coin{})
			if err := m.LockedCommitted[len(m.LockedCommitted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCommitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalCommitted = append(m.TotalCommitted, types.Coin{})
			if err := m.TotalCommitted[len(m.TotalCommitted)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentVestingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentVestingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentVestingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentVestingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentVestingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentVestingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingDetails = append(m.VestingDetails, VestingDetails{})
			if err := m.VestingDetails[len(m.VestingDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVesting", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVesting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Claimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestedSoFar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VestedSoFar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingBlocks", wireType)
			}
			m.RemainingBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemainingBlocks |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirDropRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirDropRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirDropRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAirDropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAirDropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAirDropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtomStaking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AtomStaking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cadet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cadet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftHolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NftHolder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Governor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Governor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAirDropClaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAirDropClaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAirDropClaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalAirDropClaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalAirDropClaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalAirDropClaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalElysClaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalElysClaimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEdenClaimed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEdenClaimed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElysAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ElysAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refunded", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refunded = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEden.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEdenb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEdenb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEdenVested", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEdenVested.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardProgramRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardProgramResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardProgramResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardProgramResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claimed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Claimed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
