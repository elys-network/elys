// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tokenomics/genesis_inflation.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisInflation struct {
	Inflation             *InflationEntry `protobuf:"bytes,1,opt,name=inflation,proto3" json:"inflation,omitempty"`
	SeedVesting           uint64          `protobuf:"varint,2,opt,name=seed_vesting,json=seedVesting,proto3" json:"seed_vesting,omitempty"`
	StrategicSalesVesting uint64          `protobuf:"varint,3,opt,name=strategic_sales_vesting,json=strategicSalesVesting,proto3" json:"strategic_sales_vesting,omitempty"`
	Authority             string          `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (m *GenesisInflation) Reset()         { *m = GenesisInflation{} }
func (m *GenesisInflation) String() string { return proto.CompactTextString(m) }
func (*GenesisInflation) ProtoMessage()    {}
func (*GenesisInflation) Descriptor() ([]byte, []int) {
	return fileDescriptor_934e1ab350e93d3e, []int{0}
}
func (m *GenesisInflation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisInflation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisInflation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisInflation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisInflation.Merge(m, src)
}
func (m *GenesisInflation) XXX_Size() int {
	return m.Size()
}
func (m *GenesisInflation) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisInflation.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisInflation proto.InternalMessageInfo

func (m *GenesisInflation) GetInflation() *InflationEntry {
	if m != nil {
		return m.Inflation
	}
	return nil
}

func (m *GenesisInflation) GetSeedVesting() uint64 {
	if m != nil {
		return m.SeedVesting
	}
	return 0
}

func (m *GenesisInflation) GetStrategicSalesVesting() uint64 {
	if m != nil {
		return m.StrategicSalesVesting
	}
	return 0
}

func (m *GenesisInflation) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisInflation)(nil), "elys.tokenomics.GenesisInflation")
}

func init() {
	proto.RegisterFile("elys/tokenomics/genesis_inflation.proto", fileDescriptor_934e1ab350e93d3e)
}

var fileDescriptor_934e1ab350e93d3e = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xbb, 0x5a, 0x84, 0x6c, 0x05, 0x25, 0x20, 0x06, 0x91, 0x35, 0x0a, 0x62, 0x2e, 0x26,
	0xa0, 0xe0, 0xcd, 0x8b, 0x20, 0xd2, 0x6b, 0x04, 0x0f, 0x5e, 0x42, 0x1a, 0xc7, 0x74, 0x69, 0xba,
	0x5b, 0x32, 0x53, 0x35, 0x6f, 0xe1, 0x63, 0x89, 0xa7, 0x1e, 0x3d, 0x4a, 0xf2, 0x22, 0xb2, 0x09,
	0xdd, 0x48, 0x8f, 0xfb, 0xcf, 0xf7, 0xcd, 0x32, 0x3f, 0xbf, 0x80, 0xa2, 0xc2, 0x88, 0xf4, 0x0c,
	0x94, 0x9e, 0xcb, 0x0c, 0xa3, 0x1c, 0x14, 0xa0, 0xc4, 0x44, 0xaa, 0xd7, 0x22, 0x25, 0xa9, 0x55,
	0xb8, 0x28, 0x35, 0x69, 0x77, 0xcf, 0x80, 0x61, 0x0f, 0x1e, 0x9d, 0x6f, 0x9a, 0xd6, 0x48, 0x40,
	0x51, 0x59, 0x75, 0xde, 0xd9, 0x37, 0xe3, 0xfb, 0x0f, 0xdd, 0xce, 0xf1, 0x1a, 0x70, 0x6f, 0xb9,
	0x63, 0x69, 0x8f, 0xf9, 0x2c, 0x18, 0x5d, 0x9d, 0x84, 0x1b, 0x1f, 0x84, 0x16, 0xbf, 0x37, 0xeb,
	0xe2, 0xde, 0x70, 0x4f, 0xf9, 0x2e, 0x02, 0xbc, 0x24, 0x6f, 0x80, 0x24, 0x55, 0xee, 0x6d, 0xf9,
	0x2c, 0x18, 0xc6, 0x23, 0x93, 0x3d, 0x75, 0x91, 0x7b, 0xc3, 0x0f, 0x91, 0xca, 0x94, 0x20, 0x97,
	0x59, 0x82, 0x69, 0x01, 0x68, 0xe9, 0xed, 0x96, 0x3e, 0xb0, 0xe3, 0x47, 0x33, 0x5d, 0x7b, 0xc7,
	0xdc, 0x49, 0x97, 0x34, 0xd5, 0xa5, 0xa4, 0xca, 0x1b, 0xfa, 0x2c, 0x70, 0xe2, 0x3e, 0xb8, 0x1b,
	0x7f, 0xd5, 0x82, 0xad, 0x6a, 0xc1, 0x7e, 0x6b, 0xc1, 0x3e, 0x1b, 0x31, 0x58, 0x35, 0x62, 0xf0,
	0xd3, 0x88, 0xc1, 0x73, 0x94, 0x4b, 0x9a, 0x2e, 0x27, 0x61, 0xa6, 0xe7, 0x91, 0x39, 0xe4, 0x52,
	0x01, 0xbd, 0xeb, 0x72, 0xd6, 0x3e, 0xa2, 0x8f, 0xff, 0x3d, 0x51, 0xb5, 0x00, 0x9c, 0xec, 0xb4,
	0xf5, 0x5c, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xd7, 0xf2, 0x84, 0x81, 0x01, 0x00, 0x00,
}

func (m *GenesisInflation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisInflation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisInflation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintGenesisInflation(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0x22
	}
	if m.StrategicSalesVesting != 0 {
		i = encodeVarintGenesisInflation(dAtA, i, uint64(m.StrategicSalesVesting))
		i--
		dAtA[i] = 0x18
	}
	if m.SeedVesting != 0 {
		i = encodeVarintGenesisInflation(dAtA, i, uint64(m.SeedVesting))
		i--
		dAtA[i] = 0x10
	}
	if m.Inflation != nil {
		{
			size, err := m.Inflation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesisInflation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesisInflation(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesisInflation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisInflation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Inflation != nil {
		l = m.Inflation.Size()
		n += 1 + l + sovGenesisInflation(uint64(l))
	}
	if m.SeedVesting != 0 {
		n += 1 + sovGenesisInflation(uint64(m.SeedVesting))
	}
	if m.StrategicSalesVesting != 0 {
		n += 1 + sovGenesisInflation(uint64(m.StrategicSalesVesting))
	}
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovGenesisInflation(uint64(l))
	}
	return n
}

func sovGenesisInflation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesisInflation(x uint64) (n int) {
	return sovGenesisInflation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisInflation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesisInflation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisInflation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisInflation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inflation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesisInflation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisInflation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inflation == nil {
				m.Inflation = &InflationEntry{}
			}
			if err := m.Inflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeedVesting", wireType)
			}
			m.SeedVesting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeedVesting |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategicSalesVesting", wireType)
			}
			m.StrategicSalesVesting = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategicSalesVesting |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesisInflation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesisInflation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesisInflation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesisInflation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesisInflation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesisInflation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesisInflation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesisInflation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesisInflation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesisInflation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesisInflation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesisInflation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesisInflation = fmt.Errorf("proto: unexpected end of group")
)
