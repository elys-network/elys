// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/perpetual/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgOpen struct {
	Creator         string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Position        Position                    `protobuf:"varint,2,opt,name=position,proto3,enum=elys.perpetual.Position" json:"position,omitempty"`
	Leverage        cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	Collateral      types.Coin                  `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral"`
	TakeProfitPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_profit_price"`
	StopLossPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=stop_loss_price,json=stopLossPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stop_loss_price"`
	PoolId          uint64                      `protobuf:"varint,7,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *MsgOpen) Reset()         { *m = MsgOpen{} }
func (m *MsgOpen) String() string { return proto.CompactTextString(m) }
func (*MsgOpen) ProtoMessage()    {}
func (*MsgOpen) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{0}
}
func (m *MsgOpen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpen.Merge(m, src)
}
func (m *MsgOpen) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpen proto.InternalMessageInfo

func (m *MsgOpen) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgOpen) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_UNSPECIFIED
}

func (m *MsgOpen) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *MsgOpen) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgOpenResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgOpenResponse) Reset()         { *m = MsgOpenResponse{} }
func (m *MsgOpenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenResponse) ProtoMessage()    {}
func (*MsgOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{1}
}
func (m *MsgOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenResponse.Merge(m, src)
}
func (m *MsgOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenResponse proto.InternalMessageInfo

func (m *MsgOpenResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgClose struct {
	Creator string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgClose) Reset()         { *m = MsgClose{} }
func (m *MsgClose) String() string { return proto.CompactTextString(m) }
func (*MsgClose) ProtoMessage()    {}
func (*MsgClose) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{2}
}
func (m *MsgClose) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClose.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClose.Merge(m, src)
}
func (m *MsgClose) XXX_Size() int {
	return m.Size()
}
func (m *MsgClose) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClose.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClose proto.InternalMessageInfo

func (m *MsgClose) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClose) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCloseResponse struct {
	Id     uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgCloseResponse) Reset()         { *m = MsgCloseResponse{} }
func (m *MsgCloseResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCloseResponse) ProtoMessage()    {}
func (*MsgCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{3}
}
func (m *MsgCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCloseResponse.Merge(m, src)
}
func (m *MsgCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCloseResponse proto.InternalMessageInfo

func (m *MsgCloseResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgWhitelist struct {
	Authority          string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	WhitelistedAddress string `protobuf:"bytes,2,opt,name=whitelisted_address,json=whitelistedAddress,proto3" json:"whitelisted_address,omitempty"`
}

func (m *MsgWhitelist) Reset()         { *m = MsgWhitelist{} }
func (m *MsgWhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelist) ProtoMessage()    {}
func (*MsgWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{6}
}
func (m *MsgWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelist.Merge(m, src)
}
func (m *MsgWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelist proto.InternalMessageInfo

func (m *MsgWhitelist) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgWhitelist) GetWhitelistedAddress() string {
	if m != nil {
		return m.WhitelistedAddress
	}
	return ""
}

type MsgWhitelistResponse struct {
}

func (m *MsgWhitelistResponse) Reset()         { *m = MsgWhitelistResponse{} }
func (m *MsgWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelistResponse) ProtoMessage()    {}
func (*MsgWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{7}
}
func (m *MsgWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelistResponse.Merge(m, src)
}
func (m *MsgWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelistResponse proto.InternalMessageInfo

type MsgDewhitelist struct {
	Authority          string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	WhitelistedAddress string `protobuf:"bytes,2,opt,name=whitelisted_address,json=whitelistedAddress,proto3" json:"whitelisted_address,omitempty"`
}

func (m *MsgDewhitelist) Reset()         { *m = MsgDewhitelist{} }
func (m *MsgDewhitelist) String() string { return proto.CompactTextString(m) }
func (*MsgDewhitelist) ProtoMessage()    {}
func (*MsgDewhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{8}
}
func (m *MsgDewhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDewhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDewhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDewhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDewhitelist.Merge(m, src)
}
func (m *MsgDewhitelist) XXX_Size() int {
	return m.Size()
}
func (m *MsgDewhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDewhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDewhitelist proto.InternalMessageInfo

func (m *MsgDewhitelist) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDewhitelist) GetWhitelistedAddress() string {
	if m != nil {
		return m.WhitelistedAddress
	}
	return ""
}

type MsgDewhitelistResponse struct {
}

func (m *MsgDewhitelistResponse) Reset()         { *m = MsgDewhitelistResponse{} }
func (m *MsgDewhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDewhitelistResponse) ProtoMessage()    {}
func (*MsgDewhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{9}
}
func (m *MsgDewhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDewhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDewhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDewhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDewhitelistResponse.Merge(m, src)
}
func (m *MsgDewhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDewhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDewhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDewhitelistResponse proto.InternalMessageInfo

type MsgClosePositions struct {
	Creator    string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Liquidate  []PositionRequest `protobuf:"bytes,2,rep,name=liquidate,proto3" json:"liquidate"`
	StopLoss   []PositionRequest `protobuf:"bytes,3,rep,name=stop_loss,json=stopLoss,proto3" json:"stop_loss"`
	TakeProfit []PositionRequest `protobuf:"bytes,4,rep,name=take_profit,json=takeProfit,proto3" json:"take_profit"`
}

func (m *MsgClosePositions) Reset()         { *m = MsgClosePositions{} }
func (m *MsgClosePositions) String() string { return proto.CompactTextString(m) }
func (*MsgClosePositions) ProtoMessage()    {}
func (*MsgClosePositions) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{10}
}
func (m *MsgClosePositions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePositions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePositions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePositions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePositions.Merge(m, src)
}
func (m *MsgClosePositions) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePositions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePositions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePositions proto.InternalMessageInfo

func (m *MsgClosePositions) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgClosePositions) GetLiquidate() []PositionRequest {
	if m != nil {
		return m.Liquidate
	}
	return nil
}

func (m *MsgClosePositions) GetStopLoss() []PositionRequest {
	if m != nil {
		return m.StopLoss
	}
	return nil
}

func (m *MsgClosePositions) GetTakeProfit() []PositionRequest {
	if m != nil {
		return m.TakeProfit
	}
	return nil
}

type MsgClosePositionsResponse struct {
}

func (m *MsgClosePositionsResponse) Reset()         { *m = MsgClosePositionsResponse{} }
func (m *MsgClosePositionsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClosePositionsResponse) ProtoMessage()    {}
func (*MsgClosePositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{11}
}
func (m *MsgClosePositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePositionsResponse.Merge(m, src)
}
func (m *MsgClosePositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePositionsResponse proto.InternalMessageInfo

type MsgUpdateStopLoss struct {
	Creator string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Price   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
}

func (m *MsgUpdateStopLoss) Reset()         { *m = MsgUpdateStopLoss{} }
func (m *MsgUpdateStopLoss) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStopLoss) ProtoMessage()    {}
func (*MsgUpdateStopLoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{12}
}
func (m *MsgUpdateStopLoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStopLoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStopLoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStopLoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStopLoss.Merge(m, src)
}
func (m *MsgUpdateStopLoss) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStopLoss) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStopLoss.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStopLoss proto.InternalMessageInfo

func (m *MsgUpdateStopLoss) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateStopLoss) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateStopLossResponse struct {
}

func (m *MsgUpdateStopLossResponse) Reset()         { *m = MsgUpdateStopLossResponse{} }
func (m *MsgUpdateStopLossResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateStopLossResponse) ProtoMessage()    {}
func (*MsgUpdateStopLossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{13}
}
func (m *MsgUpdateStopLossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateStopLossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateStopLossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateStopLossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateStopLossResponse.Merge(m, src)
}
func (m *MsgUpdateStopLossResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateStopLossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateStopLossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateStopLossResponse proto.InternalMessageInfo

type MsgUpdateTakeProfitPrice struct {
	Creator string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id      uint64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Price   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
}

func (m *MsgUpdateTakeProfitPrice) Reset()         { *m = MsgUpdateTakeProfitPrice{} }
func (m *MsgUpdateTakeProfitPrice) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTakeProfitPrice) ProtoMessage()    {}
func (*MsgUpdateTakeProfitPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{14}
}
func (m *MsgUpdateTakeProfitPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTakeProfitPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTakeProfitPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTakeProfitPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTakeProfitPrice.Merge(m, src)
}
func (m *MsgUpdateTakeProfitPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTakeProfitPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTakeProfitPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTakeProfitPrice proto.InternalMessageInfo

func (m *MsgUpdateTakeProfitPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateTakeProfitPrice) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateTakeProfitPriceResponse struct {
}

func (m *MsgUpdateTakeProfitPriceResponse) Reset()         { *m = MsgUpdateTakeProfitPriceResponse{} }
func (m *MsgUpdateTakeProfitPriceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTakeProfitPriceResponse) ProtoMessage()    {}
func (*MsgUpdateTakeProfitPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{15}
}
func (m *MsgUpdateTakeProfitPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTakeProfitPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTakeProfitPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTakeProfitPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTakeProfitPriceResponse.Merge(m, src)
}
func (m *MsgUpdateTakeProfitPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTakeProfitPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTakeProfitPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTakeProfitPriceResponse proto.InternalMessageInfo

type MsgUpdateMaxLeverageForPool struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority   string                      `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	PoolId      uint64                      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	LeverageMax cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=leverage_max,json=leverageMax,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage_max"`
}

func (m *MsgUpdateMaxLeverageForPool) Reset()         { *m = MsgUpdateMaxLeverageForPool{} }
func (m *MsgUpdateMaxLeverageForPool) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxLeverageForPool) ProtoMessage()    {}
func (*MsgUpdateMaxLeverageForPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{16}
}
func (m *MsgUpdateMaxLeverageForPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxLeverageForPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxLeverageForPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxLeverageForPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxLeverageForPool.Merge(m, src)
}
func (m *MsgUpdateMaxLeverageForPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxLeverageForPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxLeverageForPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxLeverageForPool proto.InternalMessageInfo

func (m *MsgUpdateMaxLeverageForPool) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateMaxLeverageForPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgUpdateMaxLeverageForPoolResponse struct {
}

func (m *MsgUpdateMaxLeverageForPoolResponse) Reset()         { *m = MsgUpdateMaxLeverageForPoolResponse{} }
func (m *MsgUpdateMaxLeverageForPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxLeverageForPoolResponse) ProtoMessage()    {}
func (*MsgUpdateMaxLeverageForPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{17}
}
func (m *MsgUpdateMaxLeverageForPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxLeverageForPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxLeverageForPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxLeverageForPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxLeverageForPoolResponse.Merge(m, src)
}
func (m *MsgUpdateMaxLeverageForPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxLeverageForPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxLeverageForPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxLeverageForPoolResponse proto.InternalMessageInfo

type MsgUpdateEnabledPools struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority    string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	EnabledPools []uint64 `protobuf:"varint,2,rep,packed,name=enabled_pools,json=enabledPools,proto3" json:"enabled_pools,omitempty"`
	AddPools     []uint64 `protobuf:"varint,3,rep,packed,name=add_pools,json=addPools,proto3" json:"add_pools,omitempty"`
	RemovePools  []uint64 `protobuf:"varint,4,rep,packed,name=remove_pools,json=removePools,proto3" json:"remove_pools,omitempty"`
}

func (m *MsgUpdateEnabledPools) Reset()         { *m = MsgUpdateEnabledPools{} }
func (m *MsgUpdateEnabledPools) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnabledPools) ProtoMessage()    {}
func (*MsgUpdateEnabledPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{18}
}
func (m *MsgUpdateEnabledPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnabledPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnabledPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnabledPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnabledPools.Merge(m, src)
}
func (m *MsgUpdateEnabledPools) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnabledPools) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnabledPools.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnabledPools proto.InternalMessageInfo

func (m *MsgUpdateEnabledPools) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateEnabledPools) GetEnabledPools() []uint64 {
	if m != nil {
		return m.EnabledPools
	}
	return nil
}

func (m *MsgUpdateEnabledPools) GetAddPools() []uint64 {
	if m != nil {
		return m.AddPools
	}
	return nil
}

func (m *MsgUpdateEnabledPools) GetRemovePools() []uint64 {
	if m != nil {
		return m.RemovePools
	}
	return nil
}

type MsgUpdateEnabledPoolsResponse struct {
}

func (m *MsgUpdateEnabledPoolsResponse) Reset()         { *m = MsgUpdateEnabledPoolsResponse{} }
func (m *MsgUpdateEnabledPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateEnabledPoolsResponse) ProtoMessage()    {}
func (*MsgUpdateEnabledPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{19}
}
func (m *MsgUpdateEnabledPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateEnabledPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateEnabledPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateEnabledPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateEnabledPoolsResponse.Merge(m, src)
}
func (m *MsgUpdateEnabledPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateEnabledPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateEnabledPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateEnabledPoolsResponse proto.InternalMessageInfo

type MsgAddCollateral struct {
	Creator       string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id            uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AddCollateral types.Coin `protobuf:"bytes,3,opt,name=add_collateral,json=addCollateral,proto3" json:"add_collateral"`
}

func (m *MsgAddCollateral) Reset()         { *m = MsgAddCollateral{} }
func (m *MsgAddCollateral) String() string { return proto.CompactTextString(m) }
func (*MsgAddCollateral) ProtoMessage()    {}
func (*MsgAddCollateral) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{20}
}
func (m *MsgAddCollateral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCollateral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCollateral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCollateral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCollateral.Merge(m, src)
}
func (m *MsgAddCollateral) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCollateral) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCollateral.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCollateral proto.InternalMessageInfo

func (m *MsgAddCollateral) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddCollateral) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MsgAddCollateral) GetAddCollateral() types.Coin {
	if m != nil {
		return m.AddCollateral
	}
	return types.Coin{}
}

type MsgAddCollateralResponse struct {
}

func (m *MsgAddCollateralResponse) Reset()         { *m = MsgAddCollateralResponse{} }
func (m *MsgAddCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCollateralResponse) ProtoMessage()    {}
func (*MsgAddCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e879ed5011cdd71, []int{21}
}
func (m *MsgAddCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCollateralResponse.Merge(m, src)
}
func (m *MsgAddCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCollateralResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgOpen)(nil), "elys.perpetual.MsgOpen")
	proto.RegisterType((*MsgOpenResponse)(nil), "elys.perpetual.MsgOpenResponse")
	proto.RegisterType((*MsgClose)(nil), "elys.perpetual.MsgClose")
	proto.RegisterType((*MsgCloseResponse)(nil), "elys.perpetual.MsgCloseResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "elys.perpetual.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "elys.perpetual.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgWhitelist)(nil), "elys.perpetual.MsgWhitelist")
	proto.RegisterType((*MsgWhitelistResponse)(nil), "elys.perpetual.MsgWhitelistResponse")
	proto.RegisterType((*MsgDewhitelist)(nil), "elys.perpetual.MsgDewhitelist")
	proto.RegisterType((*MsgDewhitelistResponse)(nil), "elys.perpetual.MsgDewhitelistResponse")
	proto.RegisterType((*MsgClosePositions)(nil), "elys.perpetual.MsgClosePositions")
	proto.RegisterType((*MsgClosePositionsResponse)(nil), "elys.perpetual.MsgClosePositionsResponse")
	proto.RegisterType((*MsgUpdateStopLoss)(nil), "elys.perpetual.MsgUpdateStopLoss")
	proto.RegisterType((*MsgUpdateStopLossResponse)(nil), "elys.perpetual.MsgUpdateStopLossResponse")
	proto.RegisterType((*MsgUpdateTakeProfitPrice)(nil), "elys.perpetual.MsgUpdateTakeProfitPrice")
	proto.RegisterType((*MsgUpdateTakeProfitPriceResponse)(nil), "elys.perpetual.MsgUpdateTakeProfitPriceResponse")
	proto.RegisterType((*MsgUpdateMaxLeverageForPool)(nil), "elys.perpetual.MsgUpdateMaxLeverageForPool")
	proto.RegisterType((*MsgUpdateMaxLeverageForPoolResponse)(nil), "elys.perpetual.MsgUpdateMaxLeverageForPoolResponse")
	proto.RegisterType((*MsgUpdateEnabledPools)(nil), "elys.perpetual.MsgUpdateEnabledPools")
	proto.RegisterType((*MsgUpdateEnabledPoolsResponse)(nil), "elys.perpetual.MsgUpdateEnabledPoolsResponse")
	proto.RegisterType((*MsgAddCollateral)(nil), "elys.perpetual.MsgAddCollateral")
	proto.RegisterType((*MsgAddCollateralResponse)(nil), "elys.perpetual.MsgAddCollateralResponse")
}

func init() { proto.RegisterFile("elys/perpetual/tx.proto", fileDescriptor_5e879ed5011cdd71) }

var fileDescriptor_5e879ed5011cdd71 = []byte{
	// 1265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x8f, 0xdb, 0x44,
	0x14, 0x5e, 0x27, 0xd9, 0xdd, 0xe4, 0x65, 0x37, 0x65, 0x4d, 0xbb, 0xeb, 0x75, 0x20, 0xc9, 0xba,
	0x14, 0xd2, 0x96, 0x8d, 0xd9, 0x14, 0x55, 0x28, 0x17, 0xe8, 0xa6, 0x14, 0x55, 0x34, 0xea, 0x2a,
	0x6d, 0xc5, 0x2f, 0x41, 0x34, 0x1b, 0x0f, 0x5e, 0x53, 0xc7, 0xe3, 0x7a, 0x9c, 0xed, 0xae, 0xc4,
	0x01, 0x71, 0xe4, 0x04, 0xff, 0x02, 0x07, 0xb8, 0xf6, 0xd0, 0x03, 0x7f, 0x01, 0xaa, 0x84, 0x84,
	0xaa, 0x9e, 0x10, 0x42, 0x15, 0x6a, 0x0f, 0xe5, 0x6f, 0xe0, 0x80, 0x90, 0xed, 0xf1, 0xc4, 0x76,
	0x9c, 0xfd, 0x11, 0x55, 0x88, 0x4b, 0x6b, 0xcf, 0xf7, 0xcd, 0x37, 0xef, 0x7d, 0xe3, 0x79, 0xf3,
	0x36, 0xb0, 0x82, 0xcd, 0x7d, 0xaa, 0xda, 0xd8, 0xb1, 0xb1, 0x3b, 0x44, 0xa6, 0xea, 0xee, 0x35,
	0x6c, 0x87, 0xb8, 0x44, 0x2c, 0x79, 0x40, 0x83, 0x03, 0xf2, 0x49, 0x9d, 0xe8, 0xc4, 0x87, 0x54,
	0xef, 0x29, 0x60, 0xc9, 0x95, 0x3e, 0xa1, 0x03, 0x42, 0xd5, 0x6d, 0x44, 0xb1, 0xba, 0xbb, 0xb1,
	0x8d, 0x5d, 0xb4, 0xa1, 0xf6, 0x89, 0x61, 0x31, 0xbc, 0x9c, 0x90, 0xb7, 0x91, 0x83, 0x06, 0x94,
	0x81, 0x72, 0x72, 0xed, 0x7d, 0x1b, 0x87, 0xd8, 0x0a, 0x13, 0x1e, 0x50, 0x5d, 0xdd, 0xdd, 0xf0,
	0xfe, 0x63, 0xc0, 0x12, 0x1a, 0x18, 0x16, 0x51, 0xfd, 0x7f, 0xd9, 0xd0, 0x6a, 0xc0, 0xed, 0x05,
	0xd1, 0x05, 0x2f, 0x01, 0xa4, 0xfc, 0x9d, 0x85, 0xf9, 0x0e, 0xd5, 0xaf, 0xdb, 0xd8, 0x12, 0x9b,
	0x30, 0xdf, 0x77, 0x30, 0x72, 0x89, 0x23, 0x09, 0x35, 0xa1, 0x5e, 0xd8, 0x94, 0x1e, 0xdd, 0x5f,
	0x3f, 0xc9, 0xe8, 0x97, 0x34, 0xcd, 0xc1, 0x94, 0xde, 0x70, 0x1d, 0xc3, 0xd2, 0xbb, 0x21, 0x51,
	0x7c, 0x13, 0xf2, 0x36, 0xa1, 0x86, 0x6b, 0x10, 0x4b, 0xca, 0xd4, 0x84, 0x7a, 0xa9, 0x29, 0x35,
	0xe2, 0xc6, 0x34, 0xb6, 0x18, 0xde, 0xe5, 0x4c, 0xb1, 0x03, 0x79, 0x13, 0xef, 0x62, 0x07, 0xe9,
	0x58, 0xca, 0xfa, 0x4b, 0x6d, 0x3c, 0x78, 0x5c, 0x9d, 0xf9, 0xfd, 0x71, 0xb5, 0x1c, 0x2c, 0x47,
	0xb5, 0xdb, 0x0d, 0x83, 0xa8, 0x03, 0xe4, 0xee, 0x34, 0xae, 0x61, 0x1d, 0xf5, 0xf7, 0x2f, 0xe3,
	0xfe, 0xa3, 0xfb, 0xeb, 0xc0, 0xa2, 0xb9, 0x8c, 0xfb, 0x5d, 0x2e, 0x21, 0xbe, 0x0d, 0xd0, 0x27,
	0xa6, 0x89, 0x5c, 0xec, 0x20, 0x53, 0xca, 0xd5, 0x84, 0x7a, 0xb1, 0xb9, 0xda, 0x60, 0x54, 0xcf,
	0xf9, 0x06, 0x73, 0xbe, 0xd1, 0x26, 0x86, 0xb5, 0x99, 0xf3, 0xd6, 0xea, 0x46, 0xa6, 0x88, 0x9f,
	0xc2, 0x92, 0x8b, 0x6e, 0x63, 0xcf, 0xa0, 0xcf, 0x0d, 0xb7, 0x67, 0x3b, 0x46, 0x1f, 0x4b, 0xb3,
	0xd3, 0x06, 0x76, 0xc2, 0xd3, 0xda, 0xf2, 0xa5, 0xb6, 0x3c, 0x25, 0xf1, 0x23, 0x38, 0x41, 0x5d,
	0x62, 0xf7, 0x4c, 0x42, 0x29, 0x13, 0x9f, 0x9b, 0x56, 0x7c, 0xd1, 0x53, 0xba, 0x46, 0x28, 0x0d,
	0xa4, 0x57, 0x60, 0xde, 0x26, 0xc4, 0xec, 0x19, 0x9a, 0x34, 0x5f, 0x13, 0xea, 0xb9, 0xee, 0x9c,
	0xf7, 0x7a, 0x55, 0x6b, 0x29, 0x5f, 0x3f, 0xbb, 0x77, 0x2e, 0xdc, 0xa6, 0x6f, 0x9e, 0xdd, 0x3b,
	0xb7, 0x34, 0xfa, 0x8e, 0xd8, 0x86, 0x2b, 0x6b, 0x70, 0x82, 0x3d, 0x76, 0x31, 0xb5, 0x89, 0x45,
	0xb1, 0x58, 0x82, 0x8c, 0xa1, 0xf9, 0xdb, 0x9f, 0xeb, 0x66, 0x0c, 0x4d, 0xf9, 0x49, 0x80, 0x7c,
	0x87, 0xea, 0x6d, 0x93, 0x50, 0x3c, 0xd5, 0x07, 0x12, 0x08, 0x66, 0x42, 0x41, 0xb1, 0x0d, 0x73,
	0x68, 0x40, 0x86, 0x96, 0xcb, 0x36, 0xfe, 0x3c, 0xb3, 0xe0, 0xd4, 0xb8, 0x05, 0x57, 0x2d, 0x37,
	0x92, 0xfc, 0x55, 0xcb, 0xed, 0xb2, 0xa9, 0xad, 0xd3, 0xc9, 0xe4, 0xc4, 0x58, 0x72, 0x7e, 0xb4,
	0x8a, 0x0e, 0x2f, 0x84, 0xcf, 0x93, 0xd2, 0x8b, 0x44, 0x93, 0x99, 0x3a, 0x1a, 0xe5, 0x47, 0xc1,
	0xf7, 0xf1, 0x96, 0xad, 0x21, 0x17, 0x6f, 0xf9, 0x07, 0x58, 0xbc, 0x08, 0x05, 0x34, 0x74, 0x77,
	0x88, 0x63, 0xb8, 0xfb, 0x87, 0x9a, 0x35, 0xa2, 0x8a, 0x0d, 0x98, 0x0b, 0x4a, 0x80, 0x1f, 0x50,
	0xb1, 0xb9, 0x3c, 0x76, 0x9a, 0x7c, 0xb4, 0xcb, 0x58, 0xad, 0xd7, 0x3d, 0x27, 0x46, 0xf3, 0x3d,
	0x2f, 0x56, 0x63, 0x5e, 0x44, 0xa3, 0x52, 0x56, 0x61, 0x25, 0x31, 0x14, 0x3a, 0xa3, 0x7c, 0x2f,
	0xc0, 0x42, 0x87, 0xea, 0x1f, 0xec, 0x18, 0x2e, 0x36, 0x0d, 0xea, 0x4e, 0x9d, 0x81, 0x0a, 0x2f,
	0xde, 0x0d, 0x45, 0xb0, 0xd6, 0x43, 0x01, 0x2f, 0xf0, 0xb7, 0x2b, 0x46, 0x20, 0xa6, 0xd0, 0x3a,
	0x3b, 0x9e, 0xc2, 0x72, 0x2c, 0x05, 0x1e, 0x93, 0xb2, 0x0c, 0x27, 0xa3, 0xef, 0x3c, 0xf8, 0x1f,
	0x04, 0x28, 0x75, 0xa8, 0x7e, 0x19, 0xdf, 0xfd, 0xef, 0xc3, 0x3f, 0x3f, 0x1e, 0xbe, 0x14, 0x0b,
	0x3f, 0x12, 0x95, 0x22, 0xc1, 0x72, 0x7c, 0x84, 0xa7, 0xf0, 0x73, 0x06, 0x96, 0xc2, 0xcf, 0x35,
	0xac, 0x98, 0x74, 0xaa, 0x13, 0xd7, 0x86, 0x82, 0x69, 0xdc, 0x19, 0x1a, 0xde, 0x26, 0x4b, 0x99,
	0x5a, 0xb6, 0x5e, 0x6c, 0x56, 0x27, 0xd6, 0x64, 0x7c, 0x67, 0x88, 0xa9, 0xcb, 0x4a, 0xe2, 0x68,
	0x9e, 0xb8, 0x09, 0x05, 0x5e, 0xb2, 0xa4, 0xec, 0x71, 0x44, 0xf2, 0x61, 0x81, 0x12, 0xaf, 0x40,
	0x31, 0x52, 0x55, 0xa5, 0xdc, 0x71, 0x54, 0x60, 0x54, 0x43, 0x83, 0x6f, 0x3c, 0x7a, 0xda, 0xcb,
	0xe3, 0xa7, 0x9d, 0x5b, 0xa6, 0x94, 0x61, 0x75, 0x6c, 0x90, 0xbb, 0xfc, 0xab, 0xe0, 0xbb, 0x1c,
	0x9c, 0x80, 0x1b, 0x61, 0xa0, 0xcf, 0xa3, 0xae, 0xbd, 0x07, 0xb3, 0x41, 0x65, 0x9f, 0xfa, 0x3e,
	0x0b, 0xe6, 0x1f, 0x96, 0x6d, 0x3c, 0x74, 0x96, 0x6d, 0x7c, 0x90, 0x67, 0xfb, 0x87, 0x00, 0x12,
	0x47, 0x6f, 0x26, 0x2e, 0xa5, 0xff, 0x55, 0xd2, 0x17, 0x92, 0x49, 0x2b, 0x29, 0x49, 0x27, 0x32,
	0x50, 0x14, 0xa8, 0x4d, 0xc2, 0xb8, 0x05, 0xff, 0x08, 0x50, 0xe6, 0xa4, 0x0e, 0xda, 0xbb, 0xc6,
	0x7a, 0x86, 0x2b, 0xc4, 0xd9, 0x22, 0xc4, 0x9c, 0xba, 0x4c, 0x44, 0xee, 0xdd, 0x4c, 0xf4, 0xde,
	0x15, 0x6f, 0xc2, 0x42, 0xd8, 0x97, 0xf4, 0x06, 0x68, 0x6f, 0x7a, 0x67, 0x8a, 0xa1, 0x4c, 0x07,
	0xed, 0xb5, 0xde, 0x1a, 0x2f, 0x32, 0x67, 0x52, 0x1c, 0x1a, 0x4f, 0x50, 0x39, 0x03, 0xa7, 0x0f,
	0x80, 0xb9, 0x4f, 0x7f, 0x09, 0x70, 0x8a, 0xf3, 0xde, 0xb5, 0xd0, 0xb6, 0x89, 0x35, 0x8f, 0x30,
	0xfd, 0x4d, 0x76, 0x1a, 0x16, 0x71, 0xa0, 0xd3, 0xf3, 0xac, 0xa1, 0x7e, 0x29, 0xca, 0x75, 0x17,
	0x70, 0x54, 0xbc, 0x0c, 0x05, 0xa4, 0x85, 0x84, 0xac, 0x4f, 0xc8, 0x23, 0x8d, 0x81, 0x6b, 0xb0,
	0xe0, 0xe0, 0x01, 0xd9, 0xc5, 0x0c, 0xcf, 0xf9, 0x78, 0x31, 0x18, 0xf3, 0x29, 0xad, 0xe6, 0xb8,
	0x2f, 0xd5, 0x14, 0x5f, 0xa2, 0x09, 0x29, 0x55, 0x78, 0x39, 0x15, 0xe0, 0x5e, 0xfc, 0x22, 0xf8,
	0x9d, 0xc3, 0x25, 0x4d, 0x6b, 0x8f, 0x5a, 0xc4, 0xe7, 0x71, 0x5c, 0xae, 0x40, 0xc9, 0xcb, 0x36,
	0xd2, 0xab, 0x66, 0x8f, 0xd6, 0xab, 0x2e, 0xa2, 0x68, 0x2c, 0xc1, 0x95, 0x13, 0x3d, 0x2d, 0x72,
	0x2c, 0xe7, 0x58, 0xe0, 0x8a, 0xec, 0xd7, 0x80, 0xd8, 0x58, 0x98, 0x69, 0xf3, 0xbb, 0x3c, 0x64,
	0x3b, 0x54, 0x17, 0xdf, 0x81, 0x9c, 0xff, 0x17, 0xc0, 0x4a, 0xb2, 0x38, 0xb3, 0xf6, 0x50, 0xae,
	0x4e, 0x00, 0x78, 0x63, 0xf5, 0x09, 0x2c, 0xc6, 0xfd, 0xaa, 0xa5, 0xcc, 0x88, 0x31, 0xe4, 0xfa,
	0x61, 0x0c, 0x2e, 0xde, 0x86, 0xd9, 0xa0, 0x01, 0x95, 0x52, 0xa6, 0xf8, 0x88, 0x5c, 0x9b, 0x84,
	0x70, 0x91, 0x0f, 0x61, 0x21, 0xd6, 0xa1, 0xa5, 0xa5, 0x14, 0x25, 0xc8, 0xaf, 0x1d, 0x42, 0xe0,
	0xca, 0xd7, 0xa1, 0x30, 0x6a, 0x9b, 0x5e, 0x4a, 0x99, 0xc5, 0x51, 0xf9, 0x95, 0x83, 0x50, 0x2e,
	0x78, 0x0b, 0x8a, 0xd1, 0x56, 0xa6, 0x92, 0x32, 0x29, 0x82, 0xcb, 0xaf, 0x1e, 0x8c, 0x73, 0xd9,
	0xcf, 0xa0, 0x94, 0xb8, 0xf8, 0xd6, 0x26, 0xa6, 0x18, 0x52, 0xe4, 0xb3, 0x87, 0x52, 0xa2, 0xfa,
	0x89, 0xf6, 0x65, 0x6d, 0xd2, 0xae, 0x70, 0x4a, 0xaa, 0x7e, 0xfa, 0xe5, 0x2d, 0x52, 0x38, 0x95,
	0x7e, 0x95, 0xd5, 0x27, 0xc6, 0x98, 0x60, 0xca, 0x6f, 0x1c, 0x95, 0xc9, 0x17, 0xfd, 0x12, 0xa4,
	0x89, 0x97, 0xc7, 0xf9, 0x89, 0x6a, 0xe3, 0x64, 0xf9, 0xc2, 0x31, 0xc8, 0x7c, 0xf5, 0x2f, 0x40,
	0x4c, 0x29, 0xc9, 0x67, 0x26, 0x4a, 0x45, 0x69, 0xf2, 0xfa, 0x91, 0x68, 0xe1, 0x5a, 0xf2, 0xec,
	0x57, 0xcf, 0xee, 0x9d, 0x13, 0x36, 0xdf, 0x7f, 0xf0, 0xa4, 0x22, 0x3c, 0x7c, 0x52, 0x11, 0xfe,
	0x7c, 0x52, 0x11, 0xbe, 0x7d, 0x5a, 0x99, 0x79, 0xf8, 0xb4, 0x32, 0xf3, 0xdb, 0xd3, 0xca, 0xcc,
	0xc7, 0x1b, 0xba, 0xe1, 0xee, 0x0c, 0xb7, 0x1b, 0x7d, 0x32, 0x50, 0x3d, 0xe5, 0x75, 0x0b, 0xbb,
	0x77, 0x89, 0x73, 0xdb, 0x7f, 0x51, 0x77, 0x2f, 0xaa, 0x7b, 0xc9, 0xdf, 0x2a, 0xb6, 0xe7, 0xfc,
	0x5f, 0x19, 0x2e, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x8f, 0x46, 0x5d, 0x46, 0x11, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Open(ctx context.Context, in *MsgOpen, opts ...grpc.CallOption) (*MsgOpenResponse, error)
	AddCollateral(ctx context.Context, in *MsgAddCollateral, opts ...grpc.CallOption) (*MsgAddCollateralResponse, error)
	Close(ctx context.Context, in *MsgClose, opts ...grpc.CallOption) (*MsgCloseResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	Whitelist(ctx context.Context, in *MsgWhitelist, opts ...grpc.CallOption) (*MsgWhitelistResponse, error)
	Dewhitelist(ctx context.Context, in *MsgDewhitelist, opts ...grpc.CallOption) (*MsgDewhitelistResponse, error)
	UpdateStopLoss(ctx context.Context, in *MsgUpdateStopLoss, opts ...grpc.CallOption) (*MsgUpdateStopLossResponse, error)
	ClosePositions(ctx context.Context, in *MsgClosePositions, opts ...grpc.CallOption) (*MsgClosePositionsResponse, error)
	UpdateTakeProfitPrice(ctx context.Context, in *MsgUpdateTakeProfitPrice, opts ...grpc.CallOption) (*MsgUpdateTakeProfitPriceResponse, error)
	UpdateMaxLeverageForPool(ctx context.Context, in *MsgUpdateMaxLeverageForPool, opts ...grpc.CallOption) (*MsgUpdateMaxLeverageForPoolResponse, error)
	UpdateEnabledPools(ctx context.Context, in *MsgUpdateEnabledPools, opts ...grpc.CallOption) (*MsgUpdateEnabledPoolsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Open(ctx context.Context, in *MsgOpen, opts ...grpc.CallOption) (*MsgOpenResponse, error) {
	out := new(MsgOpenResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCollateral(ctx context.Context, in *MsgAddCollateral, opts ...grpc.CallOption) (*MsgAddCollateralResponse, error) {
	out := new(MsgAddCollateralResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/AddCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Close(ctx context.Context, in *MsgClose, opts ...grpc.CallOption) (*MsgCloseResponse, error) {
	out := new(MsgCloseResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Whitelist(ctx context.Context, in *MsgWhitelist, opts ...grpc.CallOption) (*MsgWhitelistResponse, error) {
	out := new(MsgWhitelistResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/Whitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Dewhitelist(ctx context.Context, in *MsgDewhitelist, opts ...grpc.CallOption) (*MsgDewhitelistResponse, error) {
	out := new(MsgDewhitelistResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/Dewhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateStopLoss(ctx context.Context, in *MsgUpdateStopLoss, opts ...grpc.CallOption) (*MsgUpdateStopLossResponse, error) {
	out := new(MsgUpdateStopLossResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/UpdateStopLoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClosePositions(ctx context.Context, in *MsgClosePositions, opts ...grpc.CallOption) (*MsgClosePositionsResponse, error) {
	out := new(MsgClosePositionsResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/ClosePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTakeProfitPrice(ctx context.Context, in *MsgUpdateTakeProfitPrice, opts ...grpc.CallOption) (*MsgUpdateTakeProfitPriceResponse, error) {
	out := new(MsgUpdateTakeProfitPriceResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/UpdateTakeProfitPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaxLeverageForPool(ctx context.Context, in *MsgUpdateMaxLeverageForPool, opts ...grpc.CallOption) (*MsgUpdateMaxLeverageForPoolResponse, error) {
	out := new(MsgUpdateMaxLeverageForPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/UpdateMaxLeverageForPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateEnabledPools(ctx context.Context, in *MsgUpdateEnabledPools, opts ...grpc.CallOption) (*MsgUpdateEnabledPoolsResponse, error) {
	out := new(MsgUpdateEnabledPoolsResponse)
	err := c.cc.Invoke(ctx, "/elys.perpetual.Msg/UpdateEnabledPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Open(context.Context, *MsgOpen) (*MsgOpenResponse, error)
	AddCollateral(context.Context, *MsgAddCollateral) (*MsgAddCollateralResponse, error)
	Close(context.Context, *MsgClose) (*MsgCloseResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	Whitelist(context.Context, *MsgWhitelist) (*MsgWhitelistResponse, error)
	Dewhitelist(context.Context, *MsgDewhitelist) (*MsgDewhitelistResponse, error)
	UpdateStopLoss(context.Context, *MsgUpdateStopLoss) (*MsgUpdateStopLossResponse, error)
	ClosePositions(context.Context, *MsgClosePositions) (*MsgClosePositionsResponse, error)
	UpdateTakeProfitPrice(context.Context, *MsgUpdateTakeProfitPrice) (*MsgUpdateTakeProfitPriceResponse, error)
	UpdateMaxLeverageForPool(context.Context, *MsgUpdateMaxLeverageForPool) (*MsgUpdateMaxLeverageForPoolResponse, error)
	UpdateEnabledPools(context.Context, *MsgUpdateEnabledPools) (*MsgUpdateEnabledPoolsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Open(ctx context.Context, req *MsgOpen) (*MsgOpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedMsgServer) AddCollateral(ctx context.Context, req *MsgAddCollateral) (*MsgAddCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCollateral not implemented")
}
func (*UnimplementedMsgServer) Close(ctx context.Context, req *MsgClose) (*MsgCloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) Whitelist(ctx context.Context, req *MsgWhitelist) (*MsgWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (*UnimplementedMsgServer) Dewhitelist(ctx context.Context, req *MsgDewhitelist) (*MsgDewhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dewhitelist not implemented")
}
func (*UnimplementedMsgServer) UpdateStopLoss(ctx context.Context, req *MsgUpdateStopLoss) (*MsgUpdateStopLossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStopLoss not implemented")
}
func (*UnimplementedMsgServer) ClosePositions(ctx context.Context, req *MsgClosePositions) (*MsgClosePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePositions not implemented")
}
func (*UnimplementedMsgServer) UpdateTakeProfitPrice(ctx context.Context, req *MsgUpdateTakeProfitPrice) (*MsgUpdateTakeProfitPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTakeProfitPrice not implemented")
}
func (*UnimplementedMsgServer) UpdateMaxLeverageForPool(ctx context.Context, req *MsgUpdateMaxLeverageForPool) (*MsgUpdateMaxLeverageForPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxLeverageForPool not implemented")
}
func (*UnimplementedMsgServer) UpdateEnabledPools(ctx context.Context, req *MsgUpdateEnabledPools) (*MsgUpdateEnabledPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnabledPools not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Open(ctx, req.(*MsgOpen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCollateral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/AddCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCollateral(ctx, req.(*MsgAddCollateral))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClose)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Close(ctx, req.(*MsgClose))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/Whitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Whitelist(ctx, req.(*MsgWhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Dewhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDewhitelist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Dewhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/Dewhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Dewhitelist(ctx, req.(*MsgDewhitelist))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateStopLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateStopLoss)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateStopLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/UpdateStopLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateStopLoss(ctx, req.(*MsgUpdateStopLoss))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClosePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClosePositions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClosePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/ClosePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClosePositions(ctx, req.(*MsgClosePositions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTakeProfitPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTakeProfitPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTakeProfitPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/UpdateTakeProfitPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTakeProfitPrice(ctx, req.(*MsgUpdateTakeProfitPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaxLeverageForPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaxLeverageForPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaxLeverageForPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/UpdateMaxLeverageForPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaxLeverageForPool(ctx, req.(*MsgUpdateMaxLeverageForPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateEnabledPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateEnabledPools)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateEnabledPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.perpetual.Msg/UpdateEnabledPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateEnabledPools(ctx, req.(*MsgUpdateEnabledPools))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.perpetual.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _Msg_Open_Handler,
		},
		{
			MethodName: "AddCollateral",
			Handler:    _Msg_AddCollateral_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Msg_Close_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _Msg_Whitelist_Handler,
		},
		{
			MethodName: "Dewhitelist",
			Handler:    _Msg_Dewhitelist_Handler,
		},
		{
			MethodName: "UpdateStopLoss",
			Handler:    _Msg_UpdateStopLoss_Handler,
		},
		{
			MethodName: "ClosePositions",
			Handler:    _Msg_ClosePositions_Handler,
		},
		{
			MethodName: "UpdateTakeProfitPrice",
			Handler:    _Msg_UpdateTakeProfitPrice_Handler,
		},
		{
			MethodName: "UpdateMaxLeverageForPool",
			Handler:    _Msg_UpdateMaxLeverageForPool_Handler,
		},
		{
			MethodName: "UpdateEnabledPools",
			Handler:    _Msg_UpdateEnabledPools_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/perpetual/tx.proto",
}

func (m *MsgOpen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.StopLossPrice.Size()
		i -= size
		if _, err := m.StopLossPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Position != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClose) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedAddress) > 0 {
		i -= len(m.WhitelistedAddress)
		copy(dAtA[i:], m.WhitelistedAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDewhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDewhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDewhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedAddress) > 0 {
		i -= len(m.WhitelistedAddress)
		copy(dAtA[i:], m.WhitelistedAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.WhitelistedAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDewhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDewhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDewhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClosePositions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePositions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePositions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TakeProfit) > 0 {
		for iNdEx := len(m.TakeProfit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TakeProfit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StopLoss) > 0 {
		for iNdEx := len(m.StopLoss) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StopLoss[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Liquidate) > 0 {
		for iNdEx := len(m.Liquidate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClosePositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStopLoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStopLoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStopLoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateStopLossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateStopLossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateStopLossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTakeProfitPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTakeProfitPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTakeProfitPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTakeProfitPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTakeProfitPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTakeProfitPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxLeverageForPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxLeverageForPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxLeverageForPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LeverageMax.Size()
		i -= size
		if _, err := m.LeverageMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxLeverageForPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxLeverageForPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxLeverageForPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnabledPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnabledPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnabledPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemovePools) > 0 {
		dAtA4 := make([]byte, len(m.RemovePools)*10)
		var j3 int
		for _, num := range m.RemovePools {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTx(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddPools) > 0 {
		dAtA6 := make([]byte, len(m.AddPools)*10)
		var j5 int
		for _, num := range m.AddPools {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTx(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EnabledPools) > 0 {
		dAtA8 := make([]byte, len(m.EnabledPools)*10)
		var j7 int
		for _, num := range m.EnabledPools {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTx(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateEnabledPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateEnabledPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateEnabledPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCollateral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCollateral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCollateral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AddCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovTx(uint64(m.Position))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StopLossPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	return n
}

func (m *MsgOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistedAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDewhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.WhitelistedAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDewhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClosePositions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Liquidate) > 0 {
		for _, e := range m.Liquidate {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.StopLoss) > 0 {
		for _, e := range m.StopLoss {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.TakeProfit) > 0 {
		for _, e := range m.TakeProfit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgClosePositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateStopLoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateStopLossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTakeProfitPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateTakeProfitPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMaxLeverageForPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.LeverageMax.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateMaxLeverageForPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateEnabledPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.EnabledPools) > 0 {
		l = 0
		for _, e := range m.EnabledPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.AddPools) > 0 {
		l = 0
		for _, e := range m.AddPools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.RemovePools) > 0 {
		l = 0
		for _, e := range m.RemovePools {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgUpdateEnabledPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCollateral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	l = m.AddCollateral.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgOpen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= Position(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopLossPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClose) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDewhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDewhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDewhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDewhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDewhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDewhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePositions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePositions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePositions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidate = append(m.Liquidate, PositionRequest{})
			if err := m.Liquidate[len(m.Liquidate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLoss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StopLoss = append(m.StopLoss, PositionRequest{})
			if err := m.StopLoss[len(m.StopLoss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakeProfit = append(m.TakeProfit, PositionRequest{})
			if err := m.TakeProfit[len(m.TakeProfit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStopLoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStopLoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStopLoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateStopLossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateStopLossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateStopLossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTakeProfitPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTakeProfitPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTakeProfitPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTakeProfitPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTakeProfitPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTakeProfitPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxLeverageForPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxLeverageForPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxLeverageForPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeverageMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxLeverageForPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxLeverageForPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxLeverageForPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnabledPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnabledPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnabledPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledPools = append(m.EnabledPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnabledPools) == 0 {
					m.EnabledPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledPools = append(m.EnabledPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledPools", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AddPools = append(m.AddPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AddPools) == 0 {
					m.AddPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AddPools = append(m.AddPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPools", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RemovePools = append(m.RemovePools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RemovePools) == 0 {
					m.RemovePools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RemovePools = append(m.RemovePools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovePools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateEnabledPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateEnabledPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateEnabledPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCollateral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCollateral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCollateral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
