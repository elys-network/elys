// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/perpetual/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	LeverageMax                         cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=leverage_max,json=leverageMax,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage_max"`
	BorrowInterestRateMax               cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=borrow_interest_rate_max,json=borrowInterestRateMax,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_rate_max"`
	BorrowInterestRateMin               cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=borrow_interest_rate_min,json=borrowInterestRateMin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_rate_min"`
	BorrowInterestRateIncrease          cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=borrow_interest_rate_increase,json=borrowInterestRateIncrease,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_rate_increase"`
	BorrowInterestRateDecrease          cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=borrow_interest_rate_decrease,json=borrowInterestRateDecrease,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_rate_decrease"`
	HealthGainFactor                    cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=health_gain_factor,json=healthGainFactor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"health_gain_factor"`
	MaxOpenPositions                    int64                       `protobuf:"varint,7,opt,name=max_open_positions,json=maxOpenPositions,proto3" json:"max_open_positions,omitempty"`
	PoolMaxLiabilitiesThreshold         cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=pool_max_liabilities_threshold,json=poolMaxLiabilitiesThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pool_max_liabilities_threshold"`
	BorrowInterestPaymentFundPercentage cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=borrow_interest_payment_fund_percentage,json=borrowInterestPaymentFundPercentage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_payment_fund_percentage"`
	SafetyFactor                        cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=safety_factor,json=safetyFactor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"safety_factor"`
	BorrowInterestPaymentEnabled        bool                        `protobuf:"varint,11,opt,name=borrow_interest_payment_enabled,json=borrowInterestPaymentEnabled,proto3" json:"borrow_interest_payment_enabled,omitempty"`
	WhitelistingEnabled                 bool                        `protobuf:"varint,12,opt,name=whitelisting_enabled,json=whitelistingEnabled,proto3" json:"whitelisting_enabled,omitempty"`
	PerpetualSwapFee                    cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=perpetual_swap_fee,json=perpetualSwapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"perpetual_swap_fee"`
	MaxLimitOrder                       int64                       `protobuf:"varint,14,opt,name=max_limit_order,json=maxLimitOrder,proto3" json:"max_limit_order,omitempty"`
	FixedFundingRate                    cosmossdk_io_math.LegacyDec `protobuf:"bytes,15,opt,name=fixed_funding_rate,json=fixedFundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fixed_funding_rate"`
	// minimum value for take_profit_price/current price for long, should be
	// greater than 1
	MinimumLongTakeProfitPriceRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,16,opt,name=minimum_long_take_profit_price_ratio,json=minimumLongTakeProfitPriceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"minimum_long_take_profit_price_ratio"`
	// max value for take_profit_price/current price for long, should be greater
	// than 1
	MaximumLongTakeProfitPriceRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,17,opt,name=maximum_long_take_profit_price_ratio,json=maximumLongTakeProfitPriceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maximum_long_take_profit_price_ratio"`
	// max value for take_profit_price/current price for short, should be less
	// than 1
	MaximumShortTakeProfitPriceRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,18,opt,name=maximum_short_take_profit_price_ratio,json=maximumShortTakeProfitPriceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"maximum_short_take_profit_price_ratio"`
	// We create this and send this value to estimate swap ONLY when opening and
	// closing the position Ideally this value is set to half. When trader open a
	// position if they receive a weight balance bonus (which is half of weight
	// breaking fee, ideally) then while closing position they are charged weight
	// breaking fee. So we just directly apply half weight breaking fee on
	// perpetual swaps Question: does each need to have separate value of this
	// because PoolParams.WeightRecoveryFeePortion can be different Also, if
	// trader has no bonus only fee, then overall we are only applying the fee
	// half time
	WeightBreakingFeeFactor    cosmossdk_io_math.LegacyDec `protobuf:"bytes,19,opt,name=weight_breaking_fee_factor,json=weightBreakingFeeFactor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_factor"`
	EnabledPools               []uint64                    `protobuf:"varint,20,rep,packed,name=enabled_pools,json=enabledPools,proto3" json:"enabled_pools,omitempty"`
	MinimumNotionalValue       cosmossdk_io_math.LegacyDec `protobuf:"bytes,21,opt,name=minimum_notional_value,json=minimumNotionalValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"minimum_notional_value"`
	LongMinimumLiabilityAmount cosmossdk_io_math.Int       `protobuf:"bytes,22,opt,name=long_minimum_liability_amount,json=longMinimumLiabilityAmount,proto3,customtype=cosmossdk.io/math.Int" json:"long_minimum_liability_amount"`
	ExitBuffer                 cosmossdk_io_math.LegacyDec `protobuf:"bytes,23,opt,name=exit_buffer,json=exitBuffer,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"exit_buffer"`
	TakerFee                   cosmossdk_io_math.LegacyDec `protobuf:"bytes,24,opt,name=taker_fee,json=takerFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"taker_fee"`
	MinimumFundingRate         cosmossdk_io_math.LegacyDec `protobuf:"bytes,25,opt,name=minimum_funding_rate,json=minimumFundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"minimum_funding_rate"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_032040a5fba82242, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxOpenPositions() int64 {
	if m != nil {
		return m.MaxOpenPositions
	}
	return 0
}

func (m *Params) GetBorrowInterestPaymentEnabled() bool {
	if m != nil {
		return m.BorrowInterestPaymentEnabled
	}
	return false
}

func (m *Params) GetWhitelistingEnabled() bool {
	if m != nil {
		return m.WhitelistingEnabled
	}
	return false
}

func (m *Params) GetMaxLimitOrder() int64 {
	if m != nil {
		return m.MaxLimitOrder
	}
	return 0
}

func (m *Params) GetEnabledPools() []uint64 {
	if m != nil {
		return m.EnabledPools
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "elys.perpetual.Params")
}

func init() { proto.RegisterFile("elys/perpetual/params.proto", fileDescriptor_032040a5fba82242) }

var fileDescriptor_032040a5fba82242 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xc7, 0x63, 0x52, 0x42, 0x32, 0x49, 0xda, 0x30, 0x4d, 0xda, 0xe9, 0x86, 0x6e, 0x56, 0x94,
	0x97, 0x48, 0xd0, 0x5d, 0x45, 0x1c, 0x38, 0x13, 0xa5, 0x8b, 0x22, 0x92, 0x76, 0xb5, 0x8d, 0x7a,
	0xe0, 0x32, 0x7a, 0xd6, 0xfb, 0xd8, 0x1e, 0xd6, 0x9e, 0xb1, 0x66, 0x66, 0xb3, 0xde, 0x1b, 0xe2,
	0xc2, 0x95, 0x0f, 0xc3, 0x87, 0xe8, 0xb1, 0xe2, 0x84, 0x38, 0x54, 0x28, 0xf9, 0x04, 0x7c, 0x03,
	0x34, 0xf6, 0x78, 0x49, 0x69, 0x02, 0x92, 0xd5, 0x9b, 0x3d, 0x8f, 0xe7, 0xf7, 0xff, 0x7b, 0x9e,
	0x17, 0x0d, 0xd9, 0xc5, 0x74, 0x6e, 0x7a, 0x39, 0xea, 0x1c, 0xed, 0x14, 0xd2, 0x5e, 0x0e, 0x1a,
	0x32, 0xd3, 0xcd, 0xb5, 0xb2, 0x8a, 0xde, 0x76, 0xc1, 0xee, 0x22, 0xd8, 0xda, 0x8e, 0x55, 0xac,
	0xca, 0x50, 0xcf, 0x3d, 0x55, 0x5f, 0xb5, 0x1e, 0x84, 0xca, 0x64, 0xca, 0xf0, 0x2a, 0x50, 0xbd,
	0x54, 0xa1, 0x8f, 0xff, 0xa2, 0x64, 0x65, 0x50, 0x12, 0xe9, 0x19, 0xd9, 0x48, 0xf1, 0x1c, 0x35,
	0xc4, 0xc8, 0x33, 0x28, 0x58, 0xd0, 0x09, 0xf6, 0xd7, 0x0e, 0x0f, 0x5e, 0xbe, 0xde, 0x5b, 0xfa,
	0xe3, 0xf5, 0xde, 0x6e, 0xb5, 0xcd, 0x8c, 0x27, 0x5d, 0xa1, 0x7a, 0x19, 0xd8, 0xa4, 0x7b, 0x82,
	0x31, 0x84, 0xf3, 0x23, 0x0c, 0x7f, 0xfb, 0xf5, 0x31, 0xf1, 0xd4, 0x23, 0x0c, 0x87, 0xeb, 0x35,
	0xe6, 0x14, 0x0a, 0xfa, 0x03, 0x61, 0x23, 0xa5, 0xb5, 0x9a, 0x71, 0x21, 0x2d, 0x6a, 0x34, 0x96,
	0x6b, 0xb0, 0x95, 0xc2, 0x7b, 0x4d, 0x15, 0x76, 0x2a, 0xe4, 0xb1, 0x27, 0x0e, 0xc1, 0xfe, 0xb7,
	0x96, 0x90, 0x6c, 0xf9, 0x5d, 0x6a, 0x09, 0x49, 0x2d, 0x79, 0x78, 0xad, 0x96, 0x90, 0xa1, 0x46,
	0x30, 0xc8, 0x6e, 0x35, 0x15, 0x6c, 0xbd, 0x2d, 0x78, 0xec, 0xa1, 0x37, 0xaa, 0x8e, 0xd1, 0xab,
	0xbe, 0xff, 0x0e, 0x55, 0x8f, 0x3c, 0x94, 0x72, 0x42, 0x13, 0x84, 0xd4, 0x26, 0x3c, 0x06, 0x21,
	0x79, 0x04, 0xa1, 0x55, 0x9a, 0xad, 0x34, 0x95, 0xda, 0xaa, 0x60, 0xdf, 0x82, 0x90, 0xfd, 0x12,
	0x45, 0xbf, 0x24, 0x34, 0x83, 0x82, 0xab, 0x1c, 0x25, 0xcf, 0x95, 0x11, 0x56, 0x28, 0x69, 0xd8,
	0x07, 0x9d, 0x60, 0x7f, 0x79, 0xb8, 0x95, 0x41, 0xf1, 0x2c, 0x47, 0x39, 0xa8, 0xd7, 0xe9, 0x39,
	0x69, 0xe7, 0x4a, 0xa5, 0xae, 0x84, 0x78, 0x2a, 0x60, 0x24, 0x52, 0x61, 0x05, 0x1a, 0x6e, 0x13,
	0x8d, 0x26, 0x51, 0xe9, 0x98, 0xad, 0x36, 0xb5, 0xb6, 0xeb, 0xc0, 0xa7, 0x50, 0x9c, 0xfc, 0x83,
	0x3d, 0xab, 0xa9, 0xf4, 0xe7, 0x80, 0x7c, 0xfe, 0xef, 0xd3, 0xcf, 0x61, 0x9e, 0xa1, 0xb4, 0x3c,
	0x9a, 0xca, 0x31, 0xcf, 0x51, 0x87, 0x28, 0x2d, 0xc4, 0xc8, 0xd6, 0x9a, 0x3a, 0x78, 0xf4, 0x66,
	0x1e, 0x06, 0x15, 0xbf, 0x3f, 0x95, 0xe3, 0xc1, 0x82, 0x4e, 0x5f, 0x90, 0x4d, 0x03, 0x11, 0xda,
	0x79, 0x9d, 0x0b, 0xd2, 0x54, 0x6e, 0xa3, 0xe2, 0xf8, 0x3c, 0x3c, 0x21, 0x7b, 0x37, 0xfd, 0x20,
	0x4a, 0x18, 0xa5, 0x38, 0x66, 0xeb, 0x9d, 0x60, 0x7f, 0x75, 0xf8, 0xd1, 0xb5, 0x2e, 0x9f, 0x54,
	0xdf, 0xd0, 0x03, 0xb2, 0x3d, 0x4b, 0x84, 0xc5, 0x54, 0x18, 0x2b, 0x64, 0xbc, 0xd8, 0xbb, 0x51,
	0xee, 0xbd, 0x7b, 0x35, 0x56, 0x6f, 0xe1, 0x84, 0x2e, 0xa6, 0x18, 0x37, 0x33, 0xc8, 0x79, 0x84,
	0xc8, 0x36, 0x1b, 0x97, 0xd8, 0x02, 0xf6, 0x7c, 0x06, 0x79, 0x1f, 0x91, 0x7e, 0x46, 0xee, 0x54,
	0xf5, 0x92, 0x09, 0xcb, 0x95, 0x1e, 0xa3, 0x66, 0xb7, 0xcb, 0xfa, 0xda, 0xcc, 0x5c, 0xba, 0x33,
	0x61, 0x9f, 0xb9, 0x45, 0x67, 0x24, 0x12, 0x05, 0x8e, 0xcb, 0x8c, 0x3a, 0xf3, 0xae, 0xbf, 0xd8,
	0x9d, 0xc6, 0x46, 0x4a, 0x58, 0xbf, 0x62, 0xb9, 0xa6, 0xa2, 0x3f, 0x06, 0xe4, 0x93, 0x4c, 0x48,
	0x91, 0x4d, 0x33, 0x9e, 0x2a, 0x19, 0x73, 0x0b, 0x13, 0x74, 0xa3, 0x39, 0x12, 0x96, 0xe7, 0x5a,
	0x84, 0xe8, 0x24, 0x85, 0x62, 0x5b, 0x4d, 0x35, 0xf7, 0x3c, 0xfe, 0x44, 0xc9, 0xf8, 0x0c, 0x26,
	0x38, 0x28, 0xd9, 0x03, 0x87, 0x1e, 0x3a, 0x72, 0x65, 0x01, 0x8a, 0xff, 0xb7, 0xf0, 0x61, 0x73,
	0x0b, 0x15, 0xfe, 0x46, 0x0b, 0x3f, 0x05, 0xe4, 0xd3, 0xda, 0x82, 0x49, 0x94, 0xb6, 0x37, 0x7a,
	0xa0, 0x4d, 0x3d, 0x74, 0x3c, 0xff, 0xb9, 0xc3, 0x5f, 0x6b, 0x42, 0x92, 0xd6, 0x0c, 0x45, 0x9c,
	0x58, 0x3e, 0xd2, 0x08, 0x13, 0x97, 0xed, 0x08, 0xb1, 0xee, 0xa9, 0xbb, 0x4d, 0x85, 0xef, 0x57,
	0xd0, 0x43, 0xcf, 0xec, 0x23, 0xfa, 0xf6, 0x7a, 0x44, 0x36, 0x7d, 0x2b, 0x70, 0x37, 0x67, 0x0c,
	0xdb, 0xee, 0x2c, 0xef, 0xdf, 0x1a, 0x6e, 0xf8, 0xc5, 0x81, 0x5b, 0xa3, 0x31, 0xb9, 0x57, 0x97,
	0x87, 0x54, 0x6e, 0xe0, 0x41, 0xca, 0xcf, 0x21, 0x9d, 0x22, 0xdb, 0x69, 0x6a, 0x68, 0xdb, 0x03,
	0x9f, 0x7a, 0xde, 0x0b, 0x87, 0xa3, 0x92, 0x3c, 0x2c, 0x93, 0xbf, 0x28, 0x46, 0x3f, 0xf3, 0xe6,
	0x1c, 0x32, 0x35, 0x95, 0x96, 0xdd, 0x2b, 0xf5, 0xbe, 0xf0, 0x7a, 0x3b, 0x6f, 0xeb, 0x1d, 0x4b,
	0x7b, 0x45, 0xe9, 0x58, 0xda, 0x61, 0xcb, 0x11, 0x4f, 0x7d, 0xf9, 0xd5, 0xbc, 0x6f, 0x4a, 0x1c,
	0x1d, 0x92, 0x75, 0x2c, 0x84, 0xe5, 0xa3, 0x69, 0x14, 0xa1, 0x66, 0xf7, 0x9b, 0xfe, 0x0d, 0x71,
	0x94, 0xc3, 0x12, 0x42, 0x9f, 0x92, 0x35, 0x57, 0x37, 0xba, 0x9c, 0x16, 0xac, 0x29, 0x71, 0xb5,
	0x64, 0xb8, 0x29, 0x11, 0x92, 0xfa, 0xac, 0xde, 0xec, 0xff, 0x07, 0x4d, 0xd1, 0xd4, 0xe3, 0xae,
	0x4c, 0x80, 0xc3, 0xef, 0x5e, 0x5e, 0xb4, 0x83, 0x57, 0x17, 0xed, 0xe0, 0xcf, 0x8b, 0x76, 0xf0,
	0xcb, 0x65, 0x7b, 0xe9, 0xd5, 0x65, 0x7b, 0xe9, 0xf7, 0xcb, 0xf6, 0xd2, 0xf7, 0x07, 0xb1, 0xb0,
	0xc9, 0x74, 0xd4, 0x0d, 0x55, 0xd6, 0x73, 0x37, 0xbb, 0xc7, 0x12, 0xed, 0x4c, 0xe9, 0x49, 0xf9,
	0xd2, 0x3b, 0xff, 0xba, 0x57, 0x5c, 0xb9, 0x08, 0xda, 0x79, 0x8e, 0x66, 0xb4, 0x52, 0xde, 0xe3,
	0xbe, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xff, 0x5a, 0x76, 0xfd, 0x27, 0x0a, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinimumFundingRate.Size()
		i -= size
		if _, err := m.MinimumFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xca
	{
		size := m.TakerFee.Size()
		i -= size
		if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	{
		size := m.ExitBuffer.Size()
		i -= size
		if _, err := m.ExitBuffer.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.LongMinimumLiabilityAmount.Size()
		i -= size
		if _, err := m.LongMinimumLiabilityAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.MinimumNotionalValue.Size()
		i -= size
		if _, err := m.MinimumNotionalValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if len(m.EnabledPools) > 0 {
		dAtA2 := make([]byte, len(m.EnabledPools)*10)
		var j1 int
		for _, num := range m.EnabledPools {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintParams(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	{
		size := m.WeightBreakingFeeFactor.Size()
		i -= size
		if _, err := m.WeightBreakingFeeFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.MaximumShortTakeProfitPriceRatio.Size()
		i -= size
		if _, err := m.MaximumShortTakeProfitPriceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	{
		size := m.MaximumLongTakeProfitPriceRatio.Size()
		i -= size
		if _, err := m.MaximumLongTakeProfitPriceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.MinimumLongTakeProfitPriceRatio.Size()
		i -= size
		if _, err := m.MinimumLongTakeProfitPriceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.FixedFundingRate.Size()
		i -= size
		if _, err := m.FixedFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.MaxLimitOrder != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxLimitOrder))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.PerpetualSwapFee.Size()
		i -= size
		if _, err := m.PerpetualSwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.WhitelistingEnabled {
		i--
		if m.WhitelistingEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.BorrowInterestPaymentEnabled {
		i--
		if m.BorrowInterestPaymentEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.SafetyFactor.Size()
		i -= size
		if _, err := m.SafetyFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.BorrowInterestPaymentFundPercentage.Size()
		i -= size
		if _, err := m.BorrowInterestPaymentFundPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.PoolMaxLiabilitiesThreshold.Size()
		i -= size
		if _, err := m.PoolMaxLiabilitiesThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.MaxOpenPositions != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxOpenPositions))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.HealthGainFactor.Size()
		i -= size
		if _, err := m.HealthGainFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BorrowInterestRateDecrease.Size()
		i -= size
		if _, err := m.BorrowInterestRateDecrease.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BorrowInterestRateIncrease.Size()
		i -= size
		if _, err := m.BorrowInterestRateIncrease.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.BorrowInterestRateMin.Size()
		i -= size
		if _, err := m.BorrowInterestRateMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BorrowInterestRateMax.Size()
		i -= size
		if _, err := m.BorrowInterestRateMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.LeverageMax.Size()
		i -= size
		if _, err := m.LeverageMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LeverageMax.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowInterestRateMax.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowInterestRateMin.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowInterestRateIncrease.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowInterestRateDecrease.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.HealthGainFactor.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxOpenPositions != 0 {
		n += 1 + sovParams(uint64(m.MaxOpenPositions))
	}
	l = m.PoolMaxLiabilitiesThreshold.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BorrowInterestPaymentFundPercentage.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.SafetyFactor.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.BorrowInterestPaymentEnabled {
		n += 2
	}
	if m.WhitelistingEnabled {
		n += 2
	}
	l = m.PerpetualSwapFee.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxLimitOrder != 0 {
		n += 1 + sovParams(uint64(m.MaxLimitOrder))
	}
	l = m.FixedFundingRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinimumLongTakeProfitPriceRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MaximumLongTakeProfitPriceRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MaximumShortTakeProfitPriceRatio.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.WeightBreakingFeeFactor.Size()
	n += 2 + l + sovParams(uint64(l))
	if len(m.EnabledPools) > 0 {
		l = 0
		for _, e := range m.EnabledPools {
			l += sovParams(uint64(e))
		}
		n += 2 + sovParams(uint64(l)) + l
	}
	l = m.MinimumNotionalValue.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.LongMinimumLiabilityAmount.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.ExitBuffer.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.TakerFee.Size()
	n += 2 + l + sovParams(uint64(l))
	l = m.MinimumFundingRate.Size()
	n += 2 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeverageMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LeverageMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestRateMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestRateMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestRateMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestRateMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestRateIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestRateIncrease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestRateDecrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestRateDecrease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthGainFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HealthGainFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOpenPositions", wireType)
			}
			m.MaxOpenPositions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOpenPositions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMaxLiabilitiesThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolMaxLiabilitiesThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestPaymentFundPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestPaymentFundPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafetyFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SafetyFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestPaymentEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BorrowInterestPaymentEnabled = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistingEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhitelistingEnabled = bool(v != 0)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualSwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpetualSwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLimitOrder", wireType)
			}
			m.MaxLimitOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLimitOrder |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FixedFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumLongTakeProfitPriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumLongTakeProfitPriceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumLongTakeProfitPriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumLongTakeProfitPriceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumShortTakeProfitPriceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaximumShortTakeProfitPriceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeeFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeeFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EnabledPools = append(m.EnabledPools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowParams
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthParams
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthParams
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EnabledPools) == 0 {
					m.EnabledPools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowParams
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EnabledPools = append(m.EnabledPools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EnabledPools", wireType)
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumNotionalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumNotionalValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongMinimumLiabilityAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LongMinimumLiabilityAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitBuffer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitBuffer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
