// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	leveragelptypes "github.com/elys-network/elys/x/leveragelp/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// LeverageLpKeeper is an autogenerated mock type for the LeverageLpKeeper type
type LeverageLpKeeper struct {
	mock.Mock
}

type LeverageLpKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *LeverageLpKeeper) EXPECT() *LeverageLpKeeper_Expecter {
	return &LeverageLpKeeper_Expecter{mock: &_m.Mock}
}

// GetPool provides a mock function with given fields: ctx, poolId
func (_m *LeverageLpKeeper) GetPool(ctx types.Context, poolId uint64) (leveragelptypes.Pool, bool) {
	ret := _m.Called(ctx, poolId)

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 leveragelptypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (leveragelptypes.Pool, bool)); ok {
		return rf(ctx, poolId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) leveragelptypes.Pool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(leveragelptypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) bool); ok {
		r1 = rf(ctx, poolId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LeverageLpKeeper_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type LeverageLpKeeper_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *LeverageLpKeeper_Expecter) GetPool(ctx interface{}, poolId interface{}) *LeverageLpKeeper_GetPool_Call {
	return &LeverageLpKeeper_GetPool_Call{Call: _e.mock.On("GetPool", ctx, poolId)}
}

func (_c *LeverageLpKeeper_GetPool_Call) Run(run func(ctx types.Context, poolId uint64)) *LeverageLpKeeper_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *LeverageLpKeeper_GetPool_Call) Return(_a0 leveragelptypes.Pool, _a1 bool) *LeverageLpKeeper_GetPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LeverageLpKeeper_GetPool_Call) RunAndReturn(run func(types.Context, uint64) (leveragelptypes.Pool, bool)) *LeverageLpKeeper_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// NewLeverageLpKeeper creates a new instance of LeverageLpKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLeverageLpKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *LeverageLpKeeper {
	mock := &LeverageLpKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
