// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	math "cosmossdk.io/math"
	ammtypes "github.com/elys-network/elys/x/amm/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AmmKeeper is an autogenerated mock type for the AmmKeeper type
type AmmKeeper struct {
	mock.Mock
}

type AmmKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AmmKeeper) EXPECT() *AmmKeeper_Expecter {
	return &AmmKeeper_Expecter{mock: &_m.Mock}
}

// AddToPoolBalance provides a mock function with given fields: ctx, pool, addShares, coins
func (_m *AmmKeeper) AddToPoolBalance(ctx types.Context, pool *ammtypes.Pool, addShares math.Int, coins types.Coins) error {
	ret := _m.Called(ctx, pool, addShares, coins)

	if len(ret) == 0 {
		panic("no return value specified for AddToPoolBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *ammtypes.Pool, math.Int, types.Coins) error); ok {
		r0 = rf(ctx, pool, addShares, coins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AmmKeeper_AddToPoolBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToPoolBalance'
type AmmKeeper_AddToPoolBalance_Call struct {
	*mock.Call
}

// AddToPoolBalance is a helper method to define mock.On call
//   - ctx types.Context
//   - pool *ammtypes.Pool
//   - addShares math.Int
//   - coins types.Coins
func (_e *AmmKeeper_Expecter) AddToPoolBalance(ctx interface{}, pool interface{}, addShares interface{}, coins interface{}) *AmmKeeper_AddToPoolBalance_Call {
	return &AmmKeeper_AddToPoolBalance_Call{Call: _e.mock.On("AddToPoolBalance", ctx, pool, addShares, coins)}
}

func (_c *AmmKeeper_AddToPoolBalance_Call) Run(run func(ctx types.Context, pool *ammtypes.Pool, addShares math.Int, coins types.Coins)) *AmmKeeper_AddToPoolBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*ammtypes.Pool), args[2].(math.Int), args[3].(types.Coins))
	})
	return _c
}

func (_c *AmmKeeper_AddToPoolBalance_Call) Return(_a0 error) *AmmKeeper_AddToPoolBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_AddToPoolBalance_Call) RunAndReturn(run func(types.Context, *ammtypes.Pool, math.Int, types.Coins) error) *AmmKeeper_AddToPoolBalance_Call {
	_c.Call.Return(run)
	return _c
}

// CalcInAmtGivenOut provides a mock function with given fields: ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee
func (_m *AmmKeeper) CalcInAmtGivenOut(ctx types.Context, poolId uint64, oracle ammtypes.OracleKeeper, snapshot *ammtypes.Pool, tokensOut types.Coins, tokenInDenom string, swapFee types.Dec) (types.Coin, types.Dec, error) {
	ret := _m.Called(ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)

	if len(ret) == 0 {
		panic("no return value specified for CalcInAmtGivenOut")
	}

	var r0 types.Coin
	var r1 types.Dec
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) (types.Coin, types.Dec, error)); ok {
		return rf(ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) types.Coin); ok {
		r0 = rf(ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) types.Dec); ok {
		r1 = rf(ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)
	} else {
		r1 = ret.Get(1).(types.Dec)
	}

	if rf, ok := ret.Get(2).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) error); ok {
		r2 = rf(ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AmmKeeper_CalcInAmtGivenOut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcInAmtGivenOut'
type AmmKeeper_CalcInAmtGivenOut_Call struct {
	*mock.Call
}

// CalcInAmtGivenOut is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - oracle ammtypes.OracleKeeper
//   - snapshot *ammtypes.Pool
//   - tokensOut types.Coins
//   - tokenInDenom string
//   - swapFee types.Dec
func (_e *AmmKeeper_Expecter) CalcInAmtGivenOut(ctx interface{}, poolId interface{}, oracle interface{}, snapshot interface{}, tokensOut interface{}, tokenInDenom interface{}, swapFee interface{}) *AmmKeeper_CalcInAmtGivenOut_Call {
	return &AmmKeeper_CalcInAmtGivenOut_Call{Call: _e.mock.On("CalcInAmtGivenOut", ctx, poolId, oracle, snapshot, tokensOut, tokenInDenom, swapFee)}
}

func (_c *AmmKeeper_CalcInAmtGivenOut_Call) Run(run func(ctx types.Context, poolId uint64, oracle ammtypes.OracleKeeper, snapshot *ammtypes.Pool, tokensOut types.Coins, tokenInDenom string, swapFee types.Dec)) *AmmKeeper_CalcInAmtGivenOut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(ammtypes.OracleKeeper), args[3].(*ammtypes.Pool), args[4].(types.Coins), args[5].(string), args[6].(types.Dec))
	})
	return _c
}

func (_c *AmmKeeper_CalcInAmtGivenOut_Call) Return(tokenIn types.Coin, slippage types.Dec, err error) *AmmKeeper_CalcInAmtGivenOut_Call {
	_c.Call.Return(tokenIn, slippage, err)
	return _c
}

func (_c *AmmKeeper_CalcInAmtGivenOut_Call) RunAndReturn(run func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) (types.Coin, types.Dec, error)) *AmmKeeper_CalcInAmtGivenOut_Call {
	_c.Call.Return(run)
	return _c
}

// CalcOutAmtGivenIn provides a mock function with given fields: ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee
func (_m *AmmKeeper) CalcOutAmtGivenIn(ctx types.Context, poolId uint64, oracle ammtypes.OracleKeeper, snapshot *ammtypes.Pool, tokensIn types.Coins, tokenOutDenom string, swapFee types.Dec) (types.Coin, types.Dec, error) {
	ret := _m.Called(ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)

	if len(ret) == 0 {
		panic("no return value specified for CalcOutAmtGivenIn")
	}

	var r0 types.Coin
	var r1 types.Dec
	var r2 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) (types.Coin, types.Dec, error)); ok {
		return rf(ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) types.Coin); ok {
		r0 = rf(ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) types.Dec); ok {
		r1 = rf(ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)
	} else {
		r1 = ret.Get(1).(types.Dec)
	}

	if rf, ok := ret.Get(2).(func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) error); ok {
		r2 = rf(ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// AmmKeeper_CalcOutAmtGivenIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalcOutAmtGivenIn'
type AmmKeeper_CalcOutAmtGivenIn_Call struct {
	*mock.Call
}

// CalcOutAmtGivenIn is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - oracle ammtypes.OracleKeeper
//   - snapshot *ammtypes.Pool
//   - tokensIn types.Coins
//   - tokenOutDenom string
//   - swapFee types.Dec
func (_e *AmmKeeper_Expecter) CalcOutAmtGivenIn(ctx interface{}, poolId interface{}, oracle interface{}, snapshot interface{}, tokensIn interface{}, tokenOutDenom interface{}, swapFee interface{}) *AmmKeeper_CalcOutAmtGivenIn_Call {
	return &AmmKeeper_CalcOutAmtGivenIn_Call{Call: _e.mock.On("CalcOutAmtGivenIn", ctx, poolId, oracle, snapshot, tokensIn, tokenOutDenom, swapFee)}
}

func (_c *AmmKeeper_CalcOutAmtGivenIn_Call) Run(run func(ctx types.Context, poolId uint64, oracle ammtypes.OracleKeeper, snapshot *ammtypes.Pool, tokensIn types.Coins, tokenOutDenom string, swapFee types.Dec)) *AmmKeeper_CalcOutAmtGivenIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(ammtypes.OracleKeeper), args[3].(*ammtypes.Pool), args[4].(types.Coins), args[5].(string), args[6].(types.Dec))
	})
	return _c
}

func (_c *AmmKeeper_CalcOutAmtGivenIn_Call) Return(_a0 types.Coin, _a1 types.Dec, _a2 error) *AmmKeeper_CalcOutAmtGivenIn_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *AmmKeeper_CalcOutAmtGivenIn_Call) RunAndReturn(run func(types.Context, uint64, ammtypes.OracleKeeper, *ammtypes.Pool, types.Coins, string, types.Dec) (types.Coin, types.Dec, error)) *AmmKeeper_CalcOutAmtGivenIn_Call {
	_c.Call.Return(run)
	return _c
}

// EstimatePrice provides a mock function with given fields: ctx, tokenInDenom, baseCurrency
func (_m *AmmKeeper) EstimatePrice(ctx types.Context, tokenInDenom string, baseCurrency string) math.LegacyDec {
	ret := _m.Called(ctx, tokenInDenom, baseCurrency)

	if len(ret) == 0 {
		panic("no return value specified for EstimatePrice")
	}

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context, string, string) math.LegacyDec); ok {
		r0 = rf(ctx, tokenInDenom, baseCurrency)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// AmmKeeper_EstimatePrice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimatePrice'
type AmmKeeper_EstimatePrice_Call struct {
	*mock.Call
}

// EstimatePrice is a helper method to define mock.On call
//   - ctx types.Context
//   - tokenInDenom string
//   - baseCurrency string
func (_e *AmmKeeper_Expecter) EstimatePrice(ctx interface{}, tokenInDenom interface{}, baseCurrency interface{}) *AmmKeeper_EstimatePrice_Call {
	return &AmmKeeper_EstimatePrice_Call{Call: _e.mock.On("EstimatePrice", ctx, tokenInDenom, baseCurrency)}
}

func (_c *AmmKeeper_EstimatePrice_Call) Run(run func(ctx types.Context, tokenInDenom string, baseCurrency string)) *AmmKeeper_EstimatePrice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AmmKeeper_EstimatePrice_Call) Return(_a0 math.LegacyDec) *AmmKeeper_EstimatePrice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_EstimatePrice_Call) RunAndReturn(run func(types.Context, string, string) math.LegacyDec) *AmmKeeper_EstimatePrice_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPool provides a mock function with given fields: _a0
func (_m *AmmKeeper) GetAllPool(_a0 types.Context) []ammtypes.Pool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPool")
	}

	var r0 []ammtypes.Pool
	if rf, ok := ret.Get(0).(func(types.Context) []ammtypes.Pool); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ammtypes.Pool)
		}
	}

	return r0
}

// AmmKeeper_GetAllPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPool'
type AmmKeeper_GetAllPool_Call struct {
	*mock.Call
}

// GetAllPool is a helper method to define mock.On call
//   - _a0 types.Context
func (_e *AmmKeeper_Expecter) GetAllPool(_a0 interface{}) *AmmKeeper_GetAllPool_Call {
	return &AmmKeeper_GetAllPool_Call{Call: _e.mock.On("GetAllPool", _a0)}
}

func (_c *AmmKeeper_GetAllPool_Call) Run(run func(_a0 types.Context)) *AmmKeeper_GetAllPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *AmmKeeper_GetAllPool_Call) Return(_a0 []ammtypes.Pool) *AmmKeeper_GetAllPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_GetAllPool_Call) RunAndReturn(run func(types.Context) []ammtypes.Pool) *AmmKeeper_GetAllPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetBestPoolWithDenoms provides a mock function with given fields: ctx, denoms, usesOracle
func (_m *AmmKeeper) GetBestPoolWithDenoms(ctx types.Context, denoms []string, usesOracle bool) (ammtypes.Pool, bool) {
	ret := _m.Called(ctx, denoms, usesOracle)

	if len(ret) == 0 {
		panic("no return value specified for GetBestPoolWithDenoms")
	}

	var r0 ammtypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, []string, bool) (ammtypes.Pool, bool)); ok {
		return rf(ctx, denoms, usesOracle)
	}
	if rf, ok := ret.Get(0).(func(types.Context, []string, bool) ammtypes.Pool); ok {
		r0 = rf(ctx, denoms, usesOracle)
	} else {
		r0 = ret.Get(0).(ammtypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, []string, bool) bool); ok {
		r1 = rf(ctx, denoms, usesOracle)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AmmKeeper_GetBestPoolWithDenoms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBestPoolWithDenoms'
type AmmKeeper_GetBestPoolWithDenoms_Call struct {
	*mock.Call
}

// GetBestPoolWithDenoms is a helper method to define mock.On call
//   - ctx types.Context
//   - denoms []string
//   - usesOracle bool
func (_e *AmmKeeper_Expecter) GetBestPoolWithDenoms(ctx interface{}, denoms interface{}, usesOracle interface{}) *AmmKeeper_GetBestPoolWithDenoms_Call {
	return &AmmKeeper_GetBestPoolWithDenoms_Call{Call: _e.mock.On("GetBestPoolWithDenoms", ctx, denoms, usesOracle)}
}

func (_c *AmmKeeper_GetBestPoolWithDenoms_Call) Run(run func(ctx types.Context, denoms []string, usesOracle bool)) *AmmKeeper_GetBestPoolWithDenoms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].([]string), args[2].(bool))
	})
	return _c
}

func (_c *AmmKeeper_GetBestPoolWithDenoms_Call) Return(pool ammtypes.Pool, found bool) *AmmKeeper_GetBestPoolWithDenoms_Call {
	_c.Call.Return(pool, found)
	return _c
}

func (_c *AmmKeeper_GetBestPoolWithDenoms_Call) RunAndReturn(run func(types.Context, []string, bool) (ammtypes.Pool, bool)) *AmmKeeper_GetBestPoolWithDenoms_Call {
	_c.Call.Return(run)
	return _c
}

// GetPool provides a mock function with given fields: _a0, _a1
func (_m *AmmKeeper) GetPool(_a0 types.Context, _a1 uint64) (ammtypes.Pool, bool) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPool")
	}

	var r0 ammtypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (ammtypes.Pool, bool)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) ammtypes.Pool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ammtypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AmmKeeper_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type AmmKeeper_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 uint64
func (_e *AmmKeeper_Expecter) GetPool(_a0 interface{}, _a1 interface{}) *AmmKeeper_GetPool_Call {
	return &AmmKeeper_GetPool_Call{Call: _e.mock.On("GetPool", _a0, _a1)}
}

func (_c *AmmKeeper_GetPool_Call) Run(run func(_a0 types.Context, _a1 uint64)) *AmmKeeper_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *AmmKeeper_GetPool_Call) Return(_a0 ammtypes.Pool, _a1 bool) *AmmKeeper_GetPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AmmKeeper_GetPool_Call) RunAndReturn(run func(types.Context, uint64) (ammtypes.Pool, bool)) *AmmKeeper_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoolSnapshotOrSet provides a mock function with given fields: ctx, pool
func (_m *AmmKeeper) GetPoolSnapshotOrSet(ctx types.Context, pool ammtypes.Pool) ammtypes.Pool {
	ret := _m.Called(ctx, pool)

	if len(ret) == 0 {
		panic("no return value specified for GetPoolSnapshotOrSet")
	}

	var r0 ammtypes.Pool
	if rf, ok := ret.Get(0).(func(types.Context, ammtypes.Pool) ammtypes.Pool); ok {
		r0 = rf(ctx, pool)
	} else {
		r0 = ret.Get(0).(ammtypes.Pool)
	}

	return r0
}

// AmmKeeper_GetPoolSnapshotOrSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolSnapshotOrSet'
type AmmKeeper_GetPoolSnapshotOrSet_Call struct {
	*mock.Call
}

// GetPoolSnapshotOrSet is a helper method to define mock.On call
//   - ctx types.Context
//   - pool ammtypes.Pool
func (_e *AmmKeeper_Expecter) GetPoolSnapshotOrSet(ctx interface{}, pool interface{}) *AmmKeeper_GetPoolSnapshotOrSet_Call {
	return &AmmKeeper_GetPoolSnapshotOrSet_Call{Call: _e.mock.On("GetPoolSnapshotOrSet", ctx, pool)}
}

func (_c *AmmKeeper_GetPoolSnapshotOrSet_Call) Run(run func(ctx types.Context, pool ammtypes.Pool)) *AmmKeeper_GetPoolSnapshotOrSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(ammtypes.Pool))
	})
	return _c
}

func (_c *AmmKeeper_GetPoolSnapshotOrSet_Call) Return(val ammtypes.Pool) *AmmKeeper_GetPoolSnapshotOrSet_Call {
	_c.Call.Return(val)
	return _c
}

func (_c *AmmKeeper_GetPoolSnapshotOrSet_Call) RunAndReturn(run func(types.Context, ammtypes.Pool) ammtypes.Pool) *AmmKeeper_GetPoolSnapshotOrSet_Call {
	_c.Call.Return(run)
	return _c
}

// IterateLiquidityPools provides a mock function with given fields: _a0, _a1
func (_m *AmmKeeper) IterateLiquidityPools(_a0 types.Context, _a1 func(ammtypes.Pool) bool) {
	_m.Called(_a0, _a1)
}

// AmmKeeper_IterateLiquidityPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateLiquidityPools'
type AmmKeeper_IterateLiquidityPools_Call struct {
	*mock.Call
}

// IterateLiquidityPools is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 func(ammtypes.Pool) bool
func (_e *AmmKeeper_Expecter) IterateLiquidityPools(_a0 interface{}, _a1 interface{}) *AmmKeeper_IterateLiquidityPools_Call {
	return &AmmKeeper_IterateLiquidityPools_Call{Call: _e.mock.On("IterateLiquidityPools", _a0, _a1)}
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) Run(run func(_a0 types.Context, _a1 func(ammtypes.Pool) bool)) *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(func(ammtypes.Pool) bool))
	})
	return _c
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) Return() *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Return()
	return _c
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) RunAndReturn(run func(types.Context, func(ammtypes.Pool) bool)) *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFromPoolBalance provides a mock function with given fields: ctx, pool, removeShares, coins
func (_m *AmmKeeper) RemoveFromPoolBalance(ctx types.Context, pool *ammtypes.Pool, removeShares math.Int, coins types.Coins) error {
	ret := _m.Called(ctx, pool, removeShares, coins)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromPoolBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *ammtypes.Pool, math.Int, types.Coins) error); ok {
		r0 = rf(ctx, pool, removeShares, coins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AmmKeeper_RemoveFromPoolBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFromPoolBalance'
type AmmKeeper_RemoveFromPoolBalance_Call struct {
	*mock.Call
}

// RemoveFromPoolBalance is a helper method to define mock.On call
//   - ctx types.Context
//   - pool *ammtypes.Pool
//   - removeShares math.Int
//   - coins types.Coins
func (_e *AmmKeeper_Expecter) RemoveFromPoolBalance(ctx interface{}, pool interface{}, removeShares interface{}, coins interface{}) *AmmKeeper_RemoveFromPoolBalance_Call {
	return &AmmKeeper_RemoveFromPoolBalance_Call{Call: _e.mock.On("RemoveFromPoolBalance", ctx, pool, removeShares, coins)}
}

func (_c *AmmKeeper_RemoveFromPoolBalance_Call) Run(run func(ctx types.Context, pool *ammtypes.Pool, removeShares math.Int, coins types.Coins)) *AmmKeeper_RemoveFromPoolBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*ammtypes.Pool), args[2].(math.Int), args[3].(types.Coins))
	})
	return _c
}

func (_c *AmmKeeper_RemoveFromPoolBalance_Call) Return(_a0 error) *AmmKeeper_RemoveFromPoolBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_RemoveFromPoolBalance_Call) RunAndReturn(run func(types.Context, *ammtypes.Pool, math.Int, types.Coins) error) *AmmKeeper_RemoveFromPoolBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewAmmKeeper creates a new instance of AmmKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAmmKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AmmKeeper {
	mock := &AmmKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
