// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AccountKeeper is an autogenerated mock type for the AccountKeeper type
type AccountKeeper struct {
	mock.Mock
}

type AccountKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountKeeper) EXPECT() *AccountKeeper_Expecter {
	return &AccountKeeper_Expecter{mock: &_m.Mock}
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) authtypes.AccountI {
	ret := _m.Called(ctx, addr)

	var r0 authtypes.AccountI
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) authtypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(authtypes.AccountI)
		}
	}

	return r0
}

// AccountKeeper_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountKeeper_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx types.Context
//   - addr types.AccAddress
func (_e *AccountKeeper_Expecter) GetAccount(ctx interface{}, addr interface{}) *AccountKeeper_GetAccount_Call {
	return &AccountKeeper_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, addr)}
}

func (_c *AccountKeeper_GetAccount_Call) Run(run func(ctx types.Context, addr types.AccAddress)) *AccountKeeper_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *AccountKeeper_GetAccount_Call) Return(_a0 authtypes.AccountI) *AccountKeeper_GetAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountKeeper_GetAccount_Call) RunAndReturn(run func(types.Context, types.AccAddress) authtypes.AccountI) *AccountKeeper_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountKeeper creates a new instance of AccountKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountKeeper {
	mock := &AccountKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
