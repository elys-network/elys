// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/vaults/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Position int32

const (
	Position_UNSPECIFIED Position = 0
	Position_LONG        Position = 1
	Position_SHORT       Position = 2
)

var Position_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "LONG",
	2: "SHORT",
}

var Position_value = map[string]int32{
	"UNSPECIFIED": 0,
	"LONG":        1,
	"SHORT":       2,
}

func (x Position) String() string {
	return proto.EnumName(Position_name, int32(x))
}

func (Position) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{0}
}

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgDeposit is the MsgDeposit request type.
type MsgDeposit struct {
	// depositor is the address of the user depositing the funds.
	Depositor string `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty"`
	// vault_id is the ID of the vault to deposit into.
	VaultId uint64 `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	// amount is the amount of tokens to deposit.
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgDeposit) Reset()         { *m = MsgDeposit{} }
func (m *MsgDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDeposit) ProtoMessage()    {}
func (*MsgDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{2}
}
func (m *MsgDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeposit.Merge(m, src)
}
func (m *MsgDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeposit proto.InternalMessageInfo

func (m *MsgDeposit) GetDepositor() string {
	if m != nil {
		return m.Depositor
	}
	return ""
}

func (m *MsgDeposit) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgDeposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgDepositResponse defines the response structure for deposit
type MsgDepositResponse struct {
	// vault_id is the ID of the vault that the deposit was made into.
	VaultId uint64                `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Shares  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
}

func (m *MsgDepositResponse) Reset()         { *m = MsgDepositResponse{} }
func (m *MsgDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositResponse) ProtoMessage()    {}
func (*MsgDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{3}
}
func (m *MsgDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositResponse.Merge(m, src)
}
func (m *MsgDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositResponse proto.InternalMessageInfo

func (m *MsgDepositResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

// MsgWithdraw is the MsgWithdraw request type.
type MsgWithdraw struct {
	// withdrawer is the address of the user withdrawing the funds.
	Withdrawer string `protobuf:"bytes,1,opt,name=withdrawer,proto3" json:"withdrawer,omitempty"`
	// vault_id is the ID of the vault to withdraw from.
	VaultId            uint64                `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Shares             cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	SwapToDepositDenom bool                  `protobuf:"varint,4,opt,name=swap_to_deposit_denom,json=swapToDepositDenom,proto3" json:"swap_to_deposit_denom,omitempty"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{4}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

func (m *MsgWithdraw) GetWithdrawer() string {
	if m != nil {
		return m.Withdrawer
	}
	return ""
}

func (m *MsgWithdraw) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgWithdraw) GetSwapToDepositDenom() bool {
	if m != nil {
		return m.SwapToDepositDenom
	}
	return false
}

// MsgWithdrawResponse defines the response structure for withdrawal
type MsgWithdrawResponse struct {
	// vault_id is the ID of the vault that the withdrawal was made from.
	VaultId uint64                                   `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{5}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

func (m *MsgWithdrawResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgWithdrawResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgAddVault is the MsgAddVault request type.
type MsgAddVault struct {
	// creator is the address of the user creating the vault.
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DepositDenom string `protobuf:"bytes,2,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	// Max amount vault can hold in USD
	MaxAmountUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=max_amount_usd,json=maxAmountUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_amount_usd"`
	// Coins allowed to trade in the vault
	AllowedCoins     []string                    `protobuf:"bytes,4,rep,name=allowed_coins,json=allowedCoins,proto3" json:"allowed_coins,omitempty"`
	RewardCoins      []string                    `protobuf:"bytes,5,rep,name=reward_coins,json=rewardCoins,proto3" json:"reward_coins,omitempty"`
	BenchmarkCoin    string                      `protobuf:"bytes,6,opt,name=benchmark_coin,json=benchmarkCoin,proto3" json:"benchmark_coin,omitempty"`
	Manager          string                      `protobuf:"bytes,7,opt,name=manager,proto3" json:"manager,omitempty"`
	ManagementFee    cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=management_fee,json=managementFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"management_fee"`
	PerformanceFee   cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=performance_fee,json=performanceFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"performance_fee"`
	ProtocolFeeShare cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=protocol_fee_share,json=protocolFeeShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"protocol_fee_share"`
	LockupPeriod     uint64                      `protobuf:"varint,11,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
	Description      string                      `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`
	AllowedActions   []string                    `protobuf:"bytes,13,rep,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
}

func (m *MsgAddVault) Reset()         { *m = MsgAddVault{} }
func (m *MsgAddVault) String() string { return proto.CompactTextString(m) }
func (*MsgAddVault) ProtoMessage()    {}
func (*MsgAddVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{6}
}
func (m *MsgAddVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddVault.Merge(m, src)
}
func (m *MsgAddVault) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddVault) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddVault.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddVault proto.InternalMessageInfo

func (m *MsgAddVault) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddVault) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *MsgAddVault) GetAllowedCoins() []string {
	if m != nil {
		return m.AllowedCoins
	}
	return nil
}

func (m *MsgAddVault) GetRewardCoins() []string {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

func (m *MsgAddVault) GetBenchmarkCoin() string {
	if m != nil {
		return m.BenchmarkCoin
	}
	return ""
}

func (m *MsgAddVault) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *MsgAddVault) GetLockupPeriod() uint64 {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func (m *MsgAddVault) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgAddVault) GetAllowedActions() []string {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

// MsgAddVaultResponse defines the response structure for adding vault
type MsgAddVaultResponse struct {
	// vault_id is the ID of the vault that was created.
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgAddVaultResponse) Reset()         { *m = MsgAddVaultResponse{} }
func (m *MsgAddVaultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddVaultResponse) ProtoMessage()    {}
func (*MsgAddVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{7}
}
func (m *MsgAddVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddVaultResponse.Merge(m, src)
}
func (m *MsgAddVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddVaultResponse proto.InternalMessageInfo

func (m *MsgAddVaultResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionResponse struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionResponse) Reset()         { *m = MsgPerformActionResponse{} }
func (m *MsgPerformActionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionResponse) ProtoMessage()    {}
func (*MsgPerformActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{8}
}
func (m *MsgPerformActionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionResponse.Merge(m, src)
}
func (m *MsgPerformActionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionResponse proto.InternalMessageInfo

func (m *MsgPerformActionResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionJoinPool struct {
	Creator        string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId        uint64                `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	PoolId         uint64                `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	MaxAmountsIn   []types.Coin          `protobuf:"bytes,4,rep,name=max_amounts_in,json=maxAmountsIn,proto3" json:"max_amounts_in"`
	ShareAmountOut cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=share_amount_out,json=shareAmountOut,proto3,customtype=cosmossdk.io/math.Int" json:"share_amount_out"`
}

func (m *MsgPerformActionJoinPool) Reset()         { *m = MsgPerformActionJoinPool{} }
func (m *MsgPerformActionJoinPool) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionJoinPool) ProtoMessage()    {}
func (*MsgPerformActionJoinPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{9}
}
func (m *MsgPerformActionJoinPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionJoinPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionJoinPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionJoinPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionJoinPool.Merge(m, src)
}
func (m *MsgPerformActionJoinPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionJoinPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionJoinPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionJoinPool proto.InternalMessageInfo

func (m *MsgPerformActionJoinPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionJoinPool) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgPerformActionJoinPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionJoinPool) GetMaxAmountsIn() []types.Coin {
	if m != nil {
		return m.MaxAmountsIn
	}
	return nil
}

type MsgPerformActionJoinPoolResponse struct {
	ShareAmountOut cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=share_amount_out,json=shareAmountOut,proto3,customtype=cosmossdk.io/math.Int" json:"share_amount_out"`
}

func (m *MsgPerformActionJoinPoolResponse) Reset()         { *m = MsgPerformActionJoinPoolResponse{} }
func (m *MsgPerformActionJoinPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionJoinPoolResponse) ProtoMessage()    {}
func (*MsgPerformActionJoinPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{10}
}
func (m *MsgPerformActionJoinPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionJoinPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionJoinPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionJoinPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionJoinPoolResponse.Merge(m, src)
}
func (m *MsgPerformActionJoinPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionJoinPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionJoinPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionJoinPoolResponse proto.InternalMessageInfo

type MsgPerformActionExitPool struct {
	Creator       string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId       uint64                `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	PoolId        uint64                `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	MinAmountsOut []types.Coin          `protobuf:"bytes,4,rep,name=min_amounts_out,json=minAmountsOut,proto3" json:"min_amounts_out"`
	ShareAmountIn cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=share_amount_in,json=shareAmountIn,proto3,customtype=cosmossdk.io/math.Int" json:"share_amount_in"`
	TokenOutDenom string                `protobuf:"bytes,6,opt,name=token_out_denom,json=tokenOutDenom,proto3" json:"token_out_denom,omitempty"`
}

func (m *MsgPerformActionExitPool) Reset()         { *m = MsgPerformActionExitPool{} }
func (m *MsgPerformActionExitPool) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionExitPool) ProtoMessage()    {}
func (*MsgPerformActionExitPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{11}
}
func (m *MsgPerformActionExitPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionExitPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionExitPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionExitPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionExitPool.Merge(m, src)
}
func (m *MsgPerformActionExitPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionExitPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionExitPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionExitPool proto.InternalMessageInfo

func (m *MsgPerformActionExitPool) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionExitPool) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgPerformActionExitPool) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionExitPool) GetMinAmountsOut() []types.Coin {
	if m != nil {
		return m.MinAmountsOut
	}
	return nil
}

func (m *MsgPerformActionExitPool) GetTokenOutDenom() string {
	if m != nil {
		return m.TokenOutDenom
	}
	return ""
}

type MsgPerformActionExitPoolResponse struct {
	TokenOut           []types.Coin                `protobuf:"bytes,1,rep,name=token_out,json=tokenOut,proto3" json:"token_out"`
	WeightBalanceRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=weight_balance_ratio,json=weightBalanceRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_balance_ratio"`
	Slippage           cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=slippage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slippage"`
}

func (m *MsgPerformActionExitPoolResponse) Reset()         { *m = MsgPerformActionExitPoolResponse{} }
func (m *MsgPerformActionExitPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionExitPoolResponse) ProtoMessage()    {}
func (*MsgPerformActionExitPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{12}
}
func (m *MsgPerformActionExitPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionExitPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionExitPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionExitPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionExitPoolResponse.Merge(m, src)
}
func (m *MsgPerformActionExitPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionExitPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionExitPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionExitPoolResponse proto.InternalMessageInfo

func (m *MsgPerformActionExitPoolResponse) GetTokenOut() []types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return nil
}

type MsgPerformActionSwapByDenom struct {
	Creator   string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId   uint64     `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	MinAmount types.Coin `protobuf:"bytes,4,opt,name=min_amount,json=minAmount,proto3" json:"min_amount"`
	MaxAmount types.Coin `protobuf:"bytes,5,opt,name=max_amount,json=maxAmount,proto3" json:"max_amount"`
	DenomIn   string     `protobuf:"bytes,6,opt,name=denom_in,json=denomIn,proto3" json:"denom_in,omitempty"`
	DenomOut  string     `protobuf:"bytes,7,opt,name=denom_out,json=denomOut,proto3" json:"denom_out,omitempty"`
}

func (m *MsgPerformActionSwapByDenom) Reset()         { *m = MsgPerformActionSwapByDenom{} }
func (m *MsgPerformActionSwapByDenom) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionSwapByDenom) ProtoMessage()    {}
func (*MsgPerformActionSwapByDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{13}
}
func (m *MsgPerformActionSwapByDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionSwapByDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionSwapByDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionSwapByDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionSwapByDenom.Merge(m, src)
}
func (m *MsgPerformActionSwapByDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionSwapByDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionSwapByDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionSwapByDenom proto.InternalMessageInfo

func (m *MsgPerformActionSwapByDenom) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionSwapByDenom) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgPerformActionSwapByDenom) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgPerformActionSwapByDenom) GetMinAmount() types.Coin {
	if m != nil {
		return m.MinAmount
	}
	return types.Coin{}
}

func (m *MsgPerformActionSwapByDenom) GetMaxAmount() types.Coin {
	if m != nil {
		return m.MaxAmount
	}
	return types.Coin{}
}

func (m *MsgPerformActionSwapByDenom) GetDenomIn() string {
	if m != nil {
		return m.DenomIn
	}
	return ""
}

func (m *MsgPerformActionSwapByDenom) GetDenomOut() string {
	if m != nil {
		return m.DenomOut
	}
	return ""
}

type MsgPerformActionSwapByDenomResponse struct {
	OutAmount types.Coin `protobuf:"bytes,1,opt,name=out_amount,json=outAmount,proto3" json:"out_amount"`
}

func (m *MsgPerformActionSwapByDenomResponse) Reset()         { *m = MsgPerformActionSwapByDenomResponse{} }
func (m *MsgPerformActionSwapByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionSwapByDenomResponse) ProtoMessage()    {}
func (*MsgPerformActionSwapByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{14}
}
func (m *MsgPerformActionSwapByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionSwapByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionSwapByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionSwapByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionSwapByDenomResponse.Merge(m, src)
}
func (m *MsgPerformActionSwapByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionSwapByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionSwapByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionSwapByDenomResponse proto.InternalMessageInfo

func (m *MsgPerformActionSwapByDenomResponse) GetOutAmount() types.Coin {
	if m != nil {
		return m.OutAmount
	}
	return types.Coin{}
}

// PerformAction for perpetuals
type MsgPerformActionOpenPerpetual struct {
	Creator         string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Position        Position                    `protobuf:"varint,2,opt,name=position,proto3,enum=elys.vaults.Position" json:"position,omitempty"`
	Leverage        cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	Collateral      types.Coin                  `protobuf:"bytes,4,opt,name=collateral,proto3" json:"collateral"`
	TakeProfitPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_profit_price"`
	StopLossPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=stop_loss_price,json=stopLossPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stop_loss_price"`
	PoolId          uint64                      `protobuf:"varint,7,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VaultId         uint64                      `protobuf:"varint,8,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionOpenPerpetual) Reset()         { *m = MsgPerformActionOpenPerpetual{} }
func (m *MsgPerformActionOpenPerpetual) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionOpenPerpetual) ProtoMessage()    {}
func (*MsgPerformActionOpenPerpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{15}
}
func (m *MsgPerformActionOpenPerpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionOpenPerpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionOpenPerpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionOpenPerpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionOpenPerpetual.Merge(m, src)
}
func (m *MsgPerformActionOpenPerpetual) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionOpenPerpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionOpenPerpetual.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionOpenPerpetual proto.InternalMessageInfo

func (m *MsgPerformActionOpenPerpetual) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionOpenPerpetual) GetPosition() Position {
	if m != nil {
		return m.Position
	}
	return Position_UNSPECIFIED
}

func (m *MsgPerformActionOpenPerpetual) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *MsgPerformActionOpenPerpetual) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionOpenPerpetual) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionOpenPerpetualResponse struct {
	PerpetualId string `protobuf:"bytes,1,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *MsgPerformActionOpenPerpetualResponse) Reset()         { *m = MsgPerformActionOpenPerpetualResponse{} }
func (m *MsgPerformActionOpenPerpetualResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionOpenPerpetualResponse) ProtoMessage()    {}
func (*MsgPerformActionOpenPerpetualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{16}
}
func (m *MsgPerformActionOpenPerpetualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionOpenPerpetualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionOpenPerpetualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionOpenPerpetualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionOpenPerpetualResponse.Merge(m, src)
}
func (m *MsgPerformActionOpenPerpetualResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionOpenPerpetualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionOpenPerpetualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionOpenPerpetualResponse proto.InternalMessageInfo

func (m *MsgPerformActionOpenPerpetualResponse) GetPerpetualId() string {
	if m != nil {
		return m.PerpetualId
	}
	return ""
}

type MsgPerformActionClosePerpetual struct {
	Creator     string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PerpetualId uint64                `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
	Amount      cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	PoolId      uint64                `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VaultId     uint64                `protobuf:"varint,5,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionClosePerpetual) Reset()         { *m = MsgPerformActionClosePerpetual{} }
func (m *MsgPerformActionClosePerpetual) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionClosePerpetual) ProtoMessage()    {}
func (*MsgPerformActionClosePerpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{17}
}
func (m *MsgPerformActionClosePerpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionClosePerpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionClosePerpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionClosePerpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionClosePerpetual.Merge(m, src)
}
func (m *MsgPerformActionClosePerpetual) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionClosePerpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionClosePerpetual.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionClosePerpetual proto.InternalMessageInfo

func (m *MsgPerformActionClosePerpetual) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionClosePerpetual) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

func (m *MsgPerformActionClosePerpetual) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionClosePerpetual) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionClosePerpetualResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgPerformActionClosePerpetualResponse) Reset() {
	*m = MsgPerformActionClosePerpetualResponse{}
}
func (m *MsgPerformActionClosePerpetualResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionClosePerpetualResponse) ProtoMessage()    {}
func (*MsgPerformActionClosePerpetualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{18}
}
func (m *MsgPerformActionClosePerpetualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionClosePerpetualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionClosePerpetualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionClosePerpetualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionClosePerpetualResponse.Merge(m, src)
}
func (m *MsgPerformActionClosePerpetualResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionClosePerpetualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionClosePerpetualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionClosePerpetualResponse proto.InternalMessageInfo

type MsgPerformActionAddCollateral struct {
	Creator       string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PerpetualId   uint64     `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
	AddCollateral types.Coin `protobuf:"bytes,3,opt,name=add_collateral,json=addCollateral,proto3" json:"add_collateral"`
	PoolId        uint64     `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VaultId       uint64     `protobuf:"varint,5,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionAddCollateral) Reset()         { *m = MsgPerformActionAddCollateral{} }
func (m *MsgPerformActionAddCollateral) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionAddCollateral) ProtoMessage()    {}
func (*MsgPerformActionAddCollateral) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{19}
}
func (m *MsgPerformActionAddCollateral) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionAddCollateral) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionAddCollateral.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionAddCollateral) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionAddCollateral.Merge(m, src)
}
func (m *MsgPerformActionAddCollateral) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionAddCollateral) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionAddCollateral.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionAddCollateral proto.InternalMessageInfo

func (m *MsgPerformActionAddCollateral) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionAddCollateral) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

func (m *MsgPerformActionAddCollateral) GetAddCollateral() types.Coin {
	if m != nil {
		return m.AddCollateral
	}
	return types.Coin{}
}

func (m *MsgPerformActionAddCollateral) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionAddCollateral) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionAddCollateralResponse struct {
	Amount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgPerformActionAddCollateralResponse) Reset()         { *m = MsgPerformActionAddCollateralResponse{} }
func (m *MsgPerformActionAddCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionAddCollateralResponse) ProtoMessage()    {}
func (*MsgPerformActionAddCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{20}
}
func (m *MsgPerformActionAddCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionAddCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionAddCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionAddCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionAddCollateralResponse.Merge(m, src)
}
func (m *MsgPerformActionAddCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionAddCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionAddCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionAddCollateralResponse proto.InternalMessageInfo

type MsgPerformActionUpdateStopLoss struct {
	Creator     string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PerpetualId uint64                      `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
	Price       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	PoolId      uint64                      `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VaultId     uint64                      `protobuf:"varint,5,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionUpdateStopLoss) Reset()         { *m = MsgPerformActionUpdateStopLoss{} }
func (m *MsgPerformActionUpdateStopLoss) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionUpdateStopLoss) ProtoMessage()    {}
func (*MsgPerformActionUpdateStopLoss) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{21}
}
func (m *MsgPerformActionUpdateStopLoss) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionUpdateStopLoss) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionUpdateStopLoss.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionUpdateStopLoss) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionUpdateStopLoss.Merge(m, src)
}
func (m *MsgPerformActionUpdateStopLoss) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionUpdateStopLoss) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionUpdateStopLoss.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionUpdateStopLoss proto.InternalMessageInfo

func (m *MsgPerformActionUpdateStopLoss) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionUpdateStopLoss) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

func (m *MsgPerformActionUpdateStopLoss) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionUpdateStopLoss) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionUpdateStopLossResponse struct {
}

func (m *MsgPerformActionUpdateStopLossResponse) Reset() {
	*m = MsgPerformActionUpdateStopLossResponse{}
}
func (m *MsgPerformActionUpdateStopLossResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionUpdateStopLossResponse) ProtoMessage()    {}
func (*MsgPerformActionUpdateStopLossResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{22}
}
func (m *MsgPerformActionUpdateStopLossResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionUpdateStopLossResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionUpdateStopLossResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionUpdateStopLossResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionUpdateStopLossResponse.Merge(m, src)
}
func (m *MsgPerformActionUpdateStopLossResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionUpdateStopLossResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionUpdateStopLossResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionUpdateStopLossResponse proto.InternalMessageInfo

type MsgPerformActionUpdateTakeProfitPrice struct {
	Creator     string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PerpetualId uint64                      `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
	Price       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"price"`
	PoolId      uint64                      `protobuf:"varint,4,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	VaultId     uint64                      `protobuf:"varint,5,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgPerformActionUpdateTakeProfitPrice) Reset()         { *m = MsgPerformActionUpdateTakeProfitPrice{} }
func (m *MsgPerformActionUpdateTakeProfitPrice) String() string { return proto.CompactTextString(m) }
func (*MsgPerformActionUpdateTakeProfitPrice) ProtoMessage()    {}
func (*MsgPerformActionUpdateTakeProfitPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{23}
}
func (m *MsgPerformActionUpdateTakeProfitPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionUpdateTakeProfitPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionUpdateTakeProfitPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionUpdateTakeProfitPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionUpdateTakeProfitPrice.Merge(m, src)
}
func (m *MsgPerformActionUpdateTakeProfitPrice) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionUpdateTakeProfitPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionUpdateTakeProfitPrice.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionUpdateTakeProfitPrice proto.InternalMessageInfo

func (m *MsgPerformActionUpdateTakeProfitPrice) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgPerformActionUpdateTakeProfitPrice) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

func (m *MsgPerformActionUpdateTakeProfitPrice) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgPerformActionUpdateTakeProfitPrice) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgPerformActionUpdateTakeProfitPriceResponse struct {
}

func (m *MsgPerformActionUpdateTakeProfitPriceResponse) Reset() {
	*m = MsgPerformActionUpdateTakeProfitPriceResponse{}
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgPerformActionUpdateTakeProfitPriceResponse) ProtoMessage() {}
func (*MsgPerformActionUpdateTakeProfitPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{24}
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPerformActionUpdateTakeProfitPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPerformActionUpdateTakeProfitPriceResponse.Merge(m, src)
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPerformActionUpdateTakeProfitPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPerformActionUpdateTakeProfitPriceResponse proto.InternalMessageInfo

type MsgUpdateVaultCoins struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId      uint64   `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	AllowedCoins []string `protobuf:"bytes,3,rep,name=allowed_coins,json=allowedCoins,proto3" json:"allowed_coins,omitempty"`
	RewardCoins  []string `protobuf:"bytes,4,rep,name=reward_coins,json=rewardCoins,proto3" json:"reward_coins,omitempty"`
}

func (m *MsgUpdateVaultCoins) Reset()         { *m = MsgUpdateVaultCoins{} }
func (m *MsgUpdateVaultCoins) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultCoins) ProtoMessage()    {}
func (*MsgUpdateVaultCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{25}
}
func (m *MsgUpdateVaultCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultCoins.Merge(m, src)
}
func (m *MsgUpdateVaultCoins) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultCoins.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultCoins proto.InternalMessageInfo

func (m *MsgUpdateVaultCoins) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVaultCoins) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgUpdateVaultCoins) GetAllowedCoins() []string {
	if m != nil {
		return m.AllowedCoins
	}
	return nil
}

func (m *MsgUpdateVaultCoins) GetRewardCoins() []string {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

type MsgUpdateVaultCoinsResponse struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgUpdateVaultCoinsResponse) Reset()         { *m = MsgUpdateVaultCoinsResponse{} }
func (m *MsgUpdateVaultCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultCoinsResponse) ProtoMessage()    {}
func (*MsgUpdateVaultCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{26}
}
func (m *MsgUpdateVaultCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultCoinsResponse.Merge(m, src)
}
func (m *MsgUpdateVaultCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultCoinsResponse proto.InternalMessageInfo

func (m *MsgUpdateVaultCoinsResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgUpdateVaultFees struct {
	Creator          string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId          uint64                      `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	ManagementFee    cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=management_fee,json=managementFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"management_fee"`
	PerformanceFee   cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=performance_fee,json=performanceFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"performance_fee"`
	ProtocolFeeShare cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=protocol_fee_share,json=protocolFeeShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"protocol_fee_share"`
}

func (m *MsgUpdateVaultFees) Reset()         { *m = MsgUpdateVaultFees{} }
func (m *MsgUpdateVaultFees) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultFees) ProtoMessage()    {}
func (*MsgUpdateVaultFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{27}
}
func (m *MsgUpdateVaultFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultFees.Merge(m, src)
}
func (m *MsgUpdateVaultFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultFees proto.InternalMessageInfo

func (m *MsgUpdateVaultFees) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVaultFees) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgUpdateVaultFeesResponse struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgUpdateVaultFeesResponse) Reset()         { *m = MsgUpdateVaultFeesResponse{} }
func (m *MsgUpdateVaultFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultFeesResponse) ProtoMessage()    {}
func (*MsgUpdateVaultFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{28}
}
func (m *MsgUpdateVaultFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultFeesResponse.Merge(m, src)
}
func (m *MsgUpdateVaultFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultFeesResponse proto.InternalMessageInfo

func (m *MsgUpdateVaultFeesResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgUpdateVaultLockupPeriod struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId      uint64 `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	LockupPeriod uint64 `protobuf:"varint,3,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
}

func (m *MsgUpdateVaultLockupPeriod) Reset()         { *m = MsgUpdateVaultLockupPeriod{} }
func (m *MsgUpdateVaultLockupPeriod) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultLockupPeriod) ProtoMessage()    {}
func (*MsgUpdateVaultLockupPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{29}
}
func (m *MsgUpdateVaultLockupPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultLockupPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultLockupPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultLockupPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultLockupPeriod.Merge(m, src)
}
func (m *MsgUpdateVaultLockupPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultLockupPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultLockupPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultLockupPeriod proto.InternalMessageInfo

func (m *MsgUpdateVaultLockupPeriod) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVaultLockupPeriod) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *MsgUpdateVaultLockupPeriod) GetLockupPeriod() uint64 {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

type MsgUpdateVaultLockupPeriodResponse struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgUpdateVaultLockupPeriodResponse) Reset()         { *m = MsgUpdateVaultLockupPeriodResponse{} }
func (m *MsgUpdateVaultLockupPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultLockupPeriodResponse) ProtoMessage()    {}
func (*MsgUpdateVaultLockupPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{30}
}
func (m *MsgUpdateVaultLockupPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultLockupPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultLockupPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultLockupPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultLockupPeriodResponse.Merge(m, src)
}
func (m *MsgUpdateVaultLockupPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultLockupPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultLockupPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultLockupPeriodResponse proto.InternalMessageInfo

func (m *MsgUpdateVaultLockupPeriodResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgUpdateVaultMaxAmountUsd struct {
	Creator      string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	VaultId      uint64                      `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	MaxAmountUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=max_amount_usd,json=maxAmountUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_amount_usd"`
}

func (m *MsgUpdateVaultMaxAmountUsd) Reset()         { *m = MsgUpdateVaultMaxAmountUsd{} }
func (m *MsgUpdateVaultMaxAmountUsd) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultMaxAmountUsd) ProtoMessage()    {}
func (*MsgUpdateVaultMaxAmountUsd) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{31}
}
func (m *MsgUpdateVaultMaxAmountUsd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultMaxAmountUsd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultMaxAmountUsd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultMaxAmountUsd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultMaxAmountUsd.Merge(m, src)
}
func (m *MsgUpdateVaultMaxAmountUsd) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultMaxAmountUsd) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultMaxAmountUsd.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultMaxAmountUsd proto.InternalMessageInfo

func (m *MsgUpdateVaultMaxAmountUsd) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateVaultMaxAmountUsd) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgUpdateVaultMaxAmountUsdResponse struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *MsgUpdateVaultMaxAmountUsdResponse) Reset()         { *m = MsgUpdateVaultMaxAmountUsdResponse{} }
func (m *MsgUpdateVaultMaxAmountUsdResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateVaultMaxAmountUsdResponse) ProtoMessage()    {}
func (*MsgUpdateVaultMaxAmountUsdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{32}
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateVaultMaxAmountUsdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateVaultMaxAmountUsdResponse.Merge(m, src)
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateVaultMaxAmountUsdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateVaultMaxAmountUsdResponse proto.InternalMessageInfo

func (m *MsgUpdateVaultMaxAmountUsdResponse) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type MsgClaimRewards struct {
	Sender   string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	VaultIds []uint64 `protobuf:"varint,2,rep,packed,name=vault_ids,json=vaultIds,proto3" json:"vault_ids,omitempty"`
}

func (m *MsgClaimRewards) Reset()         { *m = MsgClaimRewards{} }
func (m *MsgClaimRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewards) ProtoMessage()    {}
func (*MsgClaimRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{33}
}
func (m *MsgClaimRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewards.Merge(m, src)
}
func (m *MsgClaimRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewards proto.InternalMessageInfo

func (m *MsgClaimRewards) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgClaimRewards) GetVaultIds() []uint64 {
	if m != nil {
		return m.VaultIds
	}
	return nil
}

type MsgClaimRewardsResponse struct {
}

func (m *MsgClaimRewardsResponse) Reset()         { *m = MsgClaimRewardsResponse{} }
func (m *MsgClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_271129f3f43ca028, []int{34}
}
func (m *MsgClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("elys.vaults.Position", Position_name, Position_value)
	proto.RegisterType((*MsgUpdateParams)(nil), "elys.vaults.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "elys.vaults.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgDeposit)(nil), "elys.vaults.MsgDeposit")
	proto.RegisterType((*MsgDepositResponse)(nil), "elys.vaults.MsgDepositResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "elys.vaults.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "elys.vaults.MsgWithdrawResponse")
	proto.RegisterType((*MsgAddVault)(nil), "elys.vaults.MsgAddVault")
	proto.RegisterType((*MsgAddVaultResponse)(nil), "elys.vaults.MsgAddVaultResponse")
	proto.RegisterType((*MsgPerformActionResponse)(nil), "elys.vaults.MsgPerformActionResponse")
	proto.RegisterType((*MsgPerformActionJoinPool)(nil), "elys.vaults.MsgPerformActionJoinPool")
	proto.RegisterType((*MsgPerformActionJoinPoolResponse)(nil), "elys.vaults.MsgPerformActionJoinPoolResponse")
	proto.RegisterType((*MsgPerformActionExitPool)(nil), "elys.vaults.MsgPerformActionExitPool")
	proto.RegisterType((*MsgPerformActionExitPoolResponse)(nil), "elys.vaults.MsgPerformActionExitPoolResponse")
	proto.RegisterType((*MsgPerformActionSwapByDenom)(nil), "elys.vaults.MsgPerformActionSwapByDenom")
	proto.RegisterType((*MsgPerformActionSwapByDenomResponse)(nil), "elys.vaults.MsgPerformActionSwapByDenomResponse")
	proto.RegisterType((*MsgPerformActionOpenPerpetual)(nil), "elys.vaults.MsgPerformActionOpenPerpetual")
	proto.RegisterType((*MsgPerformActionOpenPerpetualResponse)(nil), "elys.vaults.MsgPerformActionOpenPerpetualResponse")
	proto.RegisterType((*MsgPerformActionClosePerpetual)(nil), "elys.vaults.MsgPerformActionClosePerpetual")
	proto.RegisterType((*MsgPerformActionClosePerpetualResponse)(nil), "elys.vaults.MsgPerformActionClosePerpetualResponse")
	proto.RegisterType((*MsgPerformActionAddCollateral)(nil), "elys.vaults.MsgPerformActionAddCollateral")
	proto.RegisterType((*MsgPerformActionAddCollateralResponse)(nil), "elys.vaults.MsgPerformActionAddCollateralResponse")
	proto.RegisterType((*MsgPerformActionUpdateStopLoss)(nil), "elys.vaults.MsgPerformActionUpdateStopLoss")
	proto.RegisterType((*MsgPerformActionUpdateStopLossResponse)(nil), "elys.vaults.MsgPerformActionUpdateStopLossResponse")
	proto.RegisterType((*MsgPerformActionUpdateTakeProfitPrice)(nil), "elys.vaults.MsgPerformActionUpdateTakeProfitPrice")
	proto.RegisterType((*MsgPerformActionUpdateTakeProfitPriceResponse)(nil), "elys.vaults.MsgPerformActionUpdateTakeProfitPriceResponse")
	proto.RegisterType((*MsgUpdateVaultCoins)(nil), "elys.vaults.MsgUpdateVaultCoins")
	proto.RegisterType((*MsgUpdateVaultCoinsResponse)(nil), "elys.vaults.MsgUpdateVaultCoinsResponse")
	proto.RegisterType((*MsgUpdateVaultFees)(nil), "elys.vaults.MsgUpdateVaultFees")
	proto.RegisterType((*MsgUpdateVaultFeesResponse)(nil), "elys.vaults.MsgUpdateVaultFeesResponse")
	proto.RegisterType((*MsgUpdateVaultLockupPeriod)(nil), "elys.vaults.MsgUpdateVaultLockupPeriod")
	proto.RegisterType((*MsgUpdateVaultLockupPeriodResponse)(nil), "elys.vaults.MsgUpdateVaultLockupPeriodResponse")
	proto.RegisterType((*MsgUpdateVaultMaxAmountUsd)(nil), "elys.vaults.MsgUpdateVaultMaxAmountUsd")
	proto.RegisterType((*MsgUpdateVaultMaxAmountUsdResponse)(nil), "elys.vaults.MsgUpdateVaultMaxAmountUsdResponse")
	proto.RegisterType((*MsgClaimRewards)(nil), "elys.vaults.MsgClaimRewards")
	proto.RegisterType((*MsgClaimRewardsResponse)(nil), "elys.vaults.MsgClaimRewardsResponse")
}

func init() { proto.RegisterFile("elys/vaults/tx.proto", fileDescriptor_271129f3f43ca028) }

var fileDescriptor_271129f3f43ca028 = []byte{
	// 2132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5a, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0x4f, 0x7b, 0xc6, 0xf6, 0xf8, 0xf9, 0x63, 0x9c, 0xda, 0x04, 0xb7, 0x27, 0x60, 0x4f, 0x3a,
	0x1f, 0x6b, 0x1c, 0x3c, 0x63, 0x3b, 0xda, 0xec, 0x6a, 0x04, 0xbb, 0xf2, 0x47, 0x9c, 0x9d, 0x55,
	0xbc, 0xb6, 0xc6, 0x09, 0x0b, 0x8b, 0x60, 0xd4, 0x9e, 0xae, 0x8c, 0x5b, 0xee, 0xee, 0x6a, 0x75,
	0xf5, 0xf8, 0x43, 0x42, 0x02, 0xed, 0x09, 0x71, 0x40, 0x08, 0x2d, 0x27, 0xee, 0x68, 0x41, 0x7b,
	0xc8, 0x61, 0x4f, 0x20, 0x71, 0xe2, 0xb0, 0xc7, 0x55, 0x4e, 0xc0, 0x61, 0x41, 0xc9, 0x21, 0xff,
	0x02, 0xe2, 0x84, 0xaa, 0xba, 0xba, 0xa7, 0x3f, 0x66, 0xda, 0x9d, 0x89, 0xcd, 0x81, 0x4b, 0x32,
	0x5d, 0xef, 0xd5, 0x7b, 0xf5, 0x7e, 0xef, 0xa3, 0xaa, 0x5e, 0x19, 0xae, 0x60, 0xe3, 0x94, 0x56,
	0x8f, 0xd4, 0x8e, 0xe1, 0xd2, 0xaa, 0x7b, 0x52, 0xb1, 0x1d, 0xe2, 0x12, 0x34, 0xce, 0x46, 0x2b,
	0xde, 0x68, 0xe9, 0xb2, 0x6a, 0xea, 0x16, 0xa9, 0xf2, 0x7f, 0x3d, 0x7a, 0x69, 0xa6, 0x45, 0xa8,
	0x49, 0x68, 0xd5, 0xa4, 0xed, 0xea, 0xd1, 0x0a, 0xfb, 0x4f, 0x10, 0x66, 0x3d, 0x42, 0x93, 0x7f,
	0x55, 0xbd, 0x0f, 0x41, 0xba, 0xd2, 0x26, 0x6d, 0xe2, 0x8d, 0xb3, 0x5f, 0x62, 0x54, 0x0e, 0xeb,
	0xb7, 0x55, 0x47, 0x35, 0x7d, 0xfe, 0x39, 0xa1, 0x63, 0x5f, 0xa5, 0xb8, 0x7a, 0xb4, 0xb2, 0x8f,
	0x5d, 0x75, 0xa5, 0xda, 0x22, 0xba, 0xe5, 0xd1, 0x95, 0xcf, 0x25, 0x28, 0x6e, 0xd3, 0xf6, 0x63,
	0x5b, 0x53, 0x5d, 0xbc, 0xcb, 0x67, 0xa2, 0x7b, 0x30, 0xa6, 0x76, 0xdc, 0x03, 0xe2, 0xe8, 0xee,
	0xa9, 0x2c, 0x95, 0xa5, 0x85, 0xb1, 0x75, 0xf9, 0xd9, 0x17, 0x4b, 0x57, 0xc4, 0x42, 0xd6, 0x34,
	0xcd, 0xc1, 0x94, 0xee, 0xb9, 0x8e, 0x6e, 0xb5, 0x1b, 0x5d, 0x56, 0x74, 0x0f, 0x46, 0x3c, 0xdd,
	0xf2, 0x50, 0x59, 0x5a, 0x18, 0x5f, 0x7d, 0xa3, 0x12, 0x02, 0xa0, 0xe2, 0x09, 0x5f, 0x1f, 0xfb,
	0xf2, 0xeb, 0xf9, 0x4b, 0x9f, 0xbd, 0x7c, 0xba, 0x28, 0x35, 0x04, 0x77, 0xed, 0xdb, 0x9f, 0xbc,
	0x7c, 0xba, 0xd8, 0x95, 0xf3, 0xcb, 0x97, 0x4f, 0x17, 0xbf, 0x21, 0x6c, 0x89, 0x2d, 0x4d, 0x99,
	0x85, 0x99, 0xd8, 0x50, 0x03, 0x53, 0x9b, 0x58, 0x14, 0x2b, 0x7f, 0x91, 0x00, 0xb6, 0x69, 0x7b,
	0x13, 0xdb, 0x84, 0xea, 0x2e, 0x33, 0x42, 0xf3, 0x7e, 0x12, 0xe7, 0x6c, 0x23, 0x02, 0x56, 0x34,
	0x0b, 0x05, 0xae, 0xbb, 0xa9, 0x6b, 0xdc, 0x8c, 0x7c, 0x63, 0x94, 0x7f, 0xd7, 0x35, 0xf4, 0x36,
	0x8c, 0xa8, 0x26, 0xe9, 0x58, 0xae, 0x9c, 0xe3, 0xf6, 0xcd, 0x56, 0x84, 0x30, 0x06, 0x6e, 0x45,
	0x80, 0x5b, 0xd9, 0x20, 0xba, 0xb5, 0x9e, 0x67, 0x56, 0x36, 0x04, 0x7b, 0xed, 0x26, 0x37, 0x30,
	0xd0, 0xc1, 0x0c, 0xbc, 0xdc, 0x35, 0x50, 0xac, 0x58, 0x71, 0x01, 0x75, 0xbf, 0x7c, 0xb3, 0x22,
	0xeb, 0x91, 0xa2, 0xeb, 0xd9, 0x80, 0x11, 0x7a, 0xa0, 0x3a, 0xd8, 0xc3, 0x7b, 0x6c, 0xfd, 0x0e,
	0x53, 0xfa, 0x8f, 0xaf, 0xe7, 0xaf, 0x7a, 0xcb, 0xa2, 0xda, 0x61, 0x45, 0x27, 0x55, 0x53, 0x75,
	0x0f, 0x2a, 0x75, 0xcb, 0x7d, 0xf6, 0xc5, 0x12, 0x88, 0xf5, 0xd6, 0x2d, 0xb7, 0x21, 0xa6, 0x2a,
	0x9f, 0x0c, 0xc1, 0xf8, 0x36, 0x6d, 0x7f, 0xa4, 0xbb, 0x07, 0x9a, 0xa3, 0x1e, 0xa3, 0x77, 0x00,
	0x8e, 0xc5, 0x6f, 0x7c, 0x36, 0x70, 0x21, 0xde, 0x34, 0xe4, 0xba, 0x2b, 0xcd, 0x0d, 0xbc, 0x52,
	0xb4, 0x02, 0x57, 0xe9, 0xb1, 0x6a, 0x37, 0x5d, 0xd2, 0x14, 0x50, 0x36, 0x35, 0x6c, 0x11, 0x53,
	0xce, 0x97, 0xa5, 0x85, 0x42, 0x03, 0x31, 0xe2, 0x23, 0x22, 0xf0, 0xdb, 0x64, 0x94, 0xda, 0x6d,
	0x06, 0x7c, 0x68, 0x8d, 0x0c, 0x79, 0xd4, 0x45, 0xde, 0x37, 0x5a, 0xf9, 0xad, 0x04, 0x6f, 0x84,
	0xbe, 0xb3, 0x80, 0xdf, 0x0a, 0x82, 0x61, 0xa8, 0x9c, 0x4b, 0x0f, 0x86, 0x65, 0x66, 0xed, 0x1f,
	0xff, 0x39, 0xbf, 0xd0, 0xd6, 0xdd, 0x83, 0xce, 0x7e, 0xa5, 0x45, 0x4c, 0x91, 0xd4, 0xe2, 0xbf,
	0x25, 0xaa, 0x1d, 0x56, 0xdd, 0x53, 0x1b, 0x53, 0x3e, 0x81, 0xfa, 0x81, 0xa3, 0xfc, 0x6a, 0x84,
	0x3b, 0x67, 0x4d, 0xd3, 0xbe, 0xcf, 0xd4, 0xa2, 0x55, 0x18, 0x6d, 0x39, 0x58, 0xcd, 0x12, 0xd2,
	0x3e, 0x23, 0xba, 0x01, 0x93, 0x51, 0xb8, 0x78, 0xb0, 0x34, 0x26, 0xb4, 0x10, 0x50, 0xe8, 0x23,
	0x98, 0x32, 0xd5, 0x93, 0xa6, 0xa7, 0xb6, 0xd9, 0xa1, 0x9a, 0x70, 0xd4, 0x8a, 0x70, 0xd4, 0xb5,
	0xa4, 0xa3, 0x1e, 0xe2, 0xb6, 0xda, 0x3a, 0xdd, 0xc4, 0xad, 0x90, 0xbb, 0x36, 0x71, 0xab, 0x31,
	0x61, 0xaa, 0x27, 0x6b, 0x5c, 0xce, 0x63, 0xaa, 0x31, 0xed, 0xaa, 0x61, 0x90, 0x63, 0xac, 0x35,
	0x59, 0xd5, 0xa1, 0x72, 0xbe, 0x9c, 0x63, 0xda, 0xc5, 0x20, 0x37, 0x17, 0x5d, 0x87, 0x09, 0x07,
	0x1f, 0xab, 0x8e, 0xcf, 0x33, 0xcc, 0x79, 0xc6, 0xbd, 0x31, 0x8f, 0xe5, 0x16, 0x4c, 0xed, 0x63,
	0xab, 0x75, 0x60, 0xaa, 0xce, 0x21, 0xe7, 0x92, 0x47, 0xb8, 0x19, 0x93, 0xc1, 0x28, 0xe3, 0x63,
	0x00, 0x99, 0xaa, 0xa5, 0xb6, 0xb1, 0x23, 0x8f, 0x9e, 0x05, 0x90, 0x60, 0x44, 0x3f, 0x60, 0xb6,
	0xb3, 0x9f, 0x26, 0xb6, 0xdc, 0xe6, 0x13, 0x8c, 0xe5, 0xc2, 0xa0, 0xb6, 0x4f, 0x76, 0x05, 0x6d,
	0x61, 0x8c, 0x3e, 0x86, 0xa2, 0x8d, 0x9d, 0x27, 0xc4, 0x31, 0x55, 0xab, 0x85, 0xb9, 0xe8, 0xb1,
	0x41, 0x45, 0x4f, 0x85, 0x24, 0x31, 0xd9, 0x4d, 0x40, 0xbc, 0x82, 0xb7, 0x88, 0xc1, 0x04, 0x37,
	0x79, 0x92, 0xc8, 0x30, 0xa8, 0xf8, 0x69, 0x5f, 0xd8, 0x16, 0xc6, 0x7b, 0x4c, 0x14, 0xf3, 0x9c,
	0x41, 0x5a, 0x87, 0x1d, 0xbb, 0x69, 0x63, 0x47, 0x27, 0x9a, 0x3c, 0xce, 0x13, 0x60, 0xc2, 0x1b,
	0xdc, 0xe5, 0x63, 0xa8, 0x0c, 0xe3, 0x1a, 0xa6, 0x2d, 0x47, 0xb7, 0x5d, 0x9d, 0x58, 0xf2, 0x04,
	0xf7, 0x49, 0x78, 0x08, 0xbd, 0x09, 0x45, 0x3f, 0x00, 0xd4, 0x16, 0x1b, 0xa1, 0xf2, 0x24, 0x77,
	0xef, 0x94, 0x18, 0x5e, 0xf3, 0x46, 0x6b, 0x37, 0x58, 0xae, 0xfa, 0x51, 0x1b, 0x4b, 0x54, 0x3f,
	0x01, 0x94, 0x65, 0x9e, 0xa7, 0xfe, 0x67, 0x86, 0x3c, 0x55, 0xde, 0x02, 0x79, 0x9b, 0xb6, 0x77,
	0x3d, 0xf0, 0x3c, 0x5d, 0x59, 0xa6, 0x3d, 0x1b, 0x4a, 0xce, 0xfb, 0x80, 0xe8, 0xd6, 0x2e, 0x21,
	0xc6, 0x40, 0x69, 0x98, 0x52, 0x1d, 0x67, 0x60, 0xd4, 0x26, 0xc4, 0x60, 0x94, 0x1c, 0xa7, 0x8c,
	0xb0, 0xcf, 0xba, 0x86, 0xee, 0x87, 0xb3, 0x92, 0x36, 0x75, 0x8b, 0x67, 0x4f, 0x86, 0x8d, 0xa7,
	0x9b, 0x83, 0xb4, 0x6e, 0xa1, 0xc7, 0x30, 0xcd, 0xa3, 0xc3, 0x4f, 0x6f, 0xd2, 0x71, 0xe5, 0xe1,
	0x57, 0xaf, 0xc3, 0x53, 0x5c, 0x88, 0x27, 0x76, 0xa7, 0xe3, 0xd6, 0x96, 0xe3, 0x0e, 0x9b, 0xef,
	0x3a, 0xac, 0x27, 0x6e, 0xca, 0x29, 0x94, 0xfb, 0xd1, 0x02, 0x9f, 0xf4, 0x5a, 0xac, 0xf4, 0xda,
	0x8b, 0x55, 0xfe, 0xd3, 0xc3, 0x9f, 0xf7, 0x4f, 0x74, 0xf7, 0x7f, 0xea, 0xcf, 0x07, 0x50, 0x34,
	0x75, 0x2b, 0xf0, 0x27, 0x33, 0x2d, 0xa3, 0x43, 0x27, 0x4d, 0xdd, 0x12, 0x0e, 0xdd, 0xe9, 0xb8,
	0x68, 0x0f, 0x8a, 0x11, 0x90, 0x74, 0x6b, 0x10, 0x87, 0x4e, 0x86, 0x30, 0xaa, 0x5b, 0xe8, 0x36,
	0x14, 0x5d, 0x72, 0x88, 0x2d, 0xb6, 0x2e, 0xb1, 0x55, 0x88, 0x1a, 0xcb, 0x87, 0x77, 0x3a, 0x62,
	0x53, 0xcd, 0xec, 0x77, 0x1f, 0x5f, 0xe5, 0xd3, 0xa1, 0xa4, 0xe3, 0x7d, 0x62, 0xe0, 0xf8, 0xef,
	0xc2, 0x58, 0xa0, 0x5e, 0x96, 0xb2, 0xc1, 0x52, 0xf0, 0x57, 0x86, 0x5a, 0x70, 0xe5, 0x18, 0xeb,
	0xed, 0x03, 0xb7, 0xb9, 0xaf, 0x1a, 0xbc, 0xda, 0x3a, 0xaa, 0xab, 0x13, 0x71, 0x32, 0x1a, 0xa0,
	0x20, 0x22, 0x4f, 0xdc, 0xba, 0x27, 0xad, 0xc1, 0x84, 0xa1, 0x6d, 0x28, 0x50, 0x43, 0xb7, 0x6d,
	0xb5, 0x8d, 0x07, 0xdf, 0x1f, 0x03, 0x11, 0xca, 0x6f, 0x72, 0x70, 0x2d, 0x0e, 0xcb, 0xde, 0xb1,
	0x6a, 0xaf, 0x9f, 0x7a, 0x9b, 0xf2, 0x39, 0x87, 0xe5, 0xa0, 0xc7, 0x57, 0xf4, 0x2e, 0x40, 0x37,
	0x6c, 0xf9, 0x69, 0x2b, 0xc3, 0xe4, 0xb1, 0x20, 0x62, 0xf9, 0xfc, 0xa0, 0x8c, 0xf1, 0x40, 0xcd,
	0x34, 0xdf, 0x2f, 0x61, 0xcc, 0x26, 0x1e, 0x8e, 0xcd, 0x60, 0xd7, 0x1f, 0xe5, 0xdf, 0x75, 0x0b,
	0x5d, 0x63, 0xa7, 0x7c, 0x46, 0x62, 0x41, 0xc3, 0x77, 0xfc, 0x86, 0xc7, 0xcb, 0x0a, 0xd4, 0xdd,
	0x78, 0xa0, 0x2a, 0x7d, 0x02, 0x35, 0x04, 0xba, 0x82, 0xe1, 0x46, 0x0a, 0x39, 0x88, 0xd6, 0x77,
	0x01, 0x58, 0x9a, 0x08, 0x9b, 0xa4, 0x8c, 0x36, 0x91, 0x8e, 0xeb, 0xd9, 0xa4, 0xfc, 0x39, 0x0f,
	0xdf, 0x8a, 0xeb, 0xd9, 0xb1, 0xb1, 0xb5, 0x8b, 0x1d, 0x1b, 0xbb, 0x1d, 0x75, 0xb0, 0xa2, 0xb4,
	0x02, 0x05, 0x7e, 0xa8, 0x63, 0x7b, 0x31, 0xf3, 0xfe, 0xd4, 0xea, 0xd5, 0xe8, 0x1d, 0x4c, 0x10,
	0x1b, 0x01, 0x1b, 0x8b, 0x69, 0x03, 0x1f, 0x61, 0xe7, 0xf5, 0x62, 0xda, 0x17, 0x81, 0xde, 0x03,
	0x68, 0x11, 0xc3, 0x50, 0x5d, 0xec, 0xa8, 0x46, 0xd6, 0x58, 0x09, 0x4d, 0x41, 0x3f, 0x86, 0xcb,
	0xae, 0x7a, 0x88, 0xd9, 0xdd, 0xf7, 0x89, 0xee, 0x36, 0x6d, 0x47, 0x6f, 0x61, 0x51, 0xdc, 0x06,
	0x58, 0x58, 0x91, 0xc9, 0xda, 0xe5, 0xa2, 0x76, 0x99, 0x24, 0xf4, 0x43, 0x28, 0x52, 0x97, 0xd8,
	0x4d, 0x83, 0x50, 0x2a, 0x84, 0x8f, 0x0c, 0x7c, 0xda, 0x63, 0x92, 0x1e, 0x12, 0x4a, 0x3d, 0xd1,
	0xa1, 0xb2, 0x3f, 0x1a, 0x29, 0xfb, 0xe1, 0x9c, 0x2c, 0x44, 0x72, 0xb2, 0xf6, 0x56, 0x3c, 0x44,
	0x6f, 0xf6, 0x09, 0xd1, 0x48, 0x6c, 0x28, 0x1f, 0xc0, 0xad, 0x54, 0x86, 0x20, 0x4c, 0xaf, 0xc3,
	0x84, 0xed, 0x0f, 0xfa, 0xa7, 0x9c, 0xb1, 0xc6, 0x78, 0x30, 0x56, 0xd7, 0x94, 0xcf, 0x86, 0x60,
	0x2e, 0x2e, 0x6c, 0xc3, 0x20, 0x14, 0xbf, 0x5e, 0x28, 0xc6, 0x35, 0x7b, 0xc5, 0x28, 0xac, 0x99,
	0xdd, 0x0a, 0x43, 0x05, 0xe9, 0x55, 0x6f, 0x85, 0xa2, 0x38, 0x85, 0x50, 0xcf, 0xf7, 0x45, 0x7d,
	0x38, 0x8a, 0xfa, 0xbd, 0x38, 0xea, 0xb7, 0xfa, 0xa0, 0x1e, 0xc5, 0x41, 0x31, 0xe1, 0x76, 0x3a,
	0x47, 0x80, 0x7b, 0xd7, 0x34, 0x69, 0x60, 0xd3, 0x94, 0x3f, 0x0c, 0x25, 0x6b, 0xc4, 0x9a, 0xa6,
	0x6d, 0x74, 0x93, 0xe5, 0x82, 0x1c, 0xb3, 0x05, 0x53, 0xaa, 0xc6, 0x2e, 0x63, 0x41, 0x22, 0x67,
	0xdc, 0x31, 0x26, 0xd5, 0xc8, 0xf2, 0x06, 0xf1, 0x4d, 0xe6, 0x8c, 0x88, 0x20, 0xa1, 0x18, 0xc9,
	0x8c, 0x88, 0x30, 0x9c, 0xaf, 0x67, 0x3e, 0xef, 0x91, 0x33, 0x5e, 0x53, 0x6a, 0x4f, 0x94, 0x84,
	0x8b, 0x72, 0xcd, 0x03, 0x18, 0xf6, 0xaa, 0xd6, 0xc0, 0xb5, 0xda, 0x9b, 0x7f, 0xb1, 0x79, 0x13,
	0xc5, 0x42, 0x59, 0x48, 0xe6, 0x4d, 0x94, 0x23, 0x68, 0xe2, 0xfd, 0x69, 0x28, 0xe9, 0x47, 0x8f,
	0xf5, 0x51, 0xac, 0x90, 0xff, 0x3f, 0xe2, 0xfb, 0xbd, 0x38, 0xbe, 0xdf, 0x49, 0xc5, 0x37, 0x06,
	0x89, 0x52, 0x85, 0xa5, 0x4c, 0x8c, 0x01, 0xda, 0x7f, 0xf7, 0xda, 0x5e, 0x1e, 0x13, 0xbf, 0x51,
	0x7b, 0xcd, 0x96, 0x73, 0x3e, 0x78, 0x26, 0x7a, 0x40, 0xb9, 0x0c, 0x3d, 0xa0, 0x7c, 0xa2, 0x07,
	0x54, 0xbb, 0x13, 0x87, 0xa7, 0x14, 0xef, 0x12, 0x77, 0x6d, 0x50, 0xde, 0xe1, 0x67, 0xeb, 0xf8,
	0x70, 0x96, 0xab, 0xff, 0xef, 0x73, 0xbc, 0x11, 0x1b, 0x9a, 0xba, 0x85, 0xf1, 0xb9, 0x83, 0x92,
	0xec, 0x3a, 0xe5, 0x2e, 0xae, 0xeb, 0x94, 0xbf, 0xd8, 0xae, 0xd3, 0xf0, 0xb9, 0x75, 0x9d, 0x6a,
	0x8b, 0x71, 0x1f, 0xcf, 0xf6, 0xf4, 0x31, 0xf3, 0x88, 0xf2, 0x36, 0x94, 0x92, 0xa3, 0x59, 0x3c,
	0xfc, 0x57, 0x29, 0x3e, 0xf3, 0x61, 0xb8, 0xa9, 0x75, 0xfe, 0xe1, 0x1f, 0x6d, 0xa4, 0xe5, 0x92,
	0x8d, 0xb4, 0xda, 0x6a, 0xdc, 0xee, 0xeb, 0x3d, 0xed, 0x0e, 0xaf, 0x53, 0x79, 0x0f, 0x94, 0xfe,
	0xd4, 0x2c, 0x38, 0xfc, 0x3b, 0x81, 0xc3, 0x76, 0xb8, 0x77, 0x7b, 0xce, 0x38, 0x5c, 0x54, 0x8f,
	0x39, 0x2b, 0x76, 0x61, 0xdb, 0x92, 0xd8, 0x85, 0xa9, 0x59, 0xb0, 0xfb, 0x85, 0xf7, 0x70, 0xb6,
	0x61, 0xa8, 0xba, 0xd9, 0xe0, 0x45, 0x8a, 0xa2, 0x65, 0x18, 0xa1, 0xd8, 0xd2, 0x32, 0xbc, 0x9b,
	0x08, 0x3e, 0x76, 0x7f, 0xf5, 0x15, 0x50, 0xfe, 0x90, 0x90, 0x6f, 0x14, 0x84, 0x06, 0xea, 0xbd,
	0x5e, 0x08, 0xce, 0xd8, 0xa3, 0x58, 0x58, 0xad, 0x78, 0x14, 0x0b, 0x0f, 0xf9, 0x06, 0x2c, 0x2e,
	0x43, 0xc1, 0xbf, 0xf3, 0xa1, 0x22, 0x8c, 0x3f, 0xfe, 0x70, 0x6f, 0xf7, 0xfe, 0x46, 0x7d, 0xab,
	0x7e, 0x7f, 0x73, 0xfa, 0x12, 0x2a, 0x40, 0xfe, 0xe1, 0xce, 0x87, 0x0f, 0xa6, 0x25, 0x34, 0x06,
	0xc3, 0x7b, 0xef, 0xef, 0x34, 0x1e, 0x4d, 0x0f, 0xad, 0xfe, 0x6e, 0x0a, 0x72, 0xdb, 0xb4, 0x8d,
	0x1a, 0x30, 0x11, 0x79, 0x14, 0xfc, 0x66, 0xe4, 0x22, 0x19, 0x7b, 0x84, 0x2b, 0xdd, 0x4c, 0xa3,
	0x86, 0xce, 0x5e, 0xa3, 0xfe, 0xf3, 0xdc, 0x4c, 0x7c, 0x82, 0x20, 0x94, 0xe6, 0xfb, 0x10, 0x02,
	0x21, 0x5b, 0x50, 0x08, 0x1e, 0xab, 0xe4, 0x38, 0xb3, 0x4f, 0x29, 0x95, 0xfb, 0x51, 0xc2, 0x72,
	0x82, 0x77, 0x95, 0x84, 0x1c, 0x9f, 0x92, 0x94, 0x93, 0xe8, 0x3d, 0x9b, 0x70, 0xb5, 0x77, 0x97,
	0xf8, 0x56, 0x7c, 0x6a, 0x4f, 0xb6, 0xd2, 0x52, 0x26, 0xb6, 0xbe, 0xea, 0x82, 0x26, 0x66, 0xba,
	0x3a, 0x9f, 0xed, 0x0c, 0x75, 0x89, 0xae, 0xdc, 0x11, 0xc8, 0x7d, 0xfb, 0x53, 0x0b, 0xa9, 0xa2,
	0x42, 0x9c, 0xa5, 0xe5, 0xac, 0x9c, 0x81, 0xde, 0x9f, 0x42, 0x29, 0xa5, 0x37, 0xb2, 0x98, 0x2a,
	0x2f, 0xc2, 0x5b, 0x5a, 0xcd, 0xce, 0x1b, 0x68, 0xff, 0x19, 0x5c, 0x4b, 0xbb, 0x0f, 0xdf, 0x49,
	0x15, 0x19, 0x65, 0x2e, 0xdd, 0x7d, 0x05, 0xe6, 0xbe, 0xe6, 0x47, 0xaf, 0x7d, 0xe9, 0xe6, 0x47,
	0x78, 0xcf, 0x30, 0xbf, 0xf7, 0x1d, 0x29, 0x6e, 0x7e, 0xec, 0x6a, 0x93, 0x6e, 0x7e, 0x94, 0xf9,
	0x0c, 0xf3, 0x7b, 0x5f, 0x03, 0xd0, 0xa7, 0x12, 0x28, 0x59, 0xee, 0x00, 0x19, 0x64, 0xc7, 0xe6,
	0x94, 0x6a, 0xaf, 0x3e, 0x27, 0x58, 0xd6, 0x4f, 0x60, 0x3a, 0x71, 0x56, 0x2e, 0xf7, 0xae, 0x7c,
	0x5d, 0x8e, 0xd2, 0xc2, 0x59, 0x1c, 0x81, 0xfc, 0x1f, 0x41, 0x31, 0x7e, 0xea, 0x9c, 0x4f, 0x99,
	0xcc, 0x18, 0x4a, 0x6f, 0x9e, 0xc1, 0x10, 0x08, 0xa7, 0x30, 0xd3, 0xef, 0xc0, 0x93, 0x26, 0x23,
	0xcc, 0x58, 0xaa, 0x66, 0x64, 0xec, 0xa3, 0x34, 0x72, 0xba, 0x48, 0x53, 0x1a, 0x66, 0x4c, 0x55,
	0xda, 0x73, 0xd7, 0x6e, 0xc0, 0x44, 0x64, 0x5b, 0x4e, 0x6c, 0x5d, 0x61, 0x6a, 0x72, 0xeb, 0xea,
	0xb5, 0x91, 0x96, 0x86, 0x7f, 0xfe, 0xf2, 0xe9, 0xa2, 0xb4, 0xfe, 0xfe, 0x97, 0xcf, 0xe7, 0xa4,
	0xaf, 0x9e, 0xcf, 0x49, 0xff, 0x7a, 0x3e, 0x27, 0xfd, 0xfa, 0xc5, 0xdc, 0xa5, 0xaf, 0x5e, 0xcc,
	0x5d, 0xfa, 0xdb, 0x8b, 0xb9, 0x4b, 0x1f, 0x57, 0x42, 0x8f, 0xfb, 0x4c, 0xe0, 0x92, 0x85, 0xdd,
	0x63, 0xe2, 0x1c, 0x56, 0xbd, 0x3f, 0xcd, 0xb9, 0x57, 0x3d, 0x09, 0xfe, 0x3e, 0xe8, 0xd4, 0xc6,
	0x74, 0x7f, 0x84, 0x1f, 0x7d, 0xef, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x74, 0x7f, 0xfd, 0x47,
	0x3b, 0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// Deposit defines a method for depositing tokens into a vault.
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	// Withdraw defines a method for withdrawing tokens from a vault.
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	// AddVault defines a method for creating a new vault.
	AddVault(ctx context.Context, in *MsgAddVault, opts ...grpc.CallOption) (*MsgAddVaultResponse, error)
	// PerformAction defines a method for performing an action on a vault.
	PerformActionJoinPool(ctx context.Context, in *MsgPerformActionJoinPool, opts ...grpc.CallOption) (*MsgPerformActionJoinPoolResponse, error)
	PerformActionExitPool(ctx context.Context, in *MsgPerformActionExitPool, opts ...grpc.CallOption) (*MsgPerformActionExitPoolResponse, error)
	PerformActionSwapByDenom(ctx context.Context, in *MsgPerformActionSwapByDenom, opts ...grpc.CallOption) (*MsgPerformActionSwapByDenomResponse, error)
	// PerformAction for perpetuals
	PerformActionOpenPerpetual(ctx context.Context, in *MsgPerformActionOpenPerpetual, opts ...grpc.CallOption) (*MsgPerformActionOpenPerpetualResponse, error)
	PerformActionClosePerpetual(ctx context.Context, in *MsgPerformActionClosePerpetual, opts ...grpc.CallOption) (*MsgPerformActionClosePerpetualResponse, error)
	PerformActionAddCollateral(ctx context.Context, in *MsgPerformActionAddCollateral, opts ...grpc.CallOption) (*MsgPerformActionAddCollateralResponse, error)
	PerformActionUpdateStopLoss(ctx context.Context, in *MsgPerformActionUpdateStopLoss, opts ...grpc.CallOption) (*MsgPerformActionUpdateStopLossResponse, error)
	PerformActionUpdateTakeProfitPrice(ctx context.Context, in *MsgPerformActionUpdateTakeProfitPrice, opts ...grpc.CallOption) (*MsgPerformActionUpdateTakeProfitPriceResponse, error)
	// UpdateVaultCoins defines a method for updating the coins of a vault.
	UpdateVaultCoins(ctx context.Context, in *MsgUpdateVaultCoins, opts ...grpc.CallOption) (*MsgUpdateVaultCoinsResponse, error)
	// UpdateVaultFees defines a method for updating the fees of a vault.
	UpdateVaultFees(ctx context.Context, in *MsgUpdateVaultFees, opts ...grpc.CallOption) (*MsgUpdateVaultFeesResponse, error)
	// UpdateVaultLockupPeriod defines a method for updating the lockup period of
	// a vault.
	UpdateVaultLockupPeriod(ctx context.Context, in *MsgUpdateVaultLockupPeriod, opts ...grpc.CallOption) (*MsgUpdateVaultLockupPeriodResponse, error)
	// UpdateVaultMaxAmountUsd defines a method for updating the max amount of a
	// vault.
	UpdateVaultMaxAmountUsd(ctx context.Context, in *MsgUpdateVaultMaxAmountUsd, opts ...grpc.CallOption) (*MsgUpdateVaultMaxAmountUsdResponse, error)
	// ClaimRewards defines a method for claiming rewards from a vault.
	ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddVault(ctx context.Context, in *MsgAddVault, opts ...grpc.CallOption) (*MsgAddVaultResponse, error) {
	out := new(MsgAddVaultResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/AddVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionJoinPool(ctx context.Context, in *MsgPerformActionJoinPool, opts ...grpc.CallOption) (*MsgPerformActionJoinPoolResponse, error) {
	out := new(MsgPerformActionJoinPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionJoinPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionExitPool(ctx context.Context, in *MsgPerformActionExitPool, opts ...grpc.CallOption) (*MsgPerformActionExitPoolResponse, error) {
	out := new(MsgPerformActionExitPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionExitPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionSwapByDenom(ctx context.Context, in *MsgPerformActionSwapByDenom, opts ...grpc.CallOption) (*MsgPerformActionSwapByDenomResponse, error) {
	out := new(MsgPerformActionSwapByDenomResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionSwapByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionOpenPerpetual(ctx context.Context, in *MsgPerformActionOpenPerpetual, opts ...grpc.CallOption) (*MsgPerformActionOpenPerpetualResponse, error) {
	out := new(MsgPerformActionOpenPerpetualResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionOpenPerpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionClosePerpetual(ctx context.Context, in *MsgPerformActionClosePerpetual, opts ...grpc.CallOption) (*MsgPerformActionClosePerpetualResponse, error) {
	out := new(MsgPerformActionClosePerpetualResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionClosePerpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionAddCollateral(ctx context.Context, in *MsgPerformActionAddCollateral, opts ...grpc.CallOption) (*MsgPerformActionAddCollateralResponse, error) {
	out := new(MsgPerformActionAddCollateralResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionAddCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionUpdateStopLoss(ctx context.Context, in *MsgPerformActionUpdateStopLoss, opts ...grpc.CallOption) (*MsgPerformActionUpdateStopLossResponse, error) {
	out := new(MsgPerformActionUpdateStopLossResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionUpdateStopLoss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PerformActionUpdateTakeProfitPrice(ctx context.Context, in *MsgPerformActionUpdateTakeProfitPrice, opts ...grpc.CallOption) (*MsgPerformActionUpdateTakeProfitPriceResponse, error) {
	out := new(MsgPerformActionUpdateTakeProfitPriceResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/PerformActionUpdateTakeProfitPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVaultCoins(ctx context.Context, in *MsgUpdateVaultCoins, opts ...grpc.CallOption) (*MsgUpdateVaultCoinsResponse, error) {
	out := new(MsgUpdateVaultCoinsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/UpdateVaultCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVaultFees(ctx context.Context, in *MsgUpdateVaultFees, opts ...grpc.CallOption) (*MsgUpdateVaultFeesResponse, error) {
	out := new(MsgUpdateVaultFeesResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/UpdateVaultFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVaultLockupPeriod(ctx context.Context, in *MsgUpdateVaultLockupPeriod, opts ...grpc.CallOption) (*MsgUpdateVaultLockupPeriodResponse, error) {
	out := new(MsgUpdateVaultLockupPeriodResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/UpdateVaultLockupPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVaultMaxAmountUsd(ctx context.Context, in *MsgUpdateVaultMaxAmountUsd, opts ...grpc.CallOption) (*MsgUpdateVaultMaxAmountUsdResponse, error) {
	out := new(MsgUpdateVaultMaxAmountUsdResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/UpdateVaultMaxAmountUsd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error) {
	out := new(MsgClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Msg/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// Deposit defines a method for depositing tokens into a vault.
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	// Withdraw defines a method for withdrawing tokens from a vault.
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	// AddVault defines a method for creating a new vault.
	AddVault(context.Context, *MsgAddVault) (*MsgAddVaultResponse, error)
	// PerformAction defines a method for performing an action on a vault.
	PerformActionJoinPool(context.Context, *MsgPerformActionJoinPool) (*MsgPerformActionJoinPoolResponse, error)
	PerformActionExitPool(context.Context, *MsgPerformActionExitPool) (*MsgPerformActionExitPoolResponse, error)
	PerformActionSwapByDenom(context.Context, *MsgPerformActionSwapByDenom) (*MsgPerformActionSwapByDenomResponse, error)
	// PerformAction for perpetuals
	PerformActionOpenPerpetual(context.Context, *MsgPerformActionOpenPerpetual) (*MsgPerformActionOpenPerpetualResponse, error)
	PerformActionClosePerpetual(context.Context, *MsgPerformActionClosePerpetual) (*MsgPerformActionClosePerpetualResponse, error)
	PerformActionAddCollateral(context.Context, *MsgPerformActionAddCollateral) (*MsgPerformActionAddCollateralResponse, error)
	PerformActionUpdateStopLoss(context.Context, *MsgPerformActionUpdateStopLoss) (*MsgPerformActionUpdateStopLossResponse, error)
	PerformActionUpdateTakeProfitPrice(context.Context, *MsgPerformActionUpdateTakeProfitPrice) (*MsgPerformActionUpdateTakeProfitPriceResponse, error)
	// UpdateVaultCoins defines a method for updating the coins of a vault.
	UpdateVaultCoins(context.Context, *MsgUpdateVaultCoins) (*MsgUpdateVaultCoinsResponse, error)
	// UpdateVaultFees defines a method for updating the fees of a vault.
	UpdateVaultFees(context.Context, *MsgUpdateVaultFees) (*MsgUpdateVaultFeesResponse, error)
	// UpdateVaultLockupPeriod defines a method for updating the lockup period of
	// a vault.
	UpdateVaultLockupPeriod(context.Context, *MsgUpdateVaultLockupPeriod) (*MsgUpdateVaultLockupPeriodResponse, error)
	// UpdateVaultMaxAmountUsd defines a method for updating the max amount of a
	// vault.
	UpdateVaultMaxAmountUsd(context.Context, *MsgUpdateVaultMaxAmountUsd) (*MsgUpdateVaultMaxAmountUsdResponse, error)
	// ClaimRewards defines a method for claiming rewards from a vault.
	ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) AddVault(ctx context.Context, req *MsgAddVault) (*MsgAddVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVault not implemented")
}
func (*UnimplementedMsgServer) PerformActionJoinPool(ctx context.Context, req *MsgPerformActionJoinPool) (*MsgPerformActionJoinPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionJoinPool not implemented")
}
func (*UnimplementedMsgServer) PerformActionExitPool(ctx context.Context, req *MsgPerformActionExitPool) (*MsgPerformActionExitPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionExitPool not implemented")
}
func (*UnimplementedMsgServer) PerformActionSwapByDenom(ctx context.Context, req *MsgPerformActionSwapByDenom) (*MsgPerformActionSwapByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionSwapByDenom not implemented")
}
func (*UnimplementedMsgServer) PerformActionOpenPerpetual(ctx context.Context, req *MsgPerformActionOpenPerpetual) (*MsgPerformActionOpenPerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionOpenPerpetual not implemented")
}
func (*UnimplementedMsgServer) PerformActionClosePerpetual(ctx context.Context, req *MsgPerformActionClosePerpetual) (*MsgPerformActionClosePerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionClosePerpetual not implemented")
}
func (*UnimplementedMsgServer) PerformActionAddCollateral(ctx context.Context, req *MsgPerformActionAddCollateral) (*MsgPerformActionAddCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionAddCollateral not implemented")
}
func (*UnimplementedMsgServer) PerformActionUpdateStopLoss(ctx context.Context, req *MsgPerformActionUpdateStopLoss) (*MsgPerformActionUpdateStopLossResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionUpdateStopLoss not implemented")
}
func (*UnimplementedMsgServer) PerformActionUpdateTakeProfitPrice(ctx context.Context, req *MsgPerformActionUpdateTakeProfitPrice) (*MsgPerformActionUpdateTakeProfitPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformActionUpdateTakeProfitPrice not implemented")
}
func (*UnimplementedMsgServer) UpdateVaultCoins(ctx context.Context, req *MsgUpdateVaultCoins) (*MsgUpdateVaultCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultCoins not implemented")
}
func (*UnimplementedMsgServer) UpdateVaultFees(ctx context.Context, req *MsgUpdateVaultFees) (*MsgUpdateVaultFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultFees not implemented")
}
func (*UnimplementedMsgServer) UpdateVaultLockupPeriod(ctx context.Context, req *MsgUpdateVaultLockupPeriod) (*MsgUpdateVaultLockupPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultLockupPeriod not implemented")
}
func (*UnimplementedMsgServer) UpdateVaultMaxAmountUsd(ctx context.Context, req *MsgUpdateVaultMaxAmountUsd) (*MsgUpdateVaultMaxAmountUsdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultMaxAmountUsd not implemented")
}
func (*UnimplementedMsgServer) ClaimRewards(ctx context.Context, req *MsgClaimRewards) (*MsgClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddVault)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/AddVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddVault(ctx, req.(*MsgAddVault))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionJoinPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionJoinPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionJoinPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionJoinPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionJoinPool(ctx, req.(*MsgPerformActionJoinPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionExitPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionExitPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionExitPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionExitPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionExitPool(ctx, req.(*MsgPerformActionExitPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionSwapByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionSwapByDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionSwapByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionSwapByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionSwapByDenom(ctx, req.(*MsgPerformActionSwapByDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionOpenPerpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionOpenPerpetual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionOpenPerpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionOpenPerpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionOpenPerpetual(ctx, req.(*MsgPerformActionOpenPerpetual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionClosePerpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionClosePerpetual)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionClosePerpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionClosePerpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionClosePerpetual(ctx, req.(*MsgPerformActionClosePerpetual))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionAddCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionAddCollateral)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionAddCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionAddCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionAddCollateral(ctx, req.(*MsgPerformActionAddCollateral))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionUpdateStopLoss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionUpdateStopLoss)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionUpdateStopLoss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionUpdateStopLoss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionUpdateStopLoss(ctx, req.(*MsgPerformActionUpdateStopLoss))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PerformActionUpdateTakeProfitPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPerformActionUpdateTakeProfitPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PerformActionUpdateTakeProfitPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/PerformActionUpdateTakeProfitPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PerformActionUpdateTakeProfitPrice(ctx, req.(*MsgPerformActionUpdateTakeProfitPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVaultCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVaultCoins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVaultCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/UpdateVaultCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVaultCoins(ctx, req.(*MsgUpdateVaultCoins))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVaultFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVaultFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVaultFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/UpdateVaultFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVaultFees(ctx, req.(*MsgUpdateVaultFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVaultLockupPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVaultLockupPeriod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVaultLockupPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/UpdateVaultLockupPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVaultLockupPeriod(ctx, req.(*MsgUpdateVaultLockupPeriod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVaultMaxAmountUsd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVaultMaxAmountUsd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVaultMaxAmountUsd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/UpdateVaultMaxAmountUsd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVaultMaxAmountUsd(ctx, req.(*MsgUpdateVaultMaxAmountUsd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Msg/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.vaults.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "AddVault",
			Handler:    _Msg_AddVault_Handler,
		},
		{
			MethodName: "PerformActionJoinPool",
			Handler:    _Msg_PerformActionJoinPool_Handler,
		},
		{
			MethodName: "PerformActionExitPool",
			Handler:    _Msg_PerformActionExitPool_Handler,
		},
		{
			MethodName: "PerformActionSwapByDenom",
			Handler:    _Msg_PerformActionSwapByDenom_Handler,
		},
		{
			MethodName: "PerformActionOpenPerpetual",
			Handler:    _Msg_PerformActionOpenPerpetual_Handler,
		},
		{
			MethodName: "PerformActionClosePerpetual",
			Handler:    _Msg_PerformActionClosePerpetual_Handler,
		},
		{
			MethodName: "PerformActionAddCollateral",
			Handler:    _Msg_PerformActionAddCollateral_Handler,
		},
		{
			MethodName: "PerformActionUpdateStopLoss",
			Handler:    _Msg_PerformActionUpdateStopLoss_Handler,
		},
		{
			MethodName: "PerformActionUpdateTakeProfitPrice",
			Handler:    _Msg_PerformActionUpdateTakeProfitPrice_Handler,
		},
		{
			MethodName: "UpdateVaultCoins",
			Handler:    _Msg_UpdateVaultCoins_Handler,
		},
		{
			MethodName: "UpdateVaultFees",
			Handler:    _Msg_UpdateVaultFees_Handler,
		},
		{
			MethodName: "UpdateVaultLockupPeriod",
			Handler:    _Msg_UpdateVaultLockupPeriod_Handler,
		},
		{
			MethodName: "UpdateVaultMaxAmountUsd",
			Handler:    _Msg_UpdateVaultMaxAmountUsd_Handler,
		},
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/vaults/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Depositor) > 0 {
		i -= len(m.Depositor)
		copy(dAtA[i:], m.Depositor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Depositor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwapToDepositDenom {
		i--
		if m.SwapToDepositDenom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Withdrawer) > 0 {
		i -= len(m.Withdrawer)
		copy(dAtA[i:], m.Withdrawer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Withdrawer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedActions) > 0 {
		for iNdEx := len(m.AllowedActions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedActions[iNdEx])
			copy(dAtA[i:], m.AllowedActions[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AllowedActions[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x62
	}
	if m.LockupPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.ProtocolFeeShare.Size()
		i -= size
		if _, err := m.ProtocolFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.PerformanceFee.Size()
		i -= size
		if _, err := m.PerformanceFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ManagementFee.Size()
		i -= size
		if _, err := m.ManagementFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BenchmarkCoin) > 0 {
		i -= len(m.BenchmarkCoin)
		copy(dAtA[i:], m.BenchmarkCoin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BenchmarkCoin)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RewardCoins[iNdEx])
			copy(dAtA[i:], m.RewardCoins[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RewardCoins[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.AllowedCoins) > 0 {
		for iNdEx := len(m.AllowedCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCoins[iNdEx])
			copy(dAtA[i:], m.AllowedCoins[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AllowedCoins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.MaxAmountUsd.Size()
		i -= size
		if _, err := m.MaxAmountUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionJoinPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionJoinPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionJoinPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShareAmountOut.Size()
		i -= size
		if _, err := m.ShareAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.MaxAmountsIn) > 0 {
		for iNdEx := len(m.MaxAmountsIn) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaxAmountsIn[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionJoinPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionJoinPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionJoinPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ShareAmountOut.Size()
		i -= size
		if _, err := m.ShareAmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionExitPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionExitPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionExitPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutDenom) > 0 {
		i -= len(m.TokenOutDenom)
		copy(dAtA[i:], m.TokenOutDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenOutDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.ShareAmountIn.Size()
		i -= size
		if _, err := m.ShareAmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.MinAmountsOut) > 0 {
		for iNdEx := len(m.MinAmountsOut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinAmountsOut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionExitPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionExitPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionExitPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Slippage.Size()
		i -= size
		if _, err := m.Slippage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.WeightBalanceRatio.Size()
		i -= size
		if _, err := m.WeightBalanceRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TokenOut) > 0 {
		for iNdEx := len(m.TokenOut) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenOut[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionSwapByDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionSwapByDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionSwapByDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DenomOut) > 0 {
		i -= len(m.DenomOut)
		copy(dAtA[i:], m.DenomOut)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomOut)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.DenomIn) > 0 {
		i -= len(m.DenomIn)
		copy(dAtA[i:], m.DenomIn)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DenomIn)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.MaxAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.MinAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionSwapByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionSwapByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionSwapByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionOpenPerpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionOpenPerpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionOpenPerpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x40
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.StopLossPrice.Size()
		i -= size
		if _, err := m.StopLossPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Position != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionOpenPerpetualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionOpenPerpetualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionOpenPerpetualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerpetualId) > 0 {
		i -= len(m.PerpetualId)
		copy(dAtA[i:], m.PerpetualId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PerpetualId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionClosePerpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionClosePerpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionClosePerpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionClosePerpetualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionClosePerpetualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionClosePerpetualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionAddCollateral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionAddCollateral) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionAddCollateral) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.AddCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionAddCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionAddCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionAddCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionUpdateStopLoss) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionUpdateStopLoss) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionUpdateStopLoss) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionUpdateStopLossResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionUpdateStopLossResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionUpdateStopLossResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionUpdateTakeProfitPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionUpdateTakeProfitPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionUpdateTakeProfitPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x28
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PerpetualId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPerformActionUpdateTakeProfitPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPerformActionUpdateTakeProfitPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPerformActionUpdateTakeProfitPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RewardCoins[iNdEx])
			copy(dAtA[i:], m.RewardCoins[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.RewardCoins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AllowedCoins) > 0 {
		for iNdEx := len(m.AllowedCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCoins[iNdEx])
			copy(dAtA[i:], m.AllowedCoins[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.AllowedCoins[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ProtocolFeeShare.Size()
		i -= size
		if _, err := m.ProtocolFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.PerformanceFee.Size()
		i -= size
		if _, err := m.PerformanceFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ManagementFee.Size()
		i -= size
		if _, err := m.ManagementFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultLockupPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultLockupPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultLockupPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockupPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x18
	}
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultLockupPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultLockupPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultLockupPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultMaxAmountUsd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultMaxAmountUsd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultMaxAmountUsd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxAmountUsd.Size()
		i -= size
		if _, err := m.MaxAmountUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateVaultMaxAmountUsdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateVaultMaxAmountUsdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateVaultMaxAmountUsdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VaultIds) > 0 {
		dAtA10 := make([]byte, len(m.VaultIds)*10)
		var j9 int
		for _, num := range m.VaultIds {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintTx(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Depositor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Withdrawer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.SwapToDepositDenom {
		n += 2
	}
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MaxAmountUsd.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.AllowedCoins) > 0 {
		for _, s := range m.AllowedCoins {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RewardCoins) > 0 {
		for _, s := range m.RewardCoins {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.BenchmarkCoin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.ManagementFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PerformanceFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ProtocolFeeShare.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.LockupPeriod != 0 {
		n += 1 + sovTx(uint64(m.LockupPeriod))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.AllowedActions) > 0 {
		for _, s := range m.AllowedActions {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionJoinPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if len(m.MaxAmountsIn) > 0 {
		for _, e := range m.MaxAmountsIn {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.ShareAmountOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionJoinPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ShareAmountOut.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionExitPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if len(m.MinAmountsOut) > 0 {
		for _, e := range m.MinAmountsOut {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.ShareAmountIn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TokenOutDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformActionExitPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenOut) > 0 {
		for _, e := range m.TokenOut {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.WeightBalanceRatio.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Slippage.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionSwapByDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MinAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.DenomIn)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DenomOut)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformActionSwapByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionOpenPerpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovTx(uint64(m.Position))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StopLossPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionOpenPerpetualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PerpetualId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPerformActionClosePerpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionClosePerpetualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionAddCollateral) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	l = m.AddCollateral.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionAddCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgPerformActionUpdateStopLoss) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionUpdateStopLossResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPerformActionUpdateTakeProfitPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTx(uint64(m.PerpetualId))
	}
	l = m.Price.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgPerformActionUpdateTakeProfitPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateVaultCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	if len(m.AllowedCoins) > 0 {
		for _, s := range m.AllowedCoins {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.RewardCoins) > 0 {
		for _, s := range m.RewardCoins {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateVaultCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgUpdateVaultFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.ManagementFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.PerformanceFee.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.ProtocolFeeShare.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateVaultFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgUpdateVaultLockupPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	if m.LockupPeriod != 0 {
		n += 1 + sovTx(uint64(m.LockupPeriod))
	}
	return n
}

func (m *MsgUpdateVaultLockupPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgUpdateVaultMaxAmountUsd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	l = m.MaxAmountUsd.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateVaultMaxAmountUsdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovTx(uint64(m.VaultId))
	}
	return n
}

func (m *MsgClaimRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.VaultIds) > 0 {
		l = 0
		for _, e := range m.VaultIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Depositor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdrawer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Withdrawer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapToDepositDenom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapToDepositDenom = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmountUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCoins = append(m.AllowedCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenchmarkCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BenchmarkCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagementFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerformanceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedActions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedActions = append(m.AllowedActions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionJoinPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionJoinPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionJoinPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountsIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxAmountsIn = append(m.MaxAmountsIn, types.Coin{})
			if err := m.MaxAmountsIn[len(m.MaxAmountsIn)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionJoinPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionJoinPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionJoinPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionExitPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionExitPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionExitPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmountsOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinAmountsOut = append(m.MinAmountsOut, types.Coin{})
			if err := m.MinAmountsOut[len(m.MinAmountsOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareAmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShareAmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionExitPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionExitPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionExitPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = append(m.TokenOut, types.Coin{})
			if err := m.TokenOut[len(m.TokenOut)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBalanceRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBalanceRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slippage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Slippage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionSwapByDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionSwapByDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionSwapByDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DenomOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionSwapByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionSwapByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionSwapByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionOpenPerpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionOpenPerpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionOpenPerpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= Position(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopLossPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionOpenPerpetualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionOpenPerpetualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionOpenPerpetualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PerpetualId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionClosePerpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionClosePerpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionClosePerpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionClosePerpetualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionClosePerpetualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionClosePerpetualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionAddCollateral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionAddCollateral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionAddCollateral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AddCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionAddCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionAddCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionAddCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionUpdateStopLoss) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionUpdateStopLoss: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionUpdateStopLoss: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionUpdateStopLossResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionUpdateStopLossResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionUpdateStopLossResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionUpdateTakeProfitPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionUpdateTakeProfitPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionUpdateTakeProfitPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPerformActionUpdateTakeProfitPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPerformActionUpdateTakeProfitPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPerformActionUpdateTakeProfitPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCoins = append(m.AllowedCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagementFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerformanceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultLockupPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultLockupPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultLockupPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultLockupPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultLockupPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultLockupPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultMaxAmountUsd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultMaxAmountUsd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultMaxAmountUsd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmountUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateVaultMaxAmountUsdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateVaultMaxAmountUsdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateVaultMaxAmountUsdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VaultIds = append(m.VaultIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VaultIds) == 0 {
					m.VaultIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VaultIds = append(m.VaultIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
