// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/vaults/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VaultAndData struct {
	Vault            *Vault                      `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault,omitempty"`
	EdenApr          cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=eden_apr,json=edenApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"eden_apr"`
	PnlUsd           cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=pnl_usd,json=pnlUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"pnl_usd"`
	TotalDepositsUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total_deposits_usd,json=totalDepositsUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_deposits_usd"`
	DepositsUsed     cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=deposits_used,json=depositsUsed,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"deposits_used"`
	Positions        []PositionToken             `protobuf:"bytes,6,rep,name=positions,proto3" json:"positions"`
}

func (m *VaultAndData) Reset()         { *m = VaultAndData{} }
func (m *VaultAndData) String() string { return proto.CompactTextString(m) }
func (*VaultAndData) ProtoMessage()    {}
func (*VaultAndData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{0}
}
func (m *VaultAndData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultAndData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultAndData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultAndData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultAndData.Merge(m, src)
}
func (m *VaultAndData) XXX_Size() int {
	return m.Size()
}
func (m *VaultAndData) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultAndData.DiscardUnknown(m)
}

var xxx_messageInfo_VaultAndData proto.InternalMessageInfo

func (m *VaultAndData) GetVault() *Vault {
	if m != nil {
		return m.Vault
	}
	return nil
}

func (m *VaultAndData) GetPositions() []PositionToken {
	if m != nil {
		return m.Positions
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{1}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{2}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryVaultRequest struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Days    uint64 `protobuf:"varint,2,opt,name=days,proto3" json:"days,omitempty"`
}

func (m *QueryVaultRequest) Reset()         { *m = QueryVaultRequest{} }
func (m *QueryVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultRequest) ProtoMessage()    {}
func (*QueryVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{3}
}
func (m *QueryVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultRequest.Merge(m, src)
}
func (m *QueryVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultRequest proto.InternalMessageInfo

func (m *QueryVaultRequest) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

func (m *QueryVaultRequest) GetDays() uint64 {
	if m != nil {
		return m.Days
	}
	return 0
}

type QueryVaultResponse struct {
	Vault VaultAndData `protobuf:"bytes,1,opt,name=vault,proto3" json:"vault"`
}

func (m *QueryVaultResponse) Reset()         { *m = QueryVaultResponse{} }
func (m *QueryVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultResponse) ProtoMessage()    {}
func (*QueryVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{4}
}
func (m *QueryVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultResponse.Merge(m, src)
}
func (m *QueryVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultResponse proto.InternalMessageInfo

func (m *QueryVaultResponse) GetVault() VaultAndData {
	if m != nil {
		return m.Vault
	}
	return VaultAndData{}
}

type QueryVaultsRequest struct {
	Days uint64 `protobuf:"varint,1,opt,name=days,proto3" json:"days,omitempty"`
}

func (m *QueryVaultsRequest) Reset()         { *m = QueryVaultsRequest{} }
func (m *QueryVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultsRequest) ProtoMessage()    {}
func (*QueryVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{5}
}
func (m *QueryVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultsRequest.Merge(m, src)
}
func (m *QueryVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultsRequest proto.InternalMessageInfo

func (m *QueryVaultsRequest) GetDays() uint64 {
	if m != nil {
		return m.Days
	}
	return 0
}

type QueryVaultsResponse struct {
	Vaults []VaultAndData `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
}

func (m *QueryVaultsResponse) Reset()         { *m = QueryVaultsResponse{} }
func (m *QueryVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultsResponse) ProtoMessage()    {}
func (*QueryVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{6}
}
func (m *QueryVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultsResponse.Merge(m, src)
}
func (m *QueryVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultsResponse proto.InternalMessageInfo

func (m *QueryVaultsResponse) GetVaults() []VaultAndData {
	if m != nil {
		return m.Vaults
	}
	return nil
}

type QueryVaultValue struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *QueryVaultValue) Reset()         { *m = QueryVaultValue{} }
func (m *QueryVaultValue) String() string { return proto.CompactTextString(m) }
func (*QueryVaultValue) ProtoMessage()    {}
func (*QueryVaultValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{7}
}
func (m *QueryVaultValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultValue.Merge(m, src)
}
func (m *QueryVaultValue) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultValue) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultValue.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultValue proto.InternalMessageInfo

func (m *QueryVaultValue) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type QueryVaultValueResponse struct {
	UsdValue cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=usd_value,json=usdValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"usd_value"`
}

func (m *QueryVaultValueResponse) Reset()         { *m = QueryVaultValueResponse{} }
func (m *QueryVaultValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultValueResponse) ProtoMessage()    {}
func (*QueryVaultValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{8}
}
func (m *QueryVaultValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultValueResponse.Merge(m, src)
}
func (m *QueryVaultValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultValueResponse proto.InternalMessageInfo

type PositionToken struct {
	TokenDenom    string                      `protobuf:"bytes,1,opt,name=token_denom,json=tokenDenom,proto3" json:"token_denom,omitempty"`
	TokenAmount   cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"token_amount"`
	TokenUsdValue cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=token_usd_value,json=tokenUsdValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"token_usd_value"`
}

func (m *PositionToken) Reset()         { *m = PositionToken{} }
func (m *PositionToken) String() string { return proto.CompactTextString(m) }
func (*PositionToken) ProtoMessage()    {}
func (*PositionToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{9}
}
func (m *PositionToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionToken.Merge(m, src)
}
func (m *PositionToken) XXX_Size() int {
	return m.Size()
}
func (m *PositionToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionToken.DiscardUnknown(m)
}

var xxx_messageInfo_PositionToken proto.InternalMessageInfo

func (m *PositionToken) GetTokenDenom() string {
	if m != nil {
		return m.TokenDenom
	}
	return ""
}

type QueryVaultPositionsRequest struct {
	VaultId uint64 `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
}

func (m *QueryVaultPositionsRequest) Reset()         { *m = QueryVaultPositionsRequest{} }
func (m *QueryVaultPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultPositionsRequest) ProtoMessage()    {}
func (*QueryVaultPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{10}
}
func (m *QueryVaultPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultPositionsRequest.Merge(m, src)
}
func (m *QueryVaultPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultPositionsRequest proto.InternalMessageInfo

func (m *QueryVaultPositionsRequest) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type QueryVaultPositionsResponse struct {
	Positions []PositionToken `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
}

func (m *QueryVaultPositionsResponse) Reset()         { *m = QueryVaultPositionsResponse{} }
func (m *QueryVaultPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultPositionsResponse) ProtoMessage()    {}
func (*QueryVaultPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{11}
}
func (m *QueryVaultPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultPositionsResponse.Merge(m, src)
}
func (m *QueryVaultPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultPositionsResponse proto.InternalMessageInfo

func (m *QueryVaultPositionsResponse) GetPositions() []PositionToken {
	if m != nil {
		return m.Positions
	}
	return nil
}

type QueryDepositEstimationRequest struct {
	VaultId uint64                `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryDepositEstimationRequest) Reset()         { *m = QueryDepositEstimationRequest{} }
func (m *QueryDepositEstimationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositEstimationRequest) ProtoMessage()    {}
func (*QueryDepositEstimationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{12}
}
func (m *QueryDepositEstimationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositEstimationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositEstimationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositEstimationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositEstimationRequest.Merge(m, src)
}
func (m *QueryDepositEstimationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositEstimationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositEstimationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositEstimationRequest proto.InternalMessageInfo

func (m *QueryDepositEstimationRequest) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type QueryDepositEstimationResponse struct {
	SharesAmount   cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=shares_amount,json=sharesAmount,proto3,customtype=cosmossdk.io/math.Int" json:"shares_amount"`
	SharesUsdValue cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=shares_usd_value,json=sharesUsdValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares_usd_value"`
}

func (m *QueryDepositEstimationResponse) Reset()         { *m = QueryDepositEstimationResponse{} }
func (m *QueryDepositEstimationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositEstimationResponse) ProtoMessage()    {}
func (*QueryDepositEstimationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{13}
}
func (m *QueryDepositEstimationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositEstimationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositEstimationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositEstimationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositEstimationResponse.Merge(m, src)
}
func (m *QueryDepositEstimationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositEstimationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositEstimationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositEstimationResponse proto.InternalMessageInfo

type QueryWithdrawEstimationRequest struct {
	VaultId      uint64                `protobuf:"varint,1,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty"`
	SharesAmount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares_amount,json=sharesAmount,proto3,customtype=cosmossdk.io/math.Int" json:"shares_amount"`
}

func (m *QueryWithdrawEstimationRequest) Reset()         { *m = QueryWithdrawEstimationRequest{} }
func (m *QueryWithdrawEstimationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawEstimationRequest) ProtoMessage()    {}
func (*QueryWithdrawEstimationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{14}
}
func (m *QueryWithdrawEstimationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawEstimationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawEstimationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawEstimationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawEstimationRequest.Merge(m, src)
}
func (m *QueryWithdrawEstimationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawEstimationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawEstimationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawEstimationRequest proto.InternalMessageInfo

func (m *QueryWithdrawEstimationRequest) GetVaultId() uint64 {
	if m != nil {
		return m.VaultId
	}
	return 0
}

type QueryWithdrawEstimationResponse struct {
	Amount   cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	UsdValue cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=usd_value,json=usdValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"usd_value"`
}

func (m *QueryWithdrawEstimationResponse) Reset()         { *m = QueryWithdrawEstimationResponse{} }
func (m *QueryWithdrawEstimationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawEstimationResponse) ProtoMessage()    {}
func (*QueryWithdrawEstimationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5beb53132dc37b2d, []int{15}
}
func (m *QueryWithdrawEstimationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawEstimationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawEstimationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawEstimationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawEstimationResponse.Merge(m, src)
}
func (m *QueryWithdrawEstimationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawEstimationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawEstimationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawEstimationResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VaultAndData)(nil), "elys.vaults.VaultAndData")
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.vaults.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.vaults.QueryParamsResponse")
	proto.RegisterType((*QueryVaultRequest)(nil), "elys.vaults.QueryVaultRequest")
	proto.RegisterType((*QueryVaultResponse)(nil), "elys.vaults.QueryVaultResponse")
	proto.RegisterType((*QueryVaultsRequest)(nil), "elys.vaults.QueryVaultsRequest")
	proto.RegisterType((*QueryVaultsResponse)(nil), "elys.vaults.QueryVaultsResponse")
	proto.RegisterType((*QueryVaultValue)(nil), "elys.vaults.QueryVaultValue")
	proto.RegisterType((*QueryVaultValueResponse)(nil), "elys.vaults.QueryVaultValueResponse")
	proto.RegisterType((*PositionToken)(nil), "elys.vaults.PositionToken")
	proto.RegisterType((*QueryVaultPositionsRequest)(nil), "elys.vaults.QueryVaultPositionsRequest")
	proto.RegisterType((*QueryVaultPositionsResponse)(nil), "elys.vaults.QueryVaultPositionsResponse")
	proto.RegisterType((*QueryDepositEstimationRequest)(nil), "elys.vaults.QueryDepositEstimationRequest")
	proto.RegisterType((*QueryDepositEstimationResponse)(nil), "elys.vaults.QueryDepositEstimationResponse")
	proto.RegisterType((*QueryWithdrawEstimationRequest)(nil), "elys.vaults.QueryWithdrawEstimationRequest")
	proto.RegisterType((*QueryWithdrawEstimationResponse)(nil), "elys.vaults.QueryWithdrawEstimationResponse")
}

func init() { proto.RegisterFile("elys/vaults/query.proto", fileDescriptor_5beb53132dc37b2d) }

var fileDescriptor_5beb53132dc37b2d = []byte{
	// 1013 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x24, 0x8e, 0x93, 0xbc, 0x24, 0x6d, 0x33, 0x2d, 0xaa, 0xb3, 0x2d, 0xb6, 0xb5, 0x42,
	0xc2, 0x4a, 0x13, 0x2f, 0x98, 0x36, 0xe5, 0x80, 0x90, 0x62, 0x8c, 0x44, 0xa0, 0x54, 0x61, 0xd5,
	0x06, 0x01, 0x42, 0xab, 0xa9, 0x77, 0xe4, 0xac, 0x62, 0xef, 0x6c, 0x3d, 0xb3, 0x0d, 0x16, 0x20,
	0x24, 0x8e, 0x48, 0x48, 0x48, 0x7c, 0x02, 0x38, 0x20, 0x8e, 0x1c, 0x10, 0x9f, 0xa1, 0x12, 0x07,
	0x2a, 0xb8, 0x20, 0x0e, 0x15, 0x24, 0x48, 0xdc, 0xf9, 0x04, 0xd5, 0xce, 0xcc, 0xda, 0xbb, 0xdd,
	0x6c, 0x9c, 0xb8, 0x97, 0xec, 0xee, 0xbc, 0x37, 0xbf, 0xdf, 0xef, 0xfd, 0x99, 0x37, 0x0e, 0x5c,
	0xa6, 0xdd, 0x01, 0xb7, 0x1e, 0x90, 0xb0, 0x2b, 0xb8, 0x75, 0x3f, 0xa4, 0xfd, 0x41, 0x3d, 0xe8,
	0x33, 0xc1, 0xf0, 0x62, 0x64, 0xa8, 0x2b, 0x83, 0xb1, 0x42, 0x7a, 0x9e, 0xcf, 0x2c, 0xf9, 0x57,
	0xd9, 0x8d, 0x4b, 0x1d, 0xd6, 0x61, 0xf2, 0xd5, 0x8a, 0xde, 0xf4, 0xea, 0xd5, 0x0e, 0x63, 0x9d,
	0x2e, 0xb5, 0x48, 0xe0, 0x59, 0xc4, 0xf7, 0x99, 0x20, 0xc2, 0x63, 0x3e, 0xd7, 0xd6, 0x52, 0x92,
	0x2c, 0x20, 0x7d, 0xd2, 0x8b, 0x2d, 0x29, 0x19, 0xf2, 0xa1, 0x0d, 0xab, 0x6d, 0xc6, 0x7b, 0x8c,
	0x3b, 0x8a, 0x49, 0x7d, 0x28, 0x93, 0xf9, 0xeb, 0x0c, 0x2c, 0xed, 0x46, 0xae, 0x5b, 0xbe, 0xdb,
	0x22, 0x82, 0xe0, 0x1a, 0xcc, 0xca, 0xad, 0x25, 0x54, 0x45, 0xb5, 0xc5, 0x06, 0xae, 0x27, 0x42,
	0xa8, 0x4b, 0x4f, 0x5b, 0x39, 0xe0, 0x5b, 0x30, 0x4f, 0x5d, 0xea, 0x3b, 0x24, 0xe8, 0x97, 0xa6,
	0xab, 0xa8, 0xb6, 0xd0, 0x7c, 0xf9, 0xe1, 0xe3, 0xca, 0xd4, 0x5f, 0x8f, 0x2b, 0x57, 0x14, 0x05,
	0x77, 0xf7, 0xeb, 0x1e, 0xb3, 0x7a, 0x44, 0xec, 0xd5, 0x6f, 0xd1, 0x0e, 0x69, 0x0f, 0x5a, 0xb4,
	0xfd, 0xfb, 0xcf, 0x1b, 0xa0, 0x15, 0xb4, 0x68, 0xdb, 0x9e, 0x8b, 0x20, 0xb6, 0x82, 0x3e, 0x7e,
	0x1b, 0xe6, 0x02, 0xbf, 0xeb, 0x84, 0xdc, 0x2d, 0xcd, 0x4c, 0x0a, 0x56, 0x0c, 0xfc, 0xee, 0x5d,
	0xee, 0x62, 0x07, 0xb0, 0x60, 0x82, 0x74, 0x1d, 0x97, 0x06, 0x8c, 0x7b, 0x82, 0x4b, 0xd8, 0xc2,
	0xa4, 0xb0, 0x17, 0x24, 0x58, 0x4b, 0x63, 0x45, 0x04, 0xbb, 0xb0, 0x9c, 0x80, 0xa6, 0x6e, 0x69,
	0x76, 0x52, 0xec, 0x25, 0x77, 0x08, 0x4b, 0x5d, 0xfc, 0x3a, 0x2c, 0xc8, 0xaf, 0xa8, 0xdc, 0xa5,
	0x62, 0x75, 0xa6, 0xb6, 0xd8, 0x30, 0x52, 0x05, 0xd8, 0xd1, 0xd6, 0x3b, 0x6c, 0x9f, 0xfa, 0xcd,
	0x42, 0xc4, 0x67, 0x8f, 0xb6, 0x98, 0x97, 0x00, 0xbf, 0x17, 0xb5, 0xdf, 0x8e, 0x6c, 0x0b, 0x9b,
	0xde, 0x0f, 0x29, 0x17, 0xe6, 0xbb, 0x70, 0x31, 0xb5, 0xca, 0x03, 0xe6, 0x73, 0x8a, 0x37, 0xa1,
	0xa8, 0xda, 0x47, 0x97, 0xfa, 0x62, 0x9a, 0x49, 0x9a, 0x9a, 0x0b, 0x11, 0xc5, 0x8f, 0xff, 0xfd,
	0xb4, 0x86, 0x6c, 0xed, 0x6d, 0x36, 0x61, 0x45, 0xc2, 0xa9, 0x66, 0x50, 0x1c, 0x78, 0x15, 0xe6,
	0xe5, 0x46, 0xc7, 0x73, 0x25, 0x5c, 0xc1, 0x9e, 0x93, 0xdf, 0xdb, 0x2e, 0xc6, 0x50, 0x70, 0xc9,
	0x80, 0xcb, 0x1e, 0x29, 0xd8, 0xf2, 0xdd, 0x7c, 0x47, 0x0b, 0xd5, 0x18, 0x5a, 0xd1, 0x8d, 0x74,
	0xef, 0xad, 0x66, 0x7b, 0x4f, 0x77, 0xa9, 0x8e, 0x5c, 0x79, 0x9b, 0xb5, 0x24, 0x58, 0x1c, 0xf5,
	0x90, 0x16, 0x25, 0x68, 0x6f, 0xeb, 0x4c, 0xc4, 0x9e, 0x9a, 0xf7, 0x26, 0x14, 0x15, 0x49, 0x09,
	0xc9, 0x9c, 0x8f, 0x25, 0xd6, 0xee, 0xe6, 0x3a, 0x9c, 0x1f, 0xe1, 0xed, 0x92, 0x6e, 0x48, 0x4f,
	0x48, 0x84, 0xe9, 0xc1, 0xe5, 0xa7, 0xbc, 0x87, 0x0a, 0x6e, 0xc3, 0x42, 0xc8, 0x5d, 0xe7, 0x41,
	0xb4, 0x28, 0xb7, 0x4d, 0xd4, 0x4c, 0xf3, 0x21, 0x77, 0x25, 0xae, 0xf9, 0x0f, 0x82, 0xe5, 0x54,
	0xaf, 0xe0, 0x0a, 0x2c, 0x8a, 0xe8, 0xc5, 0x71, 0xa9, 0xcf, 0x7a, 0x8a, 0xc3, 0x06, 0xb9, 0xd4,
	0x8a, 0x56, 0xf0, 0x1d, 0x58, 0x52, 0x0e, 0xa4, 0xc7, 0x42, 0x5f, 0x4c, 0x7e, 0xa4, 0x15, 0xcf,
	0x96, 0x44, 0xc1, 0x1f, 0xc0, 0x79, 0x85, 0x3a, 0x0a, 0x6f, 0xe2, 0xe3, 0xbd, 0x2c, 0x91, 0xee,
	0xc6, 0x31, 0xde, 0x04, 0x63, 0x94, 0xce, 0x38, 0x58, 0x3e, 0xbe, 0x21, 0xcd, 0x8f, 0xe1, 0xca,
	0xb1, 0x1b, 0x75, 0x2d, 0x52, 0x87, 0x10, 0x9d, 0xfd, 0x10, 0x7e, 0x01, 0xcf, 0x4b, 0x78, 0x3d,
	0x30, 0xde, 0xe4, 0xc2, 0xeb, 0xc9, 0x09, 0x7e, 0x8a, 0xb3, 0xf2, 0x06, 0x14, 0x53, 0xe9, 0xbf,
	0xa6, 0xb3, 0xf4, 0x5c, 0x36, 0x4b, 0xdb, 0xbe, 0x48, 0xe4, 0x67, 0xdb, 0x17, 0xb6, 0xde, 0x6a,
	0xfe, 0x86, 0xa0, 0x9c, 0xa7, 0x40, 0xc7, 0xb8, 0x03, 0xcb, 0x7c, 0x8f, 0xf4, 0x29, 0x8f, 0xab,
	0x8d, 0xce, 0x4e, 0xb7, 0xa4, 0x10, 0x74, 0xa1, 0x3f, 0x82, 0x0b, 0x1a, 0x71, 0x54, 0xe9, 0x89,
	0x5b, 0xe8, 0x9c, 0x82, 0x1a, 0x96, 0xfa, 0xeb, 0x38, 0xa2, 0xf7, 0x3d, 0xb1, 0xe7, 0xf6, 0xc9,
	0xc1, 0x99, 0x92, 0x9a, 0x09, 0x76, 0xfa, 0x19, 0x83, 0x35, 0x7f, 0x41, 0x50, 0xc9, 0xd5, 0xa3,
	0x53, 0x3c, 0x2a, 0x25, 0x9a, 0xb8, 0x94, 0xe9, 0xb9, 0x30, 0xfd, 0xcc, 0x73, 0xa1, 0xf1, 0xff,
	0x1c, 0xcc, 0x4a, 0xe1, 0x38, 0x84, 0xa2, 0x1a, 0xf1, 0xb8, 0x92, 0x6a, 0xee, 0xec, 0xfd, 0x61,
	0x54, 0xf3, 0x1d, 0x54, 0xac, 0x66, 0xed, 0xcb, 0x3f, 0xfe, 0xfd, 0x76, 0xda, 0xc4, 0x55, 0x2b,
	0xf2, 0xdc, 0xf0, 0xa9, 0x38, 0x60, 0xfd, 0x7d, 0x2b, 0xfb, 0x4b, 0x05, 0x7f, 0x06, 0xb3, 0xf2,
	0xd8, 0xe1, 0x72, 0x16, 0x34, 0x79, 0xa1, 0x18, 0x95, 0x5c, 0xbb, 0xe6, 0x6c, 0x48, 0xce, 0x75,
	0xbc, 0x96, 0xcf, 0x29, 0x1f, 0xd6, 0xa7, 0x71, 0x5f, 0x7c, 0x1e, 0x05, 0xad, 0x46, 0x3f, 0xce,
	0x83, 0x3f, 0x29, 0xe8, 0xf4, 0xad, 0x71, 0x9a, 0xa0, 0xd5, 0x03, 0x7f, 0x85, 0x00, 0x12, 0x57,
	0xc4, 0xd5, 0x1c, 0x68, 0x69, 0x35, 0x5e, 0x38, 0xc9, 0x3a, 0x24, 0x7f, 0x55, 0x92, 0x37, 0xf0,
	0x4b, 0x63, 0xc8, 0x55, 0xeb, 0x24, 0x73, 0xf0, 0x1d, 0x82, 0x73, 0xe9, 0xc9, 0x87, 0x5f, 0xcc,
	0xa1, 0x7c, 0x7a, 0xa8, 0x1a, 0xb5, 0xf1, 0x8e, 0x5a, 0xdf, 0x6b, 0x52, 0xdf, 0x26, 0xbe, 0x3e,
	0x4e, 0xdf, 0x70, 0x6e, 0x26, 0x35, 0x7e, 0x8f, 0x60, 0x25, 0x33, 0xbc, 0xf0, 0x5a, 0x96, 0x3d,
	0x6f, 0xc6, 0x1a, 0xd7, 0x4e, 0xe5, 0xab, 0xc5, 0x5e, 0x97, 0x62, 0xeb, 0x78, 0x3d, 0x5f, 0xac,
	0xfe, 0x99, 0xe6, 0xd0, 0x91, 0x9c, 0x1f, 0x10, 0xe0, 0xec, 0xf9, 0xc7, 0xc7, 0x30, 0xe7, 0x4e,
	0x2d, 0x63, 0xfd, 0x74, 0xce, 0x5a, 0xe7, 0x0d, 0xa9, 0xd3, 0xc2, 0x1b, 0xf9, 0x3a, 0x0f, 0xf4,
	0xee, 0x84, 0xd0, 0xe6, 0x5b, 0x0f, 0x0f, 0xcb, 0xe8, 0xd1, 0x61, 0x19, 0xfd, 0x7d, 0x58, 0x46,
	0xdf, 0x1c, 0x95, 0xa7, 0x1e, 0x1d, 0x95, 0xa7, 0xfe, 0x3c, 0x2a, 0x4f, 0x7d, 0x58, 0xef, 0x78,
	0x62, 0x2f, 0xbc, 0x57, 0x6f, 0xb3, 0xde, 0x71, 0x90, 0x9b, 0xd6, 0x27, 0x31, 0xae, 0x18, 0x04,
	0x94, 0xdf, 0x2b, 0xca, 0x7f, 0x1a, 0x5e, 0x79, 0x12, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x97, 0x44,
	0x1c, 0xf1, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Vault queries a vault by its ID.
	Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	// Vaults queries all vaults.
	Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error)
	// VaultValue queries the USD value of a vault.
	VaultValue(ctx context.Context, in *QueryVaultValue, opts ...grpc.CallOption) (*QueryVaultValueResponse, error)
	// VaultPositions queries the positions of a vault.
	VaultPositions(ctx context.Context, in *QueryVaultPositionsRequest, opts ...grpc.CallOption) (*QueryVaultPositionsResponse, error)
	// DepositEstimation queries the estimated deposit amount for a vault.
	DepositEstimation(ctx context.Context, in *QueryDepositEstimationRequest, opts ...grpc.CallOption) (*QueryDepositEstimationResponse, error)
	// WithdrawEstimation queries the estimated withdraw amount for a vault.
	WithdrawEstimation(ctx context.Context, in *QueryWithdrawEstimationRequest, opts ...grpc.CallOption) (*QueryWithdrawEstimationResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Vault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error) {
	out := new(QueryVaultsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Vaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultValue(ctx context.Context, in *QueryVaultValue, opts ...grpc.CallOption) (*QueryVaultValueResponse, error) {
	out := new(QueryVaultValueResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/VaultValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultPositions(ctx context.Context, in *QueryVaultPositionsRequest, opts ...grpc.CallOption) (*QueryVaultPositionsResponse, error) {
	out := new(QueryVaultPositionsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/VaultPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositEstimation(ctx context.Context, in *QueryDepositEstimationRequest, opts ...grpc.CallOption) (*QueryDepositEstimationResponse, error) {
	out := new(QueryDepositEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/DepositEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawEstimation(ctx context.Context, in *QueryWithdrawEstimationRequest, opts ...grpc.CallOption) (*QueryWithdrawEstimationResponse, error) {
	out := new(QueryWithdrawEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/WithdrawEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Vault queries a vault by its ID.
	Vault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	// Vaults queries all vaults.
	Vaults(context.Context, *QueryVaultsRequest) (*QueryVaultsResponse, error)
	// VaultValue queries the USD value of a vault.
	VaultValue(context.Context, *QueryVaultValue) (*QueryVaultValueResponse, error)
	// VaultPositions queries the positions of a vault.
	VaultPositions(context.Context, *QueryVaultPositionsRequest) (*QueryVaultPositionsResponse, error)
	// DepositEstimation queries the estimated deposit amount for a vault.
	DepositEstimation(context.Context, *QueryDepositEstimationRequest) (*QueryDepositEstimationResponse, error)
	// WithdrawEstimation queries the estimated withdraw amount for a vault.
	WithdrawEstimation(context.Context, *QueryWithdrawEstimationRequest) (*QueryWithdrawEstimationResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Vault(ctx context.Context, req *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vault not implemented")
}
func (*UnimplementedQueryServer) Vaults(ctx context.Context, req *QueryVaultsRequest) (*QueryVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vaults not implemented")
}
func (*UnimplementedQueryServer) VaultValue(ctx context.Context, req *QueryVaultValue) (*QueryVaultValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultValue not implemented")
}
func (*UnimplementedQueryServer) VaultPositions(ctx context.Context, req *QueryVaultPositionsRequest) (*QueryVaultPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultPositions not implemented")
}
func (*UnimplementedQueryServer) DepositEstimation(ctx context.Context, req *QueryDepositEstimationRequest) (*QueryDepositEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositEstimation not implemented")
}
func (*UnimplementedQueryServer) WithdrawEstimation(ctx context.Context, req *QueryWithdrawEstimationRequest) (*QueryWithdrawEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawEstimation not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Vault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Vaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vaults(ctx, req.(*QueryVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/VaultValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultValue(ctx, req.(*QueryVaultValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/VaultPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultPositions(ctx, req.(*QueryVaultPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/DepositEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositEstimation(ctx, req.(*QueryDepositEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/WithdrawEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawEstimation(ctx, req.(*QueryWithdrawEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.vaults.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Vault",
			Handler:    _Query_Vault_Handler,
		},
		{
			MethodName: "Vaults",
			Handler:    _Query_Vaults_Handler,
		},
		{
			MethodName: "VaultValue",
			Handler:    _Query_VaultValue_Handler,
		},
		{
			MethodName: "VaultPositions",
			Handler:    _Query_VaultPositions_Handler,
		},
		{
			MethodName: "DepositEstimation",
			Handler:    _Query_DepositEstimation_Handler,
		},
		{
			MethodName: "WithdrawEstimation",
			Handler:    _Query_WithdrawEstimation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/vaults/query.proto",
}

func (m *VaultAndData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultAndData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultAndData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.DepositsUsed.Size()
		i -= size
		if _, err := m.DepositsUsed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalDepositsUsd.Size()
		i -= size
		if _, err := m.TotalDepositsUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.PnlUsd.Size()
		i -= size
		if _, err := m.PnlUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EdenApr.Size()
		i -= size
		if _, err := m.EdenApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Vault != nil {
		{
			size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x10
	}
	if m.VaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Days != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Days))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdValue.Size()
		i -= size
		if _, err := m.UsdValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenUsdValue.Size()
		i -= size
		if _, err := m.TokenUsdValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.TokenDenom) > 0 {
		i -= len(m.TokenDenom)
		copy(dAtA[i:], m.TokenDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositEstimationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositEstimationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositEstimationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositEstimationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositEstimationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositEstimationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesUsdValue.Size()
		i -= size
		if _, err := m.SharesUsdValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.SharesAmount.Size()
		i -= size
		if _, err := m.SharesAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawEstimationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawEstimationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawEstimationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesAmount.Size()
		i -= size
		if _, err := m.SharesAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawEstimationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawEstimationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawEstimationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdValue.Size()
		i -= size
		if _, err := m.UsdValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VaultAndData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vault != nil {
		l = m.Vault.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.EdenApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.PnlUsd.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalDepositsUsd.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.DepositsUsed.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovQuery(uint64(m.VaultId))
	}
	if m.Days != 0 {
		n += 1 + sovQuery(uint64(m.Days))
	}
	return n
}

func (m *QueryVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vault.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Days != 0 {
		n += 1 + sovQuery(uint64(m.Days))
	}
	return n
}

func (m *QueryVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVaultValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovQuery(uint64(m.VaultId))
	}
	return n
}

func (m *QueryVaultValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UsdValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PositionToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TokenUsdValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVaultPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovQuery(uint64(m.VaultId))
	}
	return n
}

func (m *QueryVaultPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDepositEstimationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovQuery(uint64(m.VaultId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositEstimationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharesAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.SharesUsdValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrawEstimationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultId != 0 {
		n += 1 + sovQuery(uint64(m.VaultId))
	}
	l = m.SharesAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryWithdrawEstimationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UsdValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VaultAndData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultAndData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultAndData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vault == nil {
				m.Vault = &Vault{}
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PnlUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PnlUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositsUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDepositsUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositsUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositsUsed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, PositionToken{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, VaultAndData{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenUsdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenUsdValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, PositionToken{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositEstimationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositEstimationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositEstimationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositEstimationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositEstimationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositEstimationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesUsdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesUsdValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawEstimationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawEstimationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawEstimationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawEstimationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawEstimationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawEstimationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
