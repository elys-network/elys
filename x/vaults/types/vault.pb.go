// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/vaults/vault.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vault struct {
	DepositDenom string `protobuf:"bytes,1,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	// Max amount vault can hold in USD
	MaxAmountUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max_amount_usd,json=maxAmountUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_amount_usd"`
	// Coins allowed to trade in the vault
	AllowedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=allowed_coins,json=allowedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"allowed_coins"`
	// Actions that can be performed on the vault
	AllowedActions []uint64 `protobuf:"varint,4,rep,packed,name=allowed_actions,json=allowedActions,proto3" json:"allowed_actions,omitempty"`
	Id             uint64   `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7b934509148ab1a, []int{0}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *Vault) GetAllowedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AllowedCoins
	}
	return nil
}

func (m *Vault) GetAllowedActions() []uint64 {
	if m != nil {
		return m.AllowedActions
	}
	return nil
}

func (m *Vault) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Action struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7b934509148ab1a, []int{1}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Action.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return m.Size()
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Action) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Vault)(nil), "elys.vaults.Vault")
	proto.RegisterType((*Action)(nil), "elys.vaults.Action")
}

func init() { proto.RegisterFile("elys/vaults/vault.proto", fileDescriptor_e7b934509148ab1a) }

var fileDescriptor_e7b934509148ab1a = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x6e, 0x13, 0x31,
	0x14, 0xc6, 0x33, 0x49, 0x5a, 0x09, 0x37, 0x0d, 0xc2, 0x42, 0xea, 0xb4, 0x48, 0x93, 0xa8, 0x2c,
	0x18, 0x09, 0x62, 0x13, 0x38, 0x41, 0x43, 0xd8, 0xb1, 0x1a, 0x09, 0x90, 0xd8, 0x8c, 0x9c, 0xb1,
	0x35, 0xb5, 0x12, 0xfb, 0x8d, 0x62, 0x27, 0x4d, 0x6e, 0xc1, 0x39, 0x58, 0xb1, 0xe0, 0x10, 0x5d,
	0x56, 0xac, 0x10, 0x8b, 0x82, 0x92, 0x8b, 0x54, 0xfe, 0x13, 0xa9, 0x9b, 0xb1, 0xdf, 0xf7, 0xf3,
	0x9b, 0xef, 0xb3, 0x1f, 0x3a, 0x13, 0x8b, 0xad, 0xa1, 0x6b, 0xb6, 0x5a, 0xd8, 0xb8, 0x90, 0x66,
	0x09, 0x16, 0xf0, 0x89, 0x03, 0x24, 0x80, 0x8b, 0x67, 0x4c, 0x49, 0x0d, 0xd4, 0x7f, 0x03, 0xbf,
	0x38, 0xab, 0xc0, 0x28, 0x30, 0x54, 0x99, 0x9a, 0xae, 0xc7, 0x6e, 0x89, 0xe0, 0x3c, 0x80, 0xd2,
	0x57, 0x34, 0x14, 0x11, 0x3d, 0xaf, 0xa1, 0x86, 0xa0, 0xbb, 0x5d, 0x54, 0xd3, 0xc7, 0x11, 0x1a,
	0xb6, 0x64, 0xea, 0x70, 0x3e, 0x8b, 0x1e, 0x33, 0x66, 0x04, 0x5d, 0x8f, 0x67, 0xc2, 0xb2, 0x31,
	0xad, 0x40, 0xea, 0xc0, 0x2f, 0x7f, 0xb6, 0xd1, 0xd1, 0x17, 0xd7, 0x87, 0x5f, 0xa2, 0x53, 0x2e,
	0x1a, 0x30, 0xd2, 0x96, 0x5c, 0x68, 0x50, 0x69, 0x32, 0x4c, 0xf2, 0x27, 0x45, 0x2f, 0x8a, 0x53,
	0xa7, 0xe1, 0xaf, 0xa8, 0xaf, 0xd8, 0xa6, 0x64, 0x0a, 0x56, 0xda, 0x96, 0x2b, 0xc3, 0xd3, 0xb6,
	0x3b, 0x35, 0x19, 0xdf, 0xde, 0x0f, 0x5a, 0x7f, 0xef, 0x07, 0x2f, 0x82, 0x9d, 0xe1, 0x73, 0x22,
	0x81, 0x2a, 0x66, 0xaf, 0xc9, 0x27, 0x51, 0xb3, 0x6a, 0x3b, 0x15, 0xd5, 0xef, 0x5f, 0x23, 0x14,
	0xef, 0x32, 0x15, 0x55, 0xd1, 0x53, 0x6c, 0x73, 0xe5, 0xff, 0xf3, 0xd9, 0x70, 0xdc, 0xa0, 0x53,
	0xb6, 0x58, 0xc0, 0x8d, 0xe0, 0xa5, 0x4b, 0x67, 0xd2, 0xce, 0xb0, 0x93, 0x9f, 0xbc, 0x3b, 0x27,
	0xb1, 0xc3, 0xe5, 0x27, 0x31, 0x3f, 0xf9, 0x00, 0x52, 0x4f, 0xde, 0x3a, 0xcb, 0x1f, 0xff, 0x06,
	0x79, 0x2d, 0xed, 0xf5, 0x6a, 0x46, 0x2a, 0x50, 0xf1, 0xa9, 0xe2, 0x32, 0x32, 0x7c, 0x4e, 0xed,
	0xb6, 0x11, 0xc6, 0x37, 0x98, 0xa2, 0x17, 0x1d, 0x7c, 0x85, 0x5f, 0xa1, 0xa7, 0x07, 0x47, 0x56,
	0x59, 0x09, 0xda, 0xa4, 0xdd, 0x61, 0x27, 0xef, 0x16, 0xfd, 0x28, 0x5f, 0x05, 0x15, 0xf7, 0x51,
	0x5b, 0xf2, 0xf4, 0x68, 0x98, 0xe4, 0xdd, 0xa2, 0x2d, 0xf9, 0xe5, 0x1b, 0x74, 0x1c, 0x50, 0x24,
	0xc9, 0x81, 0x60, 0x8c, 0xba, 0x9a, 0x29, 0x11, 0xde, 0xa4, 0xf0, 0xfb, 0xc9, 0xc7, 0xdb, 0x5d,
	0x96, 0xdc, 0xed, 0xb2, 0xe4, 0xff, 0x2e, 0x4b, 0xbe, 0xef, 0xb3, 0xd6, 0xdd, 0x3e, 0x6b, 0xfd,
	0xd9, 0x67, 0xad, 0x6f, 0xaf, 0x1f, 0x05, 0x77, 0xf3, 0x1b, 0x69, 0x61, 0x6f, 0x60, 0x39, 0xf7,
	0x05, 0xdd, 0x1c, 0xc6, 0xe9, 0x6f, 0x30, 0x3b, 0xf6, 0xe3, 0x7a, 0xff, 0x10, 0x00, 0x00, 0xff,
	0xff, 0xce, 0x72, 0x15, 0x35, 0x6d, 0x02, 0x00, 0x00,
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AllowedActions) > 0 {
		dAtA2 := make([]byte, len(m.AllowedActions)*10)
		var j1 int
		for _, num := range m.AllowedActions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintVault(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedCoins) > 0 {
		for iNdEx := len(m.AllowedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.MaxAmountUsd.Size()
		i -= size
		if _, err := m.MaxAmountUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Action) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Action) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Action) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.MaxAmountUsd.Size()
	n += 1 + l + sovVault(uint64(l))
	if len(m.AllowedCoins) > 0 {
		for _, e := range m.AllowedCoins {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	if len(m.AllowedActions) > 0 {
		l = 0
		for _, e := range m.AllowedActions {
			l += sovVault(uint64(e))
		}
		n += 1 + sovVault(uint64(l)) + l
	}
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	return n
}

func (m *Action) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmountUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCoins = append(m.AllowedCoins, types.Coin{})
			if err := m.AllowedCoins[len(m.AllowedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedActions = append(m.AllowedActions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVault
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVault
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVault
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AllowedActions) == 0 {
					m.AllowedActions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVault
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedActions = append(m.AllowedActions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedActions", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Action) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Action: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Action: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
