// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/vaults/vault.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Vault is a structure that defines a vault
type Vault struct {
	DepositDenom string `protobuf:"bytes,1,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	// Max amount vault can hold in USD
	MaxAmountUsd cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=max_amount_usd,json=maxAmountUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_amount_usd"`
	// Coins allowed to trade in the vault
	AllowedCoins      []string                    `protobuf:"bytes,3,rep,name=allowed_coins,json=allowedCoins,proto3" json:"allowed_coins,omitempty"`
	RewardCoins       []string                    `protobuf:"bytes,4,rep,name=reward_coins,json=rewardCoins,proto3" json:"reward_coins,omitempty"`
	BenchmarkCoin     string                      `protobuf:"bytes,5,opt,name=benchmark_coin,json=benchmarkCoin,proto3" json:"benchmark_coin,omitempty"`
	Manager           string                      `protobuf:"bytes,6,opt,name=manager,proto3" json:"manager,omitempty"`
	Id                uint64                      `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
	ManagementFee     cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=management_fee,json=managementFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"management_fee"`
	PerformanceFee    cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=performance_fee,json=performanceFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"performance_fee"`
	ProtocolFeeShare  cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=protocol_fee_share,json=protocolFeeShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"protocol_fee_share"`
	WithdrawStrategy  []*Action                   `protobuf:"bytes,11,rep,name=withdraw_strategy,json=withdrawStrategy,proto3" json:"withdraw_strategy,omitempty"`
	LockupPeriod      uint64                      `protobuf:"varint,12,opt,name=lockup_period,json=lockupPeriod,proto3" json:"lockup_period,omitempty"`
	LastVaultUsdValue cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=last_vault_usd_value,json=lastVaultUsdValue,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"last_vault_usd_value"`
}

func (m *Vault) Reset()         { *m = Vault{} }
func (m *Vault) String() string { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()    {}
func (*Vault) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7b934509148ab1a, []int{0}
}
func (m *Vault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vault.Merge(m, src)
}
func (m *Vault) XXX_Size() int {
	return m.Size()
}
func (m *Vault) XXX_DiscardUnknown() {
	xxx_messageInfo_Vault.DiscardUnknown(m)
}

var xxx_messageInfo_Vault proto.InternalMessageInfo

func (m *Vault) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *Vault) GetAllowedCoins() []string {
	if m != nil {
		return m.AllowedCoins
	}
	return nil
}

func (m *Vault) GetRewardCoins() []string {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

func (m *Vault) GetBenchmarkCoin() string {
	if m != nil {
		return m.BenchmarkCoin
	}
	return ""
}

func (m *Vault) GetManager() string {
	if m != nil {
		return m.Manager
	}
	return ""
}

func (m *Vault) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vault) GetWithdrawStrategy() []*Action {
	if m != nil {
		return m.WithdrawStrategy
	}
	return nil
}

func (m *Vault) GetLockupPeriod() uint64 {
	if m != nil {
		return m.LockupPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*Vault)(nil), "elys.vaults.Vault")
}

func init() { proto.RegisterFile("elys/vaults/vault.proto", fileDescriptor_e7b934509148ab1a) }

var fileDescriptor_e7b934509148ab1a = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0x87, 0x09, 0xb4, 0x74, 0x35, 0x7f, 0xd6, 0x66, 0x48, 0xf3, 0x3a, 0x29, 0x65, 0x9b, 0x26,
	0x21, 0x4d, 0x04, 0xad, 0xfb, 0x02, 0xa3, 0x63, 0x3d, 0xed, 0x30, 0x81, 0xda, 0x4d, 0xbd, 0x58,
	0x26, 0x7e, 0x1b, 0x22, 0xe2, 0x38, 0xb2, 0x9d, 0x02, 0xdf, 0x62, 0xe7, 0x7d, 0x8e, 0x7e, 0x88,
	0x1e, 0xab, 0x9e, 0xa6, 0x1d, 0xaa, 0x09, 0xbe, 0xc8, 0x64, 0x27, 0xb4, 0x9c, 0x39, 0x81, 0x9f,
	0xf7, 0xa7, 0xc7, 0x7e, 0xdf, 0xd8, 0xe8, 0x25, 0xc4, 0x0b, 0xd5, 0xbb, 0xa6, 0x59, 0xac, 0x8b,
	0x1f, 0x3f, 0x95, 0x42, 0x0b, 0xb7, 0x66, 0x0a, 0x7e, 0x5e, 0x38, 0x7a, 0x15, 0x08, 0xc5, 0x85,
	0x22, 0xb6, 0xd4, 0xcb, 0x17, 0x79, 0xee, 0xa8, 0x15, 0x8a, 0x50, 0xe4, 0xdc, 0xfc, 0x5b, 0xd3,
	0x4d, 0xad, 0x9e, 0xe7, 0xf4, 0xed, 0xef, 0x2a, 0xda, 0xbd, 0x30, 0xcc, 0x7d, 0x87, 0x1a, 0x0c,
	0x52, 0xa1, 0x22, 0x4d, 0x18, 0x24, 0x82, 0x63, 0xa7, 0xed, 0x74, 0xf6, 0x87, 0xf5, 0x02, 0x0e,
	0x0c, 0x73, 0x7f, 0xa0, 0x26, 0xa7, 0x73, 0x42, 0xb9, 0xc8, 0x12, 0x4d, 0x32, 0xc5, 0x70, 0xd9,
	0xa4, 0x4e, 0x3f, 0xde, 0x3e, 0x1c, 0x97, 0xfe, 0x3e, 0x1c, 0xbf, 0xce, 0x0f, 0xa2, 0xd8, 0xd4,
	0x8f, 0x44, 0x8f, 0x53, 0x3d, 0xf1, 0xbf, 0x41, 0x48, 0x83, 0xc5, 0x00, 0x82, 0xfb, 0x9b, 0x2e,
	0x2a, 0xce, 0x39, 0x80, 0x60, 0x58, 0xe7, 0x74, 0xde, 0xb7, 0x9e, 0x73, 0xc5, 0xcc, 0xee, 0x34,
	0x8e, 0xc5, 0x0c, 0x18, 0x09, 0x44, 0x94, 0x28, 0x5c, 0x69, 0x57, 0xcc, 0xee, 0x05, 0xfc, 0x62,
	0x98, 0xfb, 0x06, 0xd5, 0x25, 0xcc, 0xa8, 0x5c, 0x67, 0x76, 0x6c, 0xa6, 0x96, 0xb3, 0x3c, 0xf2,
	0x1e, 0x35, 0xc7, 0x90, 0x04, 0x13, 0x4e, 0xe5, 0xd4, 0xa6, 0xf0, 0xae, 0x6d, 0xa3, 0xf1, 0x48,
	0x4d, 0xce, 0x3d, 0x41, 0x7b, 0x9c, 0x26, 0x34, 0x04, 0x89, 0xab, 0xb6, 0x01, 0x7c, 0x7f, 0xd3,
	0x6d, 0x15, 0xa7, 0xeb, 0x33, 0x26, 0x41, 0xa9, 0x91, 0x96, 0x51, 0x12, 0x0e, 0xd7, 0x41, 0xb7,
	0x89, 0xca, 0x11, 0xc3, 0x7b, 0x6d, 0xa7, 0xb3, 0x33, 0x2c, 0x47, 0xcc, 0xfd, 0x69, 0x66, 0x61,
	0x4a, 0x1c, 0x12, 0x4d, 0xae, 0x00, 0xf0, 0xb3, 0x6d, 0x67, 0xd1, 0x78, 0x12, 0x9d, 0x01, 0xb8,
	0x97, 0xe8, 0x79, 0x0a, 0xf2, 0x4a, 0x48, 0x4e, 0x93, 0x00, 0xac, 0x7a, 0x7f, 0x5b, 0x75, 0x73,
	0xc3, 0x64, 0xdc, 0x04, 0xb9, 0xf6, 0xcb, 0x07, 0x22, 0x36, 0x62, 0xa2, 0x26, 0x54, 0x02, 0x46,
	0xdb, 0xea, 0x0f, 0xd6, 0xb2, 0x33, 0x80, 0x91, 0x51, 0xb9, 0x9f, 0xd1, 0xe1, 0x2c, 0xd2, 0x13,
	0x26, 0xe9, 0x8c, 0x28, 0x2d, 0xa9, 0x86, 0x70, 0x81, 0x6b, 0xed, 0x4a, 0xa7, 0x76, 0xf2, 0xc2,
	0xdf, 0xb8, 0xc1, 0x7e, 0x3f, 0xd0, 0x91, 0x48, 0x86, 0x07, 0xeb, 0xf4, 0xa8, 0x08, 0x9b, 0xbb,
	0x10, 0x8b, 0x60, 0x9a, 0xa5, 0x24, 0x05, 0x19, 0x09, 0x86, 0xeb, 0x76, 0xe6, 0xf5, 0x1c, 0x7e,
	0xb7, 0xcc, 0x1d, 0xa3, 0x56, 0x4c, 0x95, 0x26, 0x56, 0x66, 0x6e, 0x22, 0xb9, 0xa6, 0x71, 0x06,
	0xb8, 0xb1, 0x6d, 0x27, 0x87, 0x46, 0x67, 0x9f, 0xc2, 0xb9, 0x62, 0x17, 0xc6, 0x75, 0xfa, 0xf5,
	0x76, 0xe9, 0x39, 0x77, 0x4b, 0xcf, 0xf9, 0xb7, 0xf4, 0x9c, 0x5f, 0x2b, 0xaf, 0x74, 0xb7, 0xf2,
	0x4a, 0x7f, 0x56, 0x5e, 0xe9, 0xf2, 0x43, 0x18, 0xe9, 0x49, 0x36, 0xf6, 0x03, 0xc1, 0x7b, 0xa6,
	0xa7, 0x6e, 0x02, 0x7a, 0x26, 0xe4, 0xd4, 0x2e, 0x7a, 0xf3, 0xc7, 0x67, 0xb6, 0x48, 0x41, 0x8d,
	0xab, 0x76, 0x46, 0x9f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x97, 0x38, 0x21, 0x7c, 0xd9, 0x03,
	0x00, 0x00,
}

func (m *Vault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LastVaultUsdValue.Size()
		i -= size
		if _, err := m.LastVaultUsdValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.LockupPeriod != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.LockupPeriod))
		i--
		dAtA[i] = 0x60
	}
	if len(m.WithdrawStrategy) > 0 {
		for iNdEx := len(m.WithdrawStrategy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawStrategy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVault(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size := m.ProtocolFeeShare.Size()
		i -= size
		if _, err := m.ProtocolFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.PerformanceFee.Size()
		i -= size
		if _, err := m.PerformanceFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ManagementFee.Size()
		i -= size
		if _, err := m.ManagementFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Id != 0 {
		i = encodeVarintVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintVault(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BenchmarkCoin) > 0 {
		i -= len(m.BenchmarkCoin)
		copy(dAtA[i:], m.BenchmarkCoin)
		i = encodeVarintVault(dAtA, i, uint64(len(m.BenchmarkCoin)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RewardCoins[iNdEx])
			copy(dAtA[i:], m.RewardCoins[iNdEx])
			i = encodeVarintVault(dAtA, i, uint64(len(m.RewardCoins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AllowedCoins) > 0 {
		for iNdEx := len(m.AllowedCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCoins[iNdEx])
			copy(dAtA[i:], m.AllowedCoins[iNdEx])
			i = encodeVarintVault(dAtA, i, uint64(len(m.AllowedCoins[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.MaxAmountUsd.Size()
		i -= size
		if _, err := m.MaxAmountUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintVault(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = m.MaxAmountUsd.Size()
	n += 1 + l + sovVault(uint64(l))
	if len(m.AllowedCoins) > 0 {
		for _, s := range m.AllowedCoins {
			l = len(s)
			n += 1 + l + sovVault(uint64(l))
		}
	}
	if len(m.RewardCoins) > 0 {
		for _, s := range m.RewardCoins {
			l = len(s)
			n += 1 + l + sovVault(uint64(l))
		}
	}
	l = len(m.BenchmarkCoin)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovVault(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovVault(uint64(m.Id))
	}
	l = m.ManagementFee.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.PerformanceFee.Size()
	n += 1 + l + sovVault(uint64(l))
	l = m.ProtocolFeeShare.Size()
	n += 1 + l + sovVault(uint64(l))
	if len(m.WithdrawStrategy) > 0 {
		for _, e := range m.WithdrawStrategy {
			l = e.Size()
			n += 1 + l + sovVault(uint64(l))
		}
	}
	if m.LockupPeriod != 0 {
		n += 1 + sovVault(uint64(m.LockupPeriod))
	}
	l = m.LastVaultUsdValue.Size()
	n += 1 + l + sovVault(uint64(l))
	return n
}

func sovVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVault(x uint64) (n int) {
	return sovVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAmountUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCoins = append(m.AllowedCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BenchmarkCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BenchmarkCoin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagementFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ManagementFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerformanceFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProtocolFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawStrategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawStrategy = append(m.WithdrawStrategy, &Action{})
			if err := m.WithdrawStrategy[len(m.WithdrawStrategy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockupPeriod", wireType)
			}
			m.LockupPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockupPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastVaultUsdValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastVaultUsdValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVault = fmt.Errorf("proto: unexpected end of group")
)
