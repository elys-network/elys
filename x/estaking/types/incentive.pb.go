// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/estaking/incentive.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IncentiveInfo struct {
	// reward amount in eden for 1 year
	EdenAmountPerYear cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=eden_amount_per_year,json=edenAmountPerYear,proto3,customtype=cosmossdk.io/math.Int" json:"eden_amount_per_year"`
	// blocks distributed
	BlocksDistributed int64 `protobuf:"varint,2,opt,name=blocks_distributed,json=blocksDistributed,proto3" json:"blocks_distributed,omitempty"`
}

func (m *IncentiveInfo) Reset()         { *m = IncentiveInfo{} }
func (m *IncentiveInfo) String() string { return proto.CompactTextString(m) }
func (*IncentiveInfo) ProtoMessage()    {}
func (*IncentiveInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9de1d3bcda4768b, []int{0}
}
func (m *IncentiveInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveInfo.Merge(m, src)
}
func (m *IncentiveInfo) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveInfo.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveInfo proto.InternalMessageInfo

func (m *IncentiveInfo) GetBlocksDistributed() int64 {
	if m != nil {
		return m.BlocksDistributed
	}
	return 0
}

func init() {
	proto.RegisterType((*IncentiveInfo)(nil), "elys.estaking.IncentiveInfo")
}

func init() { proto.RegisterFile("elys/estaking/incentive.proto", fileDescriptor_e9de1d3bcda4768b) }

var fileDescriptor_e9de1d3bcda4768b = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x4f, 0x4a, 0xc3, 0x40,
	0x14, 0xc6, 0x33, 0x0a, 0x82, 0x81, 0x2e, 0x1a, 0x2a, 0xd4, 0x82, 0x69, 0x71, 0x55, 0x90, 0x64,
	0x16, 0x9e, 0xc0, 0x22, 0x48, 0x76, 0xd2, 0x9d, 0x22, 0x84, 0xfc, 0x79, 0x4d, 0x87, 0x74, 0xe6,
	0x85, 0x99, 0x17, 0xb5, 0xb7, 0xf0, 0x00, 0x1e, 0xc3, 0x43, 0x74, 0x59, 0x5c, 0x89, 0x8b, 0x22,
	0xed, 0x45, 0x24, 0x99, 0x96, 0xee, 0xe6, 0xe3, 0xf7, 0xde, 0x6f, 0x78, 0x9f, 0x7b, 0x05, 0x8b,
	0xa5, 0xe1, 0x60, 0x28, 0x29, 0x85, 0x2a, 0xb8, 0x50, 0x19, 0x28, 0x12, 0xaf, 0x10, 0x56, 0x1a,
	0x09, 0xbd, 0x4e, 0x83, 0xc3, 0x03, 0x1e, 0xf4, 0x0a, 0x2c, 0xb0, 0x25, 0xbc, 0x79, 0xd9, 0xa1,
	0xc1, 0xb0, 0x40, 0x2c, 0x16, 0xc0, 0xdb, 0x94, 0xd6, 0x33, 0x4e, 0x42, 0x36, 0x2b, 0xb2, 0xda,
	0x0f, 0x5c, 0x66, 0x68, 0x24, 0x9a, 0xd8, 0x6e, 0xda, 0x60, 0xd1, 0xf5, 0x27, 0x73, 0x3b, 0xd1,
	0xe1, 0xd3, 0x48, 0xcd, 0xd0, 0x7b, 0x71, 0x7b, 0x90, 0x83, 0x8a, 0x13, 0x89, 0xb5, 0xa2, 0xb8,
	0x02, 0x1d, 0x2f, 0x21, 0xd1, 0x7d, 0x36, 0x62, 0xe3, 0xf3, 0xc9, 0xcd, 0x6a, 0x33, 0x74, 0x7e,
	0x37, 0xc3, 0x0b, 0x6b, 0x31, 0x79, 0x19, 0x0a, 0xe4, 0x32, 0xa1, 0x79, 0x18, 0x29, 0xfa, 0xfe,
	0x0a, 0xdc, 0xbd, 0x3e, 0x52, 0x34, 0xed, 0x36, 0xa2, 0xbb, 0xd6, 0xf3, 0x08, 0xfa, 0x09, 0x12,
	0xed, 0x05, 0xae, 0x97, 0x2e, 0x30, 0x2b, 0x4d, 0x9c, 0x0b, 0x43, 0x5a, 0xa4, 0x35, 0x41, 0xde,
	0x3f, 0x19, 0xb1, 0xf1, 0xe9, 0xb4, 0x6b, 0xc9, 0xfd, 0x11, 0x4c, 0x1e, 0x56, 0x5b, 0x9f, 0xad,
	0xb7, 0x3e, 0xfb, 0xdb, 0xfa, 0xec, 0x63, 0xe7, 0x3b, 0xeb, 0x9d, 0xef, 0xfc, 0xec, 0x7c, 0xe7,
	0x39, 0x28, 0x04, 0xcd, 0xeb, 0x34, 0xcc, 0x50, 0xf2, 0xa6, 0xa4, 0x40, 0x01, 0xbd, 0xa1, 0x2e,
	0xdb, 0xc0, 0xdf, 0x8f, 0x95, 0xd2, 0xb2, 0x02, 0x93, 0x9e, 0xb5, 0xe7, 0xde, 0xfe, 0x07, 0x00,
	0x00, 0xff, 0xff, 0xf6, 0xa9, 0x53, 0xa9, 0x70, 0x01, 0x00, 0x00,
}

func (m *IncentiveInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlocksDistributed != 0 {
		i = encodeVarintIncentive(dAtA, i, uint64(m.BlocksDistributed))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.EdenAmountPerYear.Size()
		i -= size
		if _, err := m.EdenAmountPerYear.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIncentive(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIncentive(dAtA []byte, offset int, v uint64) int {
	offset -= sovIncentive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IncentiveInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EdenAmountPerYear.Size()
	n += 1 + l + sovIncentive(uint64(l))
	if m.BlocksDistributed != 0 {
		n += 1 + sovIncentive(uint64(m.BlocksDistributed))
	}
	return n
}

func sovIncentive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIncentive(x uint64) (n int) {
	return sovIncentive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IncentiveInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenAmountPerYear", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIncentive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIncentive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenAmountPerYear.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlocksDistributed", wireType)
			}
			m.BlocksDistributed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlocksDistributed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIncentive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIncentive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIncentive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIncentive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIncentive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIncentive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIncentive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIncentive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIncentive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIncentive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIncentive = fmt.Errorf("proto: unexpected end of group")
)
