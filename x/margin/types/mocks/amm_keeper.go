// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	ammtypes "github.com/elys-network/elys/x/amm/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AmmKeeper is an autogenerated mock type for the AmmKeeper type
type AmmKeeper struct {
	mock.Mock
}

type AmmKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AmmKeeper) EXPECT() *AmmKeeper_Expecter {
	return &AmmKeeper_Expecter{mock: &_m.Mock}
}

// GetAllPool provides a mock function with given fields: _a0
func (_m *AmmKeeper) GetAllPool(_a0 types.Context) []ammtypes.Pool {
	ret := _m.Called(_a0)

	var r0 []ammtypes.Pool
	if rf, ok := ret.Get(0).(func(types.Context) []ammtypes.Pool); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ammtypes.Pool)
		}
	}

	return r0
}

// AmmKeeper_GetAllPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPool'
type AmmKeeper_GetAllPool_Call struct {
	*mock.Call
}

// GetAllPool is a helper method to define mock.On call
//   - _a0 types.Context
func (_e *AmmKeeper_Expecter) GetAllPool(_a0 interface{}) *AmmKeeper_GetAllPool_Call {
	return &AmmKeeper_GetAllPool_Call{Call: _e.mock.On("GetAllPool", _a0)}
}

func (_c *AmmKeeper_GetAllPool_Call) Run(run func(_a0 types.Context)) *AmmKeeper_GetAllPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *AmmKeeper_GetAllPool_Call) Return(_a0 []ammtypes.Pool) *AmmKeeper_GetAllPool_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_GetAllPool_Call) RunAndReturn(run func(types.Context) []ammtypes.Pool) *AmmKeeper_GetAllPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPoolIdsWithDenom provides a mock function with given fields: _a0, _a1
func (_m *AmmKeeper) GetAllPoolIdsWithDenom(_a0 types.Context, _a1 string) []uint64 {
	ret := _m.Called(_a0, _a1)

	var r0 []uint64
	if rf, ok := ret.Get(0).(func(types.Context, string) []uint64); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	return r0
}

// AmmKeeper_GetAllPoolIdsWithDenom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPoolIdsWithDenom'
type AmmKeeper_GetAllPoolIdsWithDenom_Call struct {
	*mock.Call
}

// GetAllPoolIdsWithDenom is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 string
func (_e *AmmKeeper_Expecter) GetAllPoolIdsWithDenom(_a0 interface{}, _a1 interface{}) *AmmKeeper_GetAllPoolIdsWithDenom_Call {
	return &AmmKeeper_GetAllPoolIdsWithDenom_Call{Call: _e.mock.On("GetAllPoolIdsWithDenom", _a0, _a1)}
}

func (_c *AmmKeeper_GetAllPoolIdsWithDenom_Call) Run(run func(_a0 types.Context, _a1 string)) *AmmKeeper_GetAllPoolIdsWithDenom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string))
	})
	return _c
}

func (_c *AmmKeeper_GetAllPoolIdsWithDenom_Call) Return(_a0 []uint64) *AmmKeeper_GetAllPoolIdsWithDenom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AmmKeeper_GetAllPoolIdsWithDenom_Call) RunAndReturn(run func(types.Context, string) []uint64) *AmmKeeper_GetAllPoolIdsWithDenom_Call {
	_c.Call.Return(run)
	return _c
}

// GetPool provides a mock function with given fields: _a0, _a1
func (_m *AmmKeeper) GetPool(_a0 types.Context, _a1 uint64) (ammtypes.Pool, bool) {
	ret := _m.Called(_a0, _a1)

	var r0 ammtypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (ammtypes.Pool, bool)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) ammtypes.Pool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(ammtypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) bool); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AmmKeeper_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type AmmKeeper_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 uint64
func (_e *AmmKeeper_Expecter) GetPool(_a0 interface{}, _a1 interface{}) *AmmKeeper_GetPool_Call {
	return &AmmKeeper_GetPool_Call{Call: _e.mock.On("GetPool", _a0, _a1)}
}

func (_c *AmmKeeper_GetPool_Call) Run(run func(_a0 types.Context, _a1 uint64)) *AmmKeeper_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *AmmKeeper_GetPool_Call) Return(_a0 ammtypes.Pool, _a1 bool) *AmmKeeper_GetPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AmmKeeper_GetPool_Call) RunAndReturn(run func(types.Context, uint64) (ammtypes.Pool, bool)) *AmmKeeper_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// IterateLiquidityPools provides a mock function with given fields: _a0, _a1
func (_m *AmmKeeper) IterateLiquidityPools(_a0 types.Context, _a1 func(ammtypes.Pool) bool) {
	_m.Called(_a0, _a1)
}

// AmmKeeper_IterateLiquidityPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IterateLiquidityPools'
type AmmKeeper_IterateLiquidityPools_Call struct {
	*mock.Call
}

// IterateLiquidityPools is a helper method to define mock.On call
//   - _a0 types.Context
//   - _a1 func(ammtypes.Pool) bool
func (_e *AmmKeeper_Expecter) IterateLiquidityPools(_a0 interface{}, _a1 interface{}) *AmmKeeper_IterateLiquidityPools_Call {
	return &AmmKeeper_IterateLiquidityPools_Call{Call: _e.mock.On("IterateLiquidityPools", _a0, _a1)}
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) Run(run func(_a0 types.Context, _a1 func(ammtypes.Pool) bool)) *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(func(ammtypes.Pool) bool))
	})
	return _c
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) Return() *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Return()
	return _c
}

func (_c *AmmKeeper_IterateLiquidityPools_Call) RunAndReturn(run func(types.Context, func(ammtypes.Pool) bool)) *AmmKeeper_IterateLiquidityPools_Call {
	_c.Call.Return(run)
	return _c
}

// NewAmmKeeper creates a new instance of AmmKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAmmKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AmmKeeper {
	mock := &AmmKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
