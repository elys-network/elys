// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	ammtypes "github.com/elys-network/elys/x/amm/types"
	margintypes "github.com/elys-network/elys/x/margin/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// OpenChecker is an autogenerated mock type for the OpenChecker type
type OpenChecker struct {
	mock.Mock
}

type OpenChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenChecker) EXPECT() *OpenChecker_Expecter {
	return &OpenChecker_Expecter{mock: &_m.Mock}
}

// CheckLongingAssets provides a mock function with given fields: ctx, collateralAsset, borrowAsset
func (_m *OpenChecker) CheckLongingAssets(ctx types.Context, collateralAsset string, borrowAsset string) error {
	ret := _m.Called(ctx, collateralAsset, borrowAsset)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, string, string) error); ok {
		r0 = rf(ctx, collateralAsset, borrowAsset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckLongingAssets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckLongingAssets'
type OpenChecker_CheckLongingAssets_Call struct {
	*mock.Call
}

// CheckLongingAssets is a helper method to define mock.On call
//   - ctx types.Context
//   - collateralAsset string
//   - borrowAsset string
func (_e *OpenChecker_Expecter) CheckLongingAssets(ctx interface{}, collateralAsset interface{}, borrowAsset interface{}) *OpenChecker_CheckLongingAssets_Call {
	return &OpenChecker_CheckLongingAssets_Call{Call: _e.mock.On("CheckLongingAssets", ctx, collateralAsset, borrowAsset)}
}

func (_c *OpenChecker_CheckLongingAssets_Call) Run(run func(ctx types.Context, collateralAsset string, borrowAsset string)) *OpenChecker_CheckLongingAssets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *OpenChecker_CheckLongingAssets_Call) Return(_a0 error) *OpenChecker_CheckLongingAssets_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckLongingAssets_Call) RunAndReturn(run func(types.Context, string, string) error) *OpenChecker_CheckLongingAssets_Call {
	_c.Call.Return(run)
	return _c
}

// CheckMaxOpenPositions provides a mock function with given fields: ctx
func (_m *OpenChecker) CheckMaxOpenPositions(ctx types.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckMaxOpenPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMaxOpenPositions'
type OpenChecker_CheckMaxOpenPositions_Call struct {
	*mock.Call
}

// CheckMaxOpenPositions is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenChecker_Expecter) CheckMaxOpenPositions(ctx interface{}) *OpenChecker_CheckMaxOpenPositions_Call {
	return &OpenChecker_CheckMaxOpenPositions_Call{Call: _e.mock.On("CheckMaxOpenPositions", ctx)}
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) Run(run func(ctx types.Context)) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) Return(_a0 error) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) RunAndReturn(run func(types.Context) error) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPoolHealth provides a mock function with given fields: ctx, poolId
func (_m *OpenChecker) CheckPoolHealth(ctx types.Context, poolId uint64) error {
	ret := _m.Called(ctx, poolId)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64) error); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckPoolHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPoolHealth'
type OpenChecker_CheckPoolHealth_Call struct {
	*mock.Call
}

// CheckPoolHealth is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *OpenChecker_Expecter) CheckPoolHealth(ctx interface{}, poolId interface{}) *OpenChecker_CheckPoolHealth_Call {
	return &OpenChecker_CheckPoolHealth_Call{Call: _e.mock.On("CheckPoolHealth", ctx, poolId)}
}

func (_c *OpenChecker_CheckPoolHealth_Call) Run(run func(ctx types.Context, poolId uint64)) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OpenChecker_CheckPoolHealth_Call) Return(_a0 error) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckPoolHealth_Call) RunAndReturn(run func(types.Context, uint64) error) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserAuthorization provides a mock function with given fields: ctx, msg
func (_m *OpenChecker) CheckUserAuthorization(ctx types.Context, msg *margintypes.MsgOpen) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *margintypes.MsgOpen) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckUserAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserAuthorization'
type OpenChecker_CheckUserAuthorization_Call struct {
	*mock.Call
}

// CheckUserAuthorization is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *margintypes.MsgOpen
func (_e *OpenChecker_Expecter) CheckUserAuthorization(ctx interface{}, msg interface{}) *OpenChecker_CheckUserAuthorization_Call {
	return &OpenChecker_CheckUserAuthorization_Call{Call: _e.mock.On("CheckUserAuthorization", ctx, msg)}
}

func (_c *OpenChecker_CheckUserAuthorization_Call) Run(run func(ctx types.Context, msg *margintypes.MsgOpen)) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*margintypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_CheckUserAuthorization_Call) Return(_a0 error) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckUserAuthorization_Call) RunAndReturn(run func(types.Context, *margintypes.MsgOpen) error) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// EmitOpenEvent provides a mock function with given fields: ctx, mtp
func (_m *OpenChecker) EmitOpenEvent(ctx types.Context, mtp *margintypes.MTP) {
	_m.Called(ctx, mtp)
}

// OpenChecker_EmitOpenEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmitOpenEvent'
type OpenChecker_EmitOpenEvent_Call struct {
	*mock.Call
}

// EmitOpenEvent is a helper method to define mock.On call
//   - ctx types.Context
//   - mtp *margintypes.MTP
func (_e *OpenChecker_Expecter) EmitOpenEvent(ctx interface{}, mtp interface{}) *OpenChecker_EmitOpenEvent_Call {
	return &OpenChecker_EmitOpenEvent_Call{Call: _e.mock.On("EmitOpenEvent", ctx, mtp)}
}

func (_c *OpenChecker_EmitOpenEvent_Call) Run(run func(ctx types.Context, mtp *margintypes.MTP)) *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*margintypes.MTP))
	})
	return _c
}

func (_c *OpenChecker_EmitOpenEvent_Call) Return() *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *OpenChecker_EmitOpenEvent_Call) RunAndReturn(run func(types.Context, *margintypes.MTP)) *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonNativeAsset provides a mock function with given fields: collateralAsset, borrowAsset
func (_m *OpenChecker) GetNonNativeAsset(collateralAsset string, borrowAsset string) string {
	ret := _m.Called(collateralAsset, borrowAsset)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(collateralAsset, borrowAsset)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OpenChecker_GetNonNativeAsset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonNativeAsset'
type OpenChecker_GetNonNativeAsset_Call struct {
	*mock.Call
}

// GetNonNativeAsset is a helper method to define mock.On call
//   - collateralAsset string
//   - borrowAsset string
func (_e *OpenChecker_Expecter) GetNonNativeAsset(collateralAsset interface{}, borrowAsset interface{}) *OpenChecker_GetNonNativeAsset_Call {
	return &OpenChecker_GetNonNativeAsset_Call{Call: _e.mock.On("GetNonNativeAsset", collateralAsset, borrowAsset)}
}

func (_c *OpenChecker_GetNonNativeAsset_Call) Run(run func(collateralAsset string, borrowAsset string)) *OpenChecker_GetNonNativeAsset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OpenChecker_GetNonNativeAsset_Call) Return(_a0 string) *OpenChecker_GetNonNativeAsset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_GetNonNativeAsset_Call) RunAndReturn(run func(string, string) string) *OpenChecker_GetNonNativeAsset_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLong provides a mock function with given fields: ctx, poolId, msg
func (_m *OpenChecker) OpenLong(ctx types.Context, poolId uint64, msg *margintypes.MsgOpen) (*margintypes.MTP, error) {
	ret := _m.Called(ctx, poolId, msg)

	var r0 *margintypes.MTP
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *margintypes.MsgOpen) (*margintypes.MTP, error)); ok {
		return rf(ctx, poolId, msg)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *margintypes.MsgOpen) *margintypes.MTP); ok {
		r0 = rf(ctx, poolId, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*margintypes.MTP)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, *margintypes.MsgOpen) error); ok {
		r1 = rf(ctx, poolId, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenChecker_OpenLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLong'
type OpenChecker_OpenLong_Call struct {
	*mock.Call
}

// OpenLong is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - msg *margintypes.MsgOpen
func (_e *OpenChecker_Expecter) OpenLong(ctx interface{}, poolId interface{}, msg interface{}) *OpenChecker_OpenLong_Call {
	return &OpenChecker_OpenLong_Call{Call: _e.mock.On("OpenLong", ctx, poolId, msg)}
}

func (_c *OpenChecker_OpenLong_Call) Run(run func(ctx types.Context, poolId uint64, msg *margintypes.MsgOpen)) *OpenChecker_OpenLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(*margintypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_OpenLong_Call) Return(_a0 *margintypes.MTP, _a1 error) *OpenChecker_OpenLong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenChecker_OpenLong_Call) RunAndReturn(run func(types.Context, uint64, *margintypes.MsgOpen) (*margintypes.MTP, error)) *OpenChecker_OpenLong_Call {
	_c.Call.Return(run)
	return _c
}

// OpenShort provides a mock function with given fields: ctx, poolId, msg
func (_m *OpenChecker) OpenShort(ctx types.Context, poolId uint64, msg *margintypes.MsgOpen) (*margintypes.MTP, error) {
	ret := _m.Called(ctx, poolId, msg)

	var r0 *margintypes.MTP
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *margintypes.MsgOpen) (*margintypes.MTP, error)); ok {
		return rf(ctx, poolId, msg)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *margintypes.MsgOpen) *margintypes.MTP); ok {
		r0 = rf(ctx, poolId, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*margintypes.MTP)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, *margintypes.MsgOpen) error); ok {
		r1 = rf(ctx, poolId, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenChecker_OpenShort_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenShort'
type OpenChecker_OpenShort_Call struct {
	*mock.Call
}

// OpenShort is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - msg *margintypes.MsgOpen
func (_e *OpenChecker_Expecter) OpenShort(ctx interface{}, poolId interface{}, msg interface{}) *OpenChecker_OpenShort_Call {
	return &OpenChecker_OpenShort_Call{Call: _e.mock.On("OpenShort", ctx, poolId, msg)}
}

func (_c *OpenChecker_OpenShort_Call) Run(run func(ctx types.Context, poolId uint64, msg *margintypes.MsgOpen)) *OpenChecker_OpenShort_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(*margintypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_OpenShort_Call) Return(_a0 *margintypes.MTP, _a1 error) *OpenChecker_OpenShort_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenChecker_OpenShort_Call) RunAndReturn(run func(types.Context, uint64, *margintypes.MsgOpen) (*margintypes.MTP, error)) *OpenChecker_OpenShort_Call {
	_c.Call.Return(run)
	return _c
}

// PreparePools provides a mock function with given fields: ctx, nonNativeAsset
func (_m *OpenChecker) PreparePools(ctx types.Context, nonNativeAsset string) (uint64, ammtypes.Pool, margintypes.Pool, error) {
	ret := _m.Called(ctx, nonNativeAsset)

	var r0 uint64
	var r1 ammtypes.Pool
	var r2 margintypes.Pool
	var r3 error
	if rf, ok := ret.Get(0).(func(types.Context, string) (uint64, ammtypes.Pool, margintypes.Pool, error)); ok {
		return rf(ctx, nonNativeAsset)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) uint64); ok {
		r0 = rf(ctx, nonNativeAsset)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) ammtypes.Pool); ok {
		r1 = rf(ctx, nonNativeAsset)
	} else {
		r1 = ret.Get(1).(ammtypes.Pool)
	}

	if rf, ok := ret.Get(2).(func(types.Context, string) margintypes.Pool); ok {
		r2 = rf(ctx, nonNativeAsset)
	} else {
		r2 = ret.Get(2).(margintypes.Pool)
	}

	if rf, ok := ret.Get(3).(func(types.Context, string) error); ok {
		r3 = rf(ctx, nonNativeAsset)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// OpenChecker_PreparePools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PreparePools'
type OpenChecker_PreparePools_Call struct {
	*mock.Call
}

// PreparePools is a helper method to define mock.On call
//   - ctx types.Context
//   - nonNativeAsset string
func (_e *OpenChecker_Expecter) PreparePools(ctx interface{}, nonNativeAsset interface{}) *OpenChecker_PreparePools_Call {
	return &OpenChecker_PreparePools_Call{Call: _e.mock.On("PreparePools", ctx, nonNativeAsset)}
}

func (_c *OpenChecker_PreparePools_Call) Run(run func(ctx types.Context, nonNativeAsset string)) *OpenChecker_PreparePools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string))
	})
	return _c
}

func (_c *OpenChecker_PreparePools_Call) Return(poolId uint64, ammPool ammtypes.Pool, pool margintypes.Pool, err error) *OpenChecker_PreparePools_Call {
	_c.Call.Return(poolId, ammPool, pool, err)
	return _c
}

func (_c *OpenChecker_PreparePools_Call) RunAndReturn(run func(types.Context, string) (uint64, ammtypes.Pool, margintypes.Pool, error)) *OpenChecker_PreparePools_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenChecker creates a new instance of OpenChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenChecker {
	mock := &OpenChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
