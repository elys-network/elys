// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// PositionChecker is an autogenerated mock type for the PositionChecker type
type PositionChecker struct {
	mock.Mock
}

type PositionChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *PositionChecker) EXPECT() *PositionChecker_Expecter {
	return &PositionChecker_Expecter{mock: &_m.Mock}
}

// GetMaxOpenPositions provides a mock function with given fields: ctx
func (_m *PositionChecker) GetMaxOpenPositions(ctx types.Context) int {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(types.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// PositionChecker_GetMaxOpenPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxOpenPositions'
type PositionChecker_GetMaxOpenPositions_Call struct {
	*mock.Call
}

// GetMaxOpenPositions is a helper method to define mock.On call
//   - ctx types.Context
func (_e *PositionChecker_Expecter) GetMaxOpenPositions(ctx interface{}) *PositionChecker_GetMaxOpenPositions_Call {
	return &PositionChecker_GetMaxOpenPositions_Call{Call: _e.mock.On("GetMaxOpenPositions", ctx)}
}

func (_c *PositionChecker_GetMaxOpenPositions_Call) Run(run func(ctx types.Context)) *PositionChecker_GetMaxOpenPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *PositionChecker_GetMaxOpenPositions_Call) Return(_a0 int) *PositionChecker_GetMaxOpenPositions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PositionChecker_GetMaxOpenPositions_Call) RunAndReturn(run func(types.Context) int) *PositionChecker_GetMaxOpenPositions_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenMTPCount provides a mock function with given fields: ctx
func (_m *PositionChecker) GetOpenMTPCount(ctx types.Context) uint64 {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(types.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// PositionChecker_GetOpenMTPCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenMTPCount'
type PositionChecker_GetOpenMTPCount_Call struct {
	*mock.Call
}

// GetOpenMTPCount is a helper method to define mock.On call
//   - ctx types.Context
func (_e *PositionChecker_Expecter) GetOpenMTPCount(ctx interface{}) *PositionChecker_GetOpenMTPCount_Call {
	return &PositionChecker_GetOpenMTPCount_Call{Call: _e.mock.On("GetOpenMTPCount", ctx)}
}

func (_c *PositionChecker_GetOpenMTPCount_Call) Run(run func(ctx types.Context)) *PositionChecker_GetOpenMTPCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *PositionChecker_GetOpenMTPCount_Call) Return(_a0 uint64) *PositionChecker_GetOpenMTPCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PositionChecker_GetOpenMTPCount_Call) RunAndReturn(run func(types.Context) uint64) *PositionChecker_GetOpenMTPCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewPositionChecker creates a new instance of PositionChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPositionChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PositionChecker {
	mock := &PositionChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
