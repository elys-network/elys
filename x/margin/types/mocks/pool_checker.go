// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	math "cosmossdk.io/math"
	margintypes "github.com/elys-network/elys/x/margin/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// PoolChecker is an autogenerated mock type for the PoolChecker type
type PoolChecker struct {
	mock.Mock
}

type PoolChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *PoolChecker) EXPECT() *PoolChecker_Expecter {
	return &PoolChecker_Expecter{mock: &_m.Mock}
}

// GetPool provides a mock function with given fields: ctx, poolId
func (_m *PoolChecker) GetPool(ctx types.Context, poolId uint64) (margintypes.Pool, bool) {
	ret := _m.Called(ctx, poolId)

	var r0 margintypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (margintypes.Pool, bool)); ok {
		return rf(ctx, poolId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) margintypes.Pool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(margintypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) bool); ok {
		r1 = rf(ctx, poolId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// PoolChecker_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type PoolChecker_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *PoolChecker_Expecter) GetPool(ctx interface{}, poolId interface{}) *PoolChecker_GetPool_Call {
	return &PoolChecker_GetPool_Call{Call: _e.mock.On("GetPool", ctx, poolId)}
}

func (_c *PoolChecker_GetPool_Call) Run(run func(ctx types.Context, poolId uint64)) *PoolChecker_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PoolChecker_GetPool_Call) Return(_a0 margintypes.Pool, _a1 bool) *PoolChecker_GetPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PoolChecker_GetPool_Call) RunAndReturn(run func(types.Context, uint64) (margintypes.Pool, bool)) *PoolChecker_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoolOpenThreshold provides a mock function with given fields: ctx
func (_m *PoolChecker) GetPoolOpenThreshold(ctx types.Context) math.LegacyDec {
	ret := _m.Called(ctx)

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context) math.LegacyDec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// PoolChecker_GetPoolOpenThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoolOpenThreshold'
type PoolChecker_GetPoolOpenThreshold_Call struct {
	*mock.Call
}

// GetPoolOpenThreshold is a helper method to define mock.On call
//   - ctx types.Context
func (_e *PoolChecker_Expecter) GetPoolOpenThreshold(ctx interface{}) *PoolChecker_GetPoolOpenThreshold_Call {
	return &PoolChecker_GetPoolOpenThreshold_Call{Call: _e.mock.On("GetPoolOpenThreshold", ctx)}
}

func (_c *PoolChecker_GetPoolOpenThreshold_Call) Run(run func(ctx types.Context)) *PoolChecker_GetPoolOpenThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *PoolChecker_GetPoolOpenThreshold_Call) Return(_a0 math.LegacyDec) *PoolChecker_GetPoolOpenThreshold_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolChecker_GetPoolOpenThreshold_Call) RunAndReturn(run func(types.Context) math.LegacyDec) *PoolChecker_GetPoolOpenThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// IsPoolClosed provides a mock function with given fields: ctx, poolId
func (_m *PoolChecker) IsPoolClosed(ctx types.Context, poolId uint64) bool {
	ret := _m.Called(ctx, poolId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) bool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PoolChecker_IsPoolClosed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPoolClosed'
type PoolChecker_IsPoolClosed_Call struct {
	*mock.Call
}

// IsPoolClosed is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *PoolChecker_Expecter) IsPoolClosed(ctx interface{}, poolId interface{}) *PoolChecker_IsPoolClosed_Call {
	return &PoolChecker_IsPoolClosed_Call{Call: _e.mock.On("IsPoolClosed", ctx, poolId)}
}

func (_c *PoolChecker_IsPoolClosed_Call) Run(run func(ctx types.Context, poolId uint64)) *PoolChecker_IsPoolClosed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PoolChecker_IsPoolClosed_Call) Return(_a0 bool) *PoolChecker_IsPoolClosed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolChecker_IsPoolClosed_Call) RunAndReturn(run func(types.Context, uint64) bool) *PoolChecker_IsPoolClosed_Call {
	_c.Call.Return(run)
	return _c
}

// IsPoolEnabled provides a mock function with given fields: ctx, poolId
func (_m *PoolChecker) IsPoolEnabled(ctx types.Context, poolId uint64) bool {
	ret := _m.Called(ctx, poolId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) bool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PoolChecker_IsPoolEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPoolEnabled'
type PoolChecker_IsPoolEnabled_Call struct {
	*mock.Call
}

// IsPoolEnabled is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *PoolChecker_Expecter) IsPoolEnabled(ctx interface{}, poolId interface{}) *PoolChecker_IsPoolEnabled_Call {
	return &PoolChecker_IsPoolEnabled_Call{Call: _e.mock.On("IsPoolEnabled", ctx, poolId)}
}

func (_c *PoolChecker_IsPoolEnabled_Call) Run(run func(ctx types.Context, poolId uint64)) *PoolChecker_IsPoolEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *PoolChecker_IsPoolEnabled_Call) Return(_a0 bool) *PoolChecker_IsPoolEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PoolChecker_IsPoolEnabled_Call) RunAndReturn(run func(types.Context, uint64) bool) *PoolChecker_IsPoolEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoolChecker creates a new instance of PoolChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoolChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PoolChecker {
	mock := &PoolChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
