// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	ammtypes "github.com/elys-network/elys/x/amm/types"
	margintypes "github.com/elys-network/elys/x/margin/types"

	math "cosmossdk.io/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// OpenLongChecker is an autogenerated mock type for the OpenLongChecker type
type OpenLongChecker struct {
	mock.Mock
}

type OpenLongChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenLongChecker) EXPECT() *OpenLongChecker_Expecter {
	return &OpenLongChecker_Expecter{mock: &_m.Mock}
}

// Borrow provides a mock function with given fields: ctx, collateralAsset, collateralAmount, custodyAmount, mtp, ammPool, pool, eta
func (_m *OpenLongChecker) Borrow(ctx types.Context, collateralAsset string, collateralAmount math.Int, custodyAmount math.Int, mtp *margintypes.MTP, ammPool *ammtypes.Pool, pool *margintypes.Pool, eta math.LegacyDec) error {
	ret := _m.Called(ctx, collateralAsset, collateralAmount, custodyAmount, mtp, ammPool, pool, eta)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, string, math.Int, math.Int, *margintypes.MTP, *ammtypes.Pool, *margintypes.Pool, math.LegacyDec) error); ok {
		r0 = rf(ctx, collateralAsset, collateralAmount, custodyAmount, mtp, ammPool, pool, eta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenLongChecker_Borrow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Borrow'
type OpenLongChecker_Borrow_Call struct {
	*mock.Call
}

// Borrow is a helper method to define mock.On call
//   - ctx types.Context
//   - collateralAsset string
//   - collateralAmount math.Int
//   - custodyAmount math.Int
//   - mtp *margintypes.MTP
//   - ammPool *ammtypes.Pool
//   - pool *margintypes.Pool
//   - eta math.LegacyDec
func (_e *OpenLongChecker_Expecter) Borrow(ctx interface{}, collateralAsset interface{}, collateralAmount interface{}, custodyAmount interface{}, mtp interface{}, ammPool interface{}, pool interface{}, eta interface{}) *OpenLongChecker_Borrow_Call {
	return &OpenLongChecker_Borrow_Call{Call: _e.mock.On("Borrow", ctx, collateralAsset, collateralAmount, custodyAmount, mtp, ammPool, pool, eta)}
}

func (_c *OpenLongChecker_Borrow_Call) Run(run func(ctx types.Context, collateralAsset string, collateralAmount math.Int, custodyAmount math.Int, mtp *margintypes.MTP, ammPool *ammtypes.Pool, pool *margintypes.Pool, eta math.LegacyDec)) *OpenLongChecker_Borrow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string), args[2].(math.Int), args[3].(math.Int), args[4].(*margintypes.MTP), args[5].(*ammtypes.Pool), args[6].(*margintypes.Pool), args[7].(math.LegacyDec))
	})
	return _c
}

func (_c *OpenLongChecker_Borrow_Call) Return(_a0 error) *OpenLongChecker_Borrow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_Borrow_Call) RunAndReturn(run func(types.Context, string, math.Int, math.Int, *margintypes.MTP, *ammtypes.Pool, *margintypes.Pool, math.LegacyDec) error) *OpenLongChecker_Borrow_Call {
	_c.Call.Return(run)
	return _c
}

// CheckMinLiabilities provides a mock function with given fields: ctx, collateralTokenAmt, eta, pool, ammPool, borrowAsset
func (_m *OpenLongChecker) CheckMinLiabilities(ctx types.Context, collateralTokenAmt types.Coin, eta math.LegacyDec, pool margintypes.Pool, ammPool ammtypes.Pool, borrowAsset string) error {
	ret := _m.Called(ctx, collateralTokenAmt, eta, pool, ammPool, borrowAsset)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, types.Coin, math.LegacyDec, margintypes.Pool, ammtypes.Pool, string) error); ok {
		r0 = rf(ctx, collateralTokenAmt, eta, pool, ammPool, borrowAsset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenLongChecker_CheckMinLiabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMinLiabilities'
type OpenLongChecker_CheckMinLiabilities_Call struct {
	*mock.Call
}

// CheckMinLiabilities is a helper method to define mock.On call
//   - ctx types.Context
//   - collateralTokenAmt types.Coin
//   - eta math.LegacyDec
//   - pool margintypes.Pool
//   - ammPool ammtypes.Pool
//   - borrowAsset string
func (_e *OpenLongChecker_Expecter) CheckMinLiabilities(ctx interface{}, collateralTokenAmt interface{}, eta interface{}, pool interface{}, ammPool interface{}, borrowAsset interface{}) *OpenLongChecker_CheckMinLiabilities_Call {
	return &OpenLongChecker_CheckMinLiabilities_Call{Call: _e.mock.On("CheckMinLiabilities", ctx, collateralTokenAmt, eta, pool, ammPool, borrowAsset)}
}

func (_c *OpenLongChecker_CheckMinLiabilities_Call) Run(run func(ctx types.Context, collateralTokenAmt types.Coin, eta math.LegacyDec, pool margintypes.Pool, ammPool ammtypes.Pool, borrowAsset string)) *OpenLongChecker_CheckMinLiabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(types.Coin), args[2].(math.LegacyDec), args[3].(margintypes.Pool), args[4].(ammtypes.Pool), args[5].(string))
	})
	return _c
}

func (_c *OpenLongChecker_CheckMinLiabilities_Call) Return(_a0 error) *OpenLongChecker_CheckMinLiabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_CheckMinLiabilities_Call) RunAndReturn(run func(types.Context, types.Coin, math.LegacyDec, margintypes.Pool, ammtypes.Pool, string) error) *OpenLongChecker_CheckMinLiabilities_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateSwap provides a mock function with given fields: ctx, leveragedAmtTokenIn, borrowAsset, ammPool
func (_m *OpenLongChecker) EstimateSwap(ctx types.Context, leveragedAmtTokenIn types.Coin, borrowAsset string, ammPool ammtypes.Pool) (math.Int, error) {
	ret := _m.Called(ctx, leveragedAmtTokenIn, borrowAsset, ammPool)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, types.Coin, string, ammtypes.Pool) (math.Int, error)); ok {
		return rf(ctx, leveragedAmtTokenIn, borrowAsset, ammPool)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.Coin, string, ammtypes.Pool) math.Int); ok {
		r0 = rf(ctx, leveragedAmtTokenIn, borrowAsset, ammPool)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.Coin, string, ammtypes.Pool) error); ok {
		r1 = rf(ctx, leveragedAmtTokenIn, borrowAsset, ammPool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenLongChecker_EstimateSwap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateSwap'
type OpenLongChecker_EstimateSwap_Call struct {
	*mock.Call
}

// EstimateSwap is a helper method to define mock.On call
//   - ctx types.Context
//   - leveragedAmtTokenIn types.Coin
//   - borrowAsset string
//   - ammPool ammtypes.Pool
func (_e *OpenLongChecker_Expecter) EstimateSwap(ctx interface{}, leveragedAmtTokenIn interface{}, borrowAsset interface{}, ammPool interface{}) *OpenLongChecker_EstimateSwap_Call {
	return &OpenLongChecker_EstimateSwap_Call{Call: _e.mock.On("EstimateSwap", ctx, leveragedAmtTokenIn, borrowAsset, ammPool)}
}

func (_c *OpenLongChecker_EstimateSwap_Call) Run(run func(ctx types.Context, leveragedAmtTokenIn types.Coin, borrowAsset string, ammPool ammtypes.Pool)) *OpenLongChecker_EstimateSwap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(types.Coin), args[2].(string), args[3].(ammtypes.Pool))
	})
	return _c
}

func (_c *OpenLongChecker_EstimateSwap_Call) Return(_a0 math.Int, _a1 error) *OpenLongChecker_EstimateSwap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenLongChecker_EstimateSwap_Call) RunAndReturn(run func(types.Context, types.Coin, string, ammtypes.Pool) (math.Int, error)) *OpenLongChecker_EstimateSwap_Call {
	_c.Call.Return(run)
	return _c
}

// GetAmmPool provides a mock function with given fields: ctx, poolId, nonNativeAsset
func (_m *OpenLongChecker) GetAmmPool(ctx types.Context, poolId uint64, nonNativeAsset string) (ammtypes.Pool, error) {
	ret := _m.Called(ctx, poolId, nonNativeAsset)

	var r0 ammtypes.Pool
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, string) (ammtypes.Pool, error)); ok {
		return rf(ctx, poolId, nonNativeAsset)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, string) ammtypes.Pool); ok {
		r0 = rf(ctx, poolId, nonNativeAsset)
	} else {
		r0 = ret.Get(0).(ammtypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, string) error); ok {
		r1 = rf(ctx, poolId, nonNativeAsset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenLongChecker_GetAmmPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAmmPool'
type OpenLongChecker_GetAmmPool_Call struct {
	*mock.Call
}

// GetAmmPool is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - nonNativeAsset string
func (_e *OpenLongChecker_Expecter) GetAmmPool(ctx interface{}, poolId interface{}, nonNativeAsset interface{}) *OpenLongChecker_GetAmmPool_Call {
	return &OpenLongChecker_GetAmmPool_Call{Call: _e.mock.On("GetAmmPool", ctx, poolId, nonNativeAsset)}
}

func (_c *OpenLongChecker_GetAmmPool_Call) Run(run func(ctx types.Context, poolId uint64, nonNativeAsset string)) *OpenLongChecker_GetAmmPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(string))
	})
	return _c
}

func (_c *OpenLongChecker_GetAmmPool_Call) Return(_a0 ammtypes.Pool, _a1 error) *OpenLongChecker_GetAmmPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenLongChecker_GetAmmPool_Call) RunAndReturn(run func(types.Context, uint64, string) (ammtypes.Pool, error)) *OpenLongChecker_GetAmmPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetAmmPoolBalance provides a mock function with given fields: ctx, ammPool, assetDenom
func (_m *OpenLongChecker) GetAmmPoolBalance(ctx types.Context, ammPool ammtypes.Pool, assetDenom string) (math.Int, error) {
	ret := _m.Called(ctx, ammPool, assetDenom)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, ammtypes.Pool, string) (math.Int, error)); ok {
		return rf(ctx, ammPool, assetDenom)
	}
	if rf, ok := ret.Get(0).(func(types.Context, ammtypes.Pool, string) math.Int); ok {
		r0 = rf(ctx, ammPool, assetDenom)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(types.Context, ammtypes.Pool, string) error); ok {
		r1 = rf(ctx, ammPool, assetDenom)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenLongChecker_GetAmmPoolBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAmmPoolBalance'
type OpenLongChecker_GetAmmPoolBalance_Call struct {
	*mock.Call
}

// GetAmmPoolBalance is a helper method to define mock.On call
//   - ctx types.Context
//   - ammPool ammtypes.Pool
//   - assetDenom string
func (_e *OpenLongChecker_Expecter) GetAmmPoolBalance(ctx interface{}, ammPool interface{}, assetDenom interface{}) *OpenLongChecker_GetAmmPoolBalance_Call {
	return &OpenLongChecker_GetAmmPoolBalance_Call{Call: _e.mock.On("GetAmmPoolBalance", ctx, ammPool, assetDenom)}
}

func (_c *OpenLongChecker_GetAmmPoolBalance_Call) Run(run func(ctx types.Context, ammPool ammtypes.Pool, assetDenom string)) *OpenLongChecker_GetAmmPoolBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(ammtypes.Pool), args[2].(string))
	})
	return _c
}

func (_c *OpenLongChecker_GetAmmPoolBalance_Call) Return(_a0 math.Int, _a1 error) *OpenLongChecker_GetAmmPoolBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenLongChecker_GetAmmPoolBalance_Call) RunAndReturn(run func(types.Context, ammtypes.Pool, string) (math.Int, error)) *OpenLongChecker_GetAmmPoolBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxLeverageParam provides a mock function with given fields: ctx
func (_m *OpenLongChecker) GetMaxLeverageParam(ctx types.Context) math.LegacyDec {
	ret := _m.Called(ctx)

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context) math.LegacyDec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// OpenLongChecker_GetMaxLeverageParam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxLeverageParam'
type OpenLongChecker_GetMaxLeverageParam_Call struct {
	*mock.Call
}

// GetMaxLeverageParam is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenLongChecker_Expecter) GetMaxLeverageParam(ctx interface{}) *OpenLongChecker_GetMaxLeverageParam_Call {
	return &OpenLongChecker_GetMaxLeverageParam_Call{Call: _e.mock.On("GetMaxLeverageParam", ctx)}
}

func (_c *OpenLongChecker_GetMaxLeverageParam_Call) Run(run func(ctx types.Context)) *OpenLongChecker_GetMaxLeverageParam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenLongChecker_GetMaxLeverageParam_Call) Return(_a0 math.LegacyDec) *OpenLongChecker_GetMaxLeverageParam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_GetMaxLeverageParam_Call) RunAndReturn(run func(types.Context) math.LegacyDec) *OpenLongChecker_GetMaxLeverageParam_Call {
	_c.Call.Return(run)
	return _c
}

// GetPool provides a mock function with given fields: ctx, poolId
func (_m *OpenLongChecker) GetPool(ctx types.Context, poolId uint64) (margintypes.Pool, bool) {
	ret := _m.Called(ctx, poolId)

	var r0 margintypes.Pool
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) (margintypes.Pool, bool)); ok {
		return rf(ctx, poolId)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64) margintypes.Pool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(margintypes.Pool)
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64) bool); ok {
		r1 = rf(ctx, poolId)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// OpenLongChecker_GetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPool'
type OpenLongChecker_GetPool_Call struct {
	*mock.Call
}

// GetPool is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *OpenLongChecker_Expecter) GetPool(ctx interface{}, poolId interface{}) *OpenLongChecker_GetPool_Call {
	return &OpenLongChecker_GetPool_Call{Call: _e.mock.On("GetPool", ctx, poolId)}
}

func (_c *OpenLongChecker_GetPool_Call) Run(run func(ctx types.Context, poolId uint64)) *OpenLongChecker_GetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OpenLongChecker_GetPool_Call) Return(_a0 margintypes.Pool, _a1 bool) *OpenLongChecker_GetPool_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenLongChecker_GetPool_Call) RunAndReturn(run func(types.Context, uint64) (margintypes.Pool, bool)) *OpenLongChecker_GetPool_Call {
	_c.Call.Return(run)
	return _c
}

// GetSafetyFactor provides a mock function with given fields: ctx
func (_m *OpenLongChecker) GetSafetyFactor(ctx types.Context) math.LegacyDec {
	ret := _m.Called(ctx)

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context) math.LegacyDec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// OpenLongChecker_GetSafetyFactor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSafetyFactor'
type OpenLongChecker_GetSafetyFactor_Call struct {
	*mock.Call
}

// GetSafetyFactor is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenLongChecker_Expecter) GetSafetyFactor(ctx interface{}) *OpenLongChecker_GetSafetyFactor_Call {
	return &OpenLongChecker_GetSafetyFactor_Call{Call: _e.mock.On("GetSafetyFactor", ctx)}
}

func (_c *OpenLongChecker_GetSafetyFactor_Call) Run(run func(ctx types.Context)) *OpenLongChecker_GetSafetyFactor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenLongChecker_GetSafetyFactor_Call) Return(_a0 math.LegacyDec) *OpenLongChecker_GetSafetyFactor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_GetSafetyFactor_Call) RunAndReturn(run func(types.Context) math.LegacyDec) *OpenLongChecker_GetSafetyFactor_Call {
	_c.Call.Return(run)
	return _c
}

// HasSufficientPoolBalance provides a mock function with given fields: ctx, ammPool, assetDenom, requiredAmount
func (_m *OpenLongChecker) HasSufficientPoolBalance(ctx types.Context, ammPool ammtypes.Pool, assetDenom string, requiredAmount math.Int) bool {
	ret := _m.Called(ctx, ammPool, assetDenom, requiredAmount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, ammtypes.Pool, string, math.Int) bool); ok {
		r0 = rf(ctx, ammPool, assetDenom, requiredAmount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OpenLongChecker_HasSufficientPoolBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasSufficientPoolBalance'
type OpenLongChecker_HasSufficientPoolBalance_Call struct {
	*mock.Call
}

// HasSufficientPoolBalance is a helper method to define mock.On call
//   - ctx types.Context
//   - ammPool ammtypes.Pool
//   - assetDenom string
//   - requiredAmount math.Int
func (_e *OpenLongChecker_Expecter) HasSufficientPoolBalance(ctx interface{}, ammPool interface{}, assetDenom interface{}, requiredAmount interface{}) *OpenLongChecker_HasSufficientPoolBalance_Call {
	return &OpenLongChecker_HasSufficientPoolBalance_Call{Call: _e.mock.On("HasSufficientPoolBalance", ctx, ammPool, assetDenom, requiredAmount)}
}

func (_c *OpenLongChecker_HasSufficientPoolBalance_Call) Run(run func(ctx types.Context, ammPool ammtypes.Pool, assetDenom string, requiredAmount math.Int)) *OpenLongChecker_HasSufficientPoolBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(ammtypes.Pool), args[2].(string), args[3].(math.Int))
	})
	return _c
}

func (_c *OpenLongChecker_HasSufficientPoolBalance_Call) Return(_a0 bool) *OpenLongChecker_HasSufficientPoolBalance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_HasSufficientPoolBalance_Call) RunAndReturn(run func(types.Context, ammtypes.Pool, string, math.Int) bool) *OpenLongChecker_HasSufficientPoolBalance_Call {
	_c.Call.Return(run)
	return _c
}

// IsPoolEnabled provides a mock function with given fields: ctx, poolId
func (_m *OpenLongChecker) IsPoolEnabled(ctx types.Context, poolId uint64) bool {
	ret := _m.Called(ctx, poolId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, uint64) bool); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OpenLongChecker_IsPoolEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPoolEnabled'
type OpenLongChecker_IsPoolEnabled_Call struct {
	*mock.Call
}

// IsPoolEnabled is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *OpenLongChecker_Expecter) IsPoolEnabled(ctx interface{}, poolId interface{}) *OpenLongChecker_IsPoolEnabled_Call {
	return &OpenLongChecker_IsPoolEnabled_Call{Call: _e.mock.On("IsPoolEnabled", ctx, poolId)}
}

func (_c *OpenLongChecker_IsPoolEnabled_Call) Run(run func(ctx types.Context, poolId uint64)) *OpenLongChecker_IsPoolEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OpenLongChecker_IsPoolEnabled_Call) Return(_a0 bool) *OpenLongChecker_IsPoolEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_IsPoolEnabled_Call) RunAndReturn(run func(types.Context, uint64) bool) *OpenLongChecker_IsPoolEnabled_Call {
	_c.Call.Return(run)
	return _c
}

// SetPool provides a mock function with given fields: ctx, pool
func (_m *OpenLongChecker) SetPool(ctx types.Context, pool margintypes.Pool) {
	_m.Called(ctx, pool)
}

// OpenLongChecker_SetPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPool'
type OpenLongChecker_SetPool_Call struct {
	*mock.Call
}

// SetPool is a helper method to define mock.On call
//   - ctx types.Context
//   - pool margintypes.Pool
func (_e *OpenLongChecker_Expecter) SetPool(ctx interface{}, pool interface{}) *OpenLongChecker_SetPool_Call {
	return &OpenLongChecker_SetPool_Call{Call: _e.mock.On("SetPool", ctx, pool)}
}

func (_c *OpenLongChecker_SetPool_Call) Run(run func(ctx types.Context, pool margintypes.Pool)) *OpenLongChecker_SetPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(margintypes.Pool))
	})
	return _c
}

func (_c *OpenLongChecker_SetPool_Call) Return() *OpenLongChecker_SetPool_Call {
	_c.Call.Return()
	return _c
}

func (_c *OpenLongChecker_SetPool_Call) RunAndReturn(run func(types.Context, margintypes.Pool)) *OpenLongChecker_SetPool_Call {
	_c.Call.Return(run)
	return _c
}

// TakeInCustody provides a mock function with given fields: ctx, mtp, pool
func (_m *OpenLongChecker) TakeInCustody(ctx types.Context, mtp margintypes.MTP, pool *margintypes.Pool) error {
	ret := _m.Called(ctx, mtp, pool)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, margintypes.MTP, *margintypes.Pool) error); ok {
		r0 = rf(ctx, mtp, pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenLongChecker_TakeInCustody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeInCustody'
type OpenLongChecker_TakeInCustody_Call struct {
	*mock.Call
}

// TakeInCustody is a helper method to define mock.On call
//   - ctx types.Context
//   - mtp margintypes.MTP
//   - pool *margintypes.Pool
func (_e *OpenLongChecker_Expecter) TakeInCustody(ctx interface{}, mtp interface{}, pool interface{}) *OpenLongChecker_TakeInCustody_Call {
	return &OpenLongChecker_TakeInCustody_Call{Call: _e.mock.On("TakeInCustody", ctx, mtp, pool)}
}

func (_c *OpenLongChecker_TakeInCustody_Call) Run(run func(ctx types.Context, mtp margintypes.MTP, pool *margintypes.Pool)) *OpenLongChecker_TakeInCustody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(margintypes.MTP), args[2].(*margintypes.Pool))
	})
	return _c
}

func (_c *OpenLongChecker_TakeInCustody_Call) Return(_a0 error) *OpenLongChecker_TakeInCustody_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_TakeInCustody_Call) RunAndReturn(run func(types.Context, margintypes.MTP, *margintypes.Pool) error) *OpenLongChecker_TakeInCustody_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMTPHealth provides a mock function with given fields: ctx, mtp, ammPool
func (_m *OpenLongChecker) UpdateMTPHealth(ctx types.Context, mtp margintypes.MTP, ammPool ammtypes.Pool) (math.LegacyDec, error) {
	ret := _m.Called(ctx, mtp, ammPool)

	var r0 math.LegacyDec
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, margintypes.MTP, ammtypes.Pool) (math.LegacyDec, error)); ok {
		return rf(ctx, mtp, ammPool)
	}
	if rf, ok := ret.Get(0).(func(types.Context, margintypes.MTP, ammtypes.Pool) math.LegacyDec); ok {
		r0 = rf(ctx, mtp, ammPool)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	if rf, ok := ret.Get(1).(func(types.Context, margintypes.MTP, ammtypes.Pool) error); ok {
		r1 = rf(ctx, mtp, ammPool)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenLongChecker_UpdateMTPHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMTPHealth'
type OpenLongChecker_UpdateMTPHealth_Call struct {
	*mock.Call
}

// UpdateMTPHealth is a helper method to define mock.On call
//   - ctx types.Context
//   - mtp margintypes.MTP
//   - ammPool ammtypes.Pool
func (_e *OpenLongChecker_Expecter) UpdateMTPHealth(ctx interface{}, mtp interface{}, ammPool interface{}) *OpenLongChecker_UpdateMTPHealth_Call {
	return &OpenLongChecker_UpdateMTPHealth_Call{Call: _e.mock.On("UpdateMTPHealth", ctx, mtp, ammPool)}
}

func (_c *OpenLongChecker_UpdateMTPHealth_Call) Run(run func(ctx types.Context, mtp margintypes.MTP, ammPool ammtypes.Pool)) *OpenLongChecker_UpdateMTPHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(margintypes.MTP), args[2].(ammtypes.Pool))
	})
	return _c
}

func (_c *OpenLongChecker_UpdateMTPHealth_Call) Return(_a0 math.LegacyDec, _a1 error) *OpenLongChecker_UpdateMTPHealth_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenLongChecker_UpdateMTPHealth_Call) RunAndReturn(run func(types.Context, margintypes.MTP, ammtypes.Pool) (math.LegacyDec, error)) *OpenLongChecker_UpdateMTPHealth_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePoolHealth provides a mock function with given fields: ctx, pool
func (_m *OpenLongChecker) UpdatePoolHealth(ctx types.Context, pool *margintypes.Pool) error {
	ret := _m.Called(ctx, pool)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *margintypes.Pool) error); ok {
		r0 = rf(ctx, pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenLongChecker_UpdatePoolHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePoolHealth'
type OpenLongChecker_UpdatePoolHealth_Call struct {
	*mock.Call
}

// UpdatePoolHealth is a helper method to define mock.On call
//   - ctx types.Context
//   - pool *margintypes.Pool
func (_e *OpenLongChecker_Expecter) UpdatePoolHealth(ctx interface{}, pool interface{}) *OpenLongChecker_UpdatePoolHealth_Call {
	return &OpenLongChecker_UpdatePoolHealth_Call{Call: _e.mock.On("UpdatePoolHealth", ctx, pool)}
}

func (_c *OpenLongChecker_UpdatePoolHealth_Call) Run(run func(ctx types.Context, pool *margintypes.Pool)) *OpenLongChecker_UpdatePoolHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*margintypes.Pool))
	})
	return _c
}

func (_c *OpenLongChecker_UpdatePoolHealth_Call) Return(_a0 error) *OpenLongChecker_UpdatePoolHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenLongChecker_UpdatePoolHealth_Call) RunAndReturn(run func(types.Context, *margintypes.Pool) error) *OpenLongChecker_UpdatePoolHealth_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenLongChecker creates a new instance of OpenLongChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenLongChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenLongChecker {
	mock := &OpenLongChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
