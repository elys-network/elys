// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/masterchef/pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolInfo struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// reward wallet address
	RewardWallet string `protobuf:"bytes,2,opt,name=reward_wallet,json=rewardWallet,proto3" json:"reward_wallet,omitempty"`
	// multiplier for lp rewards
	Multiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier"`
	// Eden APR, updated at every distribution
	EdenApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=eden_apr,json=edenApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"eden_apr"`
	// Dex APR, updated based on 24hr accumulation
	DexApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=dex_apr,json=dexApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dex_apr"`
	// Gas APR, updated based on 24hr accumulation
	GasApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=gas_apr,json=gasApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"gas_apr"`
	// External Incentive APR, updated at every distribution
	ExternalIncentiveApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=external_incentive_apr,json=externalIncentiveApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"external_incentive_apr"`
	// external reward denoms on the pool
	ExternalRewardDenoms []string `protobuf:"bytes,8,rep,name=external_reward_denoms,json=externalRewardDenoms,proto3" json:"external_reward_denoms,omitempty"`
	// Enable or disable eden rewards
	EnableEdenRewards bool `protobuf:"varint,9,opt,name=enable_eden_rewards,json=enableEdenRewards,proto3" json:"enable_eden_rewards,omitempty"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeebce6928738c2c, []int{0}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolInfo) GetRewardWallet() string {
	if m != nil {
		return m.RewardWallet
	}
	return ""
}

func (m *PoolInfo) GetExternalRewardDenoms() []string {
	if m != nil {
		return m.ExternalRewardDenoms
	}
	return nil
}

func (m *PoolInfo) GetEnableEdenRewards() bool {
	if m != nil {
		return m.EnableEdenRewards
	}
	return false
}

type LegacyPoolInfo struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// reward wallet address
	RewardWallet string `protobuf:"bytes,2,opt,name=reward_wallet,json=rewardWallet,proto3" json:"reward_wallet,omitempty"`
	// multiplier for lp rewards
	Multiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier"`
	// Eden APR, updated at every distribution
	EdenApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=eden_apr,json=edenApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"eden_apr"`
	// Dex APR, updated based on 24hr accumulation
	DexApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=dex_apr,json=dexApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dex_apr"`
	// Gas APR, updated based on 24hr accumulation
	GasApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=gas_apr,json=gasApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"gas_apr"`
	// External Incentive APR, updated at every distribution
	ExternalIncentiveApr github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=external_incentive_apr,json=externalIncentiveApr,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"external_incentive_apr"`
	// external reward denoms on the pool
	ExternalRewardDenoms []string `protobuf:"bytes,8,rep,name=external_reward_denoms,json=externalRewardDenoms,proto3" json:"external_reward_denoms,omitempty"`
}

func (m *LegacyPoolInfo) Reset()         { *m = LegacyPoolInfo{} }
func (m *LegacyPoolInfo) String() string { return proto.CompactTextString(m) }
func (*LegacyPoolInfo) ProtoMessage()    {}
func (*LegacyPoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeebce6928738c2c, []int{1}
}
func (m *LegacyPoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyPoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyPoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyPoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyPoolInfo.Merge(m, src)
}
func (m *LegacyPoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *LegacyPoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyPoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyPoolInfo proto.InternalMessageInfo

func (m *LegacyPoolInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LegacyPoolInfo) GetRewardWallet() string {
	if m != nil {
		return m.RewardWallet
	}
	return ""
}

func (m *LegacyPoolInfo) GetExternalRewardDenoms() []string {
	if m != nil {
		return m.ExternalRewardDenoms
	}
	return nil
}

type PoolRewardInfo struct {
	PoolId                uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom           string                                 `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	PoolAccRewardPerShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=pool_acc_reward_per_share,json=poolAccRewardPerShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pool_acc_reward_per_share"`
	LastUpdatedBlock      uint64                                 `protobuf:"varint,4,opt,name=last_updated_block,json=lastUpdatedBlock,proto3" json:"last_updated_block,omitempty"`
}

func (m *PoolRewardInfo) Reset()         { *m = PoolRewardInfo{} }
func (m *PoolRewardInfo) String() string { return proto.CompactTextString(m) }
func (*PoolRewardInfo) ProtoMessage()    {}
func (*PoolRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeebce6928738c2c, []int{2}
}
func (m *PoolRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolRewardInfo.Merge(m, src)
}
func (m *PoolRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolRewardInfo proto.InternalMessageInfo

func (m *PoolRewardInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolRewardInfo) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *PoolRewardInfo) GetLastUpdatedBlock() uint64 {
	if m != nil {
		return m.LastUpdatedBlock
	}
	return 0
}

type UserRewardInfo struct {
	User          string                                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	PoolId        uint64                                 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom   string                                 `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	RewardDebt    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=reward_debt,json=rewardDebt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_debt"`
	RewardPending github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=reward_pending,json=rewardPending,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_pending"`
}

func (m *UserRewardInfo) Reset()         { *m = UserRewardInfo{} }
func (m *UserRewardInfo) String() string { return proto.CompactTextString(m) }
func (*UserRewardInfo) ProtoMessage()    {}
func (*UserRewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeebce6928738c2c, []int{3}
}
func (m *UserRewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserRewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserRewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserRewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserRewardInfo.Merge(m, src)
}
func (m *UserRewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserRewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserRewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserRewardInfo proto.InternalMessageInfo

func (m *UserRewardInfo) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserRewardInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UserRewardInfo) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

type PoolRewardsAccum struct {
	PoolId      uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BlockHeight int64                                  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp   uint64                                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DexReward   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=dex_reward,json=dexReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dex_reward"`
	GasReward   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=gas_reward,json=gasReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"gas_reward"`
	EdenReward  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=eden_reward,json=edenReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"eden_reward"`
}

func (m *PoolRewardsAccum) Reset()         { *m = PoolRewardsAccum{} }
func (m *PoolRewardsAccum) String() string { return proto.CompactTextString(m) }
func (*PoolRewardsAccum) ProtoMessage()    {}
func (*PoolRewardsAccum) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeebce6928738c2c, []int{4}
}
func (m *PoolRewardsAccum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolRewardsAccum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolRewardsAccum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolRewardsAccum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolRewardsAccum.Merge(m, src)
}
func (m *PoolRewardsAccum) XXX_Size() int {
	return m.Size()
}
func (m *PoolRewardsAccum) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolRewardsAccum.DiscardUnknown(m)
}

var xxx_messageInfo_PoolRewardsAccum proto.InternalMessageInfo

func (m *PoolRewardsAccum) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolRewardsAccum) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *PoolRewardsAccum) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*PoolInfo)(nil), "elys.masterchef.PoolInfo")
	proto.RegisterType((*LegacyPoolInfo)(nil), "elys.masterchef.LegacyPoolInfo")
	proto.RegisterType((*PoolRewardInfo)(nil), "elys.masterchef.PoolRewardInfo")
	proto.RegisterType((*UserRewardInfo)(nil), "elys.masterchef.UserRewardInfo")
	proto.RegisterType((*PoolRewardsAccum)(nil), "elys.masterchef.PoolRewardsAccum")
}

func init() { proto.RegisterFile("elys/masterchef/pool.proto", fileDescriptor_eeebce6928738c2c) }

var fileDescriptor_eeebce6928738c2c = []byte{
	// 637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xc4, 0x5f, 0x12, 0x4f, 0xfa, 0x85, 0xb2, 0x14, 0x08, 0x15, 0x4a, 0x43, 0x90,
	0x50, 0x0e, 0x34, 0x3e, 0xc0, 0x0b, 0xb4, 0x2a, 0x82, 0x48, 0x40, 0x2b, 0xa3, 0x0a, 0x89, 0x8b,
	0xb5, 0xf1, 0x4e, 0x1d, 0xab, 0xb6, 0xd7, 0xda, 0xdd, 0xd0, 0xf4, 0x0d, 0x38, 0x72, 0xe3, 0x79,
	0xb8, 0xf5, 0xd8, 0x23, 0x02, 0xa9, 0x42, 0x2d, 0x0f, 0x82, 0x76, 0xed, 0x34, 0x96, 0x90, 0x7a,
	0xf0, 0xb9, 0xa7, 0xd8, 0xf3, 0xdf, 0xf9, 0x79, 0x67, 0xf6, 0xbf, 0xbb, 0x81, 0x4d, 0x8c, 0x4f,
	0xa5, 0x9b, 0x50, 0xa9, 0x50, 0x04, 0x33, 0x3c, 0x72, 0x33, 0xce, 0xe3, 0x71, 0x26, 0xb8, 0xe2,
	0xe4, 0x8e, 0xd6, 0xc6, 0x2b, 0x6d, 0x73, 0x23, 0xe4, 0x21, 0x37, 0x9a, 0xab, 0x9f, 0xf2, 0x61,
	0xc3, 0xef, 0x36, 0xb4, 0x0f, 0x38, 0x8f, 0x27, 0xe9, 0x11, 0x27, 0x0f, 0xa1, 0xa5, 0x09, 0x7e,
	0xc4, 0x7a, 0xd6, 0xc0, 0x1a, 0xd9, 0x5e, 0x53, 0xbf, 0x4e, 0x18, 0x79, 0x0a, 0xff, 0x0b, 0x3c,
	0xa1, 0x82, 0xf9, 0x27, 0x34, 0x8e, 0x51, 0xf5, 0xea, 0x03, 0x6b, 0xe4, 0x78, 0x6b, 0x79, 0xf0,
	0xa3, 0x89, 0x91, 0xf7, 0x00, 0xc9, 0x3c, 0x56, 0x51, 0x16, 0x47, 0x28, 0x7a, 0x0d, 0x3d, 0x62,
	0x77, 0x7c, 0x76, 0xb1, 0x55, 0xfb, 0x79, 0xb1, 0xf5, 0x2c, 0x8c, 0xd4, 0x6c, 0x3e, 0x1d, 0x07,
	0x3c, 0x71, 0x03, 0x2e, 0x13, 0x2e, 0x8b, 0x9f, 0x6d, 0xc9, 0x8e, 0x5d, 0x75, 0x9a, 0xa1, 0x1c,
	0xef, 0x61, 0xe0, 0x95, 0x08, 0x64, 0x02, 0x6d, 0x64, 0x98, 0xfa, 0x34, 0x13, 0x3d, 0xbb, 0x12,
	0xad, 0xa5, 0xf3, 0x77, 0x32, 0x41, 0x5e, 0x43, 0x8b, 0xe1, 0xc2, 0x90, 0xfe, 0xab, 0x44, 0x6a,
	0x32, 0x5c, 0x14, 0xa0, 0x90, 0x4a, 0x03, 0x6a, 0x56, 0x03, 0x85, 0x54, 0x6a, 0x10, 0x83, 0x07,
	0xb8, 0x50, 0x28, 0x52, 0x1a, 0xfb, 0x51, 0x1a, 0x60, 0xaa, 0xa2, 0xcf, 0x68, 0xb8, 0xad, 0x4a,
	0xdc, 0x8d, 0x25, 0x6d, 0xb2, 0x84, 0xe9, 0xaf, 0xbc, 0x2c, 0x7d, 0xa5, 0x58, 0x40, 0x86, 0x29,
	0x4f, 0x64, 0xaf, 0x3d, 0x68, 0x8c, 0x9c, 0x55, 0x96, 0x67, 0xc4, 0x3d, 0xa3, 0x91, 0x31, 0xdc,
	0xc3, 0x94, 0x4e, 0x63, 0xf4, 0x4d, 0xff, 0xf3, 0x44, 0xd9, 0x73, 0x06, 0xd6, 0xa8, 0xed, 0xdd,
	0xcd, 0xa5, 0x57, 0x0c, 0xd3, 0x3c, 0x49, 0x0e, 0xbf, 0xd9, 0xd0, 0x7d, 0x8b, 0x21, 0x0d, 0x4e,
	0x6f, 0x9d, 0x74, 0xeb, 0xa4, 0x92, 0x93, 0x86, 0x7f, 0x2c, 0xe8, 0x6a, 0x4f, 0xe4, 0xc1, 0x9b,
	0x9d, 0xf1, 0x04, 0xd6, 0xca, 0xe0, 0xc2, 0x18, 0x1d, 0xb1, 0xe2, 0x91, 0x19, 0x3c, 0x32, 0xb9,
	0x34, 0x08, 0x96, 0x93, 0xc8, 0x50, 0xf8, 0x72, 0x46, 0x05, 0x56, 0xb4, 0xc9, 0x7d, 0x0d, 0xdc,
	0x09, 0x82, 0x7c, 0x86, 0x07, 0x28, 0x3e, 0x68, 0x18, 0x79, 0x0e, 0x24, 0xa6, 0x52, 0xf9, 0xf3,
	0x8c, 0x51, 0x85, 0xcc, 0x9f, 0xc6, 0x3c, 0x38, 0x36, 0xde, 0xb1, 0xbd, 0x75, 0xad, 0x1c, 0xe6,
	0xc2, 0xae, 0x8e, 0x0f, 0xbf, 0xd4, 0xa1, 0x7b, 0x28, 0x51, 0x94, 0xca, 0x24, 0x60, 0xcf, 0x25,
	0x0a, 0x53, 0xa3, 0xe3, 0x99, 0xe7, 0x72, 0xe9, 0xf5, 0x1b, 0x4b, 0x6f, 0xfc, 0x5b, 0xfa, 0x3e,
	0x74, 0xae, 0x87, 0x4c, 0x55, 0x45, 0x17, 0xc3, 0x92, 0x38, 0x55, 0xe4, 0x10, 0xba, 0xd7, 0x2d,
	0x4c, 0x59, 0x94, 0x86, 0x15, 0xfd, 0x5c, 0x6c, 0xe7, 0x83, 0x1c, 0x32, 0xfc, 0x55, 0x87, 0xf5,
	0xd5, 0x8a, 0xcb, 0x9d, 0x20, 0x98, 0x27, 0x37, 0xae, 0xb9, 0xe9, 0xac, 0x3f, 0xc3, 0x28, 0x9c,
	0xe5, 0x87, 0x41, 0xc3, 0xeb, 0x98, 0xd8, 0x1b, 0x13, 0x22, 0x8f, 0xc1, 0x51, 0x51, 0x82, 0x52,
	0xd1, 0x24, 0x33, 0x8d, 0xb1, 0xbd, 0x55, 0x80, 0xbc, 0x03, 0xd0, 0xdb, 0x31, 0x9f, 0x43, 0xc5,
	0xae, 0x38, 0x0c, 0x17, 0xf9, 0x74, 0x35, 0x4e, 0x6f, 0xca, 0x02, 0x57, 0xad, 0x21, 0x4e, 0x48,
	0x65, 0x81, 0xdb, 0x87, 0x4e, 0xe9, 0x04, 0xad, 0xb8, 0xcf, 0x01, 0xaf, 0x8f, 0xda, 0xdd, 0xc9,
	0xd9, 0x65, 0xdf, 0x3a, 0xbf, 0xec, 0x5b, 0xbf, 0x2f, 0xfb, 0xd6, 0xd7, 0xab, 0x7e, 0xed, 0xfc,
	0xaa, 0x5f, 0xfb, 0x71, 0xd5, 0xaf, 0x7d, 0x72, 0x4b, 0x34, 0x7d, 0xf3, 0x6f, 0xa7, 0xa8, 0x4e,
	0xb8, 0x38, 0x36, 0x2f, 0xee, 0xa2, 0xfc, 0x27, 0xc1, 0xa0, 0xa7, 0x4d, 0x73, 0xff, 0xbf, 0xf8,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x4a, 0xcc, 0xae, 0xc2, 0x44, 0x08, 0x00, 0x00,
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableEdenRewards {
		i--
		if m.EnableEdenRewards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.ExternalRewardDenoms) > 0 {
		for iNdEx := len(m.ExternalRewardDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalRewardDenoms[iNdEx])
			copy(dAtA[i:], m.ExternalRewardDenoms[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.ExternalRewardDenoms[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.ExternalIncentiveApr.Size()
		i -= size
		if _, err := m.ExternalIncentiveApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.GasApr.Size()
		i -= size
		if _, err := m.GasApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DexApr.Size()
		i -= size
		if _, err := m.DexApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.EdenApr.Size()
		i -= size
		if _, err := m.EdenApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardWallet) > 0 {
		i -= len(m.RewardWallet)
		copy(dAtA[i:], m.RewardWallet)
		i = encodeVarintPool(dAtA, i, uint64(len(m.RewardWallet)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LegacyPoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyPoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyPoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalRewardDenoms) > 0 {
		for iNdEx := len(m.ExternalRewardDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExternalRewardDenoms[iNdEx])
			copy(dAtA[i:], m.ExternalRewardDenoms[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.ExternalRewardDenoms[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.ExternalIncentiveApr.Size()
		i -= size
		if _, err := m.ExternalIncentiveApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.GasApr.Size()
		i -= size
		if _, err := m.GasApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DexApr.Size()
		i -= size
		if _, err := m.DexApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.EdenApr.Size()
		i -= size
		if _, err := m.EdenApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardWallet) > 0 {
		i -= len(m.RewardWallet)
		copy(dAtA[i:], m.RewardWallet)
		i = encodeVarintPool(dAtA, i, uint64(len(m.RewardWallet)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdatedBlock != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.LastUpdatedBlock))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.PoolAccRewardPerShare.Size()
		i -= size
		if _, err := m.PoolAccRewardPerShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserRewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserRewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardPending.Size()
		i -= size
		if _, err := m.RewardPending.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.RewardDebt.Size()
		i -= size
		if _, err := m.RewardDebt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintPool(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolRewardsAccum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolRewardsAccum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolRewardsAccum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EdenReward.Size()
		i -= size
		if _, err := m.EdenReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.GasReward.Size()
		i -= size
		if _, err := m.GasReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DexReward.Size()
		i -= size
		if _, err := m.DexReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Timestamp != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.RewardWallet)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.EdenApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.DexApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.GasApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ExternalIncentiveApr.Size()
	n += 1 + l + sovPool(uint64(l))
	if len(m.ExternalRewardDenoms) > 0 {
		for _, s := range m.ExternalRewardDenoms {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	if m.EnableEdenRewards {
		n += 2
	}
	return n
}

func (m *LegacyPoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.RewardWallet)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.EdenApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.DexApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.GasApr.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.ExternalIncentiveApr.Size()
	n += 1 + l + sovPool(uint64(l))
	if len(m.ExternalRewardDenoms) > 0 {
		for _, s := range m.ExternalRewardDenoms {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	return n
}

func (m *PoolRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.PoolAccRewardPerShare.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.LastUpdatedBlock != 0 {
		n += 1 + sovPool(uint64(m.LastUpdatedBlock))
	}
	return n
}

func (m *UserRewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.RewardDebt.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.RewardPending.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *PoolRewardsAccum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovPool(uint64(m.PoolId))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovPool(uint64(m.BlockHeight))
	}
	if m.Timestamp != 0 {
		n += 1 + sovPool(uint64(m.Timestamp))
	}
	l = m.DexReward.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.GasReward.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.EdenReward.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardWallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIncentiveApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalIncentiveApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRewardDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRewardDenoms = append(m.ExternalRewardDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableEdenRewards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableEdenRewards = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyPoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyPoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardWallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardWallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIncentiveApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalIncentiveApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRewardDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalRewardDenoms = append(m.ExternalRewardDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAccRewardPerShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolAccRewardPerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBlock", wireType)
			}
			m.LastUpdatedBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdatedBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDebt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardDebt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPending", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPending.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRewardsAccum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRewardsAccum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRewardsAccum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
