// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/masterchef/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/elys-network/elys/x/commitment/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllLiquidityPoolTVLRequest struct {
}

func (m *QueryAllLiquidityPoolTVLRequest) Reset()         { *m = QueryAllLiquidityPoolTVLRequest{} }
func (m *QueryAllLiquidityPoolTVLRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityPoolTVLRequest) ProtoMessage()    {}
func (*QueryAllLiquidityPoolTVLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{0}
}
func (m *QueryAllLiquidityPoolTVLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityPoolTVLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityPoolTVLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityPoolTVLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityPoolTVLRequest.Merge(m, src)
}
func (m *QueryAllLiquidityPoolTVLRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityPoolTVLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityPoolTVLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityPoolTVLRequest proto.InternalMessageInfo

type QueryAllLiquidityPoolTVLResponse struct {
	Total       cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total"`
	Pools       cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=pools,proto3,customtype=cosmossdk.io/math.Int" json:"pools"`
	UsdcStaking cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=usdc_staking,json=usdcStaking,proto3,customtype=cosmossdk.io/math.Int" json:"usdc_staking"`
}

func (m *QueryAllLiquidityPoolTVLResponse) Reset()         { *m = QueryAllLiquidityPoolTVLResponse{} }
func (m *QueryAllLiquidityPoolTVLResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLiquidityPoolTVLResponse) ProtoMessage()    {}
func (*QueryAllLiquidityPoolTVLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{1}
}
func (m *QueryAllLiquidityPoolTVLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLiquidityPoolTVLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLiquidityPoolTVLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLiquidityPoolTVLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLiquidityPoolTVLResponse.Merge(m, src)
}
func (m *QueryAllLiquidityPoolTVLResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLiquidityPoolTVLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLiquidityPoolTVLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLiquidityPoolTVLResponse proto.InternalMessageInfo

type QueryChainTVLRequest struct {
}

func (m *QueryChainTVLRequest) Reset()         { *m = QueryChainTVLRequest{} }
func (m *QueryChainTVLRequest) String() string { return proto.CompactTextString(m) }
func (*QueryChainTVLRequest) ProtoMessage()    {}
func (*QueryChainTVLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{2}
}
func (m *QueryChainTVLRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTVLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTVLRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTVLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTVLRequest.Merge(m, src)
}
func (m *QueryChainTVLRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTVLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTVLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTVLRequest proto.InternalMessageInfo

type QueryChainTVLResponse struct {
	Total       cosmossdk_io_math.Int                    `protobuf:"bytes,1,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total"`
	Pools       cosmossdk_io_math.Int                    `protobuf:"bytes,2,opt,name=pools,proto3,customtype=cosmossdk.io/math.Int" json:"pools"`
	UsdcStaking cosmossdk_io_math.Int                    `protobuf:"bytes,3,opt,name=usdc_staking,json=usdcStaking,proto3,customtype=cosmossdk.io/math.Int" json:"usdc_staking"`
	StakedElys  cosmossdk_io_math.Int                    `protobuf:"bytes,4,opt,name=staked_elys,json=stakedElys,proto3,customtype=cosmossdk.io/math.Int" json:"staked_elys"`
	StakedEden  cosmossdk_io_math.Int                    `protobuf:"bytes,5,opt,name=staked_eden,json=stakedEden,proto3,customtype=cosmossdk.io/math.Int" json:"staked_eden"`
	NetStakings github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,6,rep,name=net_stakings,json=netStakings,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"net_stakings"`
}

func (m *QueryChainTVLResponse) Reset()         { *m = QueryChainTVLResponse{} }
func (m *QueryChainTVLResponse) String() string { return proto.CompactTextString(m) }
func (*QueryChainTVLResponse) ProtoMessage()    {}
func (*QueryChainTVLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{3}
}
func (m *QueryChainTVLResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChainTVLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChainTVLResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChainTVLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChainTVLResponse.Merge(m, src)
}
func (m *QueryChainTVLResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryChainTVLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChainTVLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChainTVLResponse proto.InternalMessageInfo

func (m *QueryChainTVLResponse) GetNetStakings() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.NetStakings
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryExternalIncentiveRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryExternalIncentiveRequest) Reset()         { *m = QueryExternalIncentiveRequest{} }
func (m *QueryExternalIncentiveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExternalIncentiveRequest) ProtoMessage()    {}
func (*QueryExternalIncentiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{6}
}
func (m *QueryExternalIncentiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExternalIncentiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExternalIncentiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExternalIncentiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExternalIncentiveRequest.Merge(m, src)
}
func (m *QueryExternalIncentiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExternalIncentiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExternalIncentiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExternalIncentiveRequest proto.InternalMessageInfo

func (m *QueryExternalIncentiveRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryExternalIncentiveResponse struct {
	ExternalIncentive ExternalIncentive `protobuf:"bytes,1,opt,name=external_incentive,json=externalIncentive,proto3" json:"external_incentive"`
}

func (m *QueryExternalIncentiveResponse) Reset()         { *m = QueryExternalIncentiveResponse{} }
func (m *QueryExternalIncentiveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExternalIncentiveResponse) ProtoMessage()    {}
func (*QueryExternalIncentiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{7}
}
func (m *QueryExternalIncentiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExternalIncentiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExternalIncentiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExternalIncentiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExternalIncentiveResponse.Merge(m, src)
}
func (m *QueryExternalIncentiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExternalIncentiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExternalIncentiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExternalIncentiveResponse proto.InternalMessageInfo

func (m *QueryExternalIncentiveResponse) GetExternalIncentive() ExternalIncentive {
	if m != nil {
		return m.ExternalIncentive
	}
	return ExternalIncentive{}
}

type QueryPoolInfoRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolInfoRequest) Reset()         { *m = QueryPoolInfoRequest{} }
func (m *QueryPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolInfoRequest) ProtoMessage()    {}
func (*QueryPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{8}
}
func (m *QueryPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolInfoRequest.Merge(m, src)
}
func (m *QueryPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolInfoRequest proto.InternalMessageInfo

func (m *QueryPoolInfoRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryPoolInfoResponse struct {
	PoolInfo PoolInfo `protobuf:"bytes,1,opt,name=pool_info,json=poolInfo,proto3" json:"pool_info"`
}

func (m *QueryPoolInfoResponse) Reset()         { *m = QueryPoolInfoResponse{} }
func (m *QueryPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolInfoResponse) ProtoMessage()    {}
func (*QueryPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{9}
}
func (m *QueryPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolInfoResponse.Merge(m, src)
}
func (m *QueryPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolInfoResponse proto.InternalMessageInfo

func (m *QueryPoolInfoResponse) GetPoolInfo() PoolInfo {
	if m != nil {
		return m.PoolInfo
	}
	return PoolInfo{}
}

type QueryPoolRewardInfoRequest struct {
	PoolId      uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom string `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
}

func (m *QueryPoolRewardInfoRequest) Reset()         { *m = QueryPoolRewardInfoRequest{} }
func (m *QueryPoolRewardInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRewardInfoRequest) ProtoMessage()    {}
func (*QueryPoolRewardInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{10}
}
func (m *QueryPoolRewardInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRewardInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRewardInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRewardInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRewardInfoRequest.Merge(m, src)
}
func (m *QueryPoolRewardInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRewardInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRewardInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRewardInfoRequest proto.InternalMessageInfo

func (m *QueryPoolRewardInfoRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolRewardInfoRequest) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

type QueryPoolRewardInfoResponse struct {
	PoolRewardInfo PoolRewardInfo `protobuf:"bytes,1,opt,name=pool_reward_info,json=poolRewardInfo,proto3" json:"pool_reward_info"`
}

func (m *QueryPoolRewardInfoResponse) Reset()         { *m = QueryPoolRewardInfoResponse{} }
func (m *QueryPoolRewardInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRewardInfoResponse) ProtoMessage()    {}
func (*QueryPoolRewardInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{11}
}
func (m *QueryPoolRewardInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRewardInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRewardInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRewardInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRewardInfoResponse.Merge(m, src)
}
func (m *QueryPoolRewardInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRewardInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRewardInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRewardInfoResponse proto.InternalMessageInfo

func (m *QueryPoolRewardInfoResponse) GetPoolRewardInfo() PoolRewardInfo {
	if m != nil {
		return m.PoolRewardInfo
	}
	return PoolRewardInfo{}
}

type QueryUserRewardInfoRequest struct {
	User        string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	PoolId      uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom string `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
}

func (m *QueryUserRewardInfoRequest) Reset()         { *m = QueryUserRewardInfoRequest{} }
func (m *QueryUserRewardInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserRewardInfoRequest) ProtoMessage()    {}
func (*QueryUserRewardInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{12}
}
func (m *QueryUserRewardInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRewardInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRewardInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRewardInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRewardInfoRequest.Merge(m, src)
}
func (m *QueryUserRewardInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRewardInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRewardInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRewardInfoRequest proto.InternalMessageInfo

func (m *QueryUserRewardInfoRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QueryUserRewardInfoRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryUserRewardInfoRequest) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

type QueryUserRewardInfoResponse struct {
	UserRewardInfo UserRewardInfo `protobuf:"bytes,1,opt,name=user_reward_info,json=userRewardInfo,proto3" json:"user_reward_info"`
}

func (m *QueryUserRewardInfoResponse) Reset()         { *m = QueryUserRewardInfoResponse{} }
func (m *QueryUserRewardInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserRewardInfoResponse) ProtoMessage()    {}
func (*QueryUserRewardInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{13}
}
func (m *QueryUserRewardInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRewardInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRewardInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRewardInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRewardInfoResponse.Merge(m, src)
}
func (m *QueryUserRewardInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRewardInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRewardInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRewardInfoResponse proto.InternalMessageInfo

func (m *QueryUserRewardInfoResponse) GetUserRewardInfo() UserRewardInfo {
	if m != nil {
		return m.UserRewardInfo
	}
	return UserRewardInfo{}
}

type QueryUserPendingRewardRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserPendingRewardRequest) Reset()         { *m = QueryUserPendingRewardRequest{} }
func (m *QueryUserPendingRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPendingRewardRequest) ProtoMessage()    {}
func (*QueryUserPendingRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{14}
}
func (m *QueryUserPendingRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPendingRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPendingRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPendingRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPendingRewardRequest.Merge(m, src)
}
func (m *QueryUserPendingRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPendingRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPendingRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPendingRewardRequest proto.InternalMessageInfo

func (m *QueryUserPendingRewardRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type RewardInfo struct {
	PoolId uint64                                   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Reward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward"`
}

func (m *RewardInfo) Reset()         { *m = RewardInfo{} }
func (m *RewardInfo) String() string { return proto.CompactTextString(m) }
func (*RewardInfo) ProtoMessage()    {}
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{15}
}
func (m *RewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardInfo.Merge(m, src)
}
func (m *RewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardInfo proto.InternalMessageInfo

func (m *RewardInfo) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *RewardInfo) GetReward() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Reward
	}
	return nil
}

type QueryUserPendingRewardResponse struct {
	Rewards      []*RewardInfo                            `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	TotalRewards github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_rewards,json=totalRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_rewards"`
}

func (m *QueryUserPendingRewardResponse) Reset()         { *m = QueryUserPendingRewardResponse{} }
func (m *QueryUserPendingRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPendingRewardResponse) ProtoMessage()    {}
func (*QueryUserPendingRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{16}
}
func (m *QueryUserPendingRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPendingRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPendingRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPendingRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPendingRewardResponse.Merge(m, src)
}
func (m *QueryUserPendingRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPendingRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPendingRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPendingRewardResponse proto.InternalMessageInfo

func (m *QueryUserPendingRewardResponse) GetRewards() []*RewardInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryUserPendingRewardResponse) GetTotalRewards() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalRewards
	}
	return nil
}

type QueryStableStakeAprRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryStableStakeAprRequest) Reset()         { *m = QueryStableStakeAprRequest{} }
func (m *QueryStableStakeAprRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStableStakeAprRequest) ProtoMessage()    {}
func (*QueryStableStakeAprRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{17}
}
func (m *QueryStableStakeAprRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableStakeAprRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableStakeAprRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableStakeAprRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableStakeAprRequest.Merge(m, src)
}
func (m *QueryStableStakeAprRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableStakeAprRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableStakeAprRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableStakeAprRequest proto.InternalMessageInfo

func (m *QueryStableStakeAprRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryStableStakeAprResponse struct {
	Apr string `protobuf:"bytes,1,opt,name=apr,proto3" json:"apr,omitempty"`
}

func (m *QueryStableStakeAprResponse) Reset()         { *m = QueryStableStakeAprResponse{} }
func (m *QueryStableStakeAprResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStableStakeAprResponse) ProtoMessage()    {}
func (*QueryStableStakeAprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{18}
}
func (m *QueryStableStakeAprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStableStakeAprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStableStakeAprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStableStakeAprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStableStakeAprResponse.Merge(m, src)
}
func (m *QueryStableStakeAprResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStableStakeAprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStableStakeAprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStableStakeAprResponse proto.InternalMessageInfo

func (m *QueryStableStakeAprResponse) GetApr() string {
	if m != nil {
		return m.Apr
	}
	return ""
}

type QueryPoolAprsRequest struct {
	PoolIds []uint64 `protobuf:"varint,1,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *QueryPoolAprsRequest) Reset()         { *m = QueryPoolAprsRequest{} }
func (m *QueryPoolAprsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolAprsRequest) ProtoMessage()    {}
func (*QueryPoolAprsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{19}
}
func (m *QueryPoolAprsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolAprsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolAprsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolAprsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolAprsRequest.Merge(m, src)
}
func (m *QueryPoolAprsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolAprsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolAprsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolAprsRequest proto.InternalMessageInfo

func (m *QueryPoolAprsRequest) GetPoolIds() []uint64 {
	if m != nil {
		return m.PoolIds
	}
	return nil
}

type QueryPoolAprsResponse struct {
	Data []PoolApr `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (m *QueryPoolAprsResponse) Reset()         { *m = QueryPoolAprsResponse{} }
func (m *QueryPoolAprsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolAprsResponse) ProtoMessage()    {}
func (*QueryPoolAprsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{20}
}
func (m *QueryPoolAprsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolAprsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolAprsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolAprsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolAprsResponse.Merge(m, src)
}
func (m *QueryPoolAprsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolAprsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolAprsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolAprsResponse proto.InternalMessageInfo

func (m *QueryPoolAprsResponse) GetData() []PoolApr {
	if m != nil {
		return m.Data
	}
	return nil
}

type PoolApr struct {
	PoolId   uint64                      `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	EdenApr  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=eden_apr,json=edenApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"eden_apr"`
	UsdcApr  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=usdc_apr,json=usdcApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"usdc_apr"`
	TotalApr cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total_apr,json=totalApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_apr"`
}

func (m *PoolApr) Reset()         { *m = PoolApr{} }
func (m *PoolApr) String() string { return proto.CompactTextString(m) }
func (*PoolApr) ProtoMessage()    {}
func (*PoolApr) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{21}
}
func (m *PoolApr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolApr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolApr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolApr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolApr.Merge(m, src)
}
func (m *PoolApr) XXX_Size() int {
	return m.Size()
}
func (m *PoolApr) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolApr.DiscardUnknown(m)
}

var xxx_messageInfo_PoolApr proto.InternalMessageInfo

func (m *PoolApr) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryShowFeeInfoRequest struct {
	Date string `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *QueryShowFeeInfoRequest) Reset()         { *m = QueryShowFeeInfoRequest{} }
func (m *QueryShowFeeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryShowFeeInfoRequest) ProtoMessage()    {}
func (*QueryShowFeeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{22}
}
func (m *QueryShowFeeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowFeeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowFeeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowFeeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowFeeInfoRequest.Merge(m, src)
}
func (m *QueryShowFeeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowFeeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowFeeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowFeeInfoRequest proto.InternalMessageInfo

func (m *QueryShowFeeInfoRequest) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

type QueryShowFeeInfoResponse struct {
	FeeInfo FeeInfo `protobuf:"bytes,1,opt,name=fee_info,json=feeInfo,proto3" json:"fee_info"`
}

func (m *QueryShowFeeInfoResponse) Reset()         { *m = QueryShowFeeInfoResponse{} }
func (m *QueryShowFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryShowFeeInfoResponse) ProtoMessage()    {}
func (*QueryShowFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{23}
}
func (m *QueryShowFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryShowFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryShowFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryShowFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryShowFeeInfoResponse.Merge(m, src)
}
func (m *QueryShowFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryShowFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryShowFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryShowFeeInfoResponse proto.InternalMessageInfo

func (m *QueryShowFeeInfoResponse) GetFeeInfo() FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return FeeInfo{}
}

type QueryListFeeInfoRequest struct {
}

func (m *QueryListFeeInfoRequest) Reset()         { *m = QueryListFeeInfoRequest{} }
func (m *QueryListFeeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListFeeInfoRequest) ProtoMessage()    {}
func (*QueryListFeeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{24}
}
func (m *QueryListFeeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListFeeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListFeeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListFeeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListFeeInfoRequest.Merge(m, src)
}
func (m *QueryListFeeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListFeeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListFeeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListFeeInfoRequest proto.InternalMessageInfo

type QueryListFeeInfoResponse struct {
	FeeInfo []FeeInfo `protobuf:"bytes,1,rep,name=fee_info,json=feeInfo,proto3" json:"fee_info"`
}

func (m *QueryListFeeInfoResponse) Reset()         { *m = QueryListFeeInfoResponse{} }
func (m *QueryListFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListFeeInfoResponse) ProtoMessage()    {}
func (*QueryListFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{25}
}
func (m *QueryListFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListFeeInfoResponse.Merge(m, src)
}
func (m *QueryListFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListFeeInfoResponse proto.InternalMessageInfo

func (m *QueryListFeeInfoResponse) GetFeeInfo() []FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

type QueryAprRequest struct {
	WithdrawType types1.EarnType `protobuf:"varint,1,opt,name=withdraw_type,json=withdrawType,proto3,enum=elys.commitment.EarnType" json:"withdraw_type,omitempty"`
	Denom        string          `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryAprRequest) Reset()         { *m = QueryAprRequest{} }
func (m *QueryAprRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAprRequest) ProtoMessage()    {}
func (*QueryAprRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{26}
}
func (m *QueryAprRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAprRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAprRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAprRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAprRequest.Merge(m, src)
}
func (m *QueryAprRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAprRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAprRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAprRequest proto.InternalMessageInfo

func (m *QueryAprRequest) GetWithdrawType() types1.EarnType {
	if m != nil {
		return m.WithdrawType
	}
	return types1.EarnType_ALL_PROGRAM
}

func (m *QueryAprRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryAprResponse struct {
	Apr string `protobuf:"bytes,1,opt,name=apr,proto3" json:"apr,omitempty"`
}

func (m *QueryAprResponse) Reset()         { *m = QueryAprResponse{} }
func (m *QueryAprResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAprResponse) ProtoMessage()    {}
func (*QueryAprResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{27}
}
func (m *QueryAprResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAprResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAprResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAprResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAprResponse.Merge(m, src)
}
func (m *QueryAprResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAprResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAprResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAprResponse proto.InternalMessageInfo

func (m *QueryAprResponse) GetApr() string {
	if m != nil {
		return m.Apr
	}
	return ""
}

type QueryAprsRequest struct {
}

func (m *QueryAprsRequest) Reset()         { *m = QueryAprsRequest{} }
func (m *QueryAprsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAprsRequest) ProtoMessage()    {}
func (*QueryAprsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{28}
}
func (m *QueryAprsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAprsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAprsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAprsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAprsRequest.Merge(m, src)
}
func (m *QueryAprsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAprsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAprsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAprsRequest proto.InternalMessageInfo

type QueryAprsResponse struct {
	UsdcAprUsdc  string `protobuf:"bytes,1,opt,name=usdc_apr_usdc,json=usdcAprUsdc,proto3" json:"usdc_apr_usdc,omitempty"`
	EdenAprUsdc  string `protobuf:"bytes,2,opt,name=eden_apr_usdc,json=edenAprUsdc,proto3" json:"eden_apr_usdc,omitempty"`
	UsdcAprEdenb string `protobuf:"bytes,3,opt,name=usdc_apr_edenb,json=usdcAprEdenb,proto3" json:"usdc_apr_edenb,omitempty"`
	EdenAprEdenb string `protobuf:"bytes,4,opt,name=eden_apr_edenb,json=edenAprEdenb,proto3" json:"eden_apr_edenb,omitempty"`
	UsdcAprEden  string `protobuf:"bytes,5,opt,name=usdc_apr_eden,json=usdcAprEden,proto3" json:"usdc_apr_eden,omitempty"`
	EdenAprEden  string `protobuf:"bytes,6,opt,name=eden_apr_eden,json=edenAprEden,proto3" json:"eden_apr_eden,omitempty"`
	EdenbAprEden string `protobuf:"bytes,7,opt,name=edenb_apr_eden,json=edenbAprEden,proto3" json:"edenb_apr_eden,omitempty"`
	UsdcAprElys  string `protobuf:"bytes,8,opt,name=usdc_apr_elys,json=usdcAprElys,proto3" json:"usdc_apr_elys,omitempty"`
	EdenAprElys  string `protobuf:"bytes,9,opt,name=eden_apr_elys,json=edenAprElys,proto3" json:"eden_apr_elys,omitempty"`
	EdenbAprElys string `protobuf:"bytes,10,opt,name=edenb_apr_elys,json=edenbAprElys,proto3" json:"edenb_apr_elys,omitempty"`
}

func (m *QueryAprsResponse) Reset()         { *m = QueryAprsResponse{} }
func (m *QueryAprsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAprsResponse) ProtoMessage()    {}
func (*QueryAprsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{29}
}
func (m *QueryAprsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAprsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAprsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAprsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAprsResponse.Merge(m, src)
}
func (m *QueryAprsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAprsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAprsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAprsResponse proto.InternalMessageInfo

func (m *QueryAprsResponse) GetUsdcAprUsdc() string {
	if m != nil {
		return m.UsdcAprUsdc
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenAprUsdc() string {
	if m != nil {
		return m.EdenAprUsdc
	}
	return ""
}

func (m *QueryAprsResponse) GetUsdcAprEdenb() string {
	if m != nil {
		return m.UsdcAprEdenb
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenAprEdenb() string {
	if m != nil {
		return m.EdenAprEdenb
	}
	return ""
}

func (m *QueryAprsResponse) GetUsdcAprEden() string {
	if m != nil {
		return m.UsdcAprEden
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenAprEden() string {
	if m != nil {
		return m.EdenAprEden
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenbAprEden() string {
	if m != nil {
		return m.EdenbAprEden
	}
	return ""
}

func (m *QueryAprsResponse) GetUsdcAprElys() string {
	if m != nil {
		return m.UsdcAprElys
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenAprElys() string {
	if m != nil {
		return m.EdenAprElys
	}
	return ""
}

func (m *QueryAprsResponse) GetEdenbAprElys() string {
	if m != nil {
		return m.EdenbAprElys
	}
	return ""
}

type QueryPoolRewardsRequest struct {
	PoolIds    []uint64           `protobuf:"varint,1,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolRewardsRequest) Reset()         { *m = QueryPoolRewardsRequest{} }
func (m *QueryPoolRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRewardsRequest) ProtoMessage()    {}
func (*QueryPoolRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{30}
}
func (m *QueryPoolRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRewardsRequest.Merge(m, src)
}
func (m *QueryPoolRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRewardsRequest proto.InternalMessageInfo

func (m *QueryPoolRewardsRequest) GetPoolIds() []uint64 {
	if m != nil {
		return m.PoolIds
	}
	return nil
}

func (m *QueryPoolRewardsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type PoolRewards struct {
	PoolId             uint64                                   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardsUsd         cosmossdk_io_math.LegacyDec              `protobuf:"bytes,2,opt,name=rewards_usd,json=rewardsUsd,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rewards_usd"`
	RewardCoins        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=reward_coins,json=rewardCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward_coins"`
	EdenForward        types.Coin                               `protobuf:"bytes,4,opt,name=eden_forward,json=edenForward,proto3" json:"eden_forward"`
	RewardsUsdApr      cosmossdk_io_math.LegacyDec              `protobuf:"bytes,5,opt,name=rewards_usd_apr,json=rewardsUsdApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"rewards_usd_apr"`
	ExternalRewardsApr cosmossdk_io_math.LegacyDec              `protobuf:"bytes,6,opt,name=external_rewards_apr,json=externalRewardsApr,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"external_rewards_apr"`
}

func (m *PoolRewards) Reset()         { *m = PoolRewards{} }
func (m *PoolRewards) String() string { return proto.CompactTextString(m) }
func (*PoolRewards) ProtoMessage()    {}
func (*PoolRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{31}
}
func (m *PoolRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolRewards.Merge(m, src)
}
func (m *PoolRewards) XXX_Size() int {
	return m.Size()
}
func (m *PoolRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolRewards.DiscardUnknown(m)
}

var xxx_messageInfo_PoolRewards proto.InternalMessageInfo

func (m *PoolRewards) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolRewards) GetRewardCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.RewardCoins
	}
	return nil
}

func (m *PoolRewards) GetEdenForward() types.Coin {
	if m != nil {
		return m.EdenForward
	}
	return types.Coin{}
}

type QueryPoolRewardsResponse struct {
	Pools []PoolRewards `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QueryPoolRewardsResponse) Reset()         { *m = QueryPoolRewardsResponse{} }
func (m *QueryPoolRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolRewardsResponse) ProtoMessage()    {}
func (*QueryPoolRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4939d0b7ced5d80, []int{32}
}
func (m *QueryPoolRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolRewardsResponse.Merge(m, src)
}
func (m *QueryPoolRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolRewardsResponse proto.InternalMessageInfo

func (m *QueryPoolRewardsResponse) GetPools() []PoolRewards {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryAllLiquidityPoolTVLRequest)(nil), "elys.masterchef.QueryAllLiquidityPoolTVLRequest")
	proto.RegisterType((*QueryAllLiquidityPoolTVLResponse)(nil), "elys.masterchef.QueryAllLiquidityPoolTVLResponse")
	proto.RegisterType((*QueryChainTVLRequest)(nil), "elys.masterchef.QueryChainTVLRequest")
	proto.RegisterType((*QueryChainTVLResponse)(nil), "elys.masterchef.QueryChainTVLResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.masterchef.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.masterchef.QueryParamsResponse")
	proto.RegisterType((*QueryExternalIncentiveRequest)(nil), "elys.masterchef.QueryExternalIncentiveRequest")
	proto.RegisterType((*QueryExternalIncentiveResponse)(nil), "elys.masterchef.QueryExternalIncentiveResponse")
	proto.RegisterType((*QueryPoolInfoRequest)(nil), "elys.masterchef.QueryPoolInfoRequest")
	proto.RegisterType((*QueryPoolInfoResponse)(nil), "elys.masterchef.QueryPoolInfoResponse")
	proto.RegisterType((*QueryPoolRewardInfoRequest)(nil), "elys.masterchef.QueryPoolRewardInfoRequest")
	proto.RegisterType((*QueryPoolRewardInfoResponse)(nil), "elys.masterchef.QueryPoolRewardInfoResponse")
	proto.RegisterType((*QueryUserRewardInfoRequest)(nil), "elys.masterchef.QueryUserRewardInfoRequest")
	proto.RegisterType((*QueryUserRewardInfoResponse)(nil), "elys.masterchef.QueryUserRewardInfoResponse")
	proto.RegisterType((*QueryUserPendingRewardRequest)(nil), "elys.masterchef.QueryUserPendingRewardRequest")
	proto.RegisterType((*RewardInfo)(nil), "elys.masterchef.RewardInfo")
	proto.RegisterType((*QueryUserPendingRewardResponse)(nil), "elys.masterchef.QueryUserPendingRewardResponse")
	proto.RegisterType((*QueryStableStakeAprRequest)(nil), "elys.masterchef.QueryStableStakeAprRequest")
	proto.RegisterType((*QueryStableStakeAprResponse)(nil), "elys.masterchef.QueryStableStakeAprResponse")
	proto.RegisterType((*QueryPoolAprsRequest)(nil), "elys.masterchef.QueryPoolAprsRequest")
	proto.RegisterType((*QueryPoolAprsResponse)(nil), "elys.masterchef.QueryPoolAprsResponse")
	proto.RegisterType((*PoolApr)(nil), "elys.masterchef.PoolApr")
	proto.RegisterType((*QueryShowFeeInfoRequest)(nil), "elys.masterchef.QueryShowFeeInfoRequest")
	proto.RegisterType((*QueryShowFeeInfoResponse)(nil), "elys.masterchef.QueryShowFeeInfoResponse")
	proto.RegisterType((*QueryListFeeInfoRequest)(nil), "elys.masterchef.QueryListFeeInfoRequest")
	proto.RegisterType((*QueryListFeeInfoResponse)(nil), "elys.masterchef.QueryListFeeInfoResponse")
	proto.RegisterType((*QueryAprRequest)(nil), "elys.masterchef.QueryAprRequest")
	proto.RegisterType((*QueryAprResponse)(nil), "elys.masterchef.QueryAprResponse")
	proto.RegisterType((*QueryAprsRequest)(nil), "elys.masterchef.QueryAprsRequest")
	proto.RegisterType((*QueryAprsResponse)(nil), "elys.masterchef.QueryAprsResponse")
	proto.RegisterType((*QueryPoolRewardsRequest)(nil), "elys.masterchef.QueryPoolRewardsRequest")
	proto.RegisterType((*PoolRewards)(nil), "elys.masterchef.PoolRewards")
	proto.RegisterType((*QueryPoolRewardsResponse)(nil), "elys.masterchef.QueryPoolRewardsResponse")
}

func init() { proto.RegisterFile("elys/masterchef/query.proto", fileDescriptor_e4939d0b7ced5d80) }

var fileDescriptor_e4939d0b7ced5d80 = []byte{
	// 1869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0xcf, 0x6f, 0x23, 0x49,
	0x15, 0x4e, 0xdb, 0x8e, 0xe3, 0x3c, 0x27, 0x99, 0x49, 0x6d, 0x96, 0x71, 0x9c, 0xc1, 0xc9, 0x14,
	0x61, 0xc8, 0xce, 0x24, 0xee, 0xc4, 0x33, 0x8c, 0x66, 0x61, 0xb5, 0x52, 0xb2, 0x33, 0x23, 0x45,
	0x58, 0x4b, 0xf0, 0x4e, 0xf8, 0x75, 0xb1, 0xda, 0xee, 0x8a, 0xd3, 0x4a, 0xbb, 0xdb, 0xd3, 0xd5,
	0x99, 0xac, 0xb5, 0xcc, 0x01, 0xb8, 0xad, 0x04, 0x42, 0x42, 0x82, 0x1b, 0x17, 0x38, 0x2d, 0x12,
	0x27, 0x0e, 0xfc, 0x09, 0xcb, 0x6d, 0x05, 0x17, 0xc4, 0x61, 0x41, 0x33, 0x9c, 0x39, 0xc3, 0x0d,
	0x55, 0xd5, 0x6b, 0x77, 0xb7, 0xdb, 0x6d, 0x3b, 0x11, 0x73, 0xd9, 0x53, 0xdc, 0x5d, 0xef, 0x7d,
	0xef, 0xab, 0x57, 0xef, 0xbd, 0x7a, 0xaf, 0x03, 0x6b, 0xcc, 0xee, 0x73, 0xbd, 0x6b, 0x70, 0x9f,
	0x79, 0xed, 0x53, 0x76, 0xa2, 0x3f, 0x3b, 0x67, 0x5e, 0xbf, 0xda, 0xf3, 0x5c, 0xdf, 0x25, 0xd7,
	0xc4, 0x62, 0x35, 0x5c, 0x2c, 0xaf, 0x74, 0xdc, 0x8e, 0x2b, 0xd7, 0x74, 0xf1, 0x4b, 0x89, 0x95,
	0x6f, 0x76, 0x5c, 0xb7, 0x63, 0x33, 0xdd, 0xe8, 0x59, 0xba, 0xe1, 0x38, 0xae, 0x6f, 0xf8, 0x96,
	0xeb, 0x70, 0x5c, 0xbd, 0xd3, 0x76, 0x79, 0xd7, 0xe5, 0x7a, 0xcb, 0xe0, 0x4c, 0xa1, 0xeb, 0xcf,
	0xf7, 0x5a, 0xcc, 0x37, 0xf6, 0xf4, 0x9e, 0xd1, 0xb1, 0x1c, 0x29, 0x8c, 0xb2, 0x95, 0xa8, 0x6c,
	0x20, 0xd5, 0x76, 0xad, 0x60, 0xfd, 0xe6, 0x30, 0xdb, 0x9e, 0xe1, 0x19, 0xdd, 0xc0, 0xd2, 0xd6,
	0xf0, 0x2a, 0xfb, 0xd0, 0x67, 0x9e, 0x63, 0xd8, 0x4d, 0xcb, 0x69, 0x33, 0xc7, 0xb7, 0x9e, 0x33,
	0x94, 0x2c, 0x27, 0x70, 0x5c, 0xd7, 0xc6, 0xb5, 0x84, 0x47, 0xfc, 0x7e, 0x8f, 0xf1, 0x18, 0x81,
	0xb6, 0xdb, 0xed, 0x5a, 0x7e, 0x97, 0x39, 0x7e, 0x9c, 0xc0, 0xaa, 0xa2, 0xdf, 0x54, 0x1e, 0x52,
	0x0f, 0x6a, 0x89, 0xde, 0x82, 0xf5, 0xef, 0x88, 0xbd, 0xef, 0xdb, 0x76, 0xdd, 0x7a, 0x76, 0x6e,
	0x99, 0x96, 0xdf, 0x3f, 0x72, 0x5d, 0xfb, 0xe9, 0x77, 0xeb, 0x0d, 0xf6, 0xec, 0x9c, 0x71, 0x9f,
	0xfe, 0x47, 0x83, 0x8d, 0x74, 0x19, 0xde, 0x73, 0x1d, 0xce, 0xc8, 0x3e, 0xcc, 0xfa, 0xae, 0x6f,
	0xd8, 0x25, 0x6d, 0x43, 0xdb, 0x9a, 0x3f, 0xb8, 0xfb, 0xe9, 0xe7, 0xeb, 0x33, 0x7f, 0xff, 0x7c,
	0xfd, 0x4d, 0x65, 0x8c, 0x9b, 0x67, 0x55, 0xcb, 0xd5, 0xbb, 0x86, 0x7f, 0x5a, 0x3d, 0x74, 0xfc,
	0xbf, 0xfc, 0x71, 0x07, 0x90, 0xc5, 0xa1, 0xe3, 0x37, 0x94, 0xa6, 0x80, 0x10, 0xdb, 0xe5, 0xa5,
	0xcc, 0x15, 0x20, 0xa4, 0x26, 0x79, 0x1f, 0x16, 0xce, 0xb9, 0xd9, 0x6e, 0x72, 0xdf, 0x38, 0xb3,
	0x9c, 0x4e, 0x29, 0x7b, 0x79, 0xa4, 0xa2, 0x00, 0xf8, 0x40, 0xe9, 0xd3, 0x2f, 0xc1, 0x8a, 0xdc,
	0xf9, 0x7b, 0xa7, 0x86, 0xe5, 0x44, 0x5c, 0xf2, 0xdf, 0x2c, 0xbc, 0x39, 0xb4, 0xf0, 0x45, 0xf6,
	0x03, 0xa9, 0x43, 0x51, 0x40, 0x31, 0xb3, 0x29, 0xe2, 0xac, 0x94, 0xbb, 0x3c, 0x1c, 0x28, 0xfd,
	0xc7, 0x76, 0x9f, 0x47, 0xd1, 0x4c, 0xe6, 0x94, 0x66, 0xaf, 0x8e, 0x66, 0x32, 0x87, 0x38, 0xb0,
	0xe0, 0x30, 0x3f, 0xd8, 0x2a, 0x2f, 0xe5, 0x37, 0xb2, 0x5b, 0xc5, 0xda, 0x6a, 0x15, 0xc5, 0x45,
	0xca, 0x56, 0x31, 0x65, 0xab, 0xef, 0xb9, 0x96, 0x73, 0xb0, 0x2b, 0x2c, 0x7d, 0xf2, 0x8f, 0xf5,
	0xad, 0x8e, 0xe5, 0x9f, 0x9e, 0xb7, 0xaa, 0x6d, 0xb7, 0x8b, 0x39, 0x81, 0x7f, 0x76, 0xb8, 0x79,
	0x86, 0xd9, 0x25, 0x14, 0x78, 0xa3, 0xe8, 0x30, 0x1f, 0x5d, 0xc1, 0xe9, 0x0a, 0x10, 0x79, 0xf4,
	0x47, 0x32, 0xc3, 0x82, 0x88, 0xa8, 0xc3, 0x1b, 0xb1, 0xb7, 0x18, 0x0e, 0x5f, 0x87, 0xbc, 0xca,
	0x44, 0x19, 0x0f, 0xc5, 0xda, 0x8d, 0xea, 0x50, 0xe9, 0xaa, 0x2a, 0x85, 0x83, 0x9c, 0x20, 0xd5,
	0x40, 0x61, 0xaa, 0xc3, 0x97, 0x25, 0xda, 0x63, 0x2c, 0x14, 0x87, 0x41, 0x9d, 0x40, 0x73, 0x64,
	0x09, 0x32, 0x96, 0x29, 0x31, 0x73, 0x8d, 0x8c, 0x65, 0xd2, 0x3e, 0x54, 0xd2, 0x14, 0x90, 0xc9,
	0xf7, 0x80, 0x24, 0xcb, 0x0e, 0xb2, 0xa2, 0x09, 0x56, 0x09, 0x1c, 0x24, 0xb8, 0xcc, 0x86, 0x17,
	0xa8, 0x8e, 0x39, 0x22, 0x2a, 0xc2, 0xa1, 0x73, 0xe2, 0x06, 0x14, 0x6f, 0xc0, 0x9c, 0x08, 0xc6,
	0xe6, 0x80, 0x67, 0x5e, 0x3c, 0x1e, 0x9a, 0xf4, 0x18, 0x73, 0x27, 0x54, 0x40, 0x8a, 0xef, 0xc0,
	0xbc, 0xd2, 0x70, 0x4e, 0x5c, 0x64, 0xb6, 0x9a, 0xf4, 0x17, 0x6a, 0x21, 0xa1, 0x42, 0x0f, 0x9f,
	0xe9, 0xf7, 0xa1, 0x3c, 0x80, 0x6d, 0xb0, 0x0b, 0xc3, 0x33, 0xa7, 0x61, 0x43, 0x6e, 0xc1, 0x82,
	0x27, 0xa5, 0x9b, 0x26, 0x73, 0xdc, 0xae, 0x4a, 0xba, 0x46, 0x51, 0xbd, 0x7b, 0x24, 0x5e, 0x51,
	0x07, 0xd6, 0x46, 0x22, 0x23, 0xed, 0x6f, 0xc3, 0x75, 0x09, 0x8d, 0x30, 0x11, 0xf6, 0xeb, 0x23,
	0xd9, 0x87, 0x10, 0xb8, 0x87, 0xa5, 0x5e, 0xec, 0x2d, 0xb5, 0x71, 0x27, 0xc7, 0x9c, 0x79, 0xc9,
	0x9d, 0x10, 0xc8, 0x9d, 0x73, 0xe6, 0xa9, 0x02, 0xd3, 0x90, 0xbf, 0xa3, 0xbb, 0xcb, 0x8c, 0xdd,
	0x5d, 0x36, 0x7d, 0x77, 0xc3, 0xd6, 0xc2, 0xdd, 0x09, 0x13, 0x53, 0xed, 0x2e, 0x0e, 0x11, 0xec,
	0xee, 0x3c, 0xf6, 0x96, 0xde, 0xc3, 0xd8, 0x16, 0xc2, 0x47, 0xcc, 0x31, 0x2d, 0xa7, 0xa3, 0x56,
	0xc7, 0x6c, 0x90, 0x7e, 0xac, 0x01, 0x84, 0x18, 0xe9, 0xa7, 0xd9, 0x86, 0xbc, 0x22, 0x5a, 0xca,
	0xfc, 0xff, 0xcb, 0x00, 0x42, 0xd3, 0x3f, 0x6b, 0x98, 0x6d, 0x23, 0xb6, 0x30, 0xc8, 0xfb, 0x39,
	0x25, 0x2c, 0x12, 0x5f, 0x10, 0x59, 0x4b, 0x38, 0x2b, 0xe2, 0xeb, 0x40, 0x96, 0xf4, 0x60, 0x51,
	0xde, 0x01, 0xcd, 0x40, 0xf9, 0x35, 0xec, 0x62, 0x41, 0x5a, 0x50, 0xd6, 0x39, 0xad, 0x61, 0xac,
	0x7d, 0xe0, 0x1b, 0x2d, 0x9b, 0x89, 0x22, 0xc7, 0xf6, 0x7b, 0x5e, 0x70, 0x14, 0x2b, 0x30, 0xab,
	0xe2, 0x46, 0x9d, 0x85, 0x7a, 0xa0, 0x3a, 0x46, 0xcc, 0xb0, 0x0e, 0xee, 0xfd, 0x3a, 0x64, 0x8d,
	0x5e, 0x70, 0x7c, 0xe2, 0x27, 0xdd, 0x8b, 0x94, 0x88, 0xfd, 0x9e, 0x17, 0x14, 0x4d, 0xb2, 0x0a,
	0x05, 0x3c, 0x46, 0xe5, 0xa6, 0x5c, 0x63, 0x4e, 0x9d, 0x23, 0xa7, 0xdf, 0x8a, 0x14, 0x09, 0xa5,
	0x82, 0xe8, 0x35, 0xc8, 0x99, 0x86, 0x6f, 0xa0, 0x5b, 0x4b, 0x23, 0x33, 0x6c, 0xbf, 0xe7, 0x61,
	0xf0, 0x49, 0x59, 0xfa, 0xf3, 0x0c, 0xcc, 0xe1, 0xfb, 0xf4, 0xd0, 0xa9, 0x43, 0x41, 0x5c, 0x47,
	0x4d, 0xc1, 0x5d, 0xdd, 0xbc, 0x7b, 0x78, 0x25, 0xad, 0x25, 0xaf, 0xa4, 0x3a, 0xeb, 0x18, 0xed,
	0xfe, 0x23, 0xd6, 0x8e, 0x5c, 0x4c, 0x8f, 0x58, 0xbb, 0x31, 0x27, 0x20, 0x84, 0x99, 0x3a, 0x14,
	0xe4, 0x0d, 0x2c, 0xd0, 0xb2, 0x57, 0x46, 0x13, 0x10, 0x02, 0xed, 0x7d, 0x98, 0x57, 0x71, 0x21,
	0xe0, 0x72, 0x57, 0x85, 0x2b, 0x48, 0x8c, 0xfd, 0x9e, 0x47, 0x77, 0xe0, 0x86, 0x3a, 0xc1, 0x53,
	0xf7, 0xe2, 0x09, 0x63, 0x43, 0xe5, 0xc5, 0x34, 0x7c, 0x16, 0x64, 0x9f, 0xf8, 0x4d, 0x8f, 0xa1,
	0x94, 0x14, 0xc7, 0xf3, 0x78, 0x1b, 0x0a, 0x27, 0x8c, 0x45, 0xeb, 0x42, 0xf2, 0x4c, 0x50, 0x07,
	0xcf, 0x64, 0xee, 0x44, 0x3d, 0xd2, 0x55, 0x64, 0x51, 0xb7, 0xb8, 0x1f, 0x67, 0x31, 0xb0, 0x18,
	0x5b, 0x1a, 0x69, 0x31, 0x7b, 0x19, 0x8b, 0x1d, 0xb8, 0xa6, 0x3a, 0xd9, 0x30, 0xc4, 0xdf, 0x85,
	0xc5, 0x0b, 0xcb, 0x3f, 0x35, 0x3d, 0xe3, 0xa2, 0x29, 0xd2, 0x44, 0x6e, 0x62, 0x29, 0xb8, 0x78,
	0xc2, 0x8e, 0xba, 0xfa, 0xd8, 0xf0, 0x9c, 0xa7, 0xfd, 0x1e, 0x6b, 0x2c, 0x04, 0xf2, 0xe2, 0x29,
	0x4c, 0x91, 0x4c, 0x34, 0x45, 0x36, 0xe1, 0x7a, 0x68, 0x28, 0x35, 0x2f, 0x48, 0x28, 0x35, 0x68,
	0x24, 0x7e, 0x9a, 0x85, 0xe5, 0xc8, 0x4b, 0xd4, 0xa5, 0xb0, 0x18, 0x84, 0x53, 0x53, 0xfc, 0x40,
	0x94, 0x22, 0x06, 0xc8, 0x31, 0x37, 0xdb, 0x42, 0x26, 0x08, 0x60, 0x25, 0x83, 0x57, 0x19, 0x86,
	0xa4, 0x94, 0xd9, 0x84, 0xa5, 0x01, 0x8e, 0x78, 0xdf, 0xc2, 0x1b, 0x61, 0x01, 0x81, 0x44, 0x47,
	0xd5, 0x12, 0x52, 0x03, 0x24, 0x25, 0x95, 0x53, 0x52, 0x08, 0xa5, 0xa4, 0xa2, 0x9c, 0xc2, 0x46,
	0x6e, 0xc0, 0x49, 0x36, 0x67, 0x51, 0x4e, 0x52, 0x26, 0x1f, 0xe3, 0x24, 0x65, 0xd0, 0x5a, 0x2b,
	0x14, 0x9a, 0x0b, 0xad, 0xb5, 0x22, 0x48, 0xa1, 0x35, 0xd1, 0x84, 0x16, 0xe2, 0xd6, 0x44, 0x63,
	0x19, 0xb3, 0x26, 0x64, 0xe6, 0xe3, 0xd6, 0x84, 0x4c, 0xdc, 0x9a, 0x10, 0x82, 0x21, 0x6b, 0x76,
	0x9f, 0xd3, 0x1f, 0x61, 0x68, 0x86, 0xf7, 0xf5, 0x14, 0x45, 0x8b, 0x3c, 0x01, 0x08, 0x47, 0x47,
	0xe9, 0xfe, 0x62, 0xed, 0x76, 0xac, 0x76, 0xab, 0x29, 0x36, 0xa8, 0xe0, 0x47, 0x46, 0x27, 0xe8,
	0xe8, 0x1a, 0x11, 0x4d, 0xfa, 0xef, 0x2c, 0x14, 0x23, 0x96, 0xd3, 0x6b, 0x56, 0x03, 0xf0, 0x2a,
	0xe7, 0xe2, 0xc4, 0xaf, 0x5e, 0xb6, 0x00, 0x51, 0x8e, 0xb9, 0x29, 0xfa, 0x69, 0xbc, 0xeb, 0xc5,
	0x80, 0xcb, 0x4b, 0xd9, 0xd7, 0xd0, 0x4f, 0x2b, 0x03, 0xf2, 0x81, 0x1c, 0x80, 0x74, 0x7d, 0xf3,
	0xc4, 0xf5, 0xe4, 0xc5, 0x9d, 0xc3, 0xc6, 0x2f, 0xd5, 0x9e, 0xca, 0x69, 0x79, 0xa8, 0x4f, 0x94,
	0x0e, 0xf9, 0x01, 0x5c, 0x8b, 0xf8, 0x41, 0x56, 0xc9, 0xd9, 0xab, 0xfa, 0x62, 0x31, 0xf4, 0x85,
	0x28, 0xbd, 0x6d, 0x58, 0x19, 0xf4, 0xcd, 0x81, 0x0d, 0x81, 0x9f, 0xbf, 0x2a, 0xfe, 0xa0, 0x0d,
	0xc7, 0xd3, 0x15, 0xf5, 0xf8, 0x29, 0x96, 0xbb, 0x58, 0xb8, 0x61, 0xea, 0x3f, 0x0c, 0xc6, 0x41,
	0x55, 0xeb, 0x6e, 0x8e, 0xe9, 0x29, 0x83, 0x31, 0x42, 0x29, 0xd4, 0x7e, 0x47, 0x60, 0x56, 0xc2,
	0x92, 0x1f, 0x6b, 0x90, 0x57, 0x83, 0x06, 0xf9, 0x4a, 0x42, 0x3f, 0x39, 0xcd, 0x94, 0x37, 0xc7,
	0x0b, 0x29, 0x66, 0x74, 0xfb, 0x27, 0x7f, 0xfd, 0xd7, 0x2f, 0x33, 0xb7, 0xc9, 0xa6, 0x2e, 0xa4,
	0x77, 0x1c, 0xe6, 0x5f, 0xb8, 0xde, 0x99, 0x3e, 0xfa, 0x5b, 0x08, 0xf9, 0x83, 0x06, 0xcb, 0x89,
	0xb1, 0x82, 0x54, 0x47, 0x5b, 0x4a, 0x1b, 0x7c, 0xca, 0xfa, 0xd4, 0xf2, 0x48, 0xf2, 0xa1, 0x24,
	0x59, 0x23, 0xbb, 0xe3, 0x49, 0x26, 0x67, 0x23, 0xf2, 0xb1, 0x06, 0x85, 0x60, 0xda, 0x20, 0x5f,
	0x4d, 0xf1, 0x48, 0x7c, 0xe8, 0x29, 0xdf, 0x9e, 0x24, 0x86, 0xac, 0x74, 0xc9, 0xea, 0x2d, 0xf2,
	0xb5, 0x09, 0xae, 0x0b, 0xc6, 0x21, 0xf2, 0x5b, 0x0d, 0x96, 0xe2, 0xc3, 0x03, 0xb9, 0x9b, 0x6e,
	0x2b, 0x31, 0x35, 0x94, 0xb7, 0xa7, 0x13, 0x46, 0x7a, 0x0f, 0x24, 0xbd, 0x5d, 0x52, 0x9d, 0x82,
	0x5e, 0x64, 0x30, 0x90, 0x2c, 0xe3, 0x43, 0x40, 0x1a, 0xcb, 0x91, 0xb3, 0x4d, 0x1a, 0xcb, 0xd1,
	0xa3, 0xc9, 0xb4, 0x2c, 0x87, 0xc7, 0x17, 0xf2, 0x89, 0x06, 0xcb, 0x89, 0xd6, 0x3d, 0x2d, 0x12,
	0xd3, 0xc6, 0x94, 0xb4, 0x48, 0x4c, 0x9d, 0x09, 0xe8, 0x7d, 0x49, 0xb7, 0x4a, 0xb6, 0x27, 0x38,
	0x55, 0x29, 0x23, 0x63, 0xf2, 0x7b, 0x0d, 0x96, 0xe2, 0x8d, 0x76, 0x9a, 0x4b, 0x47, 0xb6, 0xf0,
	0x69, 0x2e, 0x1d, 0xdd, 0xbb, 0xd3, 0x77, 0x25, 0xc7, 0x87, 0xe4, 0xc1, 0x78, 0x8e, 0x5c, 0x6a,
	0xcb, 0x6f, 0x2e, 0x4c, 0x54, 0x43, 0xfd, 0x23, 0xd9, 0xf6, 0xbc, 0x18, 0xe4, 0x8c, 0x68, 0x5e,
	0xc6, 0xe5, 0x4c, 0xa4, 0xe3, 0x19, 0x97, 0x33, 0xd1, 0x1e, 0xe8, 0x52, 0x39, 0x63, 0x08, 0xfb,
	0xbf, 0xd1, 0xa0, 0x18, 0x69, 0x59, 0xc9, 0x56, 0x8a, 0x2b, 0x12, 0x4d, 0x70, 0xf9, 0xad, 0x29,
	0x24, 0x91, 0xd5, 0x37, 0x24, 0xab, 0xfb, 0xa4, 0x36, 0xc1, 0x63, 0xa7, 0xee, 0x45, 0x33, 0x68,
	0x5b, 0xf5, 0x8f, 0x44, 0x5b, 0xfd, 0x82, 0xfc, 0x5a, 0x83, 0x62, 0xa4, 0xc3, 0x4d, 0x23, 0x98,
	0xec, 0x8f, 0xd3, 0x08, 0x8e, 0x68, 0x97, 0xe9, 0x3d, 0x49, 0x70, 0x87, 0xdc, 0x1d, 0x4f, 0xd0,
	0xb6, 0xb8, 0x3f, 0x20, 0x48, 0x7e, 0xa6, 0x41, 0x56, 0x84, 0xda, 0xc6, 0x68, 0x3b, 0x91, 0xf8,
	0xba, 0x35, 0x46, 0x02, 0x19, 0xec, 0x4b, 0x06, 0xdf, 0x24, 0x6f, 0x8f, 0x67, 0x20, 0xe3, 0x28,
	0xd6, 0x8b, 0xbf, 0x18, 0xc4, 0x55, 0x1f, 0x72, 0x32, 0xa4, 0xd2, 0xad, 0x0d, 0xc2, 0x89, 0x8e,
	0x13, 0x41, 0x46, 0x77, 0x24, 0xa3, 0x4d, 0x42, 0x27, 0x32, 0xe2, 0xe4, 0x57, 0x5a, 0xbc, 0x19,
	0xdb, 0x9a, 0x54, 0x49, 0xf9, 0x84, 0x43, 0x1a, 0x71, 0xc9, 0xd3, 0x9a, 0x24, 0xb4, 0x4d, 0xee,
	0x4c, 0x5d, 0x70, 0x39, 0xf9, 0x93, 0x06, 0x6f, 0x8c, 0xf8, 0x24, 0x4f, 0x76, 0x53, 0x1c, 0x90,
	0xfa, 0x85, 0xbf, 0xbc, 0x77, 0x09, 0x0d, 0x24, 0xfc, 0x8e, 0x24, 0xfc, 0x80, 0xdc, 0x9f, 0xe0,
	0x41, 0xdb, 0x6e, 0xda, 0x01, 0x46, 0x53, 0xd2, 0xf7, 0x9f, 0xdb, 0xb2, 0x4c, 0x04, 0x9f, 0xce,
	0xd3, 0xca, 0xc4, 0xd0, 0x37, 0xf7, 0xb4, 0x32, 0x31, 0xfc, 0x05, 0x7e, 0xda, 0x32, 0xd1, 0x16,
	0x7a, 0x82, 0xcc, 0xc1, 0xe1, 0xa7, 0x2f, 0x2b, 0xda, 0x67, 0x2f, 0x2b, 0xda, 0x3f, 0x5f, 0x56,
	0xb4, 0x5f, 0xbc, 0xaa, 0xcc, 0x7c, 0xf6, 0xaa, 0x32, 0xf3, 0xb7, 0x57, 0x95, 0x99, 0x1f, 0xea,
	0x91, 0x8e, 0x36, 0x09, 0xf6, 0x61, 0xe2, 0x9f, 0x31, 0xad, 0xbc, 0xfc, 0xa7, 0xca, 0xbd, 0xff,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x29, 0x8c, 0x7b, 0xbe, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	ExternalIncentive(ctx context.Context, in *QueryExternalIncentiveRequest, opts ...grpc.CallOption) (*QueryExternalIncentiveResponse, error)
	PoolInfo(ctx context.Context, in *QueryPoolInfoRequest, opts ...grpc.CallOption) (*QueryPoolInfoResponse, error)
	PoolRewardInfo(ctx context.Context, in *QueryPoolRewardInfoRequest, opts ...grpc.CallOption) (*QueryPoolRewardInfoResponse, error)
	UserRewardInfo(ctx context.Context, in *QueryUserRewardInfoRequest, opts ...grpc.CallOption) (*QueryUserRewardInfoResponse, error)
	UserPendingReward(ctx context.Context, in *QueryUserPendingRewardRequest, opts ...grpc.CallOption) (*QueryUserPendingRewardResponse, error)
	StableStakeApr(ctx context.Context, in *QueryStableStakeAprRequest, opts ...grpc.CallOption) (*QueryStableStakeAprResponse, error)
	PoolAprs(ctx context.Context, in *QueryPoolAprsRequest, opts ...grpc.CallOption) (*QueryPoolAprsResponse, error)
	// Queries a list of ShowFeeInfo items.
	ShowFeeInfo(ctx context.Context, in *QueryShowFeeInfoRequest, opts ...grpc.CallOption) (*QueryShowFeeInfoResponse, error)
	// Queries a list of ListFeeInfo items.
	ListFeeInfo(ctx context.Context, in *QueryListFeeInfoRequest, opts ...grpc.CallOption) (*QueryListFeeInfoResponse, error)
	// Calculate APR
	Apr(ctx context.Context, in *QueryAprRequest, opts ...grpc.CallOption) (*QueryAprResponse, error)
	// Calculate APRs
	Aprs(ctx context.Context, in *QueryAprsRequest, opts ...grpc.CallOption) (*QueryAprsResponse, error)
	// Queries PoolReward items
	PoolRewards(ctx context.Context, in *QueryPoolRewardsRequest, opts ...grpc.CallOption) (*QueryPoolRewardsResponse, error)
	AllLiquidityPoolTVL(ctx context.Context, in *QueryAllLiquidityPoolTVLRequest, opts ...grpc.CallOption) (*QueryAllLiquidityPoolTVLResponse, error)
	ChainTVL(ctx context.Context, in *QueryChainTVLRequest, opts ...grpc.CallOption) (*QueryChainTVLResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExternalIncentive(ctx context.Context, in *QueryExternalIncentiveRequest, opts ...grpc.CallOption) (*QueryExternalIncentiveResponse, error) {
	out := new(QueryExternalIncentiveResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ExternalIncentive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolInfo(ctx context.Context, in *QueryPoolInfoRequest, opts ...grpc.CallOption) (*QueryPoolInfoResponse, error) {
	out := new(QueryPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolRewardInfo(ctx context.Context, in *QueryPoolRewardInfoRequest, opts ...grpc.CallOption) (*QueryPoolRewardInfoResponse, error) {
	out := new(QueryPoolRewardInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRewardInfo(ctx context.Context, in *QueryUserRewardInfoRequest, opts ...grpc.CallOption) (*QueryUserRewardInfoResponse, error) {
	out := new(QueryUserRewardInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/UserRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPendingReward(ctx context.Context, in *QueryUserPendingRewardRequest, opts ...grpc.CallOption) (*QueryUserPendingRewardResponse, error) {
	out := new(QueryUserPendingRewardResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/UserPendingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StableStakeApr(ctx context.Context, in *QueryStableStakeAprRequest, opts ...grpc.CallOption) (*QueryStableStakeAprResponse, error) {
	out := new(QueryStableStakeAprResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/StableStakeApr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAprs(ctx context.Context, in *QueryPoolAprsRequest, opts ...grpc.CallOption) (*QueryPoolAprsResponse, error) {
	out := new(QueryPoolAprsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolAprs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowFeeInfo(ctx context.Context, in *QueryShowFeeInfoRequest, opts ...grpc.CallOption) (*QueryShowFeeInfoResponse, error) {
	out := new(QueryShowFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ShowFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListFeeInfo(ctx context.Context, in *QueryListFeeInfoRequest, opts ...grpc.CallOption) (*QueryListFeeInfoResponse, error) {
	out := new(QueryListFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ListFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Apr(ctx context.Context, in *QueryAprRequest, opts ...grpc.CallOption) (*QueryAprResponse, error) {
	out := new(QueryAprResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Apr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Aprs(ctx context.Context, in *QueryAprsRequest, opts ...grpc.CallOption) (*QueryAprsResponse, error) {
	out := new(QueryAprsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Aprs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolRewards(ctx context.Context, in *QueryPoolRewardsRequest, opts ...grpc.CallOption) (*QueryPoolRewardsResponse, error) {
	out := new(QueryPoolRewardsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllLiquidityPoolTVL(ctx context.Context, in *QueryAllLiquidityPoolTVLRequest, opts ...grpc.CallOption) (*QueryAllLiquidityPoolTVLResponse, error) {
	out := new(QueryAllLiquidityPoolTVLResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/AllLiquidityPoolTVL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainTVL(ctx context.Context, in *QueryChainTVLRequest, opts ...grpc.CallOption) (*QueryChainTVLResponse, error) {
	out := new(QueryChainTVLResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ChainTVL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	ExternalIncentive(context.Context, *QueryExternalIncentiveRequest) (*QueryExternalIncentiveResponse, error)
	PoolInfo(context.Context, *QueryPoolInfoRequest) (*QueryPoolInfoResponse, error)
	PoolRewardInfo(context.Context, *QueryPoolRewardInfoRequest) (*QueryPoolRewardInfoResponse, error)
	UserRewardInfo(context.Context, *QueryUserRewardInfoRequest) (*QueryUserRewardInfoResponse, error)
	UserPendingReward(context.Context, *QueryUserPendingRewardRequest) (*QueryUserPendingRewardResponse, error)
	StableStakeApr(context.Context, *QueryStableStakeAprRequest) (*QueryStableStakeAprResponse, error)
	PoolAprs(context.Context, *QueryPoolAprsRequest) (*QueryPoolAprsResponse, error)
	// Queries a list of ShowFeeInfo items.
	ShowFeeInfo(context.Context, *QueryShowFeeInfoRequest) (*QueryShowFeeInfoResponse, error)
	// Queries a list of ListFeeInfo items.
	ListFeeInfo(context.Context, *QueryListFeeInfoRequest) (*QueryListFeeInfoResponse, error)
	// Calculate APR
	Apr(context.Context, *QueryAprRequest) (*QueryAprResponse, error)
	// Calculate APRs
	Aprs(context.Context, *QueryAprsRequest) (*QueryAprsResponse, error)
	// Queries PoolReward items
	PoolRewards(context.Context, *QueryPoolRewardsRequest) (*QueryPoolRewardsResponse, error)
	AllLiquidityPoolTVL(context.Context, *QueryAllLiquidityPoolTVLRequest) (*QueryAllLiquidityPoolTVLResponse, error)
	ChainTVL(context.Context, *QueryChainTVLRequest) (*QueryChainTVLResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ExternalIncentive(ctx context.Context, req *QueryExternalIncentiveRequest) (*QueryExternalIncentiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalIncentive not implemented")
}
func (*UnimplementedQueryServer) PoolInfo(ctx context.Context, req *QueryPoolInfoRequest) (*QueryPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolInfo not implemented")
}
func (*UnimplementedQueryServer) PoolRewardInfo(ctx context.Context, req *QueryPoolRewardInfoRequest) (*QueryPoolRewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRewardInfo not implemented")
}
func (*UnimplementedQueryServer) UserRewardInfo(ctx context.Context, req *QueryUserRewardInfoRequest) (*QueryUserRewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRewardInfo not implemented")
}
func (*UnimplementedQueryServer) UserPendingReward(ctx context.Context, req *QueryUserPendingRewardRequest) (*QueryUserPendingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPendingReward not implemented")
}
func (*UnimplementedQueryServer) StableStakeApr(ctx context.Context, req *QueryStableStakeAprRequest) (*QueryStableStakeAprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StableStakeApr not implemented")
}
func (*UnimplementedQueryServer) PoolAprs(ctx context.Context, req *QueryPoolAprsRequest) (*QueryPoolAprsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAprs not implemented")
}
func (*UnimplementedQueryServer) ShowFeeInfo(ctx context.Context, req *QueryShowFeeInfoRequest) (*QueryShowFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFeeInfo not implemented")
}
func (*UnimplementedQueryServer) ListFeeInfo(ctx context.Context, req *QueryListFeeInfoRequest) (*QueryListFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeInfo not implemented")
}
func (*UnimplementedQueryServer) Apr(ctx context.Context, req *QueryAprRequest) (*QueryAprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apr not implemented")
}
func (*UnimplementedQueryServer) Aprs(ctx context.Context, req *QueryAprsRequest) (*QueryAprsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aprs not implemented")
}
func (*UnimplementedQueryServer) PoolRewards(ctx context.Context, req *QueryPoolRewardsRequest) (*QueryPoolRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRewards not implemented")
}
func (*UnimplementedQueryServer) AllLiquidityPoolTVL(ctx context.Context, req *QueryAllLiquidityPoolTVLRequest) (*QueryAllLiquidityPoolTVLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLiquidityPoolTVL not implemented")
}
func (*UnimplementedQueryServer) ChainTVL(ctx context.Context, req *QueryChainTVLRequest) (*QueryChainTVLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainTVL not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExternalIncentive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExternalIncentiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExternalIncentive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ExternalIncentive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExternalIncentive(ctx, req.(*QueryExternalIncentiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolInfo(ctx, req.(*QueryPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolRewardInfo(ctx, req.(*QueryPoolRewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/UserRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRewardInfo(ctx, req.(*QueryUserRewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPendingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPendingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPendingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/UserPendingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPendingReward(ctx, req.(*QueryUserPendingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StableStakeApr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableStakeAprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StableStakeApr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/StableStakeApr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StableStakeApr(ctx, req.(*QueryStableStakeAprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAprs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolAprsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAprs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolAprs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAprs(ctx, req.(*QueryPoolAprsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ShowFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowFeeInfo(ctx, req.(*QueryShowFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ListFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListFeeInfo(ctx, req.(*QueryListFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Apr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Apr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Apr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Apr(ctx, req.(*QueryAprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Aprs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAprsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Aprs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Aprs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Aprs(ctx, req.(*QueryAprsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolRewards(ctx, req.(*QueryPoolRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllLiquidityPoolTVL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLiquidityPoolTVLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllLiquidityPoolTVL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/AllLiquidityPoolTVL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllLiquidityPoolTVL(ctx, req.(*QueryAllLiquidityPoolTVLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainTVL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainTVLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainTVL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ChainTVL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainTVL(ctx, req.(*QueryChainTVLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.masterchef.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ExternalIncentive",
			Handler:    _Query_ExternalIncentive_Handler,
		},
		{
			MethodName: "PoolInfo",
			Handler:    _Query_PoolInfo_Handler,
		},
		{
			MethodName: "PoolRewardInfo",
			Handler:    _Query_PoolRewardInfo_Handler,
		},
		{
			MethodName: "UserRewardInfo",
			Handler:    _Query_UserRewardInfo_Handler,
		},
		{
			MethodName: "UserPendingReward",
			Handler:    _Query_UserPendingReward_Handler,
		},
		{
			MethodName: "StableStakeApr",
			Handler:    _Query_StableStakeApr_Handler,
		},
		{
			MethodName: "PoolAprs",
			Handler:    _Query_PoolAprs_Handler,
		},
		{
			MethodName: "ShowFeeInfo",
			Handler:    _Query_ShowFeeInfo_Handler,
		},
		{
			MethodName: "ListFeeInfo",
			Handler:    _Query_ListFeeInfo_Handler,
		},
		{
			MethodName: "Apr",
			Handler:    _Query_Apr_Handler,
		},
		{
			MethodName: "Aprs",
			Handler:    _Query_Aprs_Handler,
		},
		{
			MethodName: "PoolRewards",
			Handler:    _Query_PoolRewards_Handler,
		},
		{
			MethodName: "AllLiquidityPoolTVL",
			Handler:    _Query_AllLiquidityPoolTVL_Handler,
		},
		{
			MethodName: "ChainTVL",
			Handler:    _Query_ChainTVL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/masterchef/query.proto",
}

func (m *QueryAllLiquidityPoolTVLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityPoolTVLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityPoolTVLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllLiquidityPoolTVLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLiquidityPoolTVLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLiquidityPoolTVLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UsdcStaking.Size()
		i -= size
		if _, err := m.UsdcStaking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Pools.Size()
		i -= size
		if _, err := m.Pools.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryChainTVLRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTVLRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTVLRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryChainTVLResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChainTVLResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChainTVLResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NetStakings) > 0 {
		for iNdEx := len(m.NetStakings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetStakings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.StakedEden.Size()
		i -= size
		if _, err := m.StakedEden.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StakedElys.Size()
		i -= size
		if _, err := m.StakedElys.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UsdcStaking.Size()
		i -= size
		if _, err := m.UsdcStaking.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Pools.Size()
		i -= size
		if _, err := m.Pools.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryExternalIncentiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExternalIncentiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExternalIncentiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExternalIncentiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExternalIncentiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExternalIncentiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExternalIncentive.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolRewardInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRewardInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRewardInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRewardInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRewardInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRewardInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolRewardInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserRewardInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRewardInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRewardInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRewardInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRewardInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRewardInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserRewardInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserPendingRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPendingRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPendingRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPendingRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPendingRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPendingRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalRewards) > 0 {
		for iNdEx := len(m.TotalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableStakeAprRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableStakeAprRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableStakeAprRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStableStakeAprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStableStakeAprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStableStakeAprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Apr) > 0 {
		i -= len(m.Apr)
		copy(dAtA[i:], m.Apr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Apr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolAprsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolAprsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolAprsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA7 := make([]byte, len(m.PoolIds)*10)
		var j6 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintQuery(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolAprsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolAprsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolAprsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolApr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolApr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolApr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalApr.Size()
		i -= size
		if _, err := m.TotalApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UsdcApr.Size()
		i -= size
		if _, err := m.UsdcApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.EdenApr.Size()
		i -= size
		if _, err := m.EdenApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowFeeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowFeeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowFeeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Date) > 0 {
		i -= len(m.Date)
		copy(dAtA[i:], m.Date)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Date)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryShowFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryShowFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryShowFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListFeeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListFeeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListFeeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryListFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeInfo) > 0 {
		for iNdEx := len(m.FeeInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAprRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAprRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAprRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.WithdrawType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.WithdrawType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAprResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAprResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAprResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Apr) > 0 {
		i -= len(m.Apr)
		copy(dAtA[i:], m.Apr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Apr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAprsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAprsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAprsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAprsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAprsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAprsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EdenbAprElys) > 0 {
		i -= len(m.EdenbAprElys)
		copy(dAtA[i:], m.EdenbAprElys)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenbAprElys)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.EdenAprElys) > 0 {
		i -= len(m.EdenAprElys)
		copy(dAtA[i:], m.EdenAprElys)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenAprElys)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UsdcAprElys) > 0 {
		i -= len(m.UsdcAprElys)
		copy(dAtA[i:], m.UsdcAprElys)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsdcAprElys)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EdenbAprEden) > 0 {
		i -= len(m.EdenbAprEden)
		copy(dAtA[i:], m.EdenbAprEden)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenbAprEden)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EdenAprEden) > 0 {
		i -= len(m.EdenAprEden)
		copy(dAtA[i:], m.EdenAprEden)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenAprEden)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UsdcAprEden) > 0 {
		i -= len(m.UsdcAprEden)
		copy(dAtA[i:], m.UsdcAprEden)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsdcAprEden)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EdenAprEdenb) > 0 {
		i -= len(m.EdenAprEdenb)
		copy(dAtA[i:], m.EdenAprEdenb)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenAprEdenb)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UsdcAprEdenb) > 0 {
		i -= len(m.UsdcAprEdenb)
		copy(dAtA[i:], m.UsdcAprEdenb)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsdcAprEdenb)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EdenAprUsdc) > 0 {
		i -= len(m.EdenAprUsdc)
		copy(dAtA[i:], m.EdenAprUsdc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EdenAprUsdc)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UsdcAprUsdc) > 0 {
		i -= len(m.UsdcAprUsdc)
		copy(dAtA[i:], m.UsdcAprUsdc)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UsdcAprUsdc)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolIds) > 0 {
		dAtA11 := make([]byte, len(m.PoolIds)*10)
		var j10 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintQuery(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalRewardsApr.Size()
		i -= size
		if _, err := m.ExternalRewardsApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.RewardsUsdApr.Size()
		i -= size
		if _, err := m.RewardsUsdApr.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.EdenForward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardCoins) > 0 {
		for iNdEx := len(m.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.RewardsUsd.Size()
		i -= size
		if _, err := m.RewardsUsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllLiquidityPoolTVLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllLiquidityPoolTVLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Pools.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UsdcStaking.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryChainTVLRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryChainTVLResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Pools.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UsdcStaking.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StakedElys.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.StakedEden.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.NetStakings) > 0 {
		for _, e := range m.NetStakings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryExternalIncentiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryExternalIncentiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ExternalIncentive.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolRewardInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolRewardInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolRewardInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserRewardInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserRewardInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserRewardInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserPendingRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserPendingRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalRewards) > 0 {
		for _, e := range m.TotalRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStableStakeAprRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStableStakeAprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Apr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolAprsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryPoolAprsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *PoolApr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.EdenApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.UsdcApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryShowFeeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryShowFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListFeeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryListFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FeeInfo) > 0 {
		for _, e := range m.FeeInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAprRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WithdrawType != 0 {
		n += 1 + sovQuery(uint64(m.WithdrawType))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAprResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Apr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAprsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAprsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UsdcAprUsdc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenAprUsdc)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UsdcAprEdenb)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenAprEdenb)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UsdcAprEden)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenAprEden)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenbAprEden)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UsdcAprElys)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenAprElys)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.EdenbAprElys)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PoolRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.RewardsUsd.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.RewardCoins) > 0 {
		for _, e := range m.RewardCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.EdenForward.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.RewardsUsdApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExternalRewardsApr.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllLiquidityPoolTVLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityPoolTVLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityPoolTVLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLiquidityPoolTVLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLiquidityPoolTVLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLiquidityPoolTVLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pools.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcStaking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdcStaking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTVLRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTVLRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTVLRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChainTVLResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChainTVLResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChainTVLResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pools.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcStaking", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdcStaking.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedElys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedElys.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakedEden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakedEden.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetStakings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetStakings = append(m.NetStakings, types.Coin{})
			if err := m.NetStakings[len(m.NetStakings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExternalIncentiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExternalIncentiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExternalIncentiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExternalIncentiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExternalIncentiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExternalIncentiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalIncentive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalIncentive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRewardInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRewardInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRewardInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRewardInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRewardInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRewardInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRewardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolRewardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRewardInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRewardInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRewardInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRewardInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRewardInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRewardInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRewardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserRewardInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPendingRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPendingRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPendingRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPendingRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPendingRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPendingRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, &RewardInfo{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalRewards = append(m.TotalRewards, types.Coin{})
			if err := m.TotalRewards[len(m.TotalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableStakeAprRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableStakeAprRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableStakeAprRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStableStakeAprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStableStakeAprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStableStakeAprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolAprsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolAprsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolAprsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolAprsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolAprsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolAprsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, PoolApr{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolApr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolApr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolApr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsdcApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowFeeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowFeeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowFeeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryShowFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryShowFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryShowFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListFeeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListFeeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListFeeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeInfo = append(m.FeeInfo, FeeInfo{})
			if err := m.FeeInfo[len(m.FeeInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAprRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAprRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAprRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawType", wireType)
			}
			m.WithdrawType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawType |= types1.EarnType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAprResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAprResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAprResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Apr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAprsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAprsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAprsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAprsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAprsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAprsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcAprUsdc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsdcAprUsdc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenAprUsdc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenAprUsdc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcAprEdenb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsdcAprEdenb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenAprEdenb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenAprEdenb = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcAprEden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsdcAprEden = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenAprEden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenAprEden = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenbAprEden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenbAprEden = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsdcAprElys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsdcAprElys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenAprElys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenAprElys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenbAprElys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EdenbAprElys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsUsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsUsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardCoins = append(m.RewardCoins, types.Coin{})
			if err := m.RewardCoins[len(m.RewardCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenForward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenForward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsUsdApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsUsdApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalRewardsApr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalRewardsApr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, PoolRewards{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
