// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/masterchef/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeeInfo struct {
	GasLp        cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=gas_lp,json=gasLp,proto3,customtype=cosmossdk.io/math.Int" json:"gas_lp"`
	GasStakers   cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=gas_stakers,json=gasStakers,proto3,customtype=cosmossdk.io/math.Int" json:"gas_stakers"`
	GasProtocol  cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=gas_protocol,json=gasProtocol,proto3,customtype=cosmossdk.io/math.Int" json:"gas_protocol"`
	DexLp        cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=dex_lp,json=dexLp,proto3,customtype=cosmossdk.io/math.Int" json:"dex_lp"`
	DexStakers   cosmossdk_io_math.Int `protobuf:"bytes,5,opt,name=dex_stakers,json=dexStakers,proto3,customtype=cosmossdk.io/math.Int" json:"dex_stakers"`
	DexProtocol  cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=dex_protocol,json=dexProtocol,proto3,customtype=cosmossdk.io/math.Int" json:"dex_protocol"`
	PerpLp       cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=perp_lp,json=perpLp,proto3,customtype=cosmossdk.io/math.Int" json:"perp_lp"`
	PerpStakers  cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=perp_stakers,json=perpStakers,proto3,customtype=cosmossdk.io/math.Int" json:"perp_stakers"`
	PerpProtocol cosmossdk_io_math.Int `protobuf:"bytes,9,opt,name=perp_protocol,json=perpProtocol,proto3,customtype=cosmossdk.io/math.Int" json:"perp_protocol"`
	EdenLp       cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=eden_lp,json=edenLp,proto3,customtype=cosmossdk.io/math.Int" json:"eden_lp"`
}

func (m *FeeInfo) Reset()         { *m = FeeInfo{} }
func (m *FeeInfo) String() string { return proto.CompactTextString(m) }
func (*FeeInfo) ProtoMessage()    {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b31d18ec96bd735, []int{0}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func init() {
	proto.RegisterType((*FeeInfo)(nil), "elys.masterchef.FeeInfo")
}

func init() { proto.RegisterFile("elys/masterchef/types.proto", fileDescriptor_6b31d18ec96bd735) }

var fileDescriptor_6b31d18ec96bd735 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd2, 0xb1, 0x4a, 0x03, 0x31,
	0x18, 0xc0, 0xf1, 0x3b, 0x6d, 0xaf, 0x36, 0x2a, 0xc2, 0xa1, 0x50, 0x14, 0x53, 0x71, 0x72, 0xf1,
	0x32, 0x28, 0x8e, 0x22, 0x1d, 0x84, 0x42, 0x07, 0xd1, 0xcd, 0x45, 0xd2, 0xcb, 0xd7, 0xb4, 0xb4,
	0x77, 0x09, 0x97, 0x88, 0xd7, 0xb7, 0xf0, 0xb1, 0x3a, 0x76, 0x14, 0x87, 0x22, 0xed, 0x03, 0xf8,
	0x0a, 0xf2, 0xa5, 0xb6, 0x16, 0x5c, 0xb2, 0xdd, 0x91, 0xfc, 0xbf, 0xef, 0x37, 0x84, 0x9c, 0xc0,
	0x68, 0x6c, 0x58, 0xc6, 0x8d, 0x85, 0x22, 0xed, 0x43, 0x8f, 0xd9, 0xb1, 0x06, 0x93, 0xe8, 0x42,
	0x59, 0x15, 0x1f, 0xe0, 0x61, 0xf2, 0x77, 0x78, 0x7c, 0x28, 0x95, 0x54, 0xee, 0x8c, 0xe1, 0xd7,
	0xf2, 0xda, 0xf9, 0x77, 0x85, 0xd4, 0xee, 0x01, 0xda, 0x79, 0x4f, 0xc5, 0xd7, 0x24, 0x92, 0xdc,
	0xbc, 0x8c, 0x74, 0x23, 0x3c, 0x0b, 0x2f, 0xea, 0xad, 0xd3, 0xc9, 0xac, 0x19, 0x7c, 0xce, 0x9a,
	0x47, 0xa9, 0x32, 0x99, 0x32, 0x46, 0x0c, 0x93, 0x81, 0x62, 0x19, 0xb7, 0xfd, 0xa4, 0x9d, 0xdb,
	0xc7, 0xaa, 0xe4, 0xa6, 0xa3, 0xe3, 0x5b, 0xb2, 0x8b, 0x95, 0xb1, 0x7c, 0x08, 0x85, 0x69, 0x6c,
	0xf9, 0xa4, 0x44, 0x72, 0xf3, 0xb4, 0x0c, 0xe2, 0x3b, 0xb2, 0x87, 0xbd, 0xe3, 0xa4, 0x6a, 0xd4,
	0xd8, 0xf6, 0x19, 0x80, 0x2b, 0x1f, 0x7e, 0x0b, 0x74, 0x0b, 0x28, 0xd1, 0x5d, 0xf1, 0x72, 0x0b,
	0x28, 0x97, 0x6e, 0xac, 0x56, 0xee, 0xaa, 0x97, 0x5b, 0x40, 0xb9, 0xe1, 0xc6, 0x7e, 0xed, 0x8e,
	0xbc, 0xdc, 0x02, 0xca, 0xb5, 0xfb, 0x86, 0xd4, 0x34, 0x14, 0x1a, 0xe1, 0x35, 0x9f, 0x38, 0xc2,
	0xdb, 0x1d, 0x8d, 0x9b, 0x5d, 0xb7, 0xa2, 0xef, 0x78, 0x6d, 0xc6, 0x64, 0x65, 0x6f, 0x91, 0x7d,
	0x37, 0x61, 0x8d, 0xaf, 0xfb, 0x8c, 0x70, 0x5b, 0x37, 0xf5, 0x20, 0x20, 0x47, 0x3d, 0xf1, 0xd2,
	0xe3, 0xed, 0x8e, 0x6e, 0xb5, 0x27, 0x73, 0x1a, 0x4e, 0xe7, 0x34, 0xfc, 0x9a, 0xd3, 0xf0, 0x7d,
	0x41, 0x83, 0xe9, 0x82, 0x06, 0x1f, 0x0b, 0x1a, 0x3c, 0x33, 0x39, 0xb0, 0xfd, 0xd7, 0x6e, 0x92,
	0xaa, 0x8c, 0xe1, 0xeb, 0xbd, 0xcc, 0xc1, 0xbe, 0xa9, 0x62, 0xe8, 0x7e, 0x58, 0xf9, 0xef, 0xa5,
	0x77, 0x23, 0xe7, 0xbf, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xaa, 0x1d, 0x11, 0x09, 0x03,
	0x00, 0x00,
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EdenLp.Size()
		i -= size
		if _, err := m.EdenLp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.PerpProtocol.Size()
		i -= size
		if _, err := m.PerpProtocol.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.PerpStakers.Size()
		i -= size
		if _, err := m.PerpStakers.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.PerpLp.Size()
		i -= size
		if _, err := m.PerpLp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DexProtocol.Size()
		i -= size
		if _, err := m.DexProtocol.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.DexStakers.Size()
		i -= size
		if _, err := m.DexStakers.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DexLp.Size()
		i -= size
		if _, err := m.DexLp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.GasProtocol.Size()
		i -= size
		if _, err := m.GasProtocol.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.GasStakers.Size()
		i -= size
		if _, err := m.GasStakers.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.GasLp.Size()
		i -= size
		if _, err := m.GasLp.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GasLp.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.GasStakers.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.GasProtocol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DexLp.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DexStakers.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DexProtocol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.PerpLp.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.PerpStakers.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.PerpProtocol.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.EdenLp.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasLp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasStakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasStakers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GasProtocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexLp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexLp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexStakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexStakers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DexProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DexProtocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpLp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpLp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpStakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpStakers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpProtocol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerpProtocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdenLp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EdenLp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
