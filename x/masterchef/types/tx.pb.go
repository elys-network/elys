// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/masterchef/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgAddExternalRewardDenom struct {
	Authority   string                                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	RewardDenom string                                 `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	MinAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=min_amount,json=minAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_amount"`
	Supported   bool                                   `protobuf:"varint,4,opt,name=supported,proto3" json:"supported,omitempty"`
}

func (m *MsgAddExternalRewardDenom) Reset()         { *m = MsgAddExternalRewardDenom{} }
func (m *MsgAddExternalRewardDenom) String() string { return proto.CompactTextString(m) }
func (*MsgAddExternalRewardDenom) ProtoMessage()    {}
func (*MsgAddExternalRewardDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{0}
}
func (m *MsgAddExternalRewardDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExternalRewardDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExternalRewardDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExternalRewardDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExternalRewardDenom.Merge(m, src)
}
func (m *MsgAddExternalRewardDenom) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExternalRewardDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExternalRewardDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExternalRewardDenom proto.InternalMessageInfo

func (m *MsgAddExternalRewardDenom) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgAddExternalRewardDenom) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *MsgAddExternalRewardDenom) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

type MsgAddExternalRewardDenomResponse struct {
}

func (m *MsgAddExternalRewardDenomResponse) Reset()         { *m = MsgAddExternalRewardDenomResponse{} }
func (m *MsgAddExternalRewardDenomResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddExternalRewardDenomResponse) ProtoMessage()    {}
func (*MsgAddExternalRewardDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{1}
}
func (m *MsgAddExternalRewardDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExternalRewardDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExternalRewardDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExternalRewardDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExternalRewardDenomResponse.Merge(m, src)
}
func (m *MsgAddExternalRewardDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExternalRewardDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExternalRewardDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExternalRewardDenomResponse proto.InternalMessageInfo

type MsgAddExternalIncentive struct {
	Sender         string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	RewardDenom    string                                 `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	PoolId         uint64                                 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	FromBlock      uint64                                 `protobuf:"varint,4,opt,name=from_block,json=fromBlock,proto3" json:"from_block,omitempty"`
	ToBlock        uint64                                 `protobuf:"varint,5,opt,name=to_block,json=toBlock,proto3" json:"to_block,omitempty"`
	AmountPerBlock github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount_per_block,json=amountPerBlock,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_per_block"`
}

func (m *MsgAddExternalIncentive) Reset()         { *m = MsgAddExternalIncentive{} }
func (m *MsgAddExternalIncentive) String() string { return proto.CompactTextString(m) }
func (*MsgAddExternalIncentive) ProtoMessage()    {}
func (*MsgAddExternalIncentive) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{2}
}
func (m *MsgAddExternalIncentive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExternalIncentive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExternalIncentive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExternalIncentive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExternalIncentive.Merge(m, src)
}
func (m *MsgAddExternalIncentive) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExternalIncentive) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExternalIncentive.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExternalIncentive proto.InternalMessageInfo

func (m *MsgAddExternalIncentive) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgAddExternalIncentive) GetRewardDenom() string {
	if m != nil {
		return m.RewardDenom
	}
	return ""
}

func (m *MsgAddExternalIncentive) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *MsgAddExternalIncentive) GetFromBlock() uint64 {
	if m != nil {
		return m.FromBlock
	}
	return 0
}

func (m *MsgAddExternalIncentive) GetToBlock() uint64 {
	if m != nil {
		return m.ToBlock
	}
	return 0
}

type MsgAddExternalIncentiveResponse struct {
}

func (m *MsgAddExternalIncentiveResponse) Reset()         { *m = MsgAddExternalIncentiveResponse{} }
func (m *MsgAddExternalIncentiveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddExternalIncentiveResponse) ProtoMessage()    {}
func (*MsgAddExternalIncentiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{3}
}
func (m *MsgAddExternalIncentiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddExternalIncentiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddExternalIncentiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddExternalIncentiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddExternalIncentiveResponse.Merge(m, src)
}
func (m *MsgAddExternalIncentiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddExternalIncentiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddExternalIncentiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddExternalIncentiveResponse proto.InternalMessageInfo

type MsgUpdateIncentiveParams struct {
	Authority           string                                 `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	RewardPortionForLps github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reward_portion_for_lps,json=rewardPortionForLps,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_portion_for_lps"`
	MaxEdenRewardAprLps github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=max_eden_reward_apr_lps,json=maxEdenRewardAprLps,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_eden_reward_apr_lps"`
}

func (m *MsgUpdateIncentiveParams) Reset()         { *m = MsgUpdateIncentiveParams{} }
func (m *MsgUpdateIncentiveParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIncentiveParams) ProtoMessage()    {}
func (*MsgUpdateIncentiveParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{4}
}
func (m *MsgUpdateIncentiveParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIncentiveParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIncentiveParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIncentiveParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIncentiveParams.Merge(m, src)
}
func (m *MsgUpdateIncentiveParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIncentiveParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIncentiveParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIncentiveParams proto.InternalMessageInfo

func (m *MsgUpdateIncentiveParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

type MsgUpdateIncentiveParamsResponse struct {
}

func (m *MsgUpdateIncentiveParamsResponse) Reset()         { *m = MsgUpdateIncentiveParamsResponse{} }
func (m *MsgUpdateIncentiveParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateIncentiveParamsResponse) ProtoMessage()    {}
func (*MsgUpdateIncentiveParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{5}
}
func (m *MsgUpdateIncentiveParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateIncentiveParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateIncentiveParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateIncentiveParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateIncentiveParamsResponse.Merge(m, src)
}
func (m *MsgUpdateIncentiveParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateIncentiveParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateIncentiveParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateIncentiveParamsResponse proto.InternalMessageInfo

type PoolMultiplier struct {
	PoolId     uint64                                 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Multiplier github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=multiplier,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"multiplier"`
}

func (m *PoolMultiplier) Reset()         { *m = PoolMultiplier{} }
func (m *PoolMultiplier) String() string { return proto.CompactTextString(m) }
func (*PoolMultiplier) ProtoMessage()    {}
func (*PoolMultiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{6}
}
func (m *PoolMultiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolMultiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolMultiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolMultiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolMultiplier.Merge(m, src)
}
func (m *PoolMultiplier) XXX_Size() int {
	return m.Size()
}
func (m *PoolMultiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolMultiplier.DiscardUnknown(m)
}

var xxx_messageInfo_PoolMultiplier proto.InternalMessageInfo

func (m *PoolMultiplier) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgUpdatePoolMultipliers struct {
	Authority       string           `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	PoolMultipliers []PoolMultiplier `protobuf:"bytes,2,rep,name=pool_multipliers,json=poolMultipliers,proto3" json:"pool_multipliers"`
}

func (m *MsgUpdatePoolMultipliers) Reset()         { *m = MsgUpdatePoolMultipliers{} }
func (m *MsgUpdatePoolMultipliers) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePoolMultipliers) ProtoMessage()    {}
func (*MsgUpdatePoolMultipliers) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{7}
}
func (m *MsgUpdatePoolMultipliers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePoolMultipliers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePoolMultipliers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePoolMultipliers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePoolMultipliers.Merge(m, src)
}
func (m *MsgUpdatePoolMultipliers) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePoolMultipliers) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePoolMultipliers.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePoolMultipliers proto.InternalMessageInfo

func (m *MsgUpdatePoolMultipliers) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdatePoolMultipliers) GetPoolMultipliers() []PoolMultiplier {
	if m != nil {
		return m.PoolMultipliers
	}
	return nil
}

type MsgUpdatePoolMultipliersResponse struct {
}

func (m *MsgUpdatePoolMultipliersResponse) Reset()         { *m = MsgUpdatePoolMultipliersResponse{} }
func (m *MsgUpdatePoolMultipliersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePoolMultipliersResponse) ProtoMessage()    {}
func (*MsgUpdatePoolMultipliersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{8}
}
func (m *MsgUpdatePoolMultipliersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePoolMultipliersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePoolMultipliersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePoolMultipliersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePoolMultipliersResponse.Merge(m, src)
}
func (m *MsgUpdatePoolMultipliersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePoolMultipliersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePoolMultipliersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePoolMultipliersResponse proto.InternalMessageInfo

type MsgClaimRewards struct {
	Sender  string   `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	PoolIds []uint64 `protobuf:"varint,2,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *MsgClaimRewards) Reset()         { *m = MsgClaimRewards{} }
func (m *MsgClaimRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewards) ProtoMessage()    {}
func (*MsgClaimRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{9}
}
func (m *MsgClaimRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewards.Merge(m, src)
}
func (m *MsgClaimRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewards proto.InternalMessageInfo

func (m *MsgClaimRewards) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgClaimRewards) GetPoolIds() []uint64 {
	if m != nil {
		return m.PoolIds
	}
	return nil
}

type MsgClaimRewardsResponse struct {
}

func (m *MsgClaimRewardsResponse) Reset()         { *m = MsgClaimRewardsResponse{} }
func (m *MsgClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2574ed545e5b2c11, []int{10}
}
func (m *MsgClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgAddExternalRewardDenom)(nil), "elys.masterchef.MsgAddExternalRewardDenom")
	proto.RegisterType((*MsgAddExternalRewardDenomResponse)(nil), "elys.masterchef.MsgAddExternalRewardDenomResponse")
	proto.RegisterType((*MsgAddExternalIncentive)(nil), "elys.masterchef.MsgAddExternalIncentive")
	proto.RegisterType((*MsgAddExternalIncentiveResponse)(nil), "elys.masterchef.MsgAddExternalIncentiveResponse")
	proto.RegisterType((*MsgUpdateIncentiveParams)(nil), "elys.masterchef.MsgUpdateIncentiveParams")
	proto.RegisterType((*MsgUpdateIncentiveParamsResponse)(nil), "elys.masterchef.MsgUpdateIncentiveParamsResponse")
	proto.RegisterType((*PoolMultiplier)(nil), "elys.masterchef.PoolMultiplier")
	proto.RegisterType((*MsgUpdatePoolMultipliers)(nil), "elys.masterchef.MsgUpdatePoolMultipliers")
	proto.RegisterType((*MsgUpdatePoolMultipliersResponse)(nil), "elys.masterchef.MsgUpdatePoolMultipliersResponse")
	proto.RegisterType((*MsgClaimRewards)(nil), "elys.masterchef.MsgClaimRewards")
	proto.RegisterType((*MsgClaimRewardsResponse)(nil), "elys.masterchef.MsgClaimRewardsResponse")
}

func init() { proto.RegisterFile("elys/masterchef/tx.proto", fileDescriptor_2574ed545e5b2c11) }

var fileDescriptor_2574ed545e5b2c11 = []byte{
	// 700 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xc1, 0x4e, 0xdb, 0x4a,
	0x14, 0x8d, 0x49, 0x5e, 0x20, 0x17, 0x04, 0xc8, 0x8f, 0x07, 0x49, 0xf4, 0x9a, 0x04, 0x57, 0xaa,
	0xd2, 0x4a, 0xc4, 0x2d, 0xfd, 0x02, 0x52, 0xa8, 0x14, 0xa9, 0xa9, 0x22, 0x4b, 0x95, 0x2a, 0x36,
	0x96, 0xb1, 0x07, 0x63, 0x61, 0xcf, 0x8c, 0x66, 0x26, 0x25, 0x59, 0x56, 0xdd, 0x75, 0xd5, 0x1f,
	0xea, 0x9e, 0xee, 0x58, 0x56, 0x5d, 0xa0, 0x0a, 0x7e, 0xa4, 0x1a, 0xdb, 0x38, 0x76, 0x88, 0x49,
	0xca, 0x2a, 0x99, 0xb9, 0x47, 0xe7, 0x9c, 0x39, 0x73, 0xef, 0x18, 0xaa, 0xc8, 0x1f, 0x73, 0x3d,
	0xb0, 0xb8, 0x40, 0xcc, 0x3e, 0x43, 0xa7, 0xba, 0x18, 0x75, 0x28, 0x23, 0x82, 0xa8, 0x1b, 0xb2,
	0xd2, 0x99, 0x54, 0xea, 0x5b, 0x2e, 0x71, 0x49, 0x58, 0xd3, 0xe5, 0xbf, 0x08, 0xa6, 0xfd, 0x50,
	0xa0, 0xd6, 0xe7, 0xee, 0x81, 0xe3, 0x1c, 0x8d, 0x04, 0x62, 0xd8, 0xf2, 0x0d, 0x74, 0x61, 0x31,
	0xe7, 0x10, 0x61, 0x12, 0xa8, 0xff, 0x43, 0xc5, 0x1a, 0x8a, 0x33, 0xc2, 0x3c, 0x31, 0xae, 0x2a,
	0x2d, 0xa5, 0x5d, 0x31, 0x26, 0x1b, 0xea, 0x2e, 0xac, 0xb1, 0x10, 0x6c, 0x3a, 0x12, 0x5d, 0x5d,
	0x0a, 0x01, 0xab, 0x2c, 0x45, 0xd0, 0x07, 0x08, 0x3c, 0x6c, 0x5a, 0x01, 0x19, 0x62, 0x51, 0x2d,
	0x4a, 0x40, 0xb7, 0x73, 0x79, 0xdd, 0x2c, 0xfc, 0xba, 0x6e, 0x3e, 0x73, 0x3d, 0x71, 0x36, 0x3c,
	0xe9, 0xd8, 0x24, 0xd0, 0x6d, 0xc2, 0x03, 0xc2, 0xe3, 0x9f, 0x3d, 0xee, 0x9c, 0xeb, 0x62, 0x4c,
	0x11, 0xef, 0xf4, 0xb0, 0x30, 0x2a, 0x81, 0x87, 0x0f, 0x42, 0x02, 0xe9, 0x87, 0x0f, 0x29, 0x25,
	0x4c, 0x20, 0xa7, 0x5a, 0x6a, 0x29, 0xed, 0x15, 0x63, 0xb2, 0xa1, 0x3d, 0x85, 0xdd, 0xdc, 0xa3,
	0x18, 0x88, 0x53, 0x82, 0x39, 0xd2, 0x3e, 0x2f, 0xc1, 0x4e, 0x16, 0xd5, 0xc3, 0x36, 0xc2, 0xc2,
	0xfb, 0x84, 0xd4, 0x6d, 0x28, 0x73, 0x84, 0x1d, 0xc4, 0xe2, 0xb3, 0xc6, 0xab, 0x45, 0x0e, 0xba,
	0x03, 0xcb, 0x94, 0x10, 0xdf, 0xf4, 0x9c, 0xf0, 0x94, 0x25, 0xa3, 0x2c, 0x97, 0x3d, 0x47, 0x7d,
	0x02, 0x70, 0xca, 0x48, 0x60, 0x9e, 0xf8, 0xc4, 0x3e, 0x0f, 0x3d, 0x97, 0x8c, 0x8a, 0xdc, 0xe9,
	0xca, 0x0d, 0xb5, 0x06, 0x2b, 0x82, 0xc4, 0xc5, 0x7f, 0xc2, 0xe2, 0xb2, 0x20, 0x51, 0xe9, 0x23,
	0x6c, 0x46, 0xb9, 0x99, 0x14, 0xb1, 0x18, 0x52, 0x7e, 0x54, 0x82, 0xeb, 0x11, 0xcf, 0x00, 0xb1,
	0x90, 0x59, 0xdb, 0x85, 0x66, 0x4e, 0x04, 0x49, 0x4c, 0x5f, 0x96, 0xa0, 0xda, 0xe7, 0xee, 0x07,
	0xea, 0x58, 0x02, 0x25, 0xe5, 0x81, 0xc5, 0xac, 0x80, 0xcf, 0x69, 0x0b, 0x1b, 0xb6, 0xe3, 0xb4,
	0xe4, 0xbd, 0x78, 0x04, 0x9b, 0xa7, 0x84, 0x99, 0x3e, 0xe5, 0x51, 0x6e, 0x7f, 0xe5, 0xfe, 0x10,
	0xd9, 0xc6, 0xbf, 0x11, 0xdb, 0x20, 0x22, 0x7b, 0x4b, 0xd8, 0x3b, 0xca, 0x55, 0x07, 0x76, 0x02,
	0x6b, 0x64, 0x22, 0x07, 0x61, 0x33, 0x56, 0xb3, 0x68, 0xa4, 0x52, 0x7c, 0x9c, 0x4a, 0x60, 0x8d,
	0x8e, 0x1c, 0x84, 0xa3, 0x9e, 0x39, 0xa0, 0x52, 0x45, 0xd3, 0xa0, 0x95, 0x17, 0x42, 0x92, 0xd4,
	0x18, 0xd6, 0x07, 0x84, 0xf8, 0xfd, 0xa1, 0x2f, 0x3c, 0xea, 0x7b, 0x88, 0xa5, 0x7b, 0x41, 0xc9,
	0xf4, 0xc2, 0x7b, 0x80, 0x20, 0x81, 0x3d, 0x32, 0x8d, 0x14, 0x83, 0xf6, 0x55, 0x49, 0x5d, 0x52,
	0xd6, 0xc4, 0xbc, 0x4b, 0x1a, 0xc0, 0x66, 0xe8, 0x71, 0xc2, 0x26, 0xaf, 0xa7, 0xd8, 0x5e, 0xdd,
	0x6f, 0x76, 0xa6, 0x5e, 0x8e, 0x4e, 0x96, 0xb9, 0x5b, 0x92, 0x8e, 0x8d, 0x0d, 0x9a, 0xd5, 0xcb,
	0x64, 0x35, 0xe5, 0x25, 0xc9, 0xea, 0x10, 0x36, 0xfa, 0xdc, 0x7d, 0xe3, 0x5b, 0x5e, 0x10, 0xe5,
	0xcc, 0x73, 0x67, 0xae, 0x06, 0x2b, 0x71, 0x88, 0x91, 0xb1, 0x92, 0xb1, 0x1c, 0xa5, 0xc8, 0xb5,
	0x5a, 0x38, 0xc1, 0x69, 0x96, 0x3b, 0x81, 0xfd, 0xef, 0x25, 0x28, 0xf6, 0xb9, 0xab, 0x8e, 0x60,
	0x3b, 0xe7, 0x49, 0x7b, 0x71, 0xef, 0x78, 0xb9, 0x6f, 0x46, 0x7d, 0x7f, 0x71, 0xec, 0x9d, 0x03,
	0x95, 0xc1, 0xd6, 0xcc, 0xb7, 0xa5, 0x3d, 0x87, 0x2b, 0x41, 0xd6, 0x5f, 0x2e, 0x8a, 0x4c, 0x34,
	0x87, 0xf0, 0xdf, 0xec, 0x41, 0x7d, 0x3e, 0x8b, 0x6a, 0x26, 0xb4, 0xfe, 0x6a, 0x61, 0xe8, 0x7d,
	0xd9, 0xe9, 0xd6, 0x7b, 0x40, 0x76, 0x0a, 0xfa, 0x90, 0x6c, 0x4e, 0x13, 0xa9, 0xc7, 0xb0, 0x96,
	0xe9, 0xa0, 0xd6, 0x2c, 0x8a, 0x34, 0xa2, 0xde, 0x9e, 0x87, 0xb8, 0xe3, 0xee, 0xf6, 0x2e, 0x6f,
	0x1a, 0xca, 0xd5, 0x4d, 0x43, 0xf9, 0x7d, 0xd3, 0x50, 0xbe, 0xdd, 0x36, 0x0a, 0x57, 0xb7, 0x8d,
	0xc2, 0xcf, 0xdb, 0x46, 0xe1, 0x58, 0x4f, 0xcd, 0xa7, 0x64, 0xdb, 0xc3, 0x48, 0x5c, 0x10, 0x76,
	0x1e, 0x2e, 0xf4, 0x51, 0xe6, 0x1b, 0x2c, 0x87, 0xf5, 0xa4, 0x1c, 0x7e, 0x60, 0x5f, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x5c, 0xb9, 0x2d, 0xd8, 0xa3, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddExternalRewardDenom(ctx context.Context, in *MsgAddExternalRewardDenom, opts ...grpc.CallOption) (*MsgAddExternalRewardDenomResponse, error)
	AddExternalIncentive(ctx context.Context, in *MsgAddExternalIncentive, opts ...grpc.CallOption) (*MsgAddExternalIncentiveResponse, error)
	UpdateIncentiveParams(ctx context.Context, in *MsgUpdateIncentiveParams, opts ...grpc.CallOption) (*MsgUpdateIncentiveParamsResponse, error)
	UpdatePoolMultipliers(ctx context.Context, in *MsgUpdatePoolMultipliers, opts ...grpc.CallOption) (*MsgUpdatePoolMultipliersResponse, error)
	ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddExternalRewardDenom(ctx context.Context, in *MsgAddExternalRewardDenom, opts ...grpc.CallOption) (*MsgAddExternalRewardDenomResponse, error) {
	out := new(MsgAddExternalRewardDenomResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Msg/AddExternalRewardDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddExternalIncentive(ctx context.Context, in *MsgAddExternalIncentive, opts ...grpc.CallOption) (*MsgAddExternalIncentiveResponse, error) {
	out := new(MsgAddExternalIncentiveResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Msg/AddExternalIncentive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateIncentiveParams(ctx context.Context, in *MsgUpdateIncentiveParams, opts ...grpc.CallOption) (*MsgUpdateIncentiveParamsResponse, error) {
	out := new(MsgUpdateIncentiveParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Msg/UpdateIncentiveParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePoolMultipliers(ctx context.Context, in *MsgUpdatePoolMultipliers, opts ...grpc.CallOption) (*MsgUpdatePoolMultipliersResponse, error) {
	out := new(MsgUpdatePoolMultipliersResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Msg/UpdatePoolMultipliers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRewards(ctx context.Context, in *MsgClaimRewards, opts ...grpc.CallOption) (*MsgClaimRewardsResponse, error) {
	out := new(MsgClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Msg/ClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddExternalRewardDenom(context.Context, *MsgAddExternalRewardDenom) (*MsgAddExternalRewardDenomResponse, error)
	AddExternalIncentive(context.Context, *MsgAddExternalIncentive) (*MsgAddExternalIncentiveResponse, error)
	UpdateIncentiveParams(context.Context, *MsgUpdateIncentiveParams) (*MsgUpdateIncentiveParamsResponse, error)
	UpdatePoolMultipliers(context.Context, *MsgUpdatePoolMultipliers) (*MsgUpdatePoolMultipliersResponse, error)
	ClaimRewards(context.Context, *MsgClaimRewards) (*MsgClaimRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddExternalRewardDenom(ctx context.Context, req *MsgAddExternalRewardDenom) (*MsgAddExternalRewardDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExternalRewardDenom not implemented")
}
func (*UnimplementedMsgServer) AddExternalIncentive(ctx context.Context, req *MsgAddExternalIncentive) (*MsgAddExternalIncentiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExternalIncentive not implemented")
}
func (*UnimplementedMsgServer) UpdateIncentiveParams(ctx context.Context, req *MsgUpdateIncentiveParams) (*MsgUpdateIncentiveParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncentiveParams not implemented")
}
func (*UnimplementedMsgServer) UpdatePoolMultipliers(ctx context.Context, req *MsgUpdatePoolMultipliers) (*MsgUpdatePoolMultipliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoolMultipliers not implemented")
}
func (*UnimplementedMsgServer) ClaimRewards(ctx context.Context, req *MsgClaimRewards) (*MsgClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddExternalRewardDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddExternalRewardDenom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddExternalRewardDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Msg/AddExternalRewardDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddExternalRewardDenom(ctx, req.(*MsgAddExternalRewardDenom))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddExternalIncentive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddExternalIncentive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddExternalIncentive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Msg/AddExternalIncentive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddExternalIncentive(ctx, req.(*MsgAddExternalIncentive))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateIncentiveParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateIncentiveParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateIncentiveParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Msg/UpdateIncentiveParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateIncentiveParams(ctx, req.(*MsgUpdateIncentiveParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePoolMultipliers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePoolMultipliers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePoolMultipliers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Msg/UpdatePoolMultipliers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePoolMultipliers(ctx, req.(*MsgUpdatePoolMultipliers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Msg/ClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRewards(ctx, req.(*MsgClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.masterchef.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddExternalRewardDenom",
			Handler:    _Msg_AddExternalRewardDenom_Handler,
		},
		{
			MethodName: "AddExternalIncentive",
			Handler:    _Msg_AddExternalIncentive_Handler,
		},
		{
			MethodName: "UpdateIncentiveParams",
			Handler:    _Msg_UpdateIncentiveParams_Handler,
		},
		{
			MethodName: "UpdatePoolMultipliers",
			Handler:    _Msg_UpdatePoolMultipliers_Handler,
		},
		{
			MethodName: "ClaimRewards",
			Handler:    _Msg_ClaimRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/masterchef/tx.proto",
}

func (m *MsgAddExternalRewardDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExternalRewardDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExternalRewardDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Supported {
		i--
		if m.Supported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.MinAmount.Size()
		i -= size
		if _, err := m.MinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddExternalRewardDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExternalRewardDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExternalRewardDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddExternalIncentive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExternalIncentive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExternalIncentive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AmountPerBlock.Size()
		i -= size
		if _, err := m.AmountPerBlock.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ToBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ToBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.FromBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.FromBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardDenom) > 0 {
		i -= len(m.RewardDenom)
		copy(dAtA[i:], m.RewardDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddExternalIncentiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddExternalIncentiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddExternalIncentiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIncentiveParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIncentiveParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIncentiveParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxEdenRewardAprLps.Size()
		i -= size
		if _, err := m.MaxEdenRewardAprLps.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RewardPortionForLps.Size()
		i -= size
		if _, err := m.RewardPortionForLps.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateIncentiveParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateIncentiveParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateIncentiveParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoolMultiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolMultiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolMultiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePoolMultipliers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePoolMultipliers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePoolMultipliers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolMultipliers) > 0 {
		for iNdEx := len(m.PoolMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePoolMultipliersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePoolMultipliersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePoolMultipliersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA2 := make([]byte, len(m.PoolIds)*10)
		var j1 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTx(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgAddExternalRewardDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.MinAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Supported {
		n += 2
	}
	return n
}

func (m *MsgAddExternalRewardDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddExternalIncentive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	if m.FromBlock != 0 {
		n += 1 + sovTx(uint64(m.FromBlock))
	}
	if m.ToBlock != 0 {
		n += 1 + sovTx(uint64(m.ToBlock))
	}
	l = m.AmountPerBlock.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddExternalIncentiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateIncentiveParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RewardPortionForLps.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.MaxEdenRewardAprLps.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateIncentiveParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoolMultiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdatePoolMultipliers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolMultipliers) > 0 {
		for _, e := range m.PoolMultipliers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdatePoolMultipliersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgAddExternalRewardDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExternalRewardDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExternalRewardDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Supported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddExternalRewardDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExternalRewardDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExternalRewardDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddExternalIncentive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExternalIncentive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExternalIncentive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBlock", wireType)
			}
			m.FromBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBlock", wireType)
			}
			m.ToBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountPerBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddExternalIncentiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddExternalIncentiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddExternalIncentiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIncentiveParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIncentiveParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIncentiveParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPortionForLps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardPortionForLps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEdenRewardAprLps", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxEdenRewardAprLps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateIncentiveParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateIncentiveParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateIncentiveParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolMultiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolMultiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolMultiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePoolMultipliers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePoolMultipliers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePoolMultipliers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolMultipliers = append(m.PoolMultipliers, PoolMultiplier{})
			if err := m.PoolMultipliers[len(m.PoolMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePoolMultipliersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePoolMultipliersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePoolMultipliersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
