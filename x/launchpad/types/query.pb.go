// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/launchpad/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryBonusRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryBonusRequest) Reset()         { *m = QueryBonusRequest{} }
func (m *QueryBonusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBonusRequest) ProtoMessage()    {}
func (*QueryBonusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{2}
}
func (m *QueryBonusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBonusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBonusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBonusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBonusRequest.Merge(m, src)
}
func (m *QueryBonusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBonusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBonusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBonusRequest proto.InternalMessageInfo

func (m *QueryBonusRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryBonusResponse struct {
	TotalBonus github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_bonus,json=totalBonus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_bonus"`
}

func (m *QueryBonusResponse) Reset()         { *m = QueryBonusResponse{} }
func (m *QueryBonusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBonusResponse) ProtoMessage()    {}
func (*QueryBonusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{3}
}
func (m *QueryBonusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBonusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBonusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBonusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBonusResponse.Merge(m, src)
}
func (m *QueryBonusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBonusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBonusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBonusResponse proto.InternalMessageInfo

type QueryBuyElysEstRequest struct {
	SpendingToken string                                 `protobuf:"bytes,1,opt,name=spending_token,json=spendingToken,proto3" json:"spending_token,omitempty"`
	TokenAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=token_amount,json=tokenAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"token_amount"`
}

func (m *QueryBuyElysEstRequest) Reset()         { *m = QueryBuyElysEstRequest{} }
func (m *QueryBuyElysEstRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBuyElysEstRequest) ProtoMessage()    {}
func (*QueryBuyElysEstRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{4}
}
func (m *QueryBuyElysEstRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyElysEstRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyElysEstRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyElysEstRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyElysEstRequest.Merge(m, src)
}
func (m *QueryBuyElysEstRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyElysEstRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyElysEstRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyElysEstRequest proto.InternalMessageInfo

func (m *QueryBuyElysEstRequest) GetSpendingToken() string {
	if m != nil {
		return m.SpendingToken
	}
	return ""
}

type QueryBuyElysEstResponse struct {
	ElysAmount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=elys_amount,json=elysAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"elys_amount"`
	BonusAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=bonus_amount,json=bonusAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonus_amount"`
	Orders      []Purchase                             `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders"`
}

func (m *QueryBuyElysEstResponse) Reset()         { *m = QueryBuyElysEstResponse{} }
func (m *QueryBuyElysEstResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBuyElysEstResponse) ProtoMessage()    {}
func (*QueryBuyElysEstResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{5}
}
func (m *QueryBuyElysEstResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBuyElysEstResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBuyElysEstResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBuyElysEstResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBuyElysEstResponse.Merge(m, src)
}
func (m *QueryBuyElysEstResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBuyElysEstResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBuyElysEstResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBuyElysEstResponse proto.InternalMessageInfo

func (m *QueryBuyElysEstResponse) GetOrders() []Purchase {
	if m != nil {
		return m.Orders
	}
	return nil
}

type QueryReturnElysEstRequest struct {
	OrderId    uint64                                 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	ElysAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=elys_amount,json=elysAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"elys_amount"`
}

func (m *QueryReturnElysEstRequest) Reset()         { *m = QueryReturnElysEstRequest{} }
func (m *QueryReturnElysEstRequest) String() string { return proto.CompactTextString(m) }
func (*QueryReturnElysEstRequest) ProtoMessage()    {}
func (*QueryReturnElysEstRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{6}
}
func (m *QueryReturnElysEstRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReturnElysEstRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReturnElysEstRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReturnElysEstRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReturnElysEstRequest.Merge(m, src)
}
func (m *QueryReturnElysEstRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryReturnElysEstRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReturnElysEstRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReturnElysEstRequest proto.InternalMessageInfo

func (m *QueryReturnElysEstRequest) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type QueryReturnElysEstResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *QueryReturnElysEstResponse) Reset()         { *m = QueryReturnElysEstResponse{} }
func (m *QueryReturnElysEstResponse) String() string { return proto.CompactTextString(m) }
func (*QueryReturnElysEstResponse) ProtoMessage()    {}
func (*QueryReturnElysEstResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{7}
}
func (m *QueryReturnElysEstResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryReturnElysEstResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryReturnElysEstResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryReturnElysEstResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryReturnElysEstResponse.Merge(m, src)
}
func (m *QueryReturnElysEstResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryReturnElysEstResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryReturnElysEstResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryReturnElysEstResponse proto.InternalMessageInfo

type QueryOrdersRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryOrdersRequest) Reset()         { *m = QueryOrdersRequest{} }
func (m *QueryOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersRequest) ProtoMessage()    {}
func (*QueryOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{8}
}
func (m *QueryOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersRequest.Merge(m, src)
}
func (m *QueryOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersRequest proto.InternalMessageInfo

func (m *QueryOrdersRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryOrdersResponse struct {
	Purchases []Purchase `protobuf:"bytes,1,rep,name=purchases,proto3" json:"purchases"`
}

func (m *QueryOrdersResponse) Reset()         { *m = QueryOrdersResponse{} }
func (m *QueryOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOrdersResponse) ProtoMessage()    {}
func (*QueryOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{9}
}
func (m *QueryOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOrdersResponse.Merge(m, src)
}
func (m *QueryOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOrdersResponse proto.InternalMessageInfo

func (m *QueryOrdersResponse) GetPurchases() []Purchase {
	if m != nil {
		return m.Purchases
	}
	return nil
}

type QueryAllOrdersRequest struct {
}

func (m *QueryAllOrdersRequest) Reset()         { *m = QueryAllOrdersRequest{} }
func (m *QueryAllOrdersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersRequest) ProtoMessage()    {}
func (*QueryAllOrdersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{10}
}
func (m *QueryAllOrdersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersRequest.Merge(m, src)
}
func (m *QueryAllOrdersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersRequest proto.InternalMessageInfo

type QueryAllOrdersResponse struct {
	Purchases []Purchase `protobuf:"bytes,1,rep,name=purchases,proto3" json:"purchases"`
}

func (m *QueryAllOrdersResponse) Reset()         { *m = QueryAllOrdersResponse{} }
func (m *QueryAllOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOrdersResponse) ProtoMessage()    {}
func (*QueryAllOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{11}
}
func (m *QueryAllOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOrdersResponse.Merge(m, src)
}
func (m *QueryAllOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOrdersResponse proto.InternalMessageInfo

func (m *QueryAllOrdersResponse) GetPurchases() []Purchase {
	if m != nil {
		return m.Purchases
	}
	return nil
}

type QueryModuleBalancesRequest struct {
}

func (m *QueryModuleBalancesRequest) Reset()         { *m = QueryModuleBalancesRequest{} }
func (m *QueryModuleBalancesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleBalancesRequest) ProtoMessage()    {}
func (*QueryModuleBalancesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{12}
}
func (m *QueryModuleBalancesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleBalancesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleBalancesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleBalancesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleBalancesRequest.Merge(m, src)
}
func (m *QueryModuleBalancesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleBalancesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleBalancesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleBalancesRequest proto.InternalMessageInfo

type QueryModuleBalancesResponse struct {
	Coins []types.Coin `protobuf:"bytes,1,rep,name=coins,proto3" json:"coins"`
}

func (m *QueryModuleBalancesResponse) Reset()         { *m = QueryModuleBalancesResponse{} }
func (m *QueryModuleBalancesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleBalancesResponse) ProtoMessage()    {}
func (*QueryModuleBalancesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d2bc8a060496a67, []int{13}
}
func (m *QueryModuleBalancesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleBalancesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleBalancesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleBalancesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleBalancesResponse.Merge(m, src)
}
func (m *QueryModuleBalancesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleBalancesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleBalancesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleBalancesResponse proto.InternalMessageInfo

func (m *QueryModuleBalancesResponse) GetCoins() []types.Coin {
	if m != nil {
		return m.Coins
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.launchpad.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.launchpad.QueryParamsResponse")
	proto.RegisterType((*QueryBonusRequest)(nil), "elys.launchpad.QueryBonusRequest")
	proto.RegisterType((*QueryBonusResponse)(nil), "elys.launchpad.QueryBonusResponse")
	proto.RegisterType((*QueryBuyElysEstRequest)(nil), "elys.launchpad.QueryBuyElysEstRequest")
	proto.RegisterType((*QueryBuyElysEstResponse)(nil), "elys.launchpad.QueryBuyElysEstResponse")
	proto.RegisterType((*QueryReturnElysEstRequest)(nil), "elys.launchpad.QueryReturnElysEstRequest")
	proto.RegisterType((*QueryReturnElysEstResponse)(nil), "elys.launchpad.QueryReturnElysEstResponse")
	proto.RegisterType((*QueryOrdersRequest)(nil), "elys.launchpad.QueryOrdersRequest")
	proto.RegisterType((*QueryOrdersResponse)(nil), "elys.launchpad.QueryOrdersResponse")
	proto.RegisterType((*QueryAllOrdersRequest)(nil), "elys.launchpad.QueryAllOrdersRequest")
	proto.RegisterType((*QueryAllOrdersResponse)(nil), "elys.launchpad.QueryAllOrdersResponse")
	proto.RegisterType((*QueryModuleBalancesRequest)(nil), "elys.launchpad.QueryModuleBalancesRequest")
	proto.RegisterType((*QueryModuleBalancesResponse)(nil), "elys.launchpad.QueryModuleBalancesResponse")
}

func init() { proto.RegisterFile("elys/launchpad/query.proto", fileDescriptor_7d2bc8a060496a67) }

var fileDescriptor_7d2bc8a060496a67 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x4f, 0xe3, 0x46,
	0x18, 0x8d, 0xf9, 0x11, 0xca, 0xa4, 0x20, 0x75, 0x4a, 0x21, 0x18, 0x14, 0xa8, 0x29, 0xbf, 0x8b,
	0x5d, 0x02, 0x54, 0x95, 0xda, 0x0b, 0xa9, 0xa8, 0x8a, 0xaa, 0x8a, 0x92, 0xa2, 0x1e, 0x7a, 0x89,
	0x26, 0xf1, 0x28, 0x58, 0x38, 0x33, 0xc6, 0x33, 0x6e, 0x9b, 0x1e, 0x38, 0xf4, 0xd2, 0xc3, 0x5e,
	0x56, 0xbb, 0x87, 0x3d, 0xee, 0x61, 0xff, 0x19, 0x8e, 0x48, 0x7b, 0x59, 0xed, 0x01, 0xad, 0x60,
	0xff, 0x83, 0xd5, 0xde, 0x57, 0xfe, 0x3c, 0x0e, 0xf9, 0x61, 0x4c, 0x04, 0x7b, 0x8a, 0x33, 0xdf,
	0x9b, 0xf7, 0xde, 0x7c, 0x9e, 0xef, 0x25, 0x48, 0xa7, 0x6e, 0x53, 0x58, 0x2e, 0x09, 0x58, 0xed,
	0xd8, 0x23, 0xb6, 0x75, 0x1a, 0x50, 0xbf, 0x69, 0x7a, 0x3e, 0x97, 0x1c, 0x8f, 0x87, 0x35, 0xb3,
	0x55, 0xd3, 0x27, 0xea, 0xbc, 0xce, 0xa1, 0x64, 0x85, 0x4f, 0x11, 0x4a, 0x9f, 0xad, 0x73, 0x5e,
	0x77, 0xa9, 0x45, 0x3c, 0xc7, 0x22, 0x8c, 0x71, 0x49, 0xa4, 0xc3, 0x99, 0x50, 0xd5, 0xb5, 0x1a,
	0x17, 0x0d, 0x2e, 0xac, 0x2a, 0x11, 0x34, 0x22, 0xb7, 0xfe, 0xda, 0xac, 0x52, 0x49, 0x36, 0x2d,
	0x8f, 0xd4, 0x1d, 0x06, 0x60, 0x85, 0x9d, 0xe9, 0xf2, 0xe2, 0x11, 0x9f, 0x34, 0x62, 0xa2, 0x42,
	0x57, 0xb1, 0xf5, 0x14, 0xd7, 0xdb, 0x85, 0x62, 0x89, 0x1a, 0x77, 0x14, 0xb9, 0x31, 0x81, 0xf0,
	0x61, 0x28, 0xff, 0x1b, 0x90, 0x96, 0xe9, 0x69, 0x40, 0x85, 0x34, 0x7e, 0x41, 0x9f, 0x77, 0xac,
	0x0a, 0x8f, 0x33, 0x41, 0xf1, 0x36, 0xca, 0x46, 0xe2, 0x79, 0x6d, 0x5e, 0x5b, 0xc9, 0x15, 0x27,
	0xcd, 0xce, 0x56, 0x98, 0x11, 0xbe, 0x34, 0x74, 0x7e, 0x39, 0x97, 0x29, 0x2b, 0xac, 0xb1, 0x8c,
	0x3e, 0x03, 0xb2, 0x12, 0x67, 0x41, 0xac, 0x80, 0x31, 0x1a, 0x0a, 0x04, 0xf5, 0x81, 0x68, 0xb4,
	0x0c, 0xcf, 0x06, 0x55, 0x5e, 0x14, 0x50, 0x89, 0x1e, 0xa0, 0x9c, 0xe4, 0x92, 0xb8, 0x95, 0x6a,
	0xb8, 0x1c, 0x6d, 0x28, 0x99, 0xa1, 0xc2, 0xeb, 0xcb, 0xb9, 0xa5, 0xba, 0x23, 0x8f, 0x83, 0xaa,
	0x59, 0xe3, 0x0d, 0x4b, 0x9d, 0x34, 0xfa, 0xd8, 0x10, 0xf6, 0x89, 0x25, 0x9b, 0x1e, 0x15, 0xe6,
	0x3e, 0x93, 0x65, 0x04, 0x14, 0x40, 0x6c, 0x3c, 0xd1, 0xd0, 0x64, 0xa4, 0x13, 0x34, 0xf7, 0xdc,
	0xa6, 0xd8, 0x13, 0x32, 0x76, 0xb5, 0x88, 0xc6, 0x85, 0x47, 0x99, 0xed, 0xb0, 0x7a, 0x45, 0xf2,
	0x13, 0xca, 0x94, 0xbf, 0xb1, 0x78, 0xf5, 0x28, 0x5c, 0xc4, 0x87, 0xe8, 0x53, 0xa8, 0x56, 0x48,
	0x83, 0x07, 0x4c, 0xe6, 0x07, 0xee, 0xe5, 0x29, 0x07, 0x1c, 0xbb, 0x40, 0x61, 0xbc, 0xd7, 0xd0,
	0x54, 0x8f, 0xa9, 0x9b, 0x0e, 0x84, 0x7d, 0x8e, 0xd5, 0xee, 0xd9, 0x81, 0x90, 0x22, 0x12, 0x0b,
	0xfd, 0x43, 0x33, 0x1f, 0xe8, 0x1f, 0x38, 0x14, 0xe5, 0xb7, 0x28, 0xcb, 0x7d, 0x9b, 0xfa, 0x22,
	0x3f, 0x38, 0x3f, 0xb8, 0x92, 0x2b, 0xe6, 0x7b, 0xae, 0x46, 0xe0, 0xd7, 0x8e, 0x89, 0xa0, 0xf1,
	0xe5, 0x88, 0xd0, 0xc6, 0xff, 0x1a, 0x9a, 0x86, 0x73, 0x97, 0xa9, 0x0c, 0x7c, 0xd6, 0xf5, 0x3e,
	0xa6, 0xd1, 0x27, 0x80, 0xab, 0x38, 0x36, 0x1c, 0x7b, 0xa8, 0x3c, 0x02, 0xdf, 0xf7, 0xed, 0xee,
	0xa6, 0x0c, 0x3c, 0xb4, 0x29, 0x86, 0x8d, 0xf4, 0x24, 0x23, 0xea, 0x1d, 0xfc, 0x84, 0xb2, 0x0f,
	0x6a, 0xbf, 0xda, 0x6d, 0xac, 0xa8, 0x3b, 0x7e, 0x00, 0xc7, 0x4f, 0x9b, 0x86, 0xdf, 0xd5, 0x0c,
	0xc6, 0x48, 0x65, 0xe4, 0x07, 0x34, 0xea, 0xa9, 0x56, 0x86, 0xc3, 0xd0, 0x4f, 0xaf, 0x6f, 0x36,
	0x18, 0x53, 0xe8, 0x0b, 0x20, 0xdd, 0x75, 0xdd, 0x0e, 0x07, 0xc6, 0x1f, 0x6a, 0x26, 0xda, 0x0a,
	0x1f, 0x45, 0x70, 0x56, 0x75, 0xf5, 0x57, 0x6e, 0x07, 0x2e, 0x2d, 0x11, 0x97, 0xb0, 0x1a, 0x6d,
	0xa9, 0x1e, 0xa1, 0x99, 0xc4, 0xaa, 0x92, 0xde, 0x41, 0xc3, 0x61, 0x54, 0xc5, 0xb2, 0xd3, 0x66,
	0xd4, 0x5a, 0x33, 0x0c, 0x33, 0x53, 0x85, 0x99, 0xf9, 0x23, 0x77, 0x98, 0xd2, 0x8d, 0xd0, 0xc5,
	0x77, 0x23, 0x68, 0x18, 0x68, 0xf1, 0x19, 0xca, 0x46, 0x91, 0x84, 0x8d, 0x6e, 0xcb, 0xbd, 0xa9,
	0xa7, 0x2f, 0xa4, 0x62, 0x22, 0x4f, 0xc6, 0xfa, 0x7f, 0x2f, 0xdf, 0x3e, 0x1d, 0x58, 0xc4, 0x0b,
	0x56, 0x08, 0xde, 0x60, 0x54, 0xfe, 0xcd, 0xfd, 0x13, 0x2b, 0x31, 0xa3, 0xf1, 0xbf, 0x68, 0x18,
	0x32, 0x07, 0x7f, 0x99, 0x48, 0xdd, 0x9e, 0x88, 0xba, 0x91, 0x06, 0x51, 0xe2, 0x6b, 0x20, 0xfe,
	0x15, 0x36, 0x52, 0xc5, 0x61, 0x2e, 0xf1, 0x33, 0x0d, 0xa1, 0x9b, 0x30, 0xc1, 0x4b, 0xc9, 0xf4,
	0xdd, 0x11, 0xa8, 0x2f, 0xdf, 0x89, 0x53, 0x5e, 0xbe, 0x03, 0x2f, 0x45, 0xfc, 0x4d, 0xba, 0x97,
	0xa0, 0x59, 0x81, 0x39, 0xa5, 0x42, 0x3a, 0x0d, 0xf8, 0x59, 0xc3, 0x2f, 0x34, 0x34, 0xd6, 0x31,
	0x65, 0x78, 0x35, 0x51, 0x34, 0x29, 0x12, 0xf4, 0xb5, 0x7e, 0xa0, 0xca, 0xe2, 0xf7, 0x60, 0x71,
	0x07, 0x6f, 0xa5, 0x5a, 0xf4, 0x61, 0x6f, 0x8f, 0xcb, 0x33, 0x94, 0x8d, 0x26, 0xe1, 0x96, 0xbb,
	0xd3, 0x31, 0x3f, 0xb7, 0xdc, 0x9d, 0xce, 0x51, 0xea, 0xf3, 0xee, 0x44, 0xc9, 0x88, 0x1f, 0x69,
	0x68, 0xb4, 0x35, 0x8d, 0x78, 0x31, 0x91, 0xbf, 0x7b, 0x8c, 0xf5, 0xa5, 0xbb, 0x60, 0xca, 0x89,
	0x05, 0x4e, 0x56, 0xf1, 0x72, 0xaa, 0x13, 0xe2, 0xba, 0x15, 0xe5, 0xe6, 0xb9, 0x86, 0xc6, 0x3b,
	0xa7, 0x14, 0x27, 0xbf, 0x89, 0xc4, 0x41, 0xd7, 0xd7, 0xfb, 0xc2, 0x2a, 0x73, 0xdb, 0x60, 0xce,
	0xc4, 0x5f, 0xa7, 0x9a, 0x6b, 0xc0, 0xe6, 0x4a, 0x55, 0xed, 0x2e, 0xfd, 0x7c, 0x7e, 0x55, 0xd0,
	0x2e, 0xae, 0x0a, 0xda, 0x9b, 0xab, 0x82, 0xf6, 0xf8, 0xba, 0x90, 0xb9, 0xb8, 0x2e, 0x64, 0x5e,
	0x5d, 0x17, 0x32, 0x7f, 0x9a, 0x6d, 0x19, 0xdd, 0xcb, 0xf8, 0x4f, 0x1b, 0x27, 0xe4, 0x75, 0x35,
	0x0b, 0x7f, 0x8d, 0xb6, 0x3e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xcb, 0xf7, 0x4f, 0x05, 0x0a,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Bonus queries bonus amounts for a user
	Bonus(ctx context.Context, in *QueryBonusRequest, opts ...grpc.CallOption) (*QueryBonusResponse, error)
	// BuyElysEst queries estimation result for buying elys
	BuyElysEst(ctx context.Context, in *QueryBuyElysEstRequest, opts ...grpc.CallOption) (*QueryBuyElysEstResponse, error)
	// ReturnElysEst queries estimation result for returning elys
	ReturnElysEst(ctx context.Context, in *QueryReturnElysEstRequest, opts ...grpc.CallOption) (*QueryReturnElysEstResponse, error)
	// Orders queries orders placed by user
	Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error)
	// AllOrders queries all the orders placed
	AllOrders(ctx context.Context, in *QueryAllOrdersRequest, opts ...grpc.CallOption) (*QueryAllOrdersResponse, error)
	// ModuleBalances queries module balances
	ModuleBalances(ctx context.Context, in *QueryModuleBalancesRequest, opts ...grpc.CallOption) (*QueryModuleBalancesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bonus(ctx context.Context, in *QueryBonusRequest, opts ...grpc.CallOption) (*QueryBonusResponse, error) {
	out := new(QueryBonusResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/Bonus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BuyElysEst(ctx context.Context, in *QueryBuyElysEstRequest, opts ...grpc.CallOption) (*QueryBuyElysEstResponse, error) {
	out := new(QueryBuyElysEstResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/BuyElysEst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReturnElysEst(ctx context.Context, in *QueryReturnElysEstRequest, opts ...grpc.CallOption) (*QueryReturnElysEstResponse, error) {
	out := new(QueryReturnElysEstResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/ReturnElysEst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Orders(ctx context.Context, in *QueryOrdersRequest, opts ...grpc.CallOption) (*QueryOrdersResponse, error) {
	out := new(QueryOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/Orders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllOrders(ctx context.Context, in *QueryAllOrdersRequest, opts ...grpc.CallOption) (*QueryAllOrdersResponse, error) {
	out := new(QueryAllOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/AllOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleBalances(ctx context.Context, in *QueryModuleBalancesRequest, opts ...grpc.CallOption) (*QueryModuleBalancesResponse, error) {
	out := new(QueryModuleBalancesResponse)
	err := c.cc.Invoke(ctx, "/elys.launchpad.Query/ModuleBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Bonus queries bonus amounts for a user
	Bonus(context.Context, *QueryBonusRequest) (*QueryBonusResponse, error)
	// BuyElysEst queries estimation result for buying elys
	BuyElysEst(context.Context, *QueryBuyElysEstRequest) (*QueryBuyElysEstResponse, error)
	// ReturnElysEst queries estimation result for returning elys
	ReturnElysEst(context.Context, *QueryReturnElysEstRequest) (*QueryReturnElysEstResponse, error)
	// Orders queries orders placed by user
	Orders(context.Context, *QueryOrdersRequest) (*QueryOrdersResponse, error)
	// AllOrders queries all the orders placed
	AllOrders(context.Context, *QueryAllOrdersRequest) (*QueryAllOrdersResponse, error)
	// ModuleBalances queries module balances
	ModuleBalances(context.Context, *QueryModuleBalancesRequest) (*QueryModuleBalancesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Bonus(ctx context.Context, req *QueryBonusRequest) (*QueryBonusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bonus not implemented")
}
func (*UnimplementedQueryServer) BuyElysEst(ctx context.Context, req *QueryBuyElysEstRequest) (*QueryBuyElysEstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyElysEst not implemented")
}
func (*UnimplementedQueryServer) ReturnElysEst(ctx context.Context, req *QueryReturnElysEstRequest) (*QueryReturnElysEstResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnElysEst not implemented")
}
func (*UnimplementedQueryServer) Orders(ctx context.Context, req *QueryOrdersRequest) (*QueryOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Orders not implemented")
}
func (*UnimplementedQueryServer) AllOrders(ctx context.Context, req *QueryAllOrdersRequest) (*QueryAllOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllOrders not implemented")
}
func (*UnimplementedQueryServer) ModuleBalances(ctx context.Context, req *QueryModuleBalancesRequest) (*QueryModuleBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleBalances not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/Bonus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bonus(ctx, req.(*QueryBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BuyElysEst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBuyElysEstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BuyElysEst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/BuyElysEst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BuyElysEst(ctx, req.(*QueryBuyElysEstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReturnElysEst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryReturnElysEstRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReturnElysEst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/ReturnElysEst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReturnElysEst(ctx, req.(*QueryReturnElysEstRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Orders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Orders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/Orders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Orders(ctx, req.(*QueryOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/AllOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllOrders(ctx, req.(*QueryAllOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.launchpad.Query/ModuleBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleBalances(ctx, req.(*QueryModuleBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.launchpad.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Bonus",
			Handler:    _Query_Bonus_Handler,
		},
		{
			MethodName: "BuyElysEst",
			Handler:    _Query_BuyElysEst_Handler,
		},
		{
			MethodName: "ReturnElysEst",
			Handler:    _Query_ReturnElysEst_Handler,
		},
		{
			MethodName: "Orders",
			Handler:    _Query_Orders_Handler,
		},
		{
			MethodName: "AllOrders",
			Handler:    _Query_AllOrders_Handler,
		},
		{
			MethodName: "ModuleBalances",
			Handler:    _Query_ModuleBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/launchpad/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBonusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBonusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBonusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBonusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBonusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBonusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalBonus.Size()
		i -= size
		if _, err := m.TotalBonus.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBuyElysEstRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyElysEstRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyElysEstRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenAmount.Size()
		i -= size
		if _, err := m.TokenAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SpendingToken) > 0 {
		i -= len(m.SpendingToken)
		copy(dAtA[i:], m.SpendingToken)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpendingToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBuyElysEstResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBuyElysEstResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBuyElysEstResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for iNdEx := len(m.Orders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Orders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.BonusAmount.Size()
		i -= size
		if _, err := m.BonusAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ElysAmount.Size()
		i -= size
		if _, err := m.ElysAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryReturnElysEstRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReturnElysEstRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReturnElysEstRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ElysAmount.Size()
		i -= size
		if _, err := m.ElysAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OrderId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryReturnElysEstResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryReturnElysEstResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryReturnElysEstResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for iNdEx := len(m.Purchases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for iNdEx := len(m.Purchases) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchases[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryModuleBalancesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleBalancesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleBalancesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleBalancesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleBalancesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleBalancesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBonusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBonusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalBonus.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBuyElysEstRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpendingToken)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TokenAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBuyElysEstResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ElysAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.BonusAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryReturnElysEstRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovQuery(uint64(m.OrderId))
	}
	l = m.ElysAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryReturnElysEstResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for _, e := range m.Purchases {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllOrdersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchases) > 0 {
		for _, e := range m.Purchases {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryModuleBalancesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleBalancesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBonusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBonusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBonusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBonusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBonusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBonusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBonus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBonus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyElysEstRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyElysEstRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyElysEstRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendingToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendingToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBuyElysEstResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBuyElysEstResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBuyElysEstResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElysAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ElysAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BonusAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BonusAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, Purchase{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReturnElysEstRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReturnElysEstRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReturnElysEstRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElysAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ElysAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryReturnElysEstResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryReturnElysEstResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryReturnElysEstResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchases = append(m.Purchases, Purchase{})
			if err := m.Purchases[len(m.Purchases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchases = append(m.Purchases, Purchase{})
			if err := m.Purchases[len(m.Purchases)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleBalancesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleBalancesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleBalancesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleBalancesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleBalancesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleBalancesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
