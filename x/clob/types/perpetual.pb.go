// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/perpetual.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// key = owner + market_id
type PerpetualOwner struct {
	Owner       string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	MarketId    uint64 `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	PerpetualId uint64 `protobuf:"varint,3,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *PerpetualOwner) Reset()         { *m = PerpetualOwner{} }
func (m *PerpetualOwner) String() string { return proto.CompactTextString(m) }
func (*PerpetualOwner) ProtoMessage()    {}
func (*PerpetualOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3701b3c106e7d0, []int{0}
}
func (m *PerpetualOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualOwner.Merge(m, src)
}
func (m *PerpetualOwner) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualOwner.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualOwner proto.InternalMessageInfo

func (m *PerpetualOwner) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *PerpetualOwner) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *PerpetualOwner) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

// key = market_id + id
type Perpetual struct {
	Id         uint64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MarketId   uint64                      `protobuf:"varint,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	EntryPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=entry_price,json=entryPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"entry_price"`
	Owner      string                      `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
	// quantity of the order
	Quantity cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=quantity,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"quantity"`
	// margin stores margin amount when order gets executed
	MarginAmount     cosmossdk_io_math.Int       `protobuf:"bytes,6,opt,name=margin_amount,json=marginAmount,proto3,customtype=cosmossdk.io/math.Int" json:"margin_amount"`
	EntryFundingRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=entry_funding_rate,json=entryFundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"entry_funding_rate"`
}

func (m *Perpetual) Reset()         { *m = Perpetual{} }
func (m *Perpetual) String() string { return proto.CompactTextString(m) }
func (*Perpetual) ProtoMessage()    {}
func (*Perpetual) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3701b3c106e7d0, []int{1}
}
func (m *Perpetual) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Perpetual) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Perpetual.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Perpetual) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Perpetual.Merge(m, src)
}
func (m *Perpetual) XXX_Size() int {
	return m.Size()
}
func (m *Perpetual) XXX_DiscardUnknown() {
	xxx_messageInfo_Perpetual.DiscardUnknown(m)
}

var xxx_messageInfo_Perpetual proto.InternalMessageInfo

func (m *Perpetual) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Perpetual) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Perpetual) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type PerpetualCounter struct {
	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Counter  uint64 `protobuf:"varint,2,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *PerpetualCounter) Reset()         { *m = PerpetualCounter{} }
func (m *PerpetualCounter) String() string { return proto.CompactTextString(m) }
func (*PerpetualCounter) ProtoMessage()    {}
func (*PerpetualCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb3701b3c106e7d0, []int{2}
}
func (m *PerpetualCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualCounter.Merge(m, src)
}
func (m *PerpetualCounter) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualCounter.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualCounter proto.InternalMessageInfo

func (m *PerpetualCounter) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *PerpetualCounter) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func init() {
	proto.RegisterType((*PerpetualOwner)(nil), "elys.clob.PerpetualOwner")
	proto.RegisterType((*Perpetual)(nil), "elys.clob.Perpetual")
	proto.RegisterType((*PerpetualCounter)(nil), "elys.clob.PerpetualCounter")
}

func init() { proto.RegisterFile("elys/clob/perpetual.proto", fileDescriptor_eb3701b3c106e7d0) }

var fileDescriptor_eb3701b3c106e7d0 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6a, 0xdc, 0x30,
	0x10, 0xc6, 0xd7, 0x9b, 0xcd, 0x1f, 0x2b, 0x69, 0x08, 0x22, 0x05, 0x27, 0x01, 0x27, 0xdd, 0x53,
	0x4a, 0x59, 0x9b, 0xd2, 0x27, 0xc8, 0x26, 0x14, 0x0c, 0x2d, 0x5d, 0xdc, 0x5b, 0x2f, 0x46, 0x2b,
	0xa9, 0x8e, 0xd8, 0xb5, 0xe4, 0xca, 0x63, 0x52, 0xdf, 0xfa, 0x08, 0x7d, 0x98, 0x9c, 0x7b, 0xce,
	0x31, 0xe4, 0x54, 0x7a, 0x08, 0x65, 0xf7, 0x45, 0x8a, 0x24, 0xc7, 0x2d, 0x29, 0x94, 0xb2, 0x37,
	0xcd, 0x7c, 0xe3, 0x9f, 0xbe, 0xf1, 0x8c, 0xd0, 0x01, 0x9f, 0x37, 0x55, 0x4c, 0xe7, 0x6a, 0x1a,
	0x97, 0x5c, 0x97, 0x1c, 0x6a, 0x32, 0x8f, 0x4a, 0xad, 0x40, 0x61, 0xdf, 0x48, 0x91, 0x91, 0x0e,
	0xf7, 0x73, 0x95, 0x2b, 0x9b, 0x8d, 0xcd, 0xc9, 0x15, 0x1c, 0x1e, 0x50, 0x55, 0x15, 0xaa, 0xca,
	0x9c, 0xe0, 0x02, 0x27, 0x0d, 0xbf, 0x78, 0x68, 0x77, 0xf2, 0xc0, 0x7b, 0x77, 0x25, 0xb9, 0xc6,
	0x11, 0x5a, 0x57, 0xe6, 0x10, 0x78, 0x27, 0xde, 0xa9, 0x3f, 0x0e, 0xee, 0xae, 0x47, 0xfb, 0xed,
	0x37, 0x67, 0x8c, 0x69, 0x5e, 0x55, 0xef, 0x41, 0x0b, 0x99, 0xa7, 0xae, 0x0c, 0x1f, 0x21, 0xbf,
	0x20, 0x7a, 0xc6, 0x21, 0x13, 0x2c, 0xe8, 0x9f, 0x78, 0xa7, 0x83, 0x74, 0xcb, 0x25, 0x12, 0x86,
	0x9f, 0xa1, 0x9d, 0xce, 0xae, 0xd1, 0xd7, 0xac, 0xbe, 0xdd, 0xe5, 0x12, 0x36, 0xfc, 0xb6, 0x86,
	0xfc, 0xce, 0x02, 0xde, 0x45, 0x7d, 0xc1, 0xec, 0xd5, 0x83, 0xb4, 0x2f, 0xd8, 0xbf, 0xe9, 0x29,
	0xda, 0xe6, 0x12, 0x74, 0x93, 0x95, 0x5a, 0x50, 0x6e, 0xe1, 0xfe, 0xf8, 0xe5, 0xcd, 0xfd, 0x71,
	0xef, 0xc7, 0xfd, 0xf1, 0x91, 0x33, 0x5d, 0xb1, 0x59, 0x24, 0x54, 0x5c, 0x10, 0xb8, 0x8c, 0xde,
	0xf0, 0x9c, 0xd0, 0xe6, 0x82, 0xd3, 0xbb, 0xeb, 0x11, 0x6a, 0x7b, 0xba, 0xe0, 0x34, 0x45, 0x96,
	0x32, 0x31, 0x90, 0xdf, 0xed, 0x0f, 0xfe, 0xaf, 0xfd, 0xb7, 0x68, 0xeb, 0x53, 0x4d, 0x24, 0x08,
	0x68, 0x82, 0xf5, 0x55, 0x0d, 0x74, 0x08, 0x3c, 0x41, 0x4f, 0x0a, 0xa2, 0x73, 0x21, 0x33, 0x52,
	0xa8, 0x5a, 0x42, 0xb0, 0x61, 0x99, 0x2f, 0x5a, 0xe6, 0xd3, 0xbf, 0x99, 0x89, 0x84, 0x3f, 0x68,
	0x89, 0x84, 0x74, 0xc7, 0x11, 0xce, 0x2c, 0x00, 0x67, 0x08, 0xbb, 0x9f, 0xf4, 0xb1, 0x96, 0x4c,
	0xc8, 0x3c, 0xd3, 0x04, 0x78, 0xb0, 0xb9, 0xaa, 0xd5, 0x3d, 0x0b, 0x7b, 0xed, 0x58, 0x29, 0x01,
	0x3e, 0x4c, 0xd0, 0x5e, 0x37, 0xbf, 0x73, 0x73, 0xe5, 0xe3, 0xa5, 0xf0, 0x1e, 0x8d, 0x2d, 0x40,
	0x9b, 0xd4, 0xd5, 0xb5, 0x13, 0x7d, 0x08, 0xc7, 0xe7, 0x37, 0x8b, 0xd0, 0xbb, 0x5d, 0x84, 0xde,
	0xcf, 0x45, 0xe8, 0x7d, 0x5d, 0x86, 0xbd, 0xdb, 0x65, 0xd8, 0xfb, 0xbe, 0x0c, 0x7b, 0x1f, 0x9e,
	0xe7, 0x02, 0x2e, 0xeb, 0x69, 0x44, 0x55, 0x11, 0x9b, 0x7d, 0x1f, 0x49, 0x0e, 0x57, 0x4a, 0xcf,
	0x6c, 0x10, 0x7f, 0x76, 0x2f, 0x03, 0x9a, 0x92, 0x57, 0xd3, 0x0d, 0xbb, 0xda, 0xaf, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xaa, 0x6b, 0x69, 0xd4, 0x33, 0x03, 0x00, 0x00,
}

func (m *PerpetualOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerpetualId != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x18
	}
	if m.MarketId != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPerpetual(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Perpetual) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Perpetual) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Perpetual) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EntryFundingRate.Size()
		i -= size
		if _, err := m.EntryFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetual(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MarginAmount.Size()
		i -= size
		if _, err := m.MarginAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetual(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetual(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintPerpetual(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.EntryPrice.Size()
		i -= size
		if _, err := m.EntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPerpetual(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MarketId != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintPerpetual(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPerpetual(dAtA []byte, offset int, v uint64) int {
	offset -= sovPerpetual(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerpetualOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPerpetual(uint64(l))
	}
	if m.MarketId != 0 {
		n += 1 + sovPerpetual(uint64(m.MarketId))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovPerpetual(uint64(m.PerpetualId))
	}
	return n
}

func (m *Perpetual) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPerpetual(uint64(m.Id))
	}
	if m.MarketId != 0 {
		n += 1 + sovPerpetual(uint64(m.MarketId))
	}
	l = m.EntryPrice.Size()
	n += 1 + l + sovPerpetual(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovPerpetual(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovPerpetual(uint64(l))
	l = m.MarginAmount.Size()
	n += 1 + l + sovPerpetual(uint64(l))
	l = m.EntryFundingRate.Size()
	n += 1 + l + sovPerpetual(uint64(l))
	return n
}

func (m *PerpetualCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovPerpetual(uint64(m.MarketId))
	}
	if m.Counter != 0 {
		n += 1 + sovPerpetual(uint64(m.Counter))
	}
	return n
}

func sovPerpetual(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPerpetual(x uint64) (n int) {
	return sovPerpetual(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PerpetualOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetual
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetual(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetual
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Perpetual) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetual
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Perpetual: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Perpetual: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarginAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MarginAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPerpetual
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPerpetual
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetual(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetual
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPerpetual
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPerpetual(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPerpetual
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPerpetual(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPerpetual
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPerpetual
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPerpetual
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPerpetual
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPerpetual
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPerpetual        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPerpetual          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPerpetual = fmt.Errorf("proto: unexpected end of group")
)
