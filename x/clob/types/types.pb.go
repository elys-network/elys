// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LiquidatePosition struct {
	MarketId    uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	PerpetualId uint64 `protobuf:"varint,2,opt,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *LiquidatePosition) Reset()         { *m = LiquidatePosition{} }
func (m *LiquidatePosition) String() string { return proto.CompactTextString(m) }
func (*LiquidatePosition) ProtoMessage()    {}
func (*LiquidatePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c2edbc9cb231248, []int{0}
}
func (m *LiquidatePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidatePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidatePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidatePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidatePosition.Merge(m, src)
}
func (m *LiquidatePosition) XXX_Size() int {
	return m.Size()
}
func (m *LiquidatePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidatePosition.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidatePosition proto.InternalMessageInfo

func (m *LiquidatePosition) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *LiquidatePosition) GetPerpetualId() uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return 0
}

type PerpetualInfo struct {
	Perpetual        *Perpetual                  `protobuf:"bytes,1,opt,name=perpetual,proto3" json:"perpetual,omitempty"`
	LiquidationPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=liquidation_price,json=liquidationPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidation_price"`
}

func (m *PerpetualInfo) Reset()         { *m = PerpetualInfo{} }
func (m *PerpetualInfo) String() string { return proto.CompactTextString(m) }
func (*PerpetualInfo) ProtoMessage()    {}
func (*PerpetualInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c2edbc9cb231248, []int{1}
}
func (m *PerpetualInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualInfo.Merge(m, src)
}
func (m *PerpetualInfo) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualInfo proto.InternalMessageInfo

func (m *PerpetualInfo) GetPerpetual() *Perpetual {
	if m != nil {
		return m.Perpetual
	}
	return nil
}

func init() {
	proto.RegisterType((*LiquidatePosition)(nil), "elys.clob.LiquidatePosition")
	proto.RegisterType((*PerpetualInfo)(nil), "elys.clob.PerpetualInfo")
}

func init() { proto.RegisterFile("elys/clob/types.proto", fileDescriptor_0c2edbc9cb231248) }

var fileDescriptor_0c2edbc9cb231248 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x41, 0x4f, 0xc2, 0x30,
	0x18, 0x86, 0x57, 0x63, 0x8c, 0x2b, 0x9a, 0xc8, 0x82, 0x89, 0x42, 0x52, 0x14, 0x2f, 0x7a, 0xb0,
	0x4d, 0xf0, 0x1f, 0xa0, 0x17, 0x12, 0x0e, 0x0b, 0xde, 0xbc, 0x90, 0xd1, 0xd5, 0xd1, 0xb0, 0xed,
	0x9b, 0x6b, 0x89, 0xf2, 0x2f, 0xbc, 0xf8, 0x9f, 0x38, 0x72, 0x34, 0x1e, 0x88, 0x61, 0x7f, 0xc4,
	0xb4, 0x33, 0x85, 0x5b, 0xbf, 0xe7, 0x7d, 0xdf, 0xaf, 0x6f, 0x3e, 0x7c, 0x2e, 0xd2, 0xa5, 0x62,
	0x3c, 0x85, 0x29, 0xd3, 0xcb, 0x42, 0x28, 0x5a, 0x94, 0xa0, 0x21, 0xf0, 0x0d, 0xa6, 0x06, 0xb7,
	0x5b, 0x09, 0x24, 0x60, 0x29, 0x33, 0xaf, 0xda, 0xd0, 0xbe, 0xdc, 0xe5, 0x0a, 0x51, 0x16, 0x42,
	0x2f, 0xa2, 0xb4, 0x96, 0x7a, 0xcf, 0xb8, 0x39, 0x92, 0x6f, 0x0b, 0x19, 0x47, 0x5a, 0x84, 0xa0,
	0xa4, 0x96, 0x90, 0x07, 0x1d, 0xec, 0x67, 0x51, 0x39, 0x17, 0x7a, 0x22, 0xe3, 0x0b, 0x74, 0x85,
	0x6e, 0x0f, 0xc7, 0xc7, 0x35, 0x18, 0xc6, 0xc1, 0x35, 0x3e, 0x71, 0x4b, 0x8c, 0x7e, 0x60, 0xf5,
	0x86, 0x63, 0xc3, 0xb8, 0xf7, 0x85, 0xf0, 0x69, 0xe8, 0xe6, 0xfc, 0x15, 0x82, 0x3e, 0xf6, 0x9d,
	0xc1, 0x6e, 0x6c, 0xf4, 0x5b, 0xd4, 0xd5, 0xa6, 0xce, 0x3c, 0xde, 0xd9, 0x82, 0x10, 0x37, 0xd3,
	0xff, 0x6a, 0x12, 0xf2, 0x49, 0x51, 0x4a, 0x2e, 0xec, 0x6f, 0xfe, 0xe0, 0x66, 0xb5, 0xe9, 0x7a,
	0x3f, 0x9b, 0x6e, 0x87, 0x83, 0xca, 0x40, 0xa9, 0x78, 0x4e, 0x25, 0xb0, 0x2c, 0xd2, 0x33, 0x3a,
	0x12, 0x49, 0xc4, 0x97, 0x4f, 0x82, 0x8f, 0xcf, 0xf6, 0xd2, 0xa1, 0x09, 0x0f, 0x1e, 0x57, 0x5b,
	0x82, 0xd6, 0x5b, 0x82, 0x7e, 0xb7, 0x04, 0x7d, 0x56, 0xc4, 0x5b, 0x57, 0xc4, 0xfb, 0xae, 0x88,
	0xf7, 0x72, 0x97, 0x48, 0x3d, 0x5b, 0x4c, 0x29, 0x87, 0x8c, 0x99, 0x5a, 0xf7, 0xb9, 0xd0, 0xef,
	0x50, 0xce, 0xed, 0xc0, 0x3e, 0xf6, 0x6e, 0x3e, 0x3d, 0xb2, 0x87, 0x7b, 0xf8, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0x37, 0x4e, 0xd5, 0x4c, 0x8d, 0x01, 0x00, 0x00,
}

func (m *LiquidatePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidatePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidatePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PerpetualId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PerpetualId))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationPrice.Size()
		i -= size
		if _, err := m.LiquidationPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Perpetual != nil {
		{
			size, err := m.Perpetual.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidatePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovTypes(uint64(m.MarketId))
	}
	if m.PerpetualId != 0 {
		n += 1 + sovTypes(uint64(m.PerpetualId))
	}
	return n
}

func (m *PerpetualInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Perpetual != nil {
		l = m.Perpetual.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.LiquidationPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidatePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidatePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidatePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
			m.PerpetualId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perpetual", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Perpetual == nil {
				m.Perpetual = &Perpetual{}
			}
			if err := m.Perpetual.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
