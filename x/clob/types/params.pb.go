// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Params struct {
	// derivative_market_instant_listing_fee defines the expedited fee
	// required to create a derivative market by bypassing governance
	DerivativeMarketInstantListingFee types.Coin `protobuf:"bytes,1,opt,name=derivative_market_instant_listing_fee,json=derivativeMarketInstantListingFee,proto3" json:"derivative_market_instant_listing_fee"`
	// default_derivative_maker_fee defines the default exchange trade fee for
	// makers on a new derivative market
	DefaultDerivativeMakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=default_derivative_maker_fee_rate,json=defaultDerivativeMakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_derivative_maker_fee_rate"`
	// default_derivative_taker_fee defines the default exchange trade fee for
	// takers on a new derivative market
	DefaultDerivativeTakerFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=default_derivative_taker_fee_rate,json=defaultDerivativeTakerFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_derivative_taker_fee_rate"`
	// default_initial_margin_ratio defines the default initial margin ratio on a
	// new derivative market
	DefaultInitialMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=default_initial_margin_ratio,json=defaultInitialMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_initial_margin_ratio"`
	// default_maintenance_margin_ratio defines the default maintenance margin
	// ratio on a new derivative market
	DefaultMaintenanceMarginRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=default_maintenance_margin_ratio,json=defaultMaintenanceMarginRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_maintenance_margin_ratio"`
	// default_funding_interval defines the default funding interval on a
	// derivative market
	DefaultFundingInterval int64 `protobuf:"varint,6,opt,name=default_funding_interval,json=defaultFundingInterval,proto3" json:"default_funding_interval,omitempty"`
	// funding_multiple defines the timestamp multiple that the funding timestamp
	// should be a multiple of
	FundingMultiple int64 `protobuf:"varint,7,opt,name=funding_multiple,json=fundingMultiple,proto3" json:"funding_multiple,omitempty"`
	// relayer_fee_share_rate defines the trade fee share percentage that goes to
	// relayers
	RelayerFeeShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"relayer_fee_share_rate"`
	// default_hourly_funding_rate_cap defines the default maximum absolute value
	// of the hourly funding rate
	DefaultHourlyFundingRateCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=default_hourly_funding_rate_cap,json=defaultHourlyFundingRateCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_hourly_funding_rate_cap"`
	// hourly_interest_rate defines the hourly interest rate
	DefaultHourlyInterestRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=default_hourly_interest_rate,json=defaultHourlyInterestRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_hourly_interest_rate"`
	// max_derivative_order_side_count defines the maximum number of derivative
	// active orders a subaccount can have for a given orderbook side
	MaxDerivativeOrderSideCount uint64 `protobuf:"varint,11,opt,name=max_derivative_order_side_count,json=maxDerivativeOrderSideCount,proto3" json:"max_derivative_order_side_count,omitempty"`
	// the trading_rewards_vesting_duration defines the vesting times for trading
	// rewards
	TradingRewardsVestingDuration int64 `protobuf:"varint,12,opt,name=trading_rewards_vesting_duration,json=tradingRewardsVestingDuration,proto3" json:"trading_rewards_vesting_duration,omitempty"`
	// liquidator_reward_share_rate defines the ratio of the split of the surplus
	// collateral that goes to the liquidator
	LiquidatorRewardShareRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,13,opt,name=liquidator_reward_share_rate,json=liquidatorRewardShareRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidator_reward_share_rate"`
	// derivative_atomic_market_order_fee_multiplier defines the default
	// multiplier for executing atomic market orders in derivative markets
	DerivativeAtomicMarketOrderFeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,14,opt,name=derivative_atomic_market_order_fee_multiplier,json=derivativeAtomicMarketOrderFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"derivative_atomic_market_order_fee_multiplier"`
	// minimal_protocol_fee_rate defines the minimal protocol fee rate
	MinimalProtocolFeeRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,15,opt,name=minimal_protocol_fee_rate,json=minimalProtocolFeeRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"minimal_protocol_fee_rate"`
	// List of addresses that are allowed to perform exchange admin operations
	ExchangeAdmins  []string `protobuf:"bytes,16,rep,name=exchange_admins,json=exchangeAdmins,proto3" json:"exchange_admins,omitempty"`
	EpochIdentifier string   `protobuf:"bytes,17,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7364cfb416cd01, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDerivativeMarketInstantListingFee() types.Coin {
	if m != nil {
		return m.DerivativeMarketInstantListingFee
	}
	return types.Coin{}
}

func (m *Params) GetDefaultFundingInterval() int64 {
	if m != nil {
		return m.DefaultFundingInterval
	}
	return 0
}

func (m *Params) GetFundingMultiple() int64 {
	if m != nil {
		return m.FundingMultiple
	}
	return 0
}

func (m *Params) GetMaxDerivativeOrderSideCount() uint64 {
	if m != nil {
		return m.MaxDerivativeOrderSideCount
	}
	return 0
}

func (m *Params) GetTradingRewardsVestingDuration() int64 {
	if m != nil {
		return m.TradingRewardsVestingDuration
	}
	return 0
}

func (m *Params) GetExchangeAdmins() []string {
	if m != nil {
		return m.ExchangeAdmins
	}
	return nil
}

func (m *Params) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "elys.clob.Params")
}

func init() { proto.RegisterFile("elys/clob/params.proto", fileDescriptor_7d7364cfb416cd01) }

var fileDescriptor_7d7364cfb416cd01 = []byte{
	// 756 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0xc7, 0xe3, 0x0b, 0x97, 0x7b, 0x33, 0x70, 0x09, 0xd7, 0xf7, 0x2a, 0x72, 0xa0, 0x24, 0xa1,
	0x52, 0xd5, 0xb0, 0xc0, 0x16, 0xed, 0xa6, 0x5b, 0x48, 0x94, 0x36, 0x12, 0x51, 0x91, 0xa9, 0xba,
	0xe8, 0xc6, 0x9a, 0xd8, 0x27, 0xc9, 0x28, 0xf6, 0x4c, 0x18, 0x8f, 0x43, 0xd2, 0xbe, 0x44, 0xd5,
	0x67, 0xe9, 0x43, 0xb0, 0x44, 0x5d, 0x55, 0x5d, 0xa0, 0x0a, 0x9e, 0xa2, 0xbb, 0x6a, 0x3e, 0x4c,
	0xc2, 0xa2, 0x9b, 0xd0, 0x9d, 0xe7, 0x9c, 0xe3, 0xff, 0x6f, 0xce, 0x87, 0x8f, 0x51, 0x19, 0xe2,
	0x59, 0xea, 0x85, 0x31, 0xeb, 0x79, 0x63, 0xcc, 0x71, 0x92, 0xba, 0x63, 0xce, 0x04, 0xb3, 0x8b,
	0xd2, 0xee, 0x4a, 0xfb, 0xf6, 0xff, 0x03, 0x36, 0x60, 0xca, 0xea, 0xc9, 0x27, 0x1d, 0xb0, 0x5d,
	0x09, 0x59, 0x9a, 0xb0, 0x34, 0xd0, 0x0e, 0x7d, 0x30, 0xae, 0xaa, 0x3e, 0x79, 0x3d, 0x9c, 0x82,
	0x37, 0x39, 0xec, 0x81, 0xc0, 0x87, 0x5e, 0xc8, 0x08, 0xd5, 0xfe, 0xc7, 0x3f, 0x36, 0xd0, 0xda,
	0xa9, 0x82, 0xd9, 0xe7, 0xe8, 0x49, 0x04, 0x9c, 0x4c, 0xb0, 0x20, 0x13, 0x08, 0x12, 0xcc, 0x47,
	0x20, 0x02, 0x42, 0x53, 0x81, 0xa9, 0x08, 0x62, 0x92, 0x0a, 0x42, 0x07, 0x41, 0x1f, 0xc0, 0xb1,
	0xea, 0x56, 0x63, 0xfd, 0x59, 0xc5, 0x35, 0x20, 0x29, 0xed, 0x1a, 0x69, 0xb7, 0xc9, 0x08, 0x3d,
	0x5e, 0xbd, 0xbc, 0xae, 0x15, 0xfc, 0xbd, 0xb9, 0x5a, 0x57, 0x89, 0x75, 0xb4, 0xd6, 0x89, 0x96,
	0x6a, 0x03, 0xd8, 0x1f, 0xd0, 0x5e, 0x04, 0x7d, 0x9c, 0xc5, 0x22, 0xb8, 0x87, 0x1e, 0x01, 0x97,
	0xa4, 0x80, 0x63, 0x01, 0xce, 0x1f, 0x75, 0xab, 0x51, 0x3c, 0x3e, 0x94, 0x9a, 0xdf, 0xae, 0x6b,
	0x3b, 0x9a, 0x9a, 0x46, 0x23, 0x97, 0x30, 0x2f, 0xc1, 0x62, 0xe8, 0x9e, 0xc0, 0x00, 0x87, 0xb3,
	0x16, 0x84, 0x5f, 0x3e, 0x1f, 0x20, 0x73, 0xa9, 0x16, 0x84, 0xfe, 0xae, 0xd1, 0x6e, 0x2d, 0xdc,
	0x63, 0x04, 0xbc, 0x0d, 0xe0, 0x63, 0xf1, 0x2b, 0xb8, 0xb8, 0x0f, 0x5f, 0xf9, 0x7d, 0xf0, 0x37,
	0x8b, 0x70, 0x8e, 0x1e, 0xe5, 0x70, 0x42, 0x89, 0x20, 0x38, 0x96, 0x15, 0x1f, 0x10, 0x2a, 0xb1,
	0x84, 0x39, 0xab, 0xcb, 0x72, 0x2b, 0x46, 0xb6, 0xa3, 0x55, 0xbb, 0x4a, 0xd4, 0x97, 0x9a, 0xf6,
	0x7b, 0x54, 0xcf, 0x99, 0x09, 0x26, 0x54, 0x00, 0xc5, 0x34, 0x84, 0xfb, 0xdc, 0x3f, 0x1f, 0x9a,
	0x6f, 0x77, 0xae, 0xbc, 0xc8, 0x7e, 0x81, 0x9c, 0x9c, 0xdd, 0xcf, 0x68, 0x24, 0x47, 0x49, 0xc6,
	0xf1, 0x09, 0x8e, 0x9d, 0xb5, 0xba, 0xd5, 0x58, 0xf1, 0xcb, 0xc6, 0xdf, 0xd6, 0xee, 0x8e, 0xf1,
	0xda, 0xfb, 0x68, 0x2b, 0x7f, 0x23, 0xc9, 0x62, 0x41, 0xc6, 0x31, 0x38, 0x7f, 0xa9, 0x37, 0x4a,
	0xc6, 0xde, 0x35, 0x66, 0xbb, 0x8f, 0xca, 0x1c, 0x62, 0x3c, 0x33, 0x0d, 0x4c, 0x87, 0x98, 0x9b,
	0x36, 0xfe, 0xbd, 0x6c, 0x5a, 0xff, 0x19, 0xc1, 0x36, 0xc0, 0x99, 0x94, 0x53, 0xcd, 0xbb, 0x40,
	0xb5, 0x3c, 0x99, 0x21, 0xcb, 0x78, 0x3c, 0xbb, 0xcb, 0x49, 0xc2, 0x82, 0x10, 0x8f, 0x9d, 0xe2,
	0xb2, 0xc0, 0x1d, 0xa3, 0xfc, 0x4a, 0x09, 0x9b, 0x62, 0x48, 0x6a, 0x13, 0x8f, 0x17, 0xa7, 0xc6,
	0x80, 0x55, 0x11, 0x21, 0x15, 0x3a, 0x4d, 0xf4, 0xd0, 0xa9, 0xd1, 0xd4, 0x8e, 0x11, 0x55, 0xc9,
	0xb6, 0x50, 0x2d, 0xc1, 0xd3, 0xc5, 0x4f, 0x84, 0xf1, 0x08, 0x78, 0x90, 0x92, 0x08, 0x82, 0x90,
	0x65, 0x54, 0x38, 0xeb, 0x75, 0xab, 0xb1, 0xea, 0xef, 0x24, 0x78, 0x3a, 0x9f, 0xf6, 0xd7, 0x32,
	0xe8, 0x8c, 0x44, 0xd0, 0x94, 0x21, 0xf6, 0x4b, 0x54, 0x17, 0x1c, 0xeb, 0x1a, 0xc1, 0x05, 0xe6,
	0x51, 0x1a, 0x4c, 0x40, 0xaf, 0x94, 0x28, 0x53, 0xa3, 0x47, 0x9d, 0x0d, 0xd5, 0xd5, 0x5d, 0x13,
	0xe7, 0xeb, 0xb0, 0xb7, 0x3a, 0xaa, 0x65, 0x82, 0x64, 0x09, 0x62, 0x72, 0x9e, 0x91, 0x08, 0x0b,
	0xc6, 0x8d, 0xd6, 0x62, 0xa7, 0xff, 0x59, 0xba, 0x04, 0x73, 0x59, 0x8d, 0x9e, 0xf7, 0xfb, 0x93,
	0x85, 0x0e, 0x16, 0xf2, 0xc7, 0x82, 0x25, 0x24, 0xcc, 0x37, 0xa4, 0xae, 0x86, 0x9c, 0x37, 0x33,
	0x9e, 0x04, 0xb8, 0xb3, 0xb9, 0xec, 0x2d, 0x1a, 0x73, 0xce, 0x91, 0xc2, 0xe8, 0xd5, 0xa9, 0xaa,
	0xd9, 0x06, 0xe8, 0xde, 0x21, 0xec, 0x18, 0x55, 0x12, 0x42, 0x49, 0x82, 0x63, 0xbd, 0xf7, 0x43,
	0x16, 0xcf, 0xd7, 0x56, 0x69, 0x59, 0x7e, 0xd9, 0x68, 0x9e, 0x1a, 0xc9, 0x7c, 0x5f, 0x3d, 0x45,
	0x25, 0x98, 0x86, 0x43, 0x4c, 0x07, 0x10, 0xe0, 0x28, 0x21, 0x34, 0x75, 0xb6, 0xea, 0x2b, 0x8d,
	0xa2, 0xbf, 0x99, 0x9b, 0x8f, 0x94, 0x55, 0x7e, 0xae, 0x30, 0x66, 0xe1, 0x30, 0x20, 0x11, 0x50,
	0x41, 0xfa, 0xb2, 0x1a, 0xff, 0xca, 0xdb, 0xf8, 0x25, 0x65, 0xef, 0xdc, 0x99, 0x8f, 0x9b, 0x97,
	0x37, 0x55, 0xeb, 0xea, 0xa6, 0x6a, 0x7d, 0xbf, 0xa9, 0x5a, 0x1f, 0x6f, 0xab, 0x85, 0xab, 0xdb,
	0x6a, 0xe1, 0xeb, 0x6d, 0xb5, 0xf0, 0x6e, 0x7f, 0x40, 0xc4, 0x30, 0xeb, 0xb9, 0x21, 0x4b, 0x3c,
	0xf9, 0xf3, 0x3b, 0xa0, 0x20, 0x2e, 0x18, 0x1f, 0xa9, 0x83, 0x37, 0xd5, 0xff, 0x48, 0x31, 0x1b,
	0x43, 0xda, 0x5b, 0x53, 0xc9, 0x3f, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x68, 0x80, 0xa2,
	0x3d, 0x07, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.ExchangeAdmins) > 0 {
		for iNdEx := len(m.ExchangeAdmins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExchangeAdmins[iNdEx])
			copy(dAtA[i:], m.ExchangeAdmins[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.ExchangeAdmins[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	{
		size := m.MinimalProtocolFeeRate.Size()
		i -= size
		if _, err := m.MinimalProtocolFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.DerivativeAtomicMarketOrderFeeMultiplier.Size()
		i -= size
		if _, err := m.DerivativeAtomicMarketOrderFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size := m.LiquidatorRewardShareRate.Size()
		i -= size
		if _, err := m.LiquidatorRewardShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.TradingRewardsVestingDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.TradingRewardsVestingDuration))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxDerivativeOrderSideCount != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MaxDerivativeOrderSideCount))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.DefaultHourlyInterestRate.Size()
		i -= size
		if _, err := m.DefaultHourlyInterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.DefaultHourlyFundingRateCap.Size()
		i -= size
		if _, err := m.DefaultHourlyFundingRateCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.RelayerFeeShareRate.Size()
		i -= size
		if _, err := m.RelayerFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.FundingMultiple != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FundingMultiple))
		i--
		dAtA[i] = 0x38
	}
	if m.DefaultFundingInterval != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DefaultFundingInterval))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.DefaultMaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.DefaultMaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DefaultInitialMarginRatio.Size()
		i -= size
		if _, err := m.DefaultInitialMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DefaultDerivativeTakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultDerivativeTakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DefaultDerivativeMakerFeeRate.Size()
		i -= size
		if _, err := m.DefaultDerivativeMakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.DerivativeMarketInstantListingFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DerivativeMarketInstantListingFee.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultDerivativeMakerFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultDerivativeTakerFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultInitialMarginRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultMaintenanceMarginRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.DefaultFundingInterval != 0 {
		n += 1 + sovParams(uint64(m.DefaultFundingInterval))
	}
	if m.FundingMultiple != 0 {
		n += 1 + sovParams(uint64(m.FundingMultiple))
	}
	l = m.RelayerFeeShareRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultHourlyFundingRateCap.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DefaultHourlyInterestRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.MaxDerivativeOrderSideCount != 0 {
		n += 1 + sovParams(uint64(m.MaxDerivativeOrderSideCount))
	}
	if m.TradingRewardsVestingDuration != 0 {
		n += 1 + sovParams(uint64(m.TradingRewardsVestingDuration))
	}
	l = m.LiquidatorRewardShareRate.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.DerivativeAtomicMarketOrderFeeMultiplier.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.MinimalProtocolFeeRate.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.ExchangeAdmins) > 0 {
		for _, s := range m.ExchangeAdmins {
			l = len(s)
			n += 2 + l + sovParams(uint64(l))
		}
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 2 + l + sovParams(uint64(l))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeMarketInstantListingFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DerivativeMarketInstantListingFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeMakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultDerivativeMakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeTakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultDerivativeTakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultInitialMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultInitialMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultMaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultMaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultFundingInterval", wireType)
			}
			m.DefaultFundingInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultFundingInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingMultiple", wireType)
			}
			m.FundingMultiple = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingMultiple |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RelayerFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyFundingRateCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultHourlyFundingRateCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultHourlyInterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDerivativeOrderSideCount", wireType)
			}
			m.MaxDerivativeOrderSideCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDerivativeOrderSideCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingRewardsVestingDuration", wireType)
			}
			m.TradingRewardsVestingDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradingRewardsVestingDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatorRewardShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidatorRewardShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeAtomicMarketOrderFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DerivativeAtomicMarketOrderFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimalProtocolFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimalProtocolFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeAdmins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeAdmins = append(m.ExchangeAdmins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
