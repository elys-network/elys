// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/price.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TwapPrice struct {
	MarketId          uint64                      `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Block             uint64                      `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	AverageTradePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=average_trade_price,json=averageTradePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"average_trade_price"`
	TotalVolume       cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=total_volume,json=totalVolume,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"total_volume"`
	CumulativePrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=cumulative_price,json=cumulativePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"cumulative_price"`
	Timestamp         uint64                      `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TwapPrice) Reset()         { *m = TwapPrice{} }
func (m *TwapPrice) String() string { return proto.CompactTextString(m) }
func (*TwapPrice) ProtoMessage()    {}
func (*TwapPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_26724f3bc2b3eb6e, []int{0}
}
func (m *TwapPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwapPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwapPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwapPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwapPrice.Merge(m, src)
}
func (m *TwapPrice) XXX_Size() int {
	return m.Size()
}
func (m *TwapPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TwapPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TwapPrice proto.InternalMessageInfo

func (m *TwapPrice) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *TwapPrice) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *TwapPrice) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*TwapPrice)(nil), "elys.clob.TwapPrice")
}

func init() { proto.RegisterFile("elys/clob/price.proto", fileDescriptor_26724f3bc2b3eb6e) }

var fileDescriptor_26724f3bc2b3eb6e = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x30,
	0x1c, 0xc6, 0xdb, 0xb9, 0x0d, 0x1b, 0x05, 0xb5, 0x4e, 0xa8, 0x9b, 0x74, 0xc3, 0xd3, 0x0e, 0xae,
	0x41, 0x04, 0x1f, 0x60, 0x0c, 0x41, 0xf0, 0x20, 0x63, 0x78, 0x10, 0xa1, 0xa4, 0x69, 0xe8, 0x4a,
	0x1b, 0xff, 0xa5, 0x4d, 0x3b, 0xf7, 0x16, 0x3e, 0x8c, 0x0f, 0xb1, 0xe3, 0xf0, 0x24, 0x1e, 0x86,
	0xac, 0x8f, 0xe0, 0x0b, 0x48, 0x93, 0xc9, 0xee, 0xbb, 0xe5, 0xfb, 0xbe, 0xf0, 0xcb, 0x47, 0x3e,
	0x74, 0xc6, 0xe2, 0x79, 0x86, 0x69, 0x0c, 0x1e, 0x4e, 0xd2, 0x90, 0x32, 0x27, 0x49, 0x41, 0x80,
	0x69, 0x54, 0xb6, 0x53, 0xd9, 0xed, 0x56, 0x00, 0x01, 0x48, 0x17, 0x57, 0x27, 0x75, 0xa1, 0x7d,
	0x4e, 0x21, 0xe3, 0x90, 0xb9, 0x2a, 0x50, 0x42, 0x45, 0x97, 0xbf, 0x35, 0x64, 0x4c, 0x66, 0x24,
	0x79, 0xac, 0x78, 0x66, 0x07, 0x19, 0x9c, 0xa4, 0x11, 0x13, 0x6e, 0xe8, 0x5b, 0x7a, 0x4f, 0xef,
	0xd7, 0xc7, 0xfb, 0xca, 0xb8, 0xf7, 0xcd, 0x16, 0x6a, 0x78, 0x31, 0xd0, 0xc8, 0xaa, 0xc9, 0x40,
	0x09, 0x93, 0xa0, 0x53, 0x52, 0xb0, 0x94, 0x04, 0xcc, 0x15, 0x29, 0xf1, 0x99, 0x2b, 0x9b, 0x59,
	0x7b, 0x3d, 0xbd, 0x6f, 0x0c, 0xaf, 0x17, 0xab, 0xae, 0xf6, 0xbd, 0xea, 0x76, 0xd4, 0x9b, 0x99,
	0x1f, 0x39, 0x21, 0x60, 0x4e, 0xc4, 0xd4, 0x79, 0x60, 0x01, 0xa1, 0xf3, 0x11, 0xa3, 0x9f, 0x1f,
	0x03, 0xb4, 0xa9, 0x34, 0x62, 0x74, 0x7c, 0xb2, 0xa1, 0x4d, 0x2a, 0x98, 0x6a, 0x35, 0x41, 0x87,
	0x02, 0x04, 0x89, 0xdd, 0x02, 0xe2, 0x9c, 0x33, 0xab, 0xbe, 0x2b, 0xfb, 0x40, 0x62, 0x9e, 0x24,
	0xc5, 0x7c, 0x41, 0xc7, 0x34, 0xe7, 0x79, 0x4c, 0x44, 0x58, 0xfc, 0xb7, 0x6e, 0xec, 0x4a, 0x3e,
	0xda, 0xa2, 0x54, 0xe7, 0x0b, 0x64, 0x88, 0x90, 0xb3, 0x4c, 0x10, 0x9e, 0x58, 0x4d, 0xf9, 0x61,
	0x5b, 0x63, 0x78, 0xb7, 0x58, 0xdb, 0xfa, 0x72, 0x6d, 0xeb, 0x3f, 0x6b, 0x5b, 0x7f, 0x2f, 0x6d,
	0x6d, 0x59, 0xda, 0xda, 0x57, 0x69, 0x6b, 0xcf, 0x57, 0x41, 0x28, 0xa6, 0xb9, 0xe7, 0x50, 0xe0,
	0xb8, 0x9a, 0x75, 0xf0, 0xca, 0xc4, 0x0c, 0xd2, 0x48, 0x0a, 0x5c, 0xdc, 0xe2, 0x37, 0xb5, 0xbf,
	0x98, 0x27, 0x2c, 0xf3, 0x9a, 0x72, 0xc4, 0x9b, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x2c,
	0x9f, 0xa5, 0x19, 0x02, 0x00, 0x00,
}

func (m *TwapPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwapPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwapPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.CumulativePrice.Size()
		i -= size
		if _, err := m.CumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalVolume.Size()
		i -= size
		if _, err := m.TotalVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.AverageTradePrice.Size()
		i -= size
		if _, err := m.AverageTradePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPrice(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Block != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintPrice(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrice(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TwapPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovPrice(uint64(m.MarketId))
	}
	if m.Block != 0 {
		n += 1 + sovPrice(uint64(m.Block))
	}
	l = m.AverageTradePrice.Size()
	n += 1 + l + sovPrice(uint64(l))
	l = m.TotalVolume.Size()
	n += 1 + l + sovPrice(uint64(l))
	l = m.CumulativePrice.Size()
	n += 1 + l + sovPrice(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovPrice(uint64(m.Timestamp))
	}
	return n
}

func sovPrice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrice(x uint64) (n int) {
	return sovPrice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TwapPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwapPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwapPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageTradePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AverageTradePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrice = fmt.Errorf("proto: unexpected end of group")
)
