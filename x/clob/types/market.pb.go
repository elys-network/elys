// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/market.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PerpetualMarketStatus int32

const (
	PerpetualMarketStatus_MARKET_STATUS_UNSPECIFIED PerpetualMarketStatus = 0
	PerpetualMarketStatus_MARKET_STATUS_ACTIVE      PerpetualMarketStatus = 1
	PerpetualMarketStatus_MARKET_STATUS_PAUSED      PerpetualMarketStatus = 2
	PerpetualMarketStatus_MARKET_STATUS_DEMOLISHED  PerpetualMarketStatus = 3
	PerpetualMarketStatus_MARKET_STATUS_EXPIRED     PerpetualMarketStatus = 4
)

var PerpetualMarketStatus_name = map[int32]string{
	0: "MARKET_STATUS_UNSPECIFIED",
	1: "MARKET_STATUS_ACTIVE",
	2: "MARKET_STATUS_PAUSED",
	3: "MARKET_STATUS_DEMOLISHED",
	4: "MARKET_STATUS_EXPIRED",
}

var PerpetualMarketStatus_value = map[string]int32{
	"MARKET_STATUS_UNSPECIFIED": 0,
	"MARKET_STATUS_ACTIVE":      1,
	"MARKET_STATUS_PAUSED":      2,
	"MARKET_STATUS_DEMOLISHED":  3,
	"MARKET_STATUS_EXPIRED":     4,
}

func (x PerpetualMarketStatus) String() string {
	return proto.EnumName(PerpetualMarketStatus_name, int32(x))
}

func (PerpetualMarketStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_04bb1bb1b69844ad, []int{0}
}

type PerpetualMarket struct {
	Id                     uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseDenom              string                `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom             string                `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	InitialMarginRatio     cosmossdk_io_math.Dec `protobuf:"bytes,4,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3,customtype=cosmossdk.io/math.Dec" json:"initial_margin_ratio"`
	MaintenanceMarginRatio cosmossdk_io_math.Dec `protobuf:"bytes,5,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3,customtype=cosmossdk.io/math.Dec" json:"maintenance_margin_ratio"`
	// maker_fee_rate defines the maker fee rate of a derivative market
	MakerFeeRate cosmossdk_io_math.Dec `protobuf:"bytes,6,opt,name=maker_fee_rate,json=makerFeeRate,proto3,customtype=cosmossdk.io/math.Dec" json:"maker_fee_rate"`
	// taker_fee_rate defines the taker fee rate of a derivative market
	TakerFeeRate cosmossdk_io_math.Dec `protobuf:"bytes,7,opt,name=taker_fee_rate,json=takerFeeRate,proto3,customtype=cosmossdk.io/math.Dec" json:"taker_fee_rate"`
	// relayer_fee_share_rate defines the percentage of the transaction fee shared
	// with the relayer in a derivative market
	LiquidationFeeShareRate cosmossdk_io_math.Dec `protobuf:"bytes,8,opt,name=liquidation_fee_share_rate,json=liquidationFeeShareRate,proto3,customtype=cosmossdk.io/math.Dec" json:"liquidation_fee_share_rate"`
	// Status of the market
	Status PerpetualMarketStatus `protobuf:"varint,9,opt,name=status,proto3,enum=elys.clob.PerpetualMarketStatus" json:"status,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price and margin
	// required for orders in the market
	MinPriceTickSize cosmossdk_io_math.Dec `protobuf:"bytes,10,opt,name=min_price_tick_size,json=minPriceTickSize,proto3,customtype=cosmossdk.io/math.Dec" json:"min_price_tick_size"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market
	MinQuantityTickSize cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3,customtype=cosmossdk.io/math.Int" json:"min_quantity_tick_size"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional cosmossdk_io_math.Dec `protobuf:"bytes,17,opt,name=min_notional,json=minNotional,proto3,customtype=cosmossdk.io/math.Dec" json:"min_notional"`
	// current market admin
	Admin                string                `protobuf:"bytes,18,opt,name=admin,proto3" json:"admin,omitempty"`
	AllowedCollateral    []string              `protobuf:"bytes,19,rep,name=allowed_collateral,json=allowedCollateral,proto3" json:"allowed_collateral,omitempty"`
	TotalOpen            cosmossdk_io_math.Int `protobuf:"bytes,20,opt,name=total_open,json=totalOpen,proto3,customtype=cosmossdk.io/math.Int" json:"total_open"`
	Counter              uint64                `protobuf:"varint,21,opt,name=counter,proto3" json:"counter,omitempty"`
	MaxFundingRate       cosmossdk_io_math.Dec `protobuf:"bytes,22,opt,name=max_funding_rate,json=maxFundingRate,proto3,customtype=cosmossdk.io/math.Dec" json:"max_funding_rate"`
	MaxFundingRateChange cosmossdk_io_math.Dec `protobuf:"bytes,23,opt,name=max_funding_rate_change,json=maxFundingRateChange,proto3,customtype=cosmossdk.io/math.Dec" json:"max_funding_rate_change"`
}

func (m *PerpetualMarket) Reset()         { *m = PerpetualMarket{} }
func (m *PerpetualMarket) String() string { return proto.CompactTextString(m) }
func (*PerpetualMarket) ProtoMessage()    {}
func (*PerpetualMarket) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb1bb1b69844ad, []int{0}
}
func (m *PerpetualMarket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualMarket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualMarket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualMarket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualMarket.Merge(m, src)
}
func (m *PerpetualMarket) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualMarket) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualMarket.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualMarket proto.InternalMessageInfo

type TwapPrice struct {
	MarketId        uint64                `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Block           uint64                `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	Price           cosmossdk_io_math.Dec `protobuf:"bytes,3,opt,name=price,proto3,customtype=cosmossdk.io/math.Dec" json:"price"`
	CumulativePrice cosmossdk_io_math.Dec `protobuf:"bytes,4,opt,name=cumulative_price,json=cumulativePrice,proto3,customtype=cosmossdk.io/math.Dec" json:"cumulative_price"`
	Timestamp       uint64                `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *TwapPrice) Reset()         { *m = TwapPrice{} }
func (m *TwapPrice) String() string { return proto.CompactTextString(m) }
func (*TwapPrice) ProtoMessage()    {}
func (*TwapPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb1bb1b69844ad, []int{1}
}
func (m *TwapPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwapPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwapPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwapPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwapPrice.Merge(m, src)
}
func (m *TwapPrice) XXX_Size() int {
	return m.Size()
}
func (m *TwapPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_TwapPrice.DiscardUnknown(m)
}

var xxx_messageInfo_TwapPrice proto.InternalMessageInfo

func (m *TwapPrice) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *TwapPrice) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *TwapPrice) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type FundingRate struct {
	MarketId uint64                `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Block    uint64                `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	Rate     cosmossdk_io_math.Dec `protobuf:"bytes,3,opt,name=rate,proto3,customtype=cosmossdk.io/math.Dec" json:"rate"`
}

func (m *FundingRate) Reset()         { *m = FundingRate{} }
func (m *FundingRate) String() string { return proto.CompactTextString(m) }
func (*FundingRate) ProtoMessage()    {}
func (*FundingRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_04bb1bb1b69844ad, []int{2}
}
func (m *FundingRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FundingRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FundingRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FundingRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FundingRate.Merge(m, src)
}
func (m *FundingRate) XXX_Size() int {
	return m.Size()
}
func (m *FundingRate) XXX_DiscardUnknown() {
	xxx_messageInfo_FundingRate.DiscardUnknown(m)
}

var xxx_messageInfo_FundingRate proto.InternalMessageInfo

func (m *FundingRate) GetMarketId() uint64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *FundingRate) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func init() {
	proto.RegisterEnum("elys.clob.PerpetualMarketStatus", PerpetualMarketStatus_name, PerpetualMarketStatus_value)
	proto.RegisterType((*PerpetualMarket)(nil), "elys.clob.PerpetualMarket")
	proto.RegisterType((*TwapPrice)(nil), "elys.clob.TwapPrice")
	proto.RegisterType((*FundingRate)(nil), "elys.clob.FundingRate")
}

func init() { proto.RegisterFile("elys/clob/market.proto", fileDescriptor_04bb1bb1b69844ad) }

var fileDescriptor_04bb1bb1b69844ad = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0x45, 0x5b, 0x76, 0xc2, 0x71, 0xe0, 0x28, 0x1b, 0xd9, 0xa6, 0xdd, 0x44, 0x16, 0x7c,
	0x72, 0x5b, 0x58, 0x02, 0xda, 0x4b, 0xd1, 0x4b, 0xa1, 0x48, 0x34, 0xaa, 0xb6, 0x76, 0x14, 0x4a,
	0x0e, 0x8a, 0x00, 0x05, 0xbb, 0x22, 0x27, 0xd2, 0x42, 0xdc, 0x5d, 0x99, 0x5c, 0xd6, 0x76, 0x6e,
	0xbd, 0xf5, 0xd8, 0x47, 0x28, 0xd0, 0x57, 0xe8, 0x43, 0xe4, 0x18, 0xf4, 0x54, 0xf4, 0x10, 0x14,
	0xf6, 0xb1, 0x0f, 0xd0, 0x6b, 0xb1, 0xbb, 0x8a, 0x23, 0xa5, 0x05, 0x02, 0xfa, 0xc6, 0x99, 0x7f,
	0xf6, 0x9b, 0x19, 0x72, 0x38, 0x0b, 0x9b, 0x98, 0x5c, 0x64, 0xcd, 0x28, 0x91, 0xc3, 0x26, 0xa7,
	0xe9, 0x04, 0x55, 0x63, 0x9a, 0x4a, 0x25, 0x89, 0xab, 0xfd, 0x0d, 0xed, 0xdf, 0xa9, 0x8e, 0xe4,
	0x48, 0x1a, 0x6f, 0x53, 0x3f, 0xd9, 0x80, 0x9d, 0xed, 0x48, 0x66, 0x5c, 0x66, 0xa1, 0x15, 0xac,
	0x61, 0xa5, 0xbd, 0xbf, 0x5d, 0xb8, 0xdb, 0xc3, 0x74, 0x8a, 0x2a, 0xa7, 0xc9, 0x91, 0xa1, 0x92,
	0x75, 0x58, 0x62, 0xb1, 0xe7, 0xd4, 0x9d, 0xfd, 0x72, 0xb0, 0xc4, 0x62, 0xf2, 0x10, 0x60, 0x48,
	0x33, 0x0c, 0x63, 0x14, 0x92, 0x7b, 0x4b, 0x75, 0x67, 0xdf, 0x0d, 0x5c, 0xed, 0xe9, 0x68, 0x07,
	0xd9, 0x85, 0xb5, 0xd3, 0x5c, 0xaa, 0x37, 0xfa, 0xb2, 0xd1, 0xc1, 0xb8, 0x6c, 0xc0, 0x77, 0x50,
	0x65, 0x82, 0x29, 0x46, 0x93, 0x90, 0xd3, 0x74, 0xc4, 0x44, 0x98, 0x52, 0xc5, 0xa4, 0x57, 0xd6,
	0x91, 0x8f, 0x3e, 0x7e, 0xf9, 0x7a, 0xb7, 0xf4, 0xe7, 0xeb, 0xdd, 0x0d, 0x5b, 0x57, 0x16, 0x4f,
	0x1a, 0x4c, 0x36, 0x39, 0x55, 0xe3, 0x46, 0x07, 0xa3, 0xdf, 0x7f, 0x3b, 0x80, 0x59, 0xc1, 0x1d,
	0x8c, 0x02, 0x32, 0x03, 0x1d, 0x19, 0x4e, 0xa0, 0x31, 0x04, 0xc1, 0xe3, 0x94, 0x09, 0x85, 0x82,
	0x8a, 0x08, 0x17, 0x53, 0xac, 0x14, 0x4f, 0xb1, 0x39, 0x07, 0x9b, 0x4f, 0xf3, 0x04, 0xd6, 0x39,
	0x9d, 0x60, 0x1a, 0x3e, 0x47, 0xd4, 0x74, 0xf4, 0x56, 0x8b, 0xc3, 0xef, 0x18, 0xc4, 0x21, 0x62,
	0x40, 0x15, 0x6a, 0xa4, 0x5a, 0x44, 0xde, 0xba, 0x01, 0x52, 0xcd, 0x23, 0xc7, 0xb0, 0x93, 0xb0,
	0xd3, 0x9c, 0xc5, 0xba, 0x66, 0x61, 0xc0, 0xd9, 0x98, 0xa6, 0x33, 0xfc, 0xed, 0xe2, 0xf8, 0xad,
	0x39, 0xdc, 0x21, 0x62, 0x5f, 0xc3, 0x4c, 0xa6, 0xcf, 0x60, 0x35, 0x53, 0x54, 0xe5, 0x99, 0xe7,
	0xd6, 0x9d, 0xfd, 0xf5, 0x4f, 0xea, 0x8d, 0xeb, 0x31, 0x6c, 0xbc, 0x33, 0x51, 0x7d, 0x13, 0x17,
	0xcc, 0xe2, 0xc9, 0x33, 0xb8, 0xcf, 0x99, 0x08, 0xa7, 0x29, 0x8b, 0x30, 0x54, 0x2c, 0x9a, 0x84,
	0x19, 0x7b, 0x81, 0x1e, 0x14, 0x2f, 0xae, 0xc2, 0x99, 0xe8, 0x69, 0xcc, 0x80, 0x45, 0x93, 0x3e,
	0x7b, 0x81, 0xe4, 0x7b, 0xd8, 0xd4, 0xec, 0xd3, 0x9c, 0x0a, 0xc5, 0xd4, 0xc5, 0x1c, 0x7e, 0xed,
	0x7d, 0xf8, 0xae, 0x50, 0x73, 0xf8, 0xae, 0x50, 0x81, 0x2e, 0xf3, 0xc9, 0x8c, 0x74, 0x9d, 0xe1,
	0x18, 0xee, 0xe8, 0x0c, 0x42, 0xea, 0x37, 0x42, 0x13, 0xef, 0x5e, 0xf1, 0xb2, 0xd7, 0x38, 0x13,
	0xc7, 0xb3, 0xf3, 0xa4, 0x0a, 0x2b, 0x34, 0xe6, 0x4c, 0x78, 0xc4, 0xfc, 0x38, 0xd6, 0x20, 0x07,
	0x40, 0x68, 0x92, 0xc8, 0x33, 0x8c, 0xc3, 0x48, 0x26, 0x09, 0x55, 0x98, 0xd2, 0xc4, 0xbb, 0x5f,
	0x5f, 0xde, 0x77, 0x83, 0x7b, 0x33, 0xa5, 0x7d, 0x2d, 0x90, 0xaf, 0x00, 0x94, 0x54, 0x34, 0x09,
	0xe5, 0x14, 0x85, 0x57, 0x2d, 0xde, 0xaa, 0x6b, 0x8e, 0x3f, 0x9e, 0xa2, 0x20, 0x1e, 0xdc, 0x8a,
	0x64, 0x2e, 0x14, 0xa6, 0xde, 0x86, 0xd9, 0x01, 0x6f, 0x4c, 0x72, 0x02, 0x15, 0x4e, 0xcf, 0xc3,
	0xe7, 0xb9, 0x88, 0x99, 0x18, 0xd9, 0x91, 0xda, 0x2c, 0xde, 0xfe, 0x3a, 0xa7, 0xe7, 0x87, 0x96,
	0x61, 0x26, 0x69, 0x08, 0x5b, 0xef, 0x62, 0xc3, 0x68, 0x4c, 0xc5, 0x08, 0xbd, 0xad, 0xe2, 0xf4,
	0xea, 0x22, 0xbd, 0x6d, 0x40, 0x9f, 0x97, 0x7f, 0xfa, 0x65, 0xb7, 0xb4, 0xf7, 0x8f, 0x03, 0xee,
	0xe0, 0x8c, 0x4e, 0xcd, 0xcc, 0x90, 0x0f, 0xc0, 0xb5, 0x7b, 0x34, 0xbc, 0x5e, 0x77, 0xb7, 0xad,
	0xa3, 0x1b, 0xeb, 0xcf, 0x32, 0x4c, 0x64, 0x34, 0x31, 0xfb, 0xae, 0x1c, 0x58, 0x83, 0xb4, 0x60,
	0xc5, 0x8c, 0xad, 0xdd, 0x72, 0xc5, 0x0a, 0xb3, 0x27, 0xc9, 0x53, 0xa8, 0x44, 0x39, 0xcf, 0x13,
	0xaa, 0xd8, 0x0f, 0x68, 0x7f, 0x82, 0x9b, 0x6c, 0xc2, 0xbb, 0x6f, 0x21, 0xb6, 0x9b, 0x07, 0xe0,
	0x2a, 0xc6, 0x31, 0x53, 0x94, 0x4f, 0xcd, 0xde, 0x2b, 0x07, 0x6f, 0x1d, 0x7b, 0x3f, 0x3a, 0xb0,
	0x36, 0xff, 0xce, 0x6f, 0xd0, 0xfb, 0x17, 0x50, 0x36, 0x5f, 0xfc, 0x06, 0xad, 0x9b, 0x83, 0x1f,
	0xfd, 0xea, 0xc0, 0xc6, 0xff, 0x6e, 0x06, 0xf2, 0x10, 0xb6, 0x8f, 0x5a, 0xc1, 0xd7, 0xfe, 0x20,
	0xec, 0x0f, 0x5a, 0x83, 0x93, 0x7e, 0x78, 0x72, 0xdc, 0xef, 0xf9, 0xed, 0xee, 0x61, 0xd7, 0xef,
	0x54, 0x4a, 0xc4, 0x83, 0xea, 0xa2, 0xdc, 0x6a, 0x0f, 0xba, 0x4f, 0xfd, 0x8a, 0xf3, 0x5f, 0xa5,
	0xd7, 0x3a, 0xe9, 0xfb, 0x9d, 0xca, 0x12, 0x79, 0x00, 0xde, 0xa2, 0xd2, 0xf1, 0x8f, 0x1e, 0x7f,
	0xd3, 0xed, 0x7f, 0xe9, 0x77, 0x2a, 0xcb, 0x64, 0x1b, 0x36, 0x16, 0x55, 0xff, 0xdb, 0x5e, 0x37,
	0xf0, 0x3b, 0x95, 0xf2, 0xa3, 0xf6, 0xcb, 0xcb, 0x9a, 0xf3, 0xea, 0xb2, 0xe6, 0xfc, 0x75, 0x59,
	0x73, 0x7e, 0xbe, 0xaa, 0x95, 0x5e, 0x5d, 0xd5, 0x4a, 0x7f, 0x5c, 0xd5, 0x4a, 0xcf, 0x3e, 0x1c,
	0x31, 0x35, 0xce, 0x87, 0x8d, 0x48, 0xf2, 0xa6, 0xde, 0x75, 0x07, 0x02, 0xd5, 0x99, 0x4c, 0x27,
	0xc6, 0x68, 0x9e, 0xdb, 0x9b, 0x59, 0x5d, 0x4c, 0x31, 0x1b, 0xae, 0x9a, 0xdb, 0xf5, 0xd3, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x87, 0x4a, 0x4d, 0xb3, 0x07, 0x00, 0x00,
}

func (m *PerpetualMarket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualMarket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualMarket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxFundingRateChange.Size()
		i -= size
		if _, err := m.MaxFundingRateChange.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	{
		size := m.MaxFundingRate.Size()
		i -= size
		if _, err := m.MaxFundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	if m.Counter != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	{
		size := m.TotalOpen.Size()
		i -= size
		if _, err := m.TotalOpen.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	if len(m.AllowedCollateral) > 0 {
		for iNdEx := len(m.AllowedCollateral) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedCollateral[iNdEx])
			copy(dAtA[i:], m.AllowedCollateral[iNdEx])
			i = encodeVarintMarket(dAtA, i, uint64(len(m.AllowedCollateral[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	{
		size := m.MinNotional.Size()
		i -= size
		if _, err := m.MinNotional.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	{
		size := m.MinQuantityTickSize.Size()
		i -= size
		if _, err := m.MinQuantityTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MinPriceTickSize.Size()
		i -= size
		if _, err := m.MinPriceTickSize.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.Status != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.LiquidationFeeShareRate.Size()
		i -= size
		if _, err := m.LiquidationFeeShareRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TakerFeeRate.Size()
		i -= size
		if _, err := m.TakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MakerFeeRate.Size()
		i -= size
		if _, err := m.MakerFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.MaintenanceMarginRatio.Size()
		i -= size
		if _, err := m.MaintenanceMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.InitialMarginRatio.Size()
		i -= size
		if _, err := m.InitialMarginRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintMarket(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TwapPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwapPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TwapPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.CumulativePrice.Size()
		i -= size
		if _, err := m.CumulativePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Price.Size()
		i -= size
		if _, err := m.Price.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Block != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FundingRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FundingRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FundingRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Block != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if m.MarketId != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PerpetualMarket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMarket(uint64(m.Id))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovMarket(uint64(l))
	}
	l = m.InitialMarginRatio.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MaintenanceMarginRatio.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.TakerFeeRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.LiquidationFeeShareRate.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.Status != 0 {
		n += 1 + sovMarket(uint64(m.Status))
	}
	l = m.MinPriceTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinQuantityTickSize.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.MinNotional.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = len(m.Admin)
	if l > 0 {
		n += 2 + l + sovMarket(uint64(l))
	}
	if len(m.AllowedCollateral) > 0 {
		for _, s := range m.AllowedCollateral {
			l = len(s)
			n += 2 + l + sovMarket(uint64(l))
		}
	}
	l = m.TotalOpen.Size()
	n += 2 + l + sovMarket(uint64(l))
	if m.Counter != 0 {
		n += 2 + sovMarket(uint64(m.Counter))
	}
	l = m.MaxFundingRate.Size()
	n += 2 + l + sovMarket(uint64(l))
	l = m.MaxFundingRateChange.Size()
	n += 2 + l + sovMarket(uint64(l))
	return n
}

func (m *TwapPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovMarket(uint64(m.MarketId))
	}
	if m.Block != 0 {
		n += 1 + sovMarket(uint64(m.Block))
	}
	l = m.Price.Size()
	n += 1 + l + sovMarket(uint64(l))
	l = m.CumulativePrice.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.Timestamp != 0 {
		n += 1 + sovMarket(uint64(m.Timestamp))
	}
	return n
}

func (m *FundingRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketId != 0 {
		n += 1 + sovMarket(uint64(m.MarketId))
	}
	if m.Block != 0 {
		n += 1 + sovMarket(uint64(m.Block))
	}
	l = m.Rate.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PerpetualMarket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualMarket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualMarket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InitialMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaintenanceMarginRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationFeeShareRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationFeeShareRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= PerpetualMarketStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPriceTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinPriceTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuantityTickSize", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinQuantityTickSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinNotional.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedCollateral", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedCollateral = append(m.AllowedCollateral, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalOpen", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFundingRateChange", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxFundingRateChange.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwapPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwapPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwapPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CumulativePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FundingRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FundingRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FundingRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
