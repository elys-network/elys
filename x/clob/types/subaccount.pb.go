// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/clob/subaccount.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubAccount struct {
	Owner            string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Id               uint64                                   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	AvailableBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=available_balance,json=availableBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"available_balance"`
	TotalBalance     github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=total_balance,json=totalBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_balance"`
	TradeNounce      uint64                                   `protobuf:"varint,5,opt,name=trade_nounce,json=tradeNounce,proto3" json:"trade_nounce,omitempty"`
	PerpetualId      []uint64                                 `protobuf:"varint,6,rep,packed,name=perpetual_id,json=perpetualId,proto3" json:"perpetual_id,omitempty"`
}

func (m *SubAccount) Reset()         { *m = SubAccount{} }
func (m *SubAccount) String() string { return proto.CompactTextString(m) }
func (*SubAccount) ProtoMessage()    {}
func (*SubAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_796473dabe88ec78, []int{0}
}
func (m *SubAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubAccount.Merge(m, src)
}
func (m *SubAccount) XXX_Size() int {
	return m.Size()
}
func (m *SubAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SubAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SubAccount proto.InternalMessageInfo

func (m *SubAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *SubAccount) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubAccount) GetAvailableBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.AvailableBalance
	}
	return nil
}

func (m *SubAccount) GetTotalBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalBalance
	}
	return nil
}

func (m *SubAccount) GetTradeNounce() uint64 {
	if m != nil {
		return m.TradeNounce
	}
	return 0
}

func (m *SubAccount) GetPerpetualId() []uint64 {
	if m != nil {
		return m.PerpetualId
	}
	return nil
}

func init() {
	proto.RegisterType((*SubAccount)(nil), "elys.clob.SubAccount")
}

func init() { proto.RegisterFile("elys/clob/subaccount.proto", fileDescriptor_796473dabe88ec78) }

var fileDescriptor_796473dabe88ec78 = []byte{
	// 372 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xbd, 0xae, 0x9b, 0x30,
	0x1c, 0xc5, 0x81, 0x7c, 0x48, 0x71, 0xd2, 0xaa, 0x45, 0x19, 0x48, 0x06, 0x42, 0x3b, 0xd1, 0x21,
	0xb8, 0x69, 0x9f, 0x20, 0x64, 0xea, 0xd2, 0x21, 0xd9, 0xba, 0x20, 0x1b, 0x5b, 0xd4, 0x0a, 0xb1,
	0x11, 0x36, 0xf9, 0x78, 0x8b, 0x3e, 0x47, 0xe7, 0x3e, 0x44, 0xc6, 0xa8, 0x53, 0xa7, 0xb6, 0x4a,
	0xde, 0xe3, 0xea, 0xca, 0x36, 0x37, 0xba, 0x0f, 0x70, 0x27, 0xf8, 0x9f, 0x73, 0xf0, 0xef, 0x00,
	0x7f, 0x30, 0xa5, 0xe5, 0x49, 0xc2, 0xbc, 0x14, 0x18, 0xca, 0x06, 0xa3, 0x3c, 0x17, 0x0d, 0x57,
	0x49, 0x55, 0x0b, 0x25, 0xfc, 0x81, 0xf6, 0x12, 0xed, 0x4d, 0xc7, 0x85, 0x28, 0x84, 0x51, 0xa1,
	0xbe, 0xb3, 0x81, 0xe9, 0x24, 0x17, 0x72, 0x27, 0x64, 0x66, 0x0d, 0x3b, 0xb4, 0x56, 0x68, 0x27,
	0x88, 0x91, 0xa4, 0x70, 0xbf, 0xc0, 0x54, 0xa1, 0x05, 0xcc, 0x05, 0xe3, 0xd6, 0x7f, 0xff, 0xe0,
	0x01, 0xb0, 0x69, 0xf0, 0xd2, 0x02, 0xfd, 0x04, 0xf4, 0xc4, 0x81, 0xd3, 0x3a, 0x70, 0x23, 0x37,
	0x1e, 0xa4, 0xc1, 0xef, 0x5f, 0xf3, 0x71, 0x7b, 0xde, 0x92, 0x90, 0x9a, 0x4a, 0xb9, 0x51, 0x35,
	0xe3, 0xc5, 0xda, 0xc6, 0xfc, 0xd7, 0xc0, 0x63, 0x24, 0xf0, 0x22, 0x37, 0xee, 0xae, 0x3d, 0x46,
	0xfc, 0x23, 0x78, 0x8b, 0xf6, 0x88, 0x95, 0x08, 0x97, 0x34, 0xc3, 0xa8, 0x44, 0x3c, 0xa7, 0x41,
	0x27, 0xea, 0xc4, 0xc3, 0x4f, 0x93, 0xa4, 0x3d, 0x48, 0x57, 0x49, 0xda, 0x2a, 0xc9, 0x4a, 0x30,
	0x9e, 0x7e, 0x3c, 0xff, 0x9d, 0x39, 0x3f, 0xff, 0xcd, 0xe2, 0x82, 0xa9, 0xef, 0x0d, 0x4e, 0x72,
	0xb1, 0x6b, 0xdf, 0xa2, 0xbd, 0xcc, 0x25, 0xd9, 0x42, 0x75, 0xaa, 0xa8, 0x34, 0x0f, 0xc8, 0xf5,
	0x9b, 0x3b, 0x25, 0xb5, 0x10, 0xbf, 0x02, 0xaf, 0x94, 0x50, 0xa8, 0xbc, 0x53, 0xbb, 0x2f, 0x4f,
	0x1d, 0x19, 0xc2, 0x13, 0xf1, 0x1d, 0x18, 0xa9, 0x1a, 0x11, 0x9a, 0x71, 0xd1, 0x68, 0x60, 0xcf,
	0x7c, 0x85, 0xa1, 0xd1, 0xbe, 0x1a, 0x49, 0x47, 0x2a, 0x5a, 0x57, 0x54, 0x35, 0xa8, 0xcc, 0x18,
	0x09, 0xfa, 0x51, 0x47, 0x47, 0xee, 0xda, 0x17, 0x92, 0xae, 0xce, 0xd7, 0xd0, 0xbd, 0x5c, 0x43,
	0xf7, 0xff, 0x35, 0x74, 0x7f, 0xdc, 0x42, 0xe7, 0x72, 0x0b, 0x9d, 0x3f, 0xb7, 0xd0, 0xf9, 0xf6,
	0xe1, 0x59, 0x2f, 0xbd, 0x01, 0x73, 0x4e, 0xd5, 0x41, 0xd4, 0x5b, 0x33, 0xc0, 0xa3, 0x5d, 0x16,
	0x53, 0x0f, 0xf7, 0xcd, 0xcf, 0xfc, 0xfc, 0x18, 0x00, 0x00, 0xff, 0xff, 0x96, 0x2a, 0x66, 0x83,
	0x46, 0x02, 0x00, 0x00,
}

func (m *SubAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerpetualId) > 0 {
		dAtA2 := make([]byte, len(m.PerpetualId)*10)
		var j1 int
		for _, num := range m.PerpetualId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSubaccount(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.TradeNounce != 0 {
		i = encodeVarintSubaccount(dAtA, i, uint64(m.TradeNounce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TotalBalance) > 0 {
		for iNdEx := len(m.TotalBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubaccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AvailableBalance) > 0 {
		for iNdEx := len(m.AvailableBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvailableBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSubaccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Id != 0 {
		i = encodeVarintSubaccount(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintSubaccount(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSubaccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovSubaccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovSubaccount(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSubaccount(uint64(m.Id))
	}
	if len(m.AvailableBalance) > 0 {
		for _, e := range m.AvailableBalance {
			l = e.Size()
			n += 1 + l + sovSubaccount(uint64(l))
		}
	}
	if len(m.TotalBalance) > 0 {
		for _, e := range m.TotalBalance {
			l = e.Size()
			n += 1 + l + sovSubaccount(uint64(l))
		}
	}
	if m.TradeNounce != 0 {
		n += 1 + sovSubaccount(uint64(m.TradeNounce))
	}
	if len(m.PerpetualId) > 0 {
		l = 0
		for _, e := range m.PerpetualId {
			l += sovSubaccount(uint64(e))
		}
		n += 1 + sovSubaccount(uint64(l)) + l
	}
	return n
}

func sovSubaccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSubaccount(x uint64) (n int) {
	return sovSubaccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSubaccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailableBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvailableBalance = append(m.AvailableBalance, types.Coin{})
			if err := m.AvailableBalance[len(m.AvailableBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSubaccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSubaccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalBalance = append(m.TotalBalance, types.Coin{})
			if err := m.TotalBalance[len(m.TotalBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeNounce", wireType)
			}
			m.TradeNounce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TradeNounce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubaccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PerpetualId = append(m.PerpetualId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSubaccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSubaccount
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSubaccount
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PerpetualId) == 0 {
					m.PerpetualId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSubaccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PerpetualId = append(m.PerpetualId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSubaccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSubaccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSubaccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSubaccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSubaccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSubaccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSubaccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSubaccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSubaccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSubaccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSubaccount = fmt.Errorf("proto: unexpected end of group")
)
