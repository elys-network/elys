// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// InvariantChecker is an autogenerated mock type for the InvariantChecker type
type InvariantChecker struct {
	mock.Mock
}

type InvariantChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *InvariantChecker) EXPECT() *InvariantChecker_Expecter {
	return &InvariantChecker_Expecter{mock: &_m.Mock}
}

// InvariantCheck provides a mock function with given fields: ctx
func (_m *InvariantChecker) InvariantCheck(ctx types.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InvariantChecker_InvariantCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvariantCheck'
type InvariantChecker_InvariantCheck_Call struct {
	*mock.Call
}

// InvariantCheck is a helper method to define mock.On call
//   - ctx types.Context
func (_e *InvariantChecker_Expecter) InvariantCheck(ctx interface{}) *InvariantChecker_InvariantCheck_Call {
	return &InvariantChecker_InvariantCheck_Call{Call: _e.mock.On("InvariantCheck", ctx)}
}

func (_c *InvariantChecker_InvariantCheck_Call) Run(run func(ctx types.Context)) *InvariantChecker_InvariantCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *InvariantChecker_InvariantCheck_Call) Return(_a0 error) *InvariantChecker_InvariantCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *InvariantChecker_InvariantCheck_Call) RunAndReturn(run func(types.Context) error) *InvariantChecker_InvariantCheck_Call {
	_c.Call.Return(run)
	return _c
}

// NewInvariantChecker creates a new instance of InvariantChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvariantChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvariantChecker {
	mock := &InvariantChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
