// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/oracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCoinRatesRequest struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryCoinRatesRequest) Reset()         { *m = QueryCoinRatesRequest{} }
func (m *QueryCoinRatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCoinRatesRequest) ProtoMessage()    {}
func (*QueryCoinRatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{2}
}
func (m *QueryCoinRatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinRatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinRatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinRatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinRatesRequest.Merge(m, src)
}
func (m *QueryCoinRatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinRatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinRatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinRatesRequest proto.InternalMessageInfo

func (m *QueryCoinRatesRequest) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryCoinRatesResponse struct {
	Result *CoinRatesResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryCoinRatesResponse) Reset()         { *m = QueryCoinRatesResponse{} }
func (m *QueryCoinRatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCoinRatesResponse) ProtoMessage()    {}
func (*QueryCoinRatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{3}
}
func (m *QueryCoinRatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCoinRatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCoinRatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCoinRatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCoinRatesResponse.Merge(m, src)
}
func (m *QueryCoinRatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCoinRatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCoinRatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCoinRatesResponse proto.InternalMessageInfo

func (m *QueryCoinRatesResponse) GetResult() *CoinRatesResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryLastBandRequestIdRequest struct {
}

func (m *QueryLastBandRequestIdRequest) Reset()         { *m = QueryLastBandRequestIdRequest{} }
func (m *QueryLastBandRequestIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastBandRequestIdRequest) ProtoMessage()    {}
func (*QueryLastBandRequestIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{4}
}
func (m *QueryLastBandRequestIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBandRequestIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBandRequestIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBandRequestIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBandRequestIdRequest.Merge(m, src)
}
func (m *QueryLastBandRequestIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBandRequestIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBandRequestIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBandRequestIdRequest proto.InternalMessageInfo

type QueryLastBandRequestIdResponse struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryLastBandRequestIdResponse) Reset()         { *m = QueryLastBandRequestIdResponse{} }
func (m *QueryLastBandRequestIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastBandRequestIdResponse) ProtoMessage()    {}
func (*QueryLastBandRequestIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{5}
}
func (m *QueryLastBandRequestIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastBandRequestIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastBandRequestIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastBandRequestIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastBandRequestIdResponse.Merge(m, src)
}
func (m *QueryLastBandRequestIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastBandRequestIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastBandRequestIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastBandRequestIdResponse proto.InternalMessageInfo

func (m *QueryLastBandRequestIdResponse) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryGetAssetInfoRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetAssetInfoRequest) Reset()         { *m = QueryGetAssetInfoRequest{} }
func (m *QueryGetAssetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetInfoRequest) ProtoMessage()    {}
func (*QueryGetAssetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{6}
}
func (m *QueryGetAssetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetInfoRequest.Merge(m, src)
}
func (m *QueryGetAssetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetInfoRequest proto.InternalMessageInfo

func (m *QueryGetAssetInfoRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryGetAssetInfoResponse struct {
	AssetInfo AssetInfo `protobuf:"bytes,1,opt,name=assetInfo,proto3" json:"assetInfo"`
}

func (m *QueryGetAssetInfoResponse) Reset()         { *m = QueryGetAssetInfoResponse{} }
func (m *QueryGetAssetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAssetInfoResponse) ProtoMessage()    {}
func (*QueryGetAssetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{7}
}
func (m *QueryGetAssetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAssetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAssetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAssetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAssetInfoResponse.Merge(m, src)
}
func (m *QueryGetAssetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAssetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAssetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAssetInfoResponse proto.InternalMessageInfo

func (m *QueryGetAssetInfoResponse) GetAssetInfo() AssetInfo {
	if m != nil {
		return m.AssetInfo
	}
	return AssetInfo{}
}

type QueryAllAssetInfoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAssetInfoRequest) Reset()         { *m = QueryAllAssetInfoRequest{} }
func (m *QueryAllAssetInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetInfoRequest) ProtoMessage()    {}
func (*QueryAllAssetInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{8}
}
func (m *QueryAllAssetInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetInfoRequest.Merge(m, src)
}
func (m *QueryAllAssetInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetInfoRequest proto.InternalMessageInfo

func (m *QueryAllAssetInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAssetInfoResponse struct {
	AssetInfo  []AssetInfo         `protobuf:"bytes,1,rep,name=assetInfo,proto3" json:"assetInfo"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAssetInfoResponse) Reset()         { *m = QueryAllAssetInfoResponse{} }
func (m *QueryAllAssetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAssetInfoResponse) ProtoMessage()    {}
func (*QueryAllAssetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{9}
}
func (m *QueryAllAssetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAssetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAssetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAssetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAssetInfoResponse.Merge(m, src)
}
func (m *QueryAllAssetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAssetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAssetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAssetInfoResponse proto.InternalMessageInfo

func (m *QueryAllAssetInfoResponse) GetAssetInfo() []AssetInfo {
	if m != nil {
		return m.AssetInfo
	}
	return nil
}

func (m *QueryAllAssetInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPriceRequest struct {
	Asset string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (m *QueryGetPriceRequest) Reset()         { *m = QueryGetPriceRequest{} }
func (m *QueryGetPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceRequest) ProtoMessage()    {}
func (*QueryGetPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{10}
}
func (m *QueryGetPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceRequest.Merge(m, src)
}
func (m *QueryGetPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceRequest proto.InternalMessageInfo

func (m *QueryGetPriceRequest) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

type QueryGetPriceResponse struct {
	Price Price `protobuf:"bytes,1,opt,name=price,proto3" json:"price"`
}

func (m *QueryGetPriceResponse) Reset()         { *m = QueryGetPriceResponse{} }
func (m *QueryGetPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceResponse) ProtoMessage()    {}
func (*QueryGetPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{11}
}
func (m *QueryGetPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceResponse.Merge(m, src)
}
func (m *QueryGetPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceResponse proto.InternalMessageInfo

func (m *QueryGetPriceResponse) GetPrice() Price {
	if m != nil {
		return m.Price
	}
	return Price{}
}

type QueryAllPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceRequest) Reset()         { *m = QueryAllPriceRequest{} }
func (m *QueryAllPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceRequest) ProtoMessage()    {}
func (*QueryAllPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{12}
}
func (m *QueryAllPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceRequest.Merge(m, src)
}
func (m *QueryAllPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceRequest proto.InternalMessageInfo

func (m *QueryAllPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPriceResponse struct {
	Price      []Price             `protobuf:"bytes,1,rep,name=price,proto3" json:"price"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceResponse) Reset()         { *m = QueryAllPriceResponse{} }
func (m *QueryAllPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceResponse) ProtoMessage()    {}
func (*QueryAllPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{13}
}
func (m *QueryAllPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceResponse.Merge(m, src)
}
func (m *QueryAllPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceResponse proto.InternalMessageInfo

func (m *QueryAllPriceResponse) GetPrice() []Price {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *QueryAllPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPriceFeederRequest struct {
	Feeder string `protobuf:"bytes,1,opt,name=feeder,proto3" json:"feeder,omitempty"`
}

func (m *QueryGetPriceFeederRequest) Reset()         { *m = QueryGetPriceFeederRequest{} }
func (m *QueryGetPriceFeederRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceFeederRequest) ProtoMessage()    {}
func (*QueryGetPriceFeederRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{14}
}
func (m *QueryGetPriceFeederRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceFeederRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceFeederRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceFeederRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceFeederRequest.Merge(m, src)
}
func (m *QueryGetPriceFeederRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceFeederRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceFeederRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceFeederRequest proto.InternalMessageInfo

func (m *QueryGetPriceFeederRequest) GetFeeder() string {
	if m != nil {
		return m.Feeder
	}
	return ""
}

type QueryGetPriceFeederResponse struct {
	PriceFeeder PriceFeeder `protobuf:"bytes,1,opt,name=priceFeeder,proto3" json:"priceFeeder"`
}

func (m *QueryGetPriceFeederResponse) Reset()         { *m = QueryGetPriceFeederResponse{} }
func (m *QueryGetPriceFeederResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPriceFeederResponse) ProtoMessage()    {}
func (*QueryGetPriceFeederResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{15}
}
func (m *QueryGetPriceFeederResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPriceFeederResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPriceFeederResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPriceFeederResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPriceFeederResponse.Merge(m, src)
}
func (m *QueryGetPriceFeederResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPriceFeederResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPriceFeederResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPriceFeederResponse proto.InternalMessageInfo

func (m *QueryGetPriceFeederResponse) GetPriceFeeder() PriceFeeder {
	if m != nil {
		return m.PriceFeeder
	}
	return PriceFeeder{}
}

type QueryAllPriceFeederRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceFeederRequest) Reset()         { *m = QueryAllPriceFeederRequest{} }
func (m *QueryAllPriceFeederRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceFeederRequest) ProtoMessage()    {}
func (*QueryAllPriceFeederRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{16}
}
func (m *QueryAllPriceFeederRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceFeederRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceFeederRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceFeederRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceFeederRequest.Merge(m, src)
}
func (m *QueryAllPriceFeederRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceFeederRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceFeederRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceFeederRequest proto.InternalMessageInfo

func (m *QueryAllPriceFeederRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPriceFeederResponse struct {
	PriceFeeder []PriceFeeder       `protobuf:"bytes,1,rep,name=priceFeeder,proto3" json:"priceFeeder"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPriceFeederResponse) Reset()         { *m = QueryAllPriceFeederResponse{} }
func (m *QueryAllPriceFeederResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPriceFeederResponse) ProtoMessage()    {}
func (*QueryAllPriceFeederResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2afc8ed4b42b5980, []int{17}
}
func (m *QueryAllPriceFeederResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPriceFeederResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPriceFeederResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPriceFeederResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPriceFeederResponse.Merge(m, src)
}
func (m *QueryAllPriceFeederResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPriceFeederResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPriceFeederResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPriceFeederResponse proto.InternalMessageInfo

func (m *QueryAllPriceFeederResponse) GetPriceFeeder() []PriceFeeder {
	if m != nil {
		return m.PriceFeeder
	}
	return nil
}

func (m *QueryAllPriceFeederResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "elysnetwork.elys.oracle.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elysnetwork.elys.oracle.QueryParamsResponse")
	proto.RegisterType((*QueryCoinRatesRequest)(nil), "elysnetwork.elys.oracle.QueryCoinRatesRequest")
	proto.RegisterType((*QueryCoinRatesResponse)(nil), "elysnetwork.elys.oracle.QueryCoinRatesResponse")
	proto.RegisterType((*QueryLastBandRequestIdRequest)(nil), "elysnetwork.elys.oracle.QueryLastBandRequestIdRequest")
	proto.RegisterType((*QueryLastBandRequestIdResponse)(nil), "elysnetwork.elys.oracle.QueryLastBandRequestIdResponse")
	proto.RegisterType((*QueryGetAssetInfoRequest)(nil), "elysnetwork.elys.oracle.QueryGetAssetInfoRequest")
	proto.RegisterType((*QueryGetAssetInfoResponse)(nil), "elysnetwork.elys.oracle.QueryGetAssetInfoResponse")
	proto.RegisterType((*QueryAllAssetInfoRequest)(nil), "elysnetwork.elys.oracle.QueryAllAssetInfoRequest")
	proto.RegisterType((*QueryAllAssetInfoResponse)(nil), "elysnetwork.elys.oracle.QueryAllAssetInfoResponse")
	proto.RegisterType((*QueryGetPriceRequest)(nil), "elysnetwork.elys.oracle.QueryGetPriceRequest")
	proto.RegisterType((*QueryGetPriceResponse)(nil), "elysnetwork.elys.oracle.QueryGetPriceResponse")
	proto.RegisterType((*QueryAllPriceRequest)(nil), "elysnetwork.elys.oracle.QueryAllPriceRequest")
	proto.RegisterType((*QueryAllPriceResponse)(nil), "elysnetwork.elys.oracle.QueryAllPriceResponse")
	proto.RegisterType((*QueryGetPriceFeederRequest)(nil), "elysnetwork.elys.oracle.QueryGetPriceFeederRequest")
	proto.RegisterType((*QueryGetPriceFeederResponse)(nil), "elysnetwork.elys.oracle.QueryGetPriceFeederResponse")
	proto.RegisterType((*QueryAllPriceFeederRequest)(nil), "elysnetwork.elys.oracle.QueryAllPriceFeederRequest")
	proto.RegisterType((*QueryAllPriceFeederResponse)(nil), "elysnetwork.elys.oracle.QueryAllPriceFeederResponse")
}

func init() { proto.RegisterFile("elys/oracle/query.proto", fileDescriptor_2afc8ed4b42b5980) }

var fileDescriptor_2afc8ed4b42b5980 = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x3b, 0x5b, 0x1a, 0xd1, 0x57, 0xc4, 0x4a, 0x43, 0x59, 0x8a, 0xe9, 0xba, 0xcb, 0x68,
	0xd5, 0x16, 0xda, 0x7a, 0xe8, 0x0f, 0x40, 0x42, 0x5a, 0x89, 0x2e, 0xa2, 0xab, 0x4a, 0x7b, 0x28,
	0x81, 0xd3, 0x1e, 0x88, 0x26, 0xc9, 0x34, 0x58, 0xeb, 0x78, 0xbc, 0xb6, 0x03, 0x54, 0x51, 0x2e,
	0xdc, 0x91, 0x10, 0x1c, 0xb8, 0x70, 0xe3, 0x00, 0x12, 0x48, 0x08, 0x89, 0x3f, 0x62, 0x8f, 0x95,
	0x10, 0x12, 0x27, 0x84, 0x5a, 0xfe, 0x10, 0xe4, 0x99, 0xe7, 0xc4, 0x4e, 0x9c, 0x38, 0x81, 0x9c,
	0x6a, 0x7b, 0xde, 0xf7, 0xbd, 0xcf, 0x7b, 0x6f, 0x66, 0x5e, 0x0a, 0x2f, 0x49, 0xef, 0x22, 0xe2,
	0x2a, 0x14, 0x0d, 0x4f, 0xf2, 0x27, 0x1d, 0x19, 0x5e, 0x38, 0x41, 0xa8, 0x62, 0x45, 0xf5, 0x82,
	0x2f, 0xe3, 0xcf, 0x54, 0xf8, 0xd8, 0x49, 0x9e, 0x1d, 0x63, 0x64, 0xad, 0xb6, 0x54, 0x4b, 0x69,
	0x1b, 0x9e, 0x3c, 0x19, 0x73, 0x6b, 0xbd, 0xa5, 0x54, 0xcb, 0x93, 0x5c, 0x04, 0x2e, 0x17, 0xbe,
	0xaf, 0x62, 0x11, 0xbb, 0xca, 0x8f, 0x70, 0xf5, 0xf5, 0x86, 0x8a, 0xda, 0x2a, 0xe2, 0x75, 0x11,
	0x61, 0x14, 0xfe, 0xe9, 0x7e, 0x5d, 0xc6, 0x62, 0x9f, 0x07, 0xa2, 0xe5, 0xfa, 0xda, 0x18, 0x6d,
	0xd7, 0xb2, 0x44, 0x81, 0x08, 0x45, 0x3b, 0xf5, 0xb2, 0x9e, 0x5d, 0xa9, 0x0b, 0xbf, 0x59, 0x0b,
	0x42, 0xb7, 0x21, 0x8b, 0x56, 0x45, 0x14, 0xc9, 0xb8, 0xe6, 0xfa, 0xe7, 0x29, 0x5f, 0x2e, 0xcf,
	0xac, 0xcc, 0x1e, 0x59, 0xa8, 0x9d, 0x4b, 0xd9, 0x94, 0xa1, 0x59, 0x67, 0xab, 0x40, 0x3f, 0x48,
	0x80, 0xcf, 0x34, 0x49, 0x55, 0x3e, 0xe9, 0xc8, 0x28, 0x66, 0x1f, 0xc1, 0x0b, 0xb9, 0xaf, 0x51,
	0xa0, 0xfc, 0x48, 0xd2, 0x7b, 0x50, 0x31, 0xc4, 0x6b, 0xe4, 0x0e, 0xd9, 0x5e, 0x39, 0xd8, 0x70,
	0xc6, 0x54, 0xd1, 0x31, 0xc2, 0xfb, 0xcf, 0x3c, 0xfd, 0x6b, 0x63, 0xa1, 0x8a, 0x22, 0xf6, 0x16,
	0xbc, 0xa8, 0xbd, 0xbe, 0xa7, 0x5c, 0xbf, 0x2a, 0x62, 0x99, 0x86, 0xa3, 0xb7, 0x01, 0x42, 0xf3,
	0x58, 0x73, 0x9b, 0xda, 0xf7, 0x62, 0x75, 0x19, 0xbf, 0x9c, 0x36, 0xd9, 0x23, 0xb8, 0x35, 0xac,
	0x43, 0xa0, 0x77, 0xa1, 0x12, 0xca, 0xa8, 0xe3, 0xc5, 0x08, 0xb4, 0x3d, 0x16, 0x28, 0xab, 0xed,
	0x78, 0x71, 0x15, 0x75, 0xec, 0x36, 0xbc, 0xa2, 0x7d, 0x3f, 0x14, 0x51, 0xdc, 0xb7, 0x39, 0x6d,
	0xa6, 0x85, 0xb8, 0x07, 0xeb, 0xc5, 0xcb, 0x08, 0x50, 0x42, 0xfe, 0x06, 0xac, 0x69, 0xf9, 0x03,
	0x19, 0x1f, 0x27, 0x2d, 0x3b, 0xf5, 0xcf, 0x55, 0x9a, 0xf4, 0x2a, 0x2c, 0x35, 0xa5, 0xaf, 0xda,
	0x5a, 0xb5, 0x5c, 0x35, 0x2f, 0xac, 0x01, 0x2f, 0x17, 0x28, 0x30, 0xda, 0x09, 0x2c, 0x8b, 0xf4,
	0x23, 0x66, 0xcc, 0xc6, 0x66, 0xdc, 0x97, 0x63, 0x17, 0x06, 0x52, 0x56, 0x47, 0xac, 0x63, 0xcf,
	0x1b, 0xc1, 0x3a, 0x01, 0x18, 0xec, 0x59, 0x0c, 0xb2, 0xe9, 0x98, 0x0d, 0xee, 0x24, 0x1b, 0xdc,
	0x31, 0xc7, 0x08, 0x37, 0xb8, 0x73, 0x26, 0x5a, 0x12, 0xb5, 0xd5, 0x8c, 0x92, 0xfd, 0x4c, 0x30,
	0x93, 0x7c, 0x90, 0xe2, 0x4c, 0x16, 0xff, 0x63, 0x26, 0xf4, 0x41, 0x8e, 0xf6, 0x86, 0xa6, 0xdd,
	0x2a, 0xa5, 0x35, 0x10, 0x39, 0xdc, 0x5d, 0x58, 0x4d, 0xeb, 0x7e, 0x96, 0x9c, 0x92, 0x4c, 0x97,
	0x74, 0xb4, 0xb4, 0x4b, 0xfa, 0x85, 0x7d, 0x88, 0x3b, 0x79, 0x60, 0x8d, 0x79, 0xbd, 0x03, 0x4b,
	0xfa, 0x90, 0x61, 0xe1, 0xec, 0xf1, 0x07, 0x24, 0xb1, 0xc2, 0x7c, 0x8c, 0x84, 0x7d, 0x8c, 0x08,
	0xc7, 0x9e, 0x97, 0x43, 0x98, 0x57, 0x47, 0xbe, 0x23, 0x48, 0x3d, 0x08, 0x30, 0x4a, 0xbd, 0x38,
	0x23, 0xf5, 0xfc, 0x3a, 0x70, 0x04, 0x56, 0xae, 0xa6, 0x27, 0xfa, 0x9a, 0x4a, 0x8b, 0x70, 0x0b,
	0x2a, 0xe6, 0xde, 0xc2, 0x46, 0xe0, 0x1b, 0x7b, 0x8c, 0xe7, 0x77, 0x58, 0x85, 0x99, 0x3d, 0x84,
	0x95, 0x60, 0xf0, 0x19, 0x8b, 0x77, 0x77, 0x72, 0x7e, 0xc6, 0x16, 0xb3, 0xcc, 0xca, 0x59, 0x13,
	0x11, 0xd3, 0x02, 0xe6, 0x11, 0xe7, 0xd5, 0xa7, 0xdf, 0x08, 0xe6, 0x34, 0x1c, 0x66, 0x5c, 0x4e,
	0x8b, 0xff, 0x23, 0xa7, 0xb9, 0xf5, 0xef, 0xe0, 0x8f, 0x15, 0x58, 0xd2, 0xd8, 0xf4, 0x4b, 0x02,
	0x15, 0x33, 0x00, 0xe8, 0xce, 0x58, 0xac, 0xd1, 0xa9, 0x63, 0xed, 0x4e, 0x67, 0x6c, 0x62, 0xb3,
	0xed, 0x2f, 0x7e, 0xff, 0xe7, 0x9b, 0x1b, 0x8c, 0xde, 0xe1, 0x89, 0xe5, 0x1e, 0xca, 0xf8, 0xe8,
	0x78, 0xa5, 0x3f, 0x10, 0xb8, 0x39, 0x74, 0xff, 0x53, 0x67, 0x72, 0xac, 0xe1, 0x11, 0x65, 0xf1,
	0xa9, 0xed, 0x11, 0xef, 0x50, 0xe3, 0xed, 0xd1, 0x1d, 0x5e, 0x3c, 0xd6, 0x6b, 0x66, 0x00, 0xf1,
	0xee, 0x60, 0x7e, 0xf4, 0xe8, 0x2f, 0x04, 0x6e, 0x0e, 0x8d, 0x1a, 0x7a, 0x34, 0x39, 0x72, 0xf1,
	0xe0, 0xb2, 0xde, 0x9c, 0x51, 0x85, 0xd4, 0x5c, 0x53, 0xbf, 0x46, 0xb7, 0x72, 0xd4, 0x9e, 0x88,
	0xe2, 0x5a, 0x0e, 0x3d, 0x45, 0xa6, 0x3f, 0x12, 0x58, 0xee, 0xdf, 0xcf, 0x74, 0x7f, 0x72, 0xd4,
	0x82, 0x31, 0x68, 0x1d, 0xcc, 0x22, 0x41, 0xca, 0x23, 0x4d, 0xe9, 0xd0, 0xdd, 0xf1, 0xad, 0x1f,
	0xfc, 0x42, 0xe2, 0x5d, 0x3d, 0x59, 0x7b, 0xf4, 0x7b, 0x02, 0xcf, 0xf5, 0x7d, 0x1d, 0x7b, 0x5e,
	0x19, 0x6d, 0xc1, 0x74, 0x2c, 0xa3, 0x2d, 0x9a, 0x75, 0x6c, 0x57, 0xd3, 0x6e, 0xd2, 0xbb, 0xd3,
	0xd0, 0xd2, 0x6f, 0x09, 0x2c, 0xe9, 0x23, 0x4b, 0xf7, 0x4a, 0x2b, 0x93, 0x1d, 0x13, 0x96, 0x33,
	0xad, 0x79, 0x61, 0xab, 0x8b, 0xcf, 0x4f, 0x22, 0xe0, 0x5d, 0x4d, 0xd7, 0xa3, 0x5f, 0x13, 0x78,
	0x56, 0xbb, 0x48, 0x6a, 0xb7, 0x57, 0x5a, 0x88, 0x59, 0xe0, 0x86, 0x27, 0x12, 0xdb, 0xd2, 0x70,
	0xaf, 0xd2, 0x8d, 0x12, 0x38, 0xfa, 0x2b, 0x81, 0x95, 0xcc, 0x0d, 0x47, 0x0f, 0xa7, 0xab, 0x42,
	0xee, 0xe6, 0xb6, 0x8e, 0x66, 0x13, 0x21, 0xe3, 0xdb, 0x9a, 0x71, 0x9f, 0xf2, 0x12, 0x46, 0xfc,
	0xc1, 0xcd, 0xbb, 0xe6, 0x6f, 0x8f, 0xfe, 0x44, 0xe0, 0xf9, 0x8c, 0xc3, 0xa4, 0x9c, 0x87, 0xd3,
	0xd5, 0x67, 0x26, 0xec, 0xe2, 0xf1, 0xc1, 0x1c, 0x8d, 0xbd, 0x4d, 0x37, 0xa7, 0xc3, 0xbe, 0xff,
	0xfe, 0xd3, 0x2b, 0x9b, 0x5c, 0x5e, 0xd9, 0xe4, 0xef, 0x2b, 0x9b, 0x7c, 0x75, 0x6d, 0x2f, 0x5c,
	0x5e, 0xdb, 0x0b, 0x7f, 0x5e, 0xdb, 0x0b, 0x8f, 0x76, 0x5a, 0x6e, 0xfc, 0x49, 0xa7, 0xee, 0x34,
	0x54, 0xbb, 0xc0, 0xd7, 0xe7, 0xa9, 0xb7, 0xf8, 0x22, 0x90, 0x51, 0xbd, 0xa2, 0xff, 0xdf, 0x38,
	0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x09, 0xd7, 0x06, 0x77, 0x92, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// CoinRatesResult defines a rpc handler method for MsgRequestBandPrice.
	CoinRatesResult(ctx context.Context, in *QueryCoinRatesRequest, opts ...grpc.CallOption) (*QueryCoinRatesResponse, error)
	// LastBandRequestId query the last CoinRates result id
	LastBandRequestId(ctx context.Context, in *QueryLastBandRequestIdRequest, opts ...grpc.CallOption) (*QueryLastBandRequestIdResponse, error)
	// Queries a AssetInfo by denom.
	AssetInfo(ctx context.Context, in *QueryGetAssetInfoRequest, opts ...grpc.CallOption) (*QueryGetAssetInfoResponse, error)
	// Queries a list of AssetInfo items.
	AssetInfoAll(ctx context.Context, in *QueryAllAssetInfoRequest, opts ...grpc.CallOption) (*QueryAllAssetInfoResponse, error)
	// Queries a Price by asset.
	Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error)
	// Queries a list of Price items.
	PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error)
	// Queries a PriceFeeder by feeder.
	PriceFeeder(ctx context.Context, in *QueryGetPriceFeederRequest, opts ...grpc.CallOption) (*QueryGetPriceFeederResponse, error)
	// Queries a list of PriceFeeder items.
	PriceFeederAll(ctx context.Context, in *QueryAllPriceFeederRequest, opts ...grpc.CallOption) (*QueryAllPriceFeederResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinRatesResult(ctx context.Context, in *QueryCoinRatesRequest, opts ...grpc.CallOption) (*QueryCoinRatesResponse, error) {
	out := new(QueryCoinRatesResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/CoinRatesResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBandRequestId(ctx context.Context, in *QueryLastBandRequestIdRequest, opts ...grpc.CallOption) (*QueryLastBandRequestIdResponse, error) {
	out := new(QueryLastBandRequestIdResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/LastBandRequestId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetInfo(ctx context.Context, in *QueryGetAssetInfoRequest, opts ...grpc.CallOption) (*QueryGetAssetInfoResponse, error) {
	out := new(QueryGetAssetInfoResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/AssetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetInfoAll(ctx context.Context, in *QueryAllAssetInfoRequest, opts ...grpc.CallOption) (*QueryAllAssetInfoResponse, error) {
	out := new(QueryAllAssetInfoResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/AssetInfoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Price(ctx context.Context, in *QueryGetPriceRequest, opts ...grpc.CallOption) (*QueryGetPriceResponse, error) {
	out := new(QueryGetPriceResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/Price", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceAll(ctx context.Context, in *QueryAllPriceRequest, opts ...grpc.CallOption) (*QueryAllPriceResponse, error) {
	out := new(QueryAllPriceResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/PriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeeder(ctx context.Context, in *QueryGetPriceFeederRequest, opts ...grpc.CallOption) (*QueryGetPriceFeederResponse, error) {
	out := new(QueryGetPriceFeederResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/PriceFeeder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeederAll(ctx context.Context, in *QueryAllPriceFeederRequest, opts ...grpc.CallOption) (*QueryAllPriceFeederResponse, error) {
	out := new(QueryAllPriceFeederResponse)
	err := c.cc.Invoke(ctx, "/elysnetwork.elys.oracle.Query/PriceFeederAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// CoinRatesResult defines a rpc handler method for MsgRequestBandPrice.
	CoinRatesResult(context.Context, *QueryCoinRatesRequest) (*QueryCoinRatesResponse, error)
	// LastBandRequestId query the last CoinRates result id
	LastBandRequestId(context.Context, *QueryLastBandRequestIdRequest) (*QueryLastBandRequestIdResponse, error)
	// Queries a AssetInfo by denom.
	AssetInfo(context.Context, *QueryGetAssetInfoRequest) (*QueryGetAssetInfoResponse, error)
	// Queries a list of AssetInfo items.
	AssetInfoAll(context.Context, *QueryAllAssetInfoRequest) (*QueryAllAssetInfoResponse, error)
	// Queries a Price by asset.
	Price(context.Context, *QueryGetPriceRequest) (*QueryGetPriceResponse, error)
	// Queries a list of Price items.
	PriceAll(context.Context, *QueryAllPriceRequest) (*QueryAllPriceResponse, error)
	// Queries a PriceFeeder by feeder.
	PriceFeeder(context.Context, *QueryGetPriceFeederRequest) (*QueryGetPriceFeederResponse, error)
	// Queries a list of PriceFeeder items.
	PriceFeederAll(context.Context, *QueryAllPriceFeederRequest) (*QueryAllPriceFeederResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) CoinRatesResult(ctx context.Context, req *QueryCoinRatesRequest) (*QueryCoinRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinRatesResult not implemented")
}
func (*UnimplementedQueryServer) LastBandRequestId(ctx context.Context, req *QueryLastBandRequestIdRequest) (*QueryLastBandRequestIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBandRequestId not implemented")
}
func (*UnimplementedQueryServer) AssetInfo(ctx context.Context, req *QueryGetAssetInfoRequest) (*QueryGetAssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetInfo not implemented")
}
func (*UnimplementedQueryServer) AssetInfoAll(ctx context.Context, req *QueryAllAssetInfoRequest) (*QueryAllAssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetInfoAll not implemented")
}
func (*UnimplementedQueryServer) Price(ctx context.Context, req *QueryGetPriceRequest) (*QueryGetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Price not implemented")
}
func (*UnimplementedQueryServer) PriceAll(ctx context.Context, req *QueryAllPriceRequest) (*QueryAllPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceAll not implemented")
}
func (*UnimplementedQueryServer) PriceFeeder(ctx context.Context, req *QueryGetPriceFeederRequest) (*QueryGetPriceFeederResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeeder not implemented")
}
func (*UnimplementedQueryServer) PriceFeederAll(ctx context.Context, req *QueryAllPriceFeederRequest) (*QueryAllPriceFeederResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeederAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinRatesResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoinRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinRatesResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/CoinRatesResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinRatesResult(ctx, req.(*QueryCoinRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBandRequestId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastBandRequestIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBandRequestId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/LastBandRequestId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBandRequestId(ctx, req.(*QueryLastBandRequestIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAssetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/AssetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetInfo(ctx, req.(*QueryGetAssetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetInfoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAssetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetInfoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/AssetInfoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetInfoAll(ctx, req.(*QueryAllAssetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Price_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Price(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/Price",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Price(ctx, req.(*QueryGetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/PriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceAll(ctx, req.(*QueryAllPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeeder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPriceFeederRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeeder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/PriceFeeder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeeder(ctx, req.(*QueryGetPriceFeederRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeederAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPriceFeederRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeederAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elysnetwork.elys.oracle.Query/PriceFeederAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeederAll(ctx, req.(*QueryAllPriceFeederRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elysnetwork.elys.oracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "CoinRatesResult",
			Handler:    _Query_CoinRatesResult_Handler,
		},
		{
			MethodName: "LastBandRequestId",
			Handler:    _Query_LastBandRequestId_Handler,
		},
		{
			MethodName: "AssetInfo",
			Handler:    _Query_AssetInfo_Handler,
		},
		{
			MethodName: "AssetInfoAll",
			Handler:    _Query_AssetInfoAll_Handler,
		},
		{
			MethodName: "Price",
			Handler:    _Query_Price_Handler,
		},
		{
			MethodName: "PriceAll",
			Handler:    _Query_PriceAll_Handler,
		},
		{
			MethodName: "PriceFeeder",
			Handler:    _Query_PriceFeeder_Handler,
		},
		{
			MethodName: "PriceFeederAll",
			Handler:    _Query_PriceFeederAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/oracle/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCoinRatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinRatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinRatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCoinRatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCoinRatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCoinRatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastBandRequestIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBandRequestIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBandRequestIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastBandRequestIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastBandRequestIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastBandRequestIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAssetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAssetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAssetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AssetInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAssetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAssetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAssetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssetInfo) > 0 {
		for iNdEx := len(m.AssetInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Price) > 0 {
		for iNdEx := len(m.Price) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Price[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceFeederRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceFeederRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceFeederRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feeder) > 0 {
		i -= len(m.Feeder)
		copy(dAtA[i:], m.Feeder)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Feeder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPriceFeederResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPriceFeederResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPriceFeederResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PriceFeeder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceFeederRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceFeederRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceFeederRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPriceFeederResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPriceFeederResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPriceFeederResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PriceFeeder) > 0 {
		for iNdEx := len(m.PriceFeeder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceFeeder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCoinRatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryCoinRatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastBandRequestIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastBandRequestIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryGetAssetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAssetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AssetInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAssetInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAssetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetInfo) > 0 {
		for _, e := range m.AssetInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Price.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Price) > 0 {
		for _, e := range m.Price {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceFeederRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Feeder)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPriceFeederResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PriceFeeder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPriceFeederRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPriceFeederResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceFeeder) > 0 {
		for _, e := range m.PriceFeeder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinRatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinRatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinRatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCoinRatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCoinRatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCoinRatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &CoinRatesResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBandRequestIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBandRequestIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBandRequestIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastBandRequestIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastBandRequestIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastBandRequestIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAssetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAssetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAssetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAssetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAssetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAssetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInfo = append(m.AssetInfo, AssetInfo{})
			if err := m.AssetInfo[len(m.AssetInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = append(m.Price, Price{})
			if err := m.Price[len(m.Price)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceFeederRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceFeederRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceFeederRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feeder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feeder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPriceFeederResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPriceFeederResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPriceFeederResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFeeder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PriceFeeder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceFeederRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceFeederRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceFeederRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPriceFeederResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPriceFeederResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPriceFeederResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceFeeder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceFeeder = append(m.PriceFeeder, PriceFeeder{})
			if err := m.PriceFeeder[len(m.PriceFeeder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
