// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/parameter/proposal.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalUpdateMinCommission struct {
	Title         string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MinCommission string `protobuf:"bytes,3,opt,name=min_commission,json=minCommission,proto3" json:"min_commission,omitempty"`
}

func (m *ProposalUpdateMinCommission) Reset()         { *m = ProposalUpdateMinCommission{} }
func (m *ProposalUpdateMinCommission) String() string { return proto.CompactTextString(m) }
func (*ProposalUpdateMinCommission) ProtoMessage()    {}
func (*ProposalUpdateMinCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a4532402d67c8f, []int{0}
}
func (m *ProposalUpdateMinCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdateMinCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdateMinCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdateMinCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdateMinCommission.Merge(m, src)
}
func (m *ProposalUpdateMinCommission) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdateMinCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdateMinCommission.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdateMinCommission proto.InternalMessageInfo

func (m *ProposalUpdateMinCommission) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdateMinCommission) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdateMinCommission) GetMinCommission() string {
	if m != nil {
		return m.MinCommission
	}
	return ""
}

type ProposalUpdateMaxVotingPower struct {
	Title          string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description    string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MaxVotingPower string `protobuf:"bytes,3,opt,name=max_voting_power,json=maxVotingPower,proto3" json:"max_voting_power,omitempty"`
}

func (m *ProposalUpdateMaxVotingPower) Reset()         { *m = ProposalUpdateMaxVotingPower{} }
func (m *ProposalUpdateMaxVotingPower) String() string { return proto.CompactTextString(m) }
func (*ProposalUpdateMaxVotingPower) ProtoMessage()    {}
func (*ProposalUpdateMaxVotingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a4532402d67c8f, []int{1}
}
func (m *ProposalUpdateMaxVotingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdateMaxVotingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdateMaxVotingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdateMaxVotingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdateMaxVotingPower.Merge(m, src)
}
func (m *ProposalUpdateMaxVotingPower) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdateMaxVotingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdateMaxVotingPower.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdateMaxVotingPower proto.InternalMessageInfo

func (m *ProposalUpdateMaxVotingPower) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdateMaxVotingPower) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdateMaxVotingPower) GetMaxVotingPower() string {
	if m != nil {
		return m.MaxVotingPower
	}
	return ""
}

type ProposalUpdateMinSelfDelegation struct {
	Title             string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description       string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MinSelfDelegation string `protobuf:"bytes,3,opt,name=min_self_delegation,json=minSelfDelegation,proto3" json:"min_self_delegation,omitempty"`
}

func (m *ProposalUpdateMinSelfDelegation) Reset()         { *m = ProposalUpdateMinSelfDelegation{} }
func (m *ProposalUpdateMinSelfDelegation) String() string { return proto.CompactTextString(m) }
func (*ProposalUpdateMinSelfDelegation) ProtoMessage()    {}
func (*ProposalUpdateMinSelfDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9a4532402d67c8f, []int{2}
}
func (m *ProposalUpdateMinSelfDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdateMinSelfDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdateMinSelfDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdateMinSelfDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdateMinSelfDelegation.Merge(m, src)
}
func (m *ProposalUpdateMinSelfDelegation) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdateMinSelfDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdateMinSelfDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdateMinSelfDelegation proto.InternalMessageInfo

func (m *ProposalUpdateMinSelfDelegation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdateMinSelfDelegation) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdateMinSelfDelegation) GetMinSelfDelegation() string {
	if m != nil {
		return m.MinSelfDelegation
	}
	return ""
}

func init() {
	proto.RegisterType((*ProposalUpdateMinCommission)(nil), "elys.parameter.ProposalUpdateMinCommission")
	proto.RegisterType((*ProposalUpdateMaxVotingPower)(nil), "elys.parameter.ProposalUpdateMaxVotingPower")
	proto.RegisterType((*ProposalUpdateMinSelfDelegation)(nil), "elys.parameter.ProposalUpdateMinSelfDelegation")
}

func init() { proto.RegisterFile("elys/parameter/proposal.proto", fileDescriptor_f9a4532402d67c8f) }

var fileDescriptor_f9a4532402d67c8f = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbf, 0x4a, 0xf4, 0x40,
	0x14, 0xc5, 0x77, 0xbe, 0x0f, 0x05, 0x47, 0x0c, 0x1a, 0x2d, 0x02, 0xea, 0xb8, 0x04, 0x84, 0x6d,
	0x4c, 0x0a, 0xdf, 0x40, 0x2d, 0x6c, 0x84, 0x45, 0xd1, 0xc2, 0x26, 0xcc, 0x26, 0x77, 0xe3, 0xe0,
	0xfc, 0x63, 0x66, 0x74, 0xb3, 0x60, 0x61, 0x6b, 0xe7, 0x63, 0x59, 0x6e, 0x69, 0x29, 0xc9, 0x8b,
	0x48, 0x62, 0x08, 0x71, 0xed, 0xb4, 0xbc, 0xf7, 0x5c, 0x7e, 0xe7, 0x72, 0x0e, 0xde, 0x07, 0x3e,
	0xb7, 0xb1, 0xa6, 0x86, 0x0a, 0x70, 0x60, 0x62, 0x6d, 0x94, 0x56, 0x96, 0xf2, 0x48, 0x1b, 0xe5,
	0x94, 0xef, 0xd5, 0x72, 0xd4, 0xc9, 0xe1, 0x13, 0xde, 0x1d, 0xb7, 0x17, 0xd7, 0x3a, 0xa3, 0x0e,
	0x2e, 0x98, 0x3c, 0x55, 0x42, 0x30, 0x6b, 0x99, 0x92, 0xfe, 0x0e, 0x5e, 0x71, 0xcc, 0x71, 0x08,
	0xd0, 0x10, 0x8d, 0xd6, 0x2e, 0xbf, 0x06, 0x7f, 0x88, 0xd7, 0x33, 0xb0, 0xa9, 0x61, 0xda, 0x31,
	0x25, 0x83, 0x7f, 0x8d, 0xd6, 0x5f, 0xf9, 0x87, 0xd8, 0x13, 0x4c, 0x26, 0x69, 0x47, 0x0a, 0xfe,
	0x37, 0x47, 0x1b, 0xa2, 0x8f, 0x0f, 0x9f, 0x11, 0xde, 0x5b, 0xb2, 0xa7, 0xc5, 0x8d, 0x72, 0x4c,
	0xe6, 0x63, 0x35, 0x03, 0xf3, 0x6b, 0xff, 0x11, 0xde, 0x14, 0xb4, 0x48, 0x1e, 0x1b, 0x54, 0xa2,
	0x6b, 0x56, 0xfb, 0x81, 0x27, 0xbe, 0x39, 0x84, 0x2f, 0x08, 0x1f, 0xfc, 0x48, 0xe0, 0x0a, 0xf8,
	0xf4, 0x0c, 0x38, 0xe4, 0xd4, 0xfd, 0x25, 0x85, 0x08, 0x6f, 0xd7, 0x29, 0x58, 0xe0, 0xd3, 0x24,
	0xeb, 0x70, 0xed, 0x23, 0x5b, 0x62, 0xd9, 0xe7, 0xe4, 0xfc, 0xad, 0x24, 0x68, 0x51, 0x12, 0xf4,
	0x51, 0x12, 0xf4, 0x5a, 0x91, 0xc1, 0xa2, 0x22, 0x83, 0xf7, 0x8a, 0x0c, 0x6e, 0xa3, 0x9c, 0xb9,
	0xbb, 0x87, 0x49, 0x94, 0x2a, 0x11, 0xd7, 0x0d, 0x1e, 0x49, 0x70, 0x33, 0x65, 0xee, 0x9b, 0x21,
	0x2e, 0x7a, 0x7d, 0xbb, 0xb9, 0x06, 0x3b, 0x59, 0x6d, 0xda, 0x3e, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0xac, 0x87, 0x6d, 0x07, 0x0e, 0x02, 0x00, 0x00,
}

func (m *ProposalUpdateMinCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdateMinCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdateMinCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinCommission) > 0 {
		i -= len(m.MinCommission)
		copy(dAtA[i:], m.MinCommission)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.MinCommission)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpdateMaxVotingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdateMaxVotingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdateMaxVotingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MaxVotingPower) > 0 {
		i -= len(m.MaxVotingPower)
		copy(dAtA[i:], m.MaxVotingPower)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.MaxVotingPower)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpdateMinSelfDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdateMinSelfDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdateMinSelfDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MinSelfDelegation) > 0 {
		i -= len(m.MinSelfDelegation)
		copy(dAtA[i:], m.MinSelfDelegation)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.MinSelfDelegation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalUpdateMinCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.MinCommission)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalUpdateMaxVotingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.MaxVotingPower)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalUpdateMinSelfDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.MinSelfDelegation)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalUpdateMinCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdateMinCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdateMinCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCommission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinCommission = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpdateMaxVotingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdateMaxVotingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdateMaxVotingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxVotingPower = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpdateMinSelfDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdateMinSelfDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdateMinSelfDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinSelfDelegation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
