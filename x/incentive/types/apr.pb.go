// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/incentive/apr.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AprEdenElys struct {
	Uusdc  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=uusdc,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"uusdc"`
	Ueden  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ueden,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ueden"`
	Uedenb github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=uedenb,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"uedenb"`
}

func (m *AprEdenElys) Reset()         { *m = AprEdenElys{} }
func (m *AprEdenElys) String() string { return proto.CompactTextString(m) }
func (*AprEdenElys) ProtoMessage()    {}
func (*AprEdenElys) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bff3a86dd838f6, []int{0}
}
func (m *AprEdenElys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AprEdenElys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AprEdenElys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AprEdenElys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AprEdenElys.Merge(m, src)
}
func (m *AprEdenElys) XXX_Size() int {
	return m.Size()
}
func (m *AprEdenElys) XXX_DiscardUnknown() {
	xxx_messageInfo_AprEdenElys.DiscardUnknown(m)
}

var xxx_messageInfo_AprEdenElys proto.InternalMessageInfo

type AprUsdc struct {
	Uusdc github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=uusdc,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"uusdc"`
	Ueden github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=ueden,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"ueden"`
}

func (m *AprUsdc) Reset()         { *m = AprUsdc{} }
func (m *AprUsdc) String() string { return proto.CompactTextString(m) }
func (*AprUsdc) ProtoMessage()    {}
func (*AprUsdc) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bff3a86dd838f6, []int{1}
}
func (m *AprUsdc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AprUsdc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AprUsdc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AprUsdc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AprUsdc.Merge(m, src)
}
func (m *AprUsdc) XXX_Size() int {
	return m.Size()
}
func (m *AprUsdc) XXX_DiscardUnknown() {
	xxx_messageInfo_AprUsdc.DiscardUnknown(m)
}

var xxx_messageInfo_AprUsdc proto.InternalMessageInfo

type AprEdenB struct {
	Uedenb github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=uedenb,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"uedenb"`
}

func (m *AprEdenB) Reset()         { *m = AprEdenB{} }
func (m *AprEdenB) String() string { return proto.CompactTextString(m) }
func (*AprEdenB) ProtoMessage()    {}
func (*AprEdenB) Descriptor() ([]byte, []int) {
	return fileDescriptor_42bff3a86dd838f6, []int{2}
}
func (m *AprEdenB) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AprEdenB) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AprEdenB.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AprEdenB) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AprEdenB.Merge(m, src)
}
func (m *AprEdenB) XXX_Size() int {
	return m.Size()
}
func (m *AprEdenB) XXX_DiscardUnknown() {
	xxx_messageInfo_AprEdenB.DiscardUnknown(m)
}

var xxx_messageInfo_AprEdenB proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AprEdenElys)(nil), "elys.incentive.AprEdenElys")
	proto.RegisterType((*AprUsdc)(nil), "elys.incentive.AprUsdc")
	proto.RegisterType((*AprEdenB)(nil), "elys.incentive.AprEdenB")
}

func init() { proto.RegisterFile("elys/incentive/apr.proto", fileDescriptor_42bff3a86dd838f6) }

var fileDescriptor_42bff3a86dd838f6 = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x48, 0xcd, 0xa9, 0x2c,
	0xd6, 0xcf, 0xcc, 0x4b, 0x4e, 0xcd, 0x2b, 0xc9, 0x2c, 0x4b, 0xd5, 0x4f, 0x2c, 0x28, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x03, 0xc9, 0xe8, 0xc1, 0x65, 0xa4, 0x44, 0xd2, 0xf3, 0xd3,
	0xf3, 0xc1, 0x52, 0xfa, 0x20, 0x16, 0x44, 0x95, 0x94, 0x64, 0x72, 0x7e, 0x71, 0x6e, 0x7e, 0x71,
	0x3c, 0x44, 0x02, 0xc2, 0x81, 0x48, 0x29, 0x75, 0x33, 0x71, 0x71, 0x3b, 0x16, 0x14, 0xb9, 0xa6,
	0xa4, 0xe6, 0xb9, 0xe6, 0x54, 0x16, 0x0b, 0x05, 0x71, 0xb1, 0x96, 0x96, 0x16, 0xa7, 0x24, 0x4b,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x3a, 0xd9, 0x9c, 0xb8, 0x27, 0xcf, 0x70, 0xeb, 0x9e, 0xbc, 0x5a,
	0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0x2e, 0x54, 0x3f, 0x94, 0xd2, 0x2d, 0x4e,
	0xc9, 0xd6, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0xf3, 0xcc, 0x2b, 0xb9, 0xb4, 0x45, 0x97, 0x0b,
	0x6a, 0xbc, 0x67, 0x5e, 0x49, 0x10, 0xc4, 0x28, 0xb0, 0x99, 0xa9, 0x29, 0xa9, 0x79, 0x12, 0x4c,
	0x54, 0x31, 0x13, 0x64, 0x94, 0x50, 0x08, 0x17, 0x1b, 0x98, 0x91, 0x24, 0xc1, 0x4c, 0x05, 0x43,
	0xa1, 0x66, 0x29, 0x6d, 0x64, 0xe4, 0x62, 0x77, 0x2c, 0x28, 0x0a, 0x85, 0xb9, 0x7a, 0x08, 0x84,
	0x84, 0x52, 0x02, 0x17, 0x07, 0x34, 0x02, 0x9d, 0x90, 0x42, 0x85, 0x91, 0x7a, 0xa1, 0xe2, 0xe4,
	0x71, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c,
	0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x7a, 0x48, 0xe6, 0x82, 0x52,
	0xa2, 0x6e, 0x5e, 0x6a, 0x49, 0x79, 0x7e, 0x51, 0x36, 0x98, 0xa3, 0x5f, 0x81, 0x94, 0x64, 0xc1,
	0x76, 0x24, 0xb1, 0x81, 0x13, 0x9d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x4c, 0xd8, 0xea,
	0xd1, 0x02, 0x00, 0x00,
}

func (m *AprEdenElys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AprEdenElys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AprEdenElys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Uedenb.Size()
		i -= size
		if _, err := m.Uedenb.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Ueden.Size()
		i -= size
		if _, err := m.Ueden.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Uusdc.Size()
		i -= size
		if _, err := m.Uusdc.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AprUsdc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AprUsdc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AprUsdc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Ueden.Size()
		i -= size
		if _, err := m.Ueden.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Uusdc.Size()
		i -= size
		if _, err := m.Uusdc.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AprEdenB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AprEdenB) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AprEdenB) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Uedenb.Size()
		i -= size
		if _, err := m.Uedenb.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintApr(dAtA []byte, offset int, v uint64) int {
	offset -= sovApr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AprEdenElys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Uusdc.Size()
	n += 1 + l + sovApr(uint64(l))
	l = m.Ueden.Size()
	n += 1 + l + sovApr(uint64(l))
	l = m.Uedenb.Size()
	n += 1 + l + sovApr(uint64(l))
	return n
}

func (m *AprUsdc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Uusdc.Size()
	n += 1 + l + sovApr(uint64(l))
	l = m.Ueden.Size()
	n += 1 + l + sovApr(uint64(l))
	return n
}

func (m *AprEdenB) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Uedenb.Size()
	n += 1 + l + sovApr(uint64(l))
	return n
}

func sovApr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApr(x uint64) (n int) {
	return sovApr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AprEdenElys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AprEdenElys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AprEdenElys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uusdc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uusdc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ueden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ueden.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uedenb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uedenb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AprUsdc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AprUsdc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AprUsdc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uusdc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uusdc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ueden", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ueden.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AprEdenB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AprEdenB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AprEdenB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uedenb", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Uedenb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApr = fmt.Errorf("proto: unexpected end of group")
)
