// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/incentive/elys_delegator.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ElysDelegator struct {
	Index         string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DelegatorAddr string `protobuf:"bytes,2,opt,name=delegatorAddr,proto3" json:"delegatorAddr,omitempty"`
	ValidatorAddr string `protobuf:"bytes,3,opt,name=validatorAddr,proto3" json:"validatorAddr,omitempty"`
	CommitmentId  string `protobuf:"bytes,4,opt,name=commitmentId,proto3" json:"commitmentId,omitempty"`
}

func (m *ElysDelegator) Reset()         { *m = ElysDelegator{} }
func (m *ElysDelegator) String() string { return proto.CompactTextString(m) }
func (*ElysDelegator) ProtoMessage()    {}
func (*ElysDelegator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9701aa1b10fb448, []int{0}
}
func (m *ElysDelegator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ElysDelegator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ElysDelegator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ElysDelegator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ElysDelegator.Merge(m, src)
}
func (m *ElysDelegator) XXX_Size() int {
	return m.Size()
}
func (m *ElysDelegator) XXX_DiscardUnknown() {
	xxx_messageInfo_ElysDelegator.DiscardUnknown(m)
}

var xxx_messageInfo_ElysDelegator proto.InternalMessageInfo

func (m *ElysDelegator) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ElysDelegator) GetDelegatorAddr() string {
	if m != nil {
		return m.DelegatorAddr
	}
	return ""
}

func (m *ElysDelegator) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

func (m *ElysDelegator) GetCommitmentId() string {
	if m != nil {
		return m.CommitmentId
	}
	return ""
}

func init() {
	proto.RegisterType((*ElysDelegator)(nil), "elysnetwork.elys.incentive.ElysDelegator")
}

func init() {
	proto.RegisterFile("elys/incentive/elys_delegator.proto", fileDescriptor_e9701aa1b10fb448)
}

var fileDescriptor_e9701aa1b10fb448 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xcd, 0xa9, 0x2c,
	0xd6, 0xcf, 0xcc, 0x4b, 0x4e, 0xcd, 0x2b, 0xc9, 0x2c, 0x4b, 0xd5, 0x07, 0x71, 0xe3, 0x53, 0x52,
	0x73, 0x52, 0xd3, 0x13, 0x4b, 0xf2, 0x8b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xa4, 0x40,
	0xa2, 0x79, 0xa9, 0x25, 0xe5, 0xf9, 0x45, 0xd9, 0x7a, 0x20, 0xb6, 0x1e, 0x5c, 0x83, 0xd2, 0x54,
	0x46, 0x2e, 0x5e, 0xd7, 0x9c, 0xca, 0x62, 0x17, 0x98, 0x1e, 0x21, 0x11, 0x2e, 0xd6, 0xcc, 0xbc,
	0x94, 0xd4, 0x0a, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x08, 0x47, 0x48, 0x85, 0x8b, 0x17,
	0x6e, 0xac, 0x63, 0x4a, 0x4a, 0x91, 0x04, 0x13, 0x58, 0x16, 0x55, 0x10, 0xa4, 0xaa, 0x2c, 0x31,
	0x27, 0x33, 0x05, 0xae, 0x8a, 0x19, 0xa2, 0x0a, 0x45, 0x50, 0x48, 0x89, 0x8b, 0x27, 0x39, 0x3f,
	0x37, 0x37, 0xb3, 0x24, 0x37, 0x35, 0xaf, 0xc4, 0x33, 0x45, 0x82, 0x05, 0xac, 0x08, 0x45, 0xcc,
	0xc9, 0xe3, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0,
	0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0xf4, 0xd2, 0x33, 0x4b,
	0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xc1, 0xde, 0xd5, 0x85, 0xfa, 0x0c, 0xcc, 0xd1, 0xaf,
	0x40, 0x0a, 0x8c, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70, 0x20, 0x18, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x5e, 0xf6, 0x7b, 0x82, 0x2b, 0x01, 0x00, 0x00,
}

func (m *ElysDelegator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ElysDelegator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ElysDelegator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommitmentId) > 0 {
		i -= len(m.CommitmentId)
		copy(dAtA[i:], m.CommitmentId)
		i = encodeVarintElysDelegator(dAtA, i, uint64(len(m.CommitmentId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintElysDelegator(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegatorAddr) > 0 {
		i -= len(m.DelegatorAddr)
		copy(dAtA[i:], m.DelegatorAddr)
		i = encodeVarintElysDelegator(dAtA, i, uint64(len(m.DelegatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintElysDelegator(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintElysDelegator(dAtA []byte, offset int, v uint64) int {
	offset -= sovElysDelegator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ElysDelegator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovElysDelegator(uint64(l))
	}
	l = len(m.DelegatorAddr)
	if l > 0 {
		n += 1 + l + sovElysDelegator(uint64(l))
	}
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovElysDelegator(uint64(l))
	}
	l = len(m.CommitmentId)
	if l > 0 {
		n += 1 + l + sovElysDelegator(uint64(l))
	}
	return n
}

func sovElysDelegator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozElysDelegator(x uint64) (n int) {
	return sovElysDelegator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ElysDelegator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowElysDelegator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ElysDelegator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ElysDelegator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElysDelegator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElysDelegator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElysDelegator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElysDelegator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElysDelegator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElysDelegator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthElysDelegator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthElysDelegator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipElysDelegator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthElysDelegator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipElysDelegator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowElysDelegator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowElysDelegator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthElysDelegator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupElysDelegator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthElysDelegator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthElysDelegator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowElysDelegator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupElysDelegator = fmt.Errorf("proto: unexpected end of group")
)
