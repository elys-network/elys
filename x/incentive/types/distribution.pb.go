// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/incentive/distribution.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FeePool is the global fee pool for distribution.
type FeePool struct {
	CommunityPool github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=community_pool,json=communityPool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"community_pool"`
}

func (m *FeePool) Reset()         { *m = FeePool{} }
func (m *FeePool) String() string { return proto.CompactTextString(m) }
func (*FeePool) ProtoMessage()    {}
func (*FeePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd7627d4268669e, []int{0}
}
func (m *FeePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeePool.Merge(m, src)
}
func (m *FeePool) XXX_Size() int {
	return m.Size()
}
func (m *FeePool) XXX_DiscardUnknown() {
	xxx_messageInfo_FeePool.DiscardUnknown(m)
}

var xxx_messageInfo_FeePool proto.InternalMessageInfo

func (m *FeePool) GetCommunityPool() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.CommunityPool
	}
	return nil
}

func init() {
	proto.RegisterType((*FeePool)(nil), "elysnetwork.elys.incentive.FeePool")
}

func init() { proto.RegisterFile("elys/incentive/distribution.proto", fileDescriptor_4fd7627d4268669e) }

var fileDescriptor_4fd7627d4268669e = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xb3, 0x08, 0x0a, 0x11, 0x3d, 0x14, 0x0f, 0x12, 0x64, 0xab, 0x9e, 0x04, 0xe9, 0x2e,
	0xb5, 0x6f, 0x50, 0xc5, 0x93, 0x07, 0xf1, 0xe8, 0x45, 0xba, 0xdb, 0x21, 0x2e, 0x4d, 0x76, 0x42,
	0x76, 0x52, 0x9b, 0xb3, 0x2f, 0xe0, 0x63, 0x88, 0x4f, 0xd2, 0x63, 0x8f, 0x9e, 0x54, 0x92, 0x17,
	0x91, 0x4d, 0xd2, 0x92, 0xd3, 0xce, 0xc2, 0x3f, 0xdf, 0xc7, 0xfc, 0xe1, 0x05, 0x24, 0xa5, 0x93,
	0xc6, 0x6a, 0xb0, 0x64, 0x96, 0x20, 0xe7, 0xc6, 0x51, 0x6e, 0x54, 0x41, 0x06, 0xad, 0xc8, 0x72,
	0x24, 0x1c, 0x44, 0x3e, 0x62, 0x81, 0xde, 0x30, 0x5f, 0x08, 0x3f, 0x8b, 0x5d, 0x3c, 0x3a, 0x89,
	0x31, 0xc6, 0x26, 0x26, 0xfd, 0xd4, 0x6e, 0x44, 0x5c, 0xa3, 0x4b, 0xd1, 0x49, 0x35, 0x73, 0x20,
	0x97, 0x63, 0x05, 0x34, 0x1b, 0x4b, 0x8d, 0xa6, 0x23, 0x5e, 0xbe, 0xb3, 0xf0, 0xe0, 0x1e, 0xe0,
	0x11, 0x31, 0x19, 0xac, 0xc2, 0x63, 0x8d, 0x69, 0x5a, 0x58, 0x43, 0xe5, 0x4b, 0x86, 0x98, 0x9c,
	0xb2, 0xf3, 0xbd, 0xab, 0xc3, 0x9b, 0x33, 0xd1, 0x42, 0x84, 0x87, 0x88, 0x0e, 0x22, 0xee, 0x40,
	0xdf, 0xa2, 0xb1, 0xd3, 0xc9, 0xfa, 0x67, 0x18, 0x7c, 0xfd, 0x0e, 0xaf, 0x63, 0x43, 0xaf, 0x85,
	0x12, 0x1a, 0x53, 0xd9, 0x49, 0xdb, 0x67, 0xe4, 0xe6, 0x0b, 0x49, 0x65, 0x06, 0x6e, 0xbb, 0xe3,
	0x9e, 0x8e, 0x76, 0x22, 0x6f, 0x9e, 0x3e, 0x7c, 0x56, 0x9c, 0xad, 0x2b, 0xce, 0x36, 0x15, 0x67,
	0x7f, 0x15, 0x67, 0x1f, 0x35, 0x0f, 0x36, 0x35, 0x0f, 0xbe, 0x6b, 0x1e, 0x3c, 0x8b, 0x1e, 0xd9,
	0x1f, 0x3d, 0xea, 0x1a, 0x68, 0x3e, 0x72, 0xd5, 0xab, 0xac, 0xb1, 0xa8, 0xfd, 0xe6, 0xb4, 0xc9,
	0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x6f, 0xd9, 0x67, 0x51, 0x01, 0x00, 0x00,
}

func (this *FeePool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeePool)
	if !ok {
		that2, ok := that.(FeePool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CommunityPool) != len(that1.CommunityPool) {
		return false
	}
	for i := range this.CommunityPool {
		if !this.CommunityPool[i].Equal(&that1.CommunityPool[i]) {
			return false
		}
	}
	return true
}
func (m *FeePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for iNdEx := len(m.CommunityPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CommunityPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDistribution(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDistribution(dAtA []byte, offset int, v uint64) int {
	offset -= sovDistribution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CommunityPool) > 0 {
		for _, e := range m.CommunityPool {
			l = e.Size()
			n += 1 + l + sovDistribution(uint64(l))
		}
	}
	return n
}

func sovDistribution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDistribution(x uint64) (n int) {
	return sovDistribution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDistribution
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityPool = append(m.CommunityPool, types.DecCoin{})
			if err := m.CommunityPool[len(m.CommunityPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDistribution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDistribution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDistribution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDistribution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDistribution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDistribution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDistribution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDistribution = fmt.Errorf("proto: unexpected end of group")
)
