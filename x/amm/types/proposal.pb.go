// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/amm/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalCreateBalancerPool struct {
	Title       string      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolParams  *PoolParams `protobuf:"bytes,3,opt,name=poolParams,proto3" json:"poolParams,omitempty"`
	PoolAssets  []PoolAsset `protobuf:"bytes,4,rep,name=poolAssets,proto3" json:"poolAssets"`
}

func (m *ProposalCreateBalancerPool) Reset()         { *m = ProposalCreateBalancerPool{} }
func (m *ProposalCreateBalancerPool) String() string { return proto.CompactTextString(m) }
func (*ProposalCreateBalancerPool) ProtoMessage()    {}
func (*ProposalCreateBalancerPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_be31bf9fc1b03f95, []int{0}
}
func (m *ProposalCreateBalancerPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalCreateBalancerPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalCreateBalancerPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalCreateBalancerPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalCreateBalancerPool.Merge(m, src)
}
func (m *ProposalCreateBalancerPool) XXX_Size() int {
	return m.Size()
}
func (m *ProposalCreateBalancerPool) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalCreateBalancerPool.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalCreateBalancerPool proto.InternalMessageInfo

func (m *ProposalCreateBalancerPool) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalCreateBalancerPool) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalCreateBalancerPool) GetPoolParams() *PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return nil
}

func (m *ProposalCreateBalancerPool) GetPoolAssets() []PoolAsset {
	if m != nil {
		return m.PoolAssets
	}
	return nil
}

type ProposalUpdatePoolParams struct {
	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolId      uint64     `protobuf:"varint,3,opt,name=poolId,proto3" json:"poolId,omitempty" yaml:"pool_id"`
	PoolParams  PoolParams `protobuf:"bytes,4,opt,name=poolParams,proto3" json:"poolParams" yaml:"balancer_pool_params"`
}

func (m *ProposalUpdatePoolParams) Reset()         { *m = ProposalUpdatePoolParams{} }
func (m *ProposalUpdatePoolParams) String() string { return proto.CompactTextString(m) }
func (*ProposalUpdatePoolParams) ProtoMessage()    {}
func (*ProposalUpdatePoolParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_be31bf9fc1b03f95, []int{1}
}
func (m *ProposalUpdatePoolParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpdatePoolParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpdatePoolParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpdatePoolParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpdatePoolParams.Merge(m, src)
}
func (m *ProposalUpdatePoolParams) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpdatePoolParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpdatePoolParams.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpdatePoolParams proto.InternalMessageInfo

func (m *ProposalUpdatePoolParams) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposalUpdatePoolParams) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposalUpdatePoolParams) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *ProposalUpdatePoolParams) GetPoolParams() PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return PoolParams{}
}

func init() {
	proto.RegisterType((*ProposalCreateBalancerPool)(nil), "elysnetwork.elys.amm.ProposalCreateBalancerPool")
	proto.RegisterType((*ProposalUpdatePoolParams)(nil), "elysnetwork.elys.amm.ProposalUpdatePoolParams")
}

func init() { proto.RegisterFile("elys/amm/proposal.proto", fileDescriptor_be31bf9fc1b03f95) }

var fileDescriptor_be31bf9fc1b03f95 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0xaa, 0xd4, 0x30,
	0x14, 0x6d, 0x7c, 0xf5, 0x81, 0x19, 0x70, 0x51, 0x06, 0xac, 0x15, 0xda, 0x52, 0x37, 0x45, 0xb0,
	0xe1, 0x3d, 0x77, 0xae, 0xb4, 0xe2, 0xc2, 0x5d, 0x29, 0xb8, 0x71, 0x33, 0xa4, 0x6d, 0x18, 0x8b,
	0x4d, 0x6f, 0x48, 0x32, 0x8e, 0xf3, 0x17, 0x7e, 0xd6, 0x2c, 0x67, 0xe9, 0xc6, 0x41, 0x66, 0xf0,
	0x07, 0xe6, 0x0b, 0x24, 0x69, 0x9d, 0xa9, 0xa8, 0x20, 0xee, 0x92, 0x9c, 0x73, 0xef, 0xb9, 0xe7,
	0xe4, 0xe2, 0x07, 0xac, 0xdb, 0x28, 0x42, 0x39, 0x27, 0x42, 0x82, 0x00, 0x45, 0xbb, 0x4c, 0x48,
	0xd0, 0xe0, 0xcd, 0x0d, 0xd0, 0x33, 0xbd, 0x06, 0xf9, 0x21, 0x33, 0xe7, 0x8c, 0x72, 0x1e, 0xcc,
	0x97, 0xb0, 0x04, 0x4b, 0x20, 0xe6, 0x34, 0x70, 0x83, 0xb0, 0x06, 0xc5, 0x41, 0x91, 0x8a, 0x2a,
	0x46, 0x3e, 0xde, 0x54, 0x4c, 0xd3, 0x1b, 0x52, 0x43, 0xdb, 0x8f, 0xf8, 0xc3, 0xb3, 0x88, 0x5a,
	0x53, 0xb1, 0x90, 0xb0, 0xd2, 0x6c, 0x84, 0x82, 0x8b, 0x3e, 0x40, 0xb7, 0x10, 0x54, 0x52, 0xae,
	0x7e, 0x2b, 0xb3, 0x18, 0x55, 0x8a, 0xe9, 0x01, 0x4a, 0xbe, 0x22, 0x1c, 0x14, 0xe3, 0xc0, 0xaf,
	0x24, 0xa3, 0x9a, 0xe5, 0xb4, 0xa3, 0x7d, 0xcd, 0x64, 0x01, 0xd0, 0x79, 0x73, 0x7c, 0x57, 0xb7,
	0xba, 0x63, 0x3e, 0x8a, 0x51, 0x7a, 0xaf, 0x1c, 0x2e, 0x5e, 0x8c, 0x67, 0x0d, 0x53, 0xb5, 0x6c,
	0x85, 0x6e, 0xa1, 0xf7, 0xef, 0x58, 0x6c, 0xfa, 0xe4, 0xbd, 0xc0, 0xd8, 0x48, 0x15, 0x76, 0x0a,
	0xff, 0x2a, 0x46, 0xe9, 0xec, 0x36, 0xce, 0xfe, 0x94, 0x44, 0x56, 0x9c, 0x79, 0xe5, 0xa4, 0xc6,
	0x7b, 0x3d, 0x74, 0x78, 0x69, 0x66, 0x55, 0xbe, 0x1b, 0x5f, 0xa5, 0xb3, 0xdb, 0xe8, 0xef, 0x1d,
	0x2c, 0x2f, 0x77, 0xb7, 0xfb, 0xc8, 0x29, 0x27, 0x85, 0xc9, 0x77, 0x84, 0xfd, 0x9f, 0xfe, 0xde,
	0x8a, 0x86, 0x6a, 0x76, 0xd1, 0xfb, 0x6f, 0x77, 0x4f, 0xf0, 0xb5, 0x91, 0x78, 0xd3, 0x58, 0x67,
	0x6e, 0xee, 0x9d, 0xf6, 0xd1, 0xfd, 0x0d, 0xe5, 0xdd, 0xf3, 0xc4, 0x06, 0xdc, 0x36, 0x49, 0x39,
	0x32, 0x3c, 0xf6, 0x4b, 0x12, 0xee, 0xbf, 0x25, 0x91, 0x3f, 0x36, 0x46, 0x4e, 0xfb, 0xe8, 0xd1,
	0xd0, 0xb5, 0x1a, 0xff, 0x64, 0x31, 0xf9, 0xdb, 0x64, 0x1a, 0x57, 0x9e, 0x6f, 0x0f, 0x21, 0xda,
	0x1d, 0x42, 0xf4, 0xed, 0x10, 0xa2, 0xcf, 0xc7, 0xd0, 0xd9, 0x1d, 0x43, 0xe7, 0xcb, 0x31, 0x74,
	0xde, 0xa5, 0xcb, 0x56, 0xbf, 0x5f, 0x55, 0x59, 0x0d, 0x9c, 0x18, 0xa9, 0xa7, 0xa3, 0xae, 0xbd,
	0x90, 0x4f, 0x76, 0x2d, 0xf4, 0x46, 0x30, 0x55, 0x5d, 0xdb, 0x95, 0x78, 0xf6, 0x23, 0x00, 0x00,
	0xff, 0xff, 0x79, 0xcc, 0x76, 0x4f, 0xcb, 0x02, 0x00, 0x00,
}

func (m *ProposalCreateBalancerPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalCreateBalancerPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalCreateBalancerPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolAssets) > 0 {
		for iNdEx := len(m.PoolAssets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolAssets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.PoolParams != nil {
		{
			size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpdatePoolParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpdatePoolParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpdatePoolParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PoolId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalCreateBalancerPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.PoolParams != nil {
		l = m.PoolParams.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.PoolAssets) > 0 {
		for _, e := range m.PoolAssets {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *ProposalUpdatePoolParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovProposal(uint64(m.PoolId))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalCreateBalancerPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalCreateBalancerPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalCreateBalancerPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolParams == nil {
				m.PoolParams = &PoolParams{}
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAssets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAssets = append(m.PoolAssets, PoolAsset{})
			if err := m.PoolAssets[len(m.PoolAssets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpdatePoolParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpdatePoolParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpdatePoolParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
