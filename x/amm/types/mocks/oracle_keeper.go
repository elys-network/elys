// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	math "cosmossdk.io/math"
	oracletypes "github.com/elys-network/elys/x/oracle/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// OracleKeeper is an autogenerated mock type for the OracleKeeper type
type OracleKeeper struct {
	mock.Mock
}

// GetAssetPrice provides a mock function with given fields: ctx, asset
func (_m *OracleKeeper) GetAssetPrice(ctx types.Context, asset string) (oracletypes.Price, bool) {
	ret := _m.Called(ctx, asset)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetPrice")
	}

	var r0 oracletypes.Price
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (oracletypes.Price, bool)); ok {
		return rf(ctx, asset)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) oracletypes.Price); ok {
		r0 = rf(ctx, asset)
	} else {
		r0 = ret.Get(0).(oracletypes.Price)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, asset)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetAssetPriceFromDenom provides a mock function with given fields: ctx, denom
func (_m *OracleKeeper) GetAssetPriceFromDenom(ctx types.Context, denom string) math.LegacyDec {
	ret := _m.Called(ctx, denom)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetPriceFromDenom")
	}

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context, string) math.LegacyDec); ok {
		r0 = rf(ctx, denom)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// GetPriceFeeder provides a mock function with given fields: ctx, feeder
func (_m *OracleKeeper) GetPriceFeeder(ctx types.Context, feeder types.AccAddress) (oracletypes.PriceFeeder, bool) {
	ret := _m.Called(ctx, feeder)

	if len(ret) == 0 {
		panic("no return value specified for GetPriceFeeder")
	}

	var r0 oracletypes.PriceFeeder
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) (oracletypes.PriceFeeder, bool)); ok {
		return rf(ctx, feeder)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) oracletypes.PriceFeeder); ok {
		r0 = rf(ctx, feeder)
	} else {
		r0 = ret.Get(0).(oracletypes.PriceFeeder)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress) bool); ok {
		r1 = rf(ctx, feeder)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// NewOracleKeeper creates a new instance of OracleKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleKeeper {
	mock := &OracleKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
