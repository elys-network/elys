// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	leveragelptypes "github.com/elys-network/elys/x/leveragelp/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// OpenChecker is an autogenerated mock type for the OpenChecker type
type OpenChecker struct {
	mock.Mock
}

type OpenChecker_Expecter struct {
	mock *mock.Mock
}

func (_m *OpenChecker) EXPECT() *OpenChecker_Expecter {
	return &OpenChecker_Expecter{mock: &_m.Mock}
}

// CheckMaxOpenPositions provides a mock function with given fields: ctx
func (_m *OpenChecker) CheckMaxOpenPositions(ctx types.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckMaxOpenPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckMaxOpenPositions'
type OpenChecker_CheckMaxOpenPositions_Call struct {
	*mock.Call
}

// CheckMaxOpenPositions is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenChecker_Expecter) CheckMaxOpenPositions(ctx interface{}) *OpenChecker_CheckMaxOpenPositions_Call {
	return &OpenChecker_CheckMaxOpenPositions_Call{Call: _e.mock.On("CheckMaxOpenPositions", ctx)}
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) Run(run func(ctx types.Context)) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) Return(_a0 error) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckMaxOpenPositions_Call) RunAndReturn(run func(types.Context) error) *OpenChecker_CheckMaxOpenPositions_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPoolHealth provides a mock function with given fields: ctx, poolId
func (_m *OpenChecker) CheckPoolHealth(ctx types.Context, poolId uint64) error {
	ret := _m.Called(ctx, poolId)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64) error); ok {
		r0 = rf(ctx, poolId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckPoolHealth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPoolHealth'
type OpenChecker_CheckPoolHealth_Call struct {
	*mock.Call
}

// CheckPoolHealth is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
func (_e *OpenChecker_Expecter) CheckPoolHealth(ctx interface{}, poolId interface{}) *OpenChecker_CheckPoolHealth_Call {
	return &OpenChecker_CheckPoolHealth_Call{Call: _e.mock.On("CheckPoolHealth", ctx, poolId)}
}

func (_c *OpenChecker_CheckPoolHealth_Call) Run(run func(ctx types.Context, poolId uint64)) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OpenChecker_CheckPoolHealth_Call) Return(_a0 error) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckPoolHealth_Call) RunAndReturn(run func(types.Context, uint64) error) *OpenChecker_CheckPoolHealth_Call {
	_c.Call.Return(run)
	return _c
}

// CheckSamePosition provides a mock function with given fields: ctx, msg
func (_m *OpenChecker) CheckSamePosition(ctx types.Context, msg *leveragelptypes.MsgOpen) *leveragelptypes.Position {
	ret := _m.Called(ctx, msg)

	var r0 *leveragelptypes.Position
	if rf, ok := ret.Get(0).(func(types.Context, *leveragelptypes.MsgOpen) *leveragelptypes.Position); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*leveragelptypes.Position)
		}
	}

	return r0
}

// OpenChecker_CheckSamePosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSamePosition'
type OpenChecker_CheckSamePosition_Call struct {
	*mock.Call
}

// CheckSamePosition is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *leveragelptypes.MsgOpen
func (_e *OpenChecker_Expecter) CheckSamePosition(ctx interface{}, msg interface{}) *OpenChecker_CheckSamePosition_Call {
	return &OpenChecker_CheckSamePosition_Call{Call: _e.mock.On("CheckSamePosition", ctx, msg)}
}

func (_c *OpenChecker_CheckSamePosition_Call) Run(run func(ctx types.Context, msg *leveragelptypes.MsgOpen)) *OpenChecker_CheckSamePosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*leveragelptypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_CheckSamePosition_Call) Return(_a0 *leveragelptypes.Position) *OpenChecker_CheckSamePosition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckSamePosition_Call) RunAndReturn(run func(types.Context, *leveragelptypes.MsgOpen) *leveragelptypes.Position) *OpenChecker_CheckSamePosition_Call {
	_c.Call.Return(run)
	return _c
}

// CheckUserAuthorization provides a mock function with given fields: ctx, msg
func (_m *OpenChecker) CheckUserAuthorization(ctx types.Context, msg *leveragelptypes.MsgOpen) error {
	ret := _m.Called(ctx, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *leveragelptypes.MsgOpen) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_CheckUserAuthorization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckUserAuthorization'
type OpenChecker_CheckUserAuthorization_Call struct {
	*mock.Call
}

// CheckUserAuthorization is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *leveragelptypes.MsgOpen
func (_e *OpenChecker_Expecter) CheckUserAuthorization(ctx interface{}, msg interface{}) *OpenChecker_CheckUserAuthorization_Call {
	return &OpenChecker_CheckUserAuthorization_Call{Call: _e.mock.On("CheckUserAuthorization", ctx, msg)}
}

func (_c *OpenChecker_CheckUserAuthorization_Call) Run(run func(ctx types.Context, msg *leveragelptypes.MsgOpen)) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*leveragelptypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_CheckUserAuthorization_Call) Return(_a0 error) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_CheckUserAuthorization_Call) RunAndReturn(run func(types.Context, *leveragelptypes.MsgOpen) error) *OpenChecker_CheckUserAuthorization_Call {
	_c.Call.Return(run)
	return _c
}

// EmitOpenEvent provides a mock function with given fields: ctx, position
func (_m *OpenChecker) EmitOpenEvent(ctx types.Context, position *leveragelptypes.Position) {
	_m.Called(ctx, position)
}

// OpenChecker_EmitOpenEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmitOpenEvent'
type OpenChecker_EmitOpenEvent_Call struct {
	*mock.Call
}

// EmitOpenEvent is a helper method to define mock.On call
//   - ctx types.Context
//   - position *leveragelptypes.Position
func (_e *OpenChecker_Expecter) EmitOpenEvent(ctx interface{}, position interface{}) *OpenChecker_EmitOpenEvent_Call {
	return &OpenChecker_EmitOpenEvent_Call{Call: _e.mock.On("EmitOpenEvent", ctx, position)}
}

func (_c *OpenChecker_EmitOpenEvent_Call) Run(run func(ctx types.Context, position *leveragelptypes.Position)) *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*leveragelptypes.Position))
	})
	return _c
}

func (_c *OpenChecker_EmitOpenEvent_Call) Return() *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *OpenChecker_EmitOpenEvent_Call) RunAndReturn(run func(types.Context, *leveragelptypes.Position)) *OpenChecker_EmitOpenEvent_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxOpenPositions provides a mock function with given fields: ctx
func (_m *OpenChecker) GetMaxOpenPositions(ctx types.Context) uint64 {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(types.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// OpenChecker_GetMaxOpenPositions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxOpenPositions'
type OpenChecker_GetMaxOpenPositions_Call struct {
	*mock.Call
}

// GetMaxOpenPositions is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenChecker_Expecter) GetMaxOpenPositions(ctx interface{}) *OpenChecker_GetMaxOpenPositions_Call {
	return &OpenChecker_GetMaxOpenPositions_Call{Call: _e.mock.On("GetMaxOpenPositions", ctx)}
}

func (_c *OpenChecker_GetMaxOpenPositions_Call) Run(run func(ctx types.Context)) *OpenChecker_GetMaxOpenPositions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenChecker_GetMaxOpenPositions_Call) Return(_a0 uint64) *OpenChecker_GetMaxOpenPositions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_GetMaxOpenPositions_Call) RunAndReturn(run func(types.Context) uint64) *OpenChecker_GetMaxOpenPositions_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenPositionCount provides a mock function with given fields: ctx
func (_m *OpenChecker) GetOpenPositionCount(ctx types.Context) uint64 {
	ret := _m.Called(ctx)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(types.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// OpenChecker_GetOpenPositionCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenPositionCount'
type OpenChecker_GetOpenPositionCount_Call struct {
	*mock.Call
}

// GetOpenPositionCount is a helper method to define mock.On call
//   - ctx types.Context
func (_e *OpenChecker_Expecter) GetOpenPositionCount(ctx interface{}) *OpenChecker_GetOpenPositionCount_Call {
	return &OpenChecker_GetOpenPositionCount_Call{Call: _e.mock.On("GetOpenPositionCount", ctx)}
}

func (_c *OpenChecker_GetOpenPositionCount_Call) Run(run func(ctx types.Context)) *OpenChecker_GetOpenPositionCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context))
	})
	return _c
}

func (_c *OpenChecker_GetOpenPositionCount_Call) Return(_a0 uint64) *OpenChecker_GetOpenPositionCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_GetOpenPositionCount_Call) RunAndReturn(run func(types.Context) uint64) *OpenChecker_GetOpenPositionCount_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLong provides a mock function with given fields: ctx, poolId, msg
func (_m *OpenChecker) OpenLong(ctx types.Context, poolId uint64, msg *leveragelptypes.MsgOpen) (*leveragelptypes.Position, error) {
	ret := _m.Called(ctx, poolId, msg)

	var r0 *leveragelptypes.Position
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *leveragelptypes.MsgOpen) (*leveragelptypes.Position, error)); ok {
		return rf(ctx, poolId, msg)
	}
	if rf, ok := ret.Get(0).(func(types.Context, uint64, *leveragelptypes.MsgOpen) *leveragelptypes.Position); ok {
		r0 = rf(ctx, poolId, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*leveragelptypes.Position)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, uint64, *leveragelptypes.MsgOpen) error); ok {
		r1 = rf(ctx, poolId, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenChecker_OpenLong_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLong'
type OpenChecker_OpenLong_Call struct {
	*mock.Call
}

// OpenLong is a helper method to define mock.On call
//   - ctx types.Context
//   - poolId uint64
//   - msg *leveragelptypes.MsgOpen
func (_e *OpenChecker_Expecter) OpenLong(ctx interface{}, poolId interface{}, msg interface{}) *OpenChecker_OpenLong_Call {
	return &OpenChecker_OpenLong_Call{Call: _e.mock.On("OpenLong", ctx, poolId, msg)}
}

func (_c *OpenChecker_OpenLong_Call) Run(run func(ctx types.Context, poolId uint64, msg *leveragelptypes.MsgOpen)) *OpenChecker_OpenLong_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(uint64), args[2].(*leveragelptypes.MsgOpen))
	})
	return _c
}

func (_c *OpenChecker_OpenLong_Call) Return(_a0 *leveragelptypes.Position, _a1 error) *OpenChecker_OpenLong_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpenChecker_OpenLong_Call) RunAndReturn(run func(types.Context, uint64, *leveragelptypes.MsgOpen) (*leveragelptypes.Position, error)) *OpenChecker_OpenLong_Call {
	_c.Call.Return(run)
	return _c
}

// SetPosition provides a mock function with given fields: ctx, position
func (_m *OpenChecker) SetPosition(ctx types.Context, position *leveragelptypes.Position) error {
	ret := _m.Called(ctx, position)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *leveragelptypes.Position) error); ok {
		r0 = rf(ctx, position)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenChecker_SetPosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPosition'
type OpenChecker_SetPosition_Call struct {
	*mock.Call
}

// SetPosition is a helper method to define mock.On call
//   - ctx types.Context
//   - position *leveragelptypes.Position
func (_e *OpenChecker_Expecter) SetPosition(ctx interface{}, position interface{}) *OpenChecker_SetPosition_Call {
	return &OpenChecker_SetPosition_Call{Call: _e.mock.On("SetPosition", ctx, position)}
}

func (_c *OpenChecker_SetPosition_Call) Run(run func(ctx types.Context, position *leveragelptypes.Position)) *OpenChecker_SetPosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*leveragelptypes.Position))
	})
	return _c
}

func (_c *OpenChecker_SetPosition_Call) Return(_a0 error) *OpenChecker_SetPosition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OpenChecker_SetPosition_Call) RunAndReturn(run func(types.Context, *leveragelptypes.Position) error) *OpenChecker_SetPosition_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpenChecker creates a new instance of OpenChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenChecker {
	mock := &OpenChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
