// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/stablestake/pool.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Pool struct {
	DepositDenom         string                      `protobuf:"bytes,1,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	InterestRate         cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=interest_rate,json=interestRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"interest_rate"`
	InterestRateMax      cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=interest_rate_max,json=interestRateMax,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"interest_rate_max"`
	InterestRateMin      cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=interest_rate_min,json=interestRateMin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"interest_rate_min"`
	InterestRateIncrease cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=interest_rate_increase,json=interestRateIncrease,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"interest_rate_increase"`
	InterestRateDecrease cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=interest_rate_decrease,json=interestRateDecrease,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"interest_rate_decrease"`
	HealthGainFactor     cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=health_gain_factor,json=healthGainFactor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"health_gain_factor"`
	TotalValue           cosmossdk_io_math.Int       `protobuf:"bytes,8,opt,name=total_value,json=totalValue,proto3,customtype=cosmossdk.io/math.Int" json:"total_value"`
	MaxLeverageRatio     cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=max_leverage_ratio,json=maxLeverageRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_leverage_ratio"`
	MaxWithdrawRatio     cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=max_withdraw_ratio,json=maxWithdrawRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"max_withdraw_ratio"`
	Id                   uint64                      `protobuf:"varint,11,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f438111f72086e2f, []int{0}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

func (m *Pool) GetDepositDenom() string {
	if m != nil {
		return m.DepositDenom
	}
	return ""
}

func (m *Pool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AmmPool struct {
	Id               uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TotalLiabilities github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_liabilities,json=totalLiabilities,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_liabilities"`
}

func (m *AmmPool) Reset()         { *m = AmmPool{} }
func (m *AmmPool) String() string { return proto.CompactTextString(m) }
func (*AmmPool) ProtoMessage()    {}
func (*AmmPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_f438111f72086e2f, []int{1}
}
func (m *AmmPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmmPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmmPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmmPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmmPool.Merge(m, src)
}
func (m *AmmPool) XXX_Size() int {
	return m.Size()
}
func (m *AmmPool) XXX_DiscardUnknown() {
	xxx_messageInfo_AmmPool.DiscardUnknown(m)
}

var xxx_messageInfo_AmmPool proto.InternalMessageInfo

func (m *AmmPool) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AmmPool) GetTotalLiabilities() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalLiabilities
	}
	return nil
}

func init() {
	proto.RegisterType((*Pool)(nil), "elys.stablestake.Pool")
	proto.RegisterType((*AmmPool)(nil), "elys.stablestake.AmmPool")
}

func init() { proto.RegisterFile("elys/stablestake/pool.proto", fileDescriptor_f438111f72086e2f) }

var fileDescriptor_f438111f72086e2f = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xd1, 0x6a, 0x13, 0x4d,
	0x14, 0xc7, 0xb3, 0x69, 0xbf, 0xf6, 0xeb, 0xa4, 0xd5, 0x74, 0xa9, 0xb2, 0x6d, 0x61, 0x13, 0xea,
	0x4d, 0x40, 0xb2, 0xdb, 0xe8, 0x13, 0x18, 0x83, 0x12, 0x89, 0x20, 0x7b, 0x51, 0x41, 0x90, 0xe5,
	0xec, 0xee, 0x71, 0x33, 0x64, 0x77, 0x26, 0xec, 0x4c, 0x93, 0xcd, 0x5b, 0x08, 0xfa, 0x14, 0x5e,
	0xfb, 0x10, 0xbd, 0x2c, 0x5e, 0x89, 0x17, 0x55, 0x92, 0x17, 0x91, 0xd9, 0x9d, 0x60, 0x42, 0xbd,
	0x8a, 0xbd, 0xda, 0x9d, 0xf9, 0xcf, 0xfc, 0x7e, 0x87, 0x81, 0x73, 0xc8, 0x29, 0x26, 0x33, 0xe1,
	0x0a, 0x09, 0x41, 0x82, 0x42, 0xc2, 0x08, 0xdd, 0x31, 0xe7, 0x89, 0x33, 0xce, 0xb8, 0xe4, 0x66,
	0x5d, 0x85, 0xce, 0x4a, 0x78, 0x72, 0x14, 0xf3, 0x98, 0x17, 0xa1, 0xab, 0xfe, 0xca, 0x73, 0x27,
	0xc7, 0x21, 0x17, 0x29, 0x17, 0x7e, 0x19, 0x94, 0x0b, 0x1d, 0xd9, 0xe5, 0xca, 0x0d, 0x40, 0xa0,
	0x3b, 0xe9, 0x04, 0x28, 0xa1, 0xe3, 0x86, 0x9c, 0xb2, 0x32, 0x3f, 0xfb, 0xbc, 0x4b, 0xb6, 0xdf,
	0x70, 0x9e, 0x98, 0x8f, 0xc8, 0x41, 0x84, 0x63, 0x2e, 0xa8, 0xf4, 0x23, 0x64, 0x3c, 0xb5, 0x8c,
	0xa6, 0xd1, 0xda, 0xf3, 0xf6, 0xf5, 0x66, 0x4f, 0xed, 0x99, 0x17, 0xe4, 0x80, 0x32, 0x89, 0x19,
	0x0a, 0xe9, 0x67, 0x20, 0xd1, 0xaa, 0xaa, 0x43, 0xdd, 0xce, 0xd5, 0x4d, 0xa3, 0xf2, 0xe3, 0xa6,
	0x71, 0x5a, 0xca, 0x44, 0x34, 0x72, 0x28, 0x77, 0x53, 0x90, 0x43, 0x67, 0x80, 0x31, 0x84, 0xb3,
	0x1e, 0x86, 0xdf, 0xbe, 0xb6, 0x89, 0xae, 0xac, 0x87, 0xa1, 0xb7, 0xbf, 0xe4, 0x78, 0x20, 0xd1,
	0x7c, 0x4f, 0x0e, 0xd7, 0xb8, 0x7e, 0x0a, 0xb9, 0xb5, 0xb5, 0x29, 0xfb, 0xfe, 0x2a, 0xfb, 0x35,
	0xe4, 0x7f, 0xc1, 0x53, 0x66, 0x6d, 0xdf, 0x0d, 0x9e, 0x32, 0x33, 0x26, 0x0f, 0xd7, 0xf1, 0x94,
	0x85, 0x19, 0x82, 0x40, 0xeb, 0xbf, 0x4d, 0x1d, 0x47, 0xab, 0x8e, 0xbe, 0xc6, 0xdd, 0x16, 0x45,
	0xa8, 0x45, 0x3b, 0x77, 0x22, 0xea, 0x69, 0x9c, 0xe9, 0x13, 0x73, 0x88, 0x90, 0xc8, 0xa1, 0x1f,
	0x03, 0x65, 0xfe, 0x07, 0x08, 0x25, 0xcf, 0xac, 0xdd, 0x4d, 0x25, 0xf5, 0x12, 0xf6, 0x12, 0x28,
	0x7b, 0x51, 0xa0, 0xcc, 0x01, 0xa9, 0x49, 0x2e, 0x21, 0xf1, 0x27, 0x90, 0x5c, 0xa2, 0xf5, 0x7f,
	0x41, 0x7e, 0xac, 0xc9, 0x0f, 0x6e, 0x93, 0xfb, 0x4c, 0xae, 0x30, 0xfb, 0x4c, 0x7a, 0xa4, 0xb8,
	0x7f, 0xa1, 0xae, 0xab, 0x72, 0x53, 0xc8, 0xfd, 0x04, 0x27, 0x98, 0x41, 0x8c, 0xea, 0x6d, 0x28,
	0xb7, 0xf6, 0x36, 0x2e, 0x37, 0x85, 0x7c, 0xa0, 0x59, 0x9e, 0x42, 0x2d, 0x05, 0x53, 0x2a, 0x87,
	0x51, 0x06, 0x53, 0x2d, 0x20, 0xff, 0x22, 0x78, 0xab, 0x59, 0xa5, 0xe0, 0x1e, 0xa9, 0xd2, 0xc8,
	0xaa, 0x35, 0x8d, 0xd6, 0xb6, 0x57, 0xa5, 0xd1, 0xd9, 0x27, 0x83, 0xec, 0x3e, 0x4b, 0xd3, 0xa2,
	0x33, 0xcb, 0xcc, 0x58, 0x66, 0x66, 0x4e, 0x0e, 0xcb, 0xb7, 0x4b, 0x28, 0x04, 0x34, 0xa1, 0x92,
	0xa2, 0xb0, 0xaa, 0xcd, 0xad, 0x56, 0xed, 0xc9, 0xb1, 0xa3, 0x2d, 0xaa, 0xdd, 0x1d, 0xdd, 0xee,
	0xce, 0x73, 0x4e, 0x59, 0xf7, 0x5c, 0x95, 0xf9, 0xe5, 0x67, 0xa3, 0x15, 0x53, 0x39, 0xbc, 0x0c,
	0x9c, 0x90, 0xa7, 0x7a, 0x52, 0xe8, 0x4f, 0x5b, 0x44, 0x23, 0x57, 0xce, 0xc6, 0x28, 0x8a, 0x0b,
	0xc2, 0xab, 0x17, 0x96, 0xc1, 0x1f, 0x49, 0xf7, 0xd5, 0xd5, 0xdc, 0x36, 0xae, 0xe7, 0xb6, 0xf1,
	0x6b, 0x6e, 0x1b, 0x1f, 0x17, 0x76, 0xe5, 0x7a, 0x61, 0x57, 0xbe, 0x2f, 0xec, 0xca, 0xbb, 0xf3,
	0x15, 0xaa, 0x1a, 0x5a, 0x6d, 0x86, 0x72, 0xca, 0xb3, 0x51, 0xb1, 0x70, 0xf3, 0xb5, 0x01, 0x57,
	0x38, 0x82, 0x9d, 0x62, 0xfe, 0x3c, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xda, 0xbe, 0x1f, 0xb0,
	0x01, 0x05, 0x00, 0x00,
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.MaxWithdrawRatio.Size()
		i -= size
		if _, err := m.MaxWithdrawRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.MaxLeverageRatio.Size()
		i -= size
		if _, err := m.MaxLeverageRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.TotalValue.Size()
		i -= size
		if _, err := m.TotalValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.HealthGainFactor.Size()
		i -= size
		if _, err := m.HealthGainFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.InterestRateDecrease.Size()
		i -= size
		if _, err := m.InterestRateDecrease.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.InterestRateIncrease.Size()
		i -= size
		if _, err := m.InterestRateIncrease.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.InterestRateMin.Size()
		i -= size
		if _, err := m.InterestRateMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.InterestRateMax.Size()
		i -= size
		if _, err := m.InterestRateMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.InterestRate.Size()
		i -= size
		if _, err := m.InterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DepositDenom) > 0 {
		i -= len(m.DepositDenom)
		copy(dAtA[i:], m.DepositDenom)
		i = encodeVarintPool(dAtA, i, uint64(len(m.DepositDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AmmPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmmPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmmPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalLiabilities) > 0 {
		for iNdEx := len(m.TotalLiabilities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalLiabilities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPool(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DepositDenom)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.InterestRate.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.InterestRateMax.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.InterestRateMin.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.InterestRateIncrease.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.InterestRateDecrease.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.HealthGainFactor.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.TotalValue.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.MaxLeverageRatio.Size()
	n += 1 + l + sovPool(uint64(l))
	l = m.MaxWithdrawRatio.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	return n
}

func (m *AmmPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPool(uint64(m.Id))
	}
	if len(m.TotalLiabilities) > 0 {
		for _, e := range m.TotalLiabilities {
			l = e.Size()
			n += 1 + l + sovPool(uint64(l))
		}
	}
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRateMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRateMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRateMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRateMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRateIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRateIncrease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestRateDecrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestRateDecrease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthGainFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HealthGainFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeverageRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxLeverageRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWithdrawRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxWithdrawRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmmPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmmPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmmPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalLiabilities = append(m.TotalLiabilities, types.Coin{})
			if err := m.TotalLiabilities[len(m.TotalLiabilities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
