// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tradeshield/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPendingSpotOrderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPendingSpotOrderRequest) Reset()         { *m = QueryGetPendingSpotOrderRequest{} }
func (m *QueryGetPendingSpotOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingSpotOrderRequest) ProtoMessage()    {}
func (*QueryGetPendingSpotOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{2}
}
func (m *QueryGetPendingSpotOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingSpotOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingSpotOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingSpotOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingSpotOrderRequest.Merge(m, src)
}
func (m *QueryGetPendingSpotOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingSpotOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingSpotOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingSpotOrderRequest proto.InternalMessageInfo

func (m *QueryGetPendingSpotOrderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPendingSpotOrderResponse struct {
	PendingSpotOrder SpotOrder `protobuf:"bytes,1,opt,name=pending_spot_order,json=pendingSpotOrder,proto3" json:"pending_spot_order"`
}

func (m *QueryGetPendingSpotOrderResponse) Reset()         { *m = QueryGetPendingSpotOrderResponse{} }
func (m *QueryGetPendingSpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingSpotOrderResponse) ProtoMessage()    {}
func (*QueryGetPendingSpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{3}
}
func (m *QueryGetPendingSpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingSpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingSpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingSpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingSpotOrderResponse.Merge(m, src)
}
func (m *QueryGetPendingSpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingSpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingSpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingSpotOrderResponse proto.InternalMessageInfo

func (m *QueryGetPendingSpotOrderResponse) GetPendingSpotOrder() SpotOrder {
	if m != nil {
		return m.PendingSpotOrder
	}
	return SpotOrder{}
}

type QueryAllPendingSpotOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingSpotOrderRequest) Reset()         { *m = QueryAllPendingSpotOrderRequest{} }
func (m *QueryAllPendingSpotOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingSpotOrderRequest) ProtoMessage()    {}
func (*QueryAllPendingSpotOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{4}
}
func (m *QueryAllPendingSpotOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingSpotOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingSpotOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingSpotOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingSpotOrderRequest.Merge(m, src)
}
func (m *QueryAllPendingSpotOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingSpotOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingSpotOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingSpotOrderRequest proto.InternalMessageInfo

func (m *QueryAllPendingSpotOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingSpotOrderResponse struct {
	PendingSpotOrder []SpotOrder         `protobuf:"bytes,1,rep,name=pending_spot_order,json=pendingSpotOrder,proto3" json:"pending_spot_order"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingSpotOrderResponse) Reset()         { *m = QueryAllPendingSpotOrderResponse{} }
func (m *QueryAllPendingSpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingSpotOrderResponse) ProtoMessage()    {}
func (*QueryAllPendingSpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{5}
}
func (m *QueryAllPendingSpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingSpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingSpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingSpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingSpotOrderResponse.Merge(m, src)
}
func (m *QueryAllPendingSpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingSpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingSpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingSpotOrderResponse proto.InternalMessageInfo

func (m *QueryAllPendingSpotOrderResponse) GetPendingSpotOrder() []SpotOrder {
	if m != nil {
		return m.PendingSpotOrder
	}
	return nil
}

func (m *QueryAllPendingSpotOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPendingPerpetualOrderRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPendingPerpetualOrderRequest) Reset()         { *m = QueryGetPendingPerpetualOrderRequest{} }
func (m *QueryGetPendingPerpetualOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingPerpetualOrderRequest) ProtoMessage()    {}
func (*QueryGetPendingPerpetualOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{6}
}
func (m *QueryGetPendingPerpetualOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingPerpetualOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingPerpetualOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingPerpetualOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingPerpetualOrderRequest.Merge(m, src)
}
func (m *QueryGetPendingPerpetualOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingPerpetualOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingPerpetualOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingPerpetualOrderRequest proto.InternalMessageInfo

func (m *QueryGetPendingPerpetualOrderRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPendingPerpetualOrderResponse struct {
	PendingPerpetualOrder PerpetualOrder `protobuf:"bytes,1,opt,name=pending_perpetual_order,json=pendingPerpetualOrder,proto3" json:"pending_perpetual_order"`
}

func (m *QueryGetPendingPerpetualOrderResponse) Reset()         { *m = QueryGetPendingPerpetualOrderResponse{} }
func (m *QueryGetPendingPerpetualOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPendingPerpetualOrderResponse) ProtoMessage()    {}
func (*QueryGetPendingPerpetualOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{7}
}
func (m *QueryGetPendingPerpetualOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPendingPerpetualOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPendingPerpetualOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPendingPerpetualOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPendingPerpetualOrderResponse.Merge(m, src)
}
func (m *QueryGetPendingPerpetualOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPendingPerpetualOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPendingPerpetualOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPendingPerpetualOrderResponse proto.InternalMessageInfo

func (m *QueryGetPendingPerpetualOrderResponse) GetPendingPerpetualOrder() PerpetualOrder {
	if m != nil {
		return m.PendingPerpetualOrder
	}
	return PerpetualOrder{}
}

type QueryAllPendingPerpetualOrderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingPerpetualOrderRequest) Reset()         { *m = QueryAllPendingPerpetualOrderRequest{} }
func (m *QueryAllPendingPerpetualOrderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingPerpetualOrderRequest) ProtoMessage()    {}
func (*QueryAllPendingPerpetualOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{8}
}
func (m *QueryAllPendingPerpetualOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingPerpetualOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingPerpetualOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingPerpetualOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingPerpetualOrderRequest.Merge(m, src)
}
func (m *QueryAllPendingPerpetualOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingPerpetualOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingPerpetualOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingPerpetualOrderRequest proto.InternalMessageInfo

func (m *QueryAllPendingPerpetualOrderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPendingPerpetualOrderResponse struct {
	PendingPerpetualOrder []PerpetualOrder    `protobuf:"bytes,1,rep,name=pending_perpetual_order,json=pendingPerpetualOrder,proto3" json:"pending_perpetual_order"`
	Pagination            *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPendingPerpetualOrderResponse) Reset()         { *m = QueryAllPendingPerpetualOrderResponse{} }
func (m *QueryAllPendingPerpetualOrderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingPerpetualOrderResponse) ProtoMessage()    {}
func (*QueryAllPendingPerpetualOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{9}
}
func (m *QueryAllPendingPerpetualOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingPerpetualOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingPerpetualOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingPerpetualOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingPerpetualOrderResponse.Merge(m, src)
}
func (m *QueryAllPendingPerpetualOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingPerpetualOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingPerpetualOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingPerpetualOrderResponse proto.InternalMessageInfo

func (m *QueryAllPendingPerpetualOrderResponse) GetPendingPerpetualOrder() []PerpetualOrder {
	if m != nil {
		return m.PendingPerpetualOrder
	}
	return nil
}

func (m *QueryAllPendingPerpetualOrderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPendingPerpetualOrderForAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Status  Status `protobuf:"varint,2,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
}

func (m *QueryPendingPerpetualOrderForAddressRequest) Reset() {
	*m = QueryPendingPerpetualOrderForAddressRequest{}
}
func (m *QueryPendingPerpetualOrderForAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPendingPerpetualOrderForAddressRequest) ProtoMessage() {}
func (*QueryPendingPerpetualOrderForAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{10}
}
func (m *QueryPendingPerpetualOrderForAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingPerpetualOrderForAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingPerpetualOrderForAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingPerpetualOrderForAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingPerpetualOrderForAddressRequest.Merge(m, src)
}
func (m *QueryPendingPerpetualOrderForAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingPerpetualOrderForAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingPerpetualOrderForAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingPerpetualOrderForAddressRequest proto.InternalMessageInfo

func (m *QueryPendingPerpetualOrderForAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryPendingPerpetualOrderForAddressRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

type QueryPendingPerpetualOrderForAddressResponse struct {
	PendingPerpetualOrders []PerpetualOrder `protobuf:"bytes,1,rep,name=pending_perpetual_orders,json=pendingPerpetualOrders,proto3" json:"pending_perpetual_orders"`
}

func (m *QueryPendingPerpetualOrderForAddressResponse) Reset() {
	*m = QueryPendingPerpetualOrderForAddressResponse{}
}
func (m *QueryPendingPerpetualOrderForAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPendingPerpetualOrderForAddressResponse) ProtoMessage() {}
func (*QueryPendingPerpetualOrderForAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{11}
}
func (m *QueryPendingPerpetualOrderForAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingPerpetualOrderForAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingPerpetualOrderForAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingPerpetualOrderForAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingPerpetualOrderForAddressResponse.Merge(m, src)
}
func (m *QueryPendingPerpetualOrderForAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingPerpetualOrderForAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingPerpetualOrderForAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingPerpetualOrderForAddressResponse proto.InternalMessageInfo

func (m *QueryPendingPerpetualOrderForAddressResponse) GetPendingPerpetualOrders() []PerpetualOrder {
	if m != nil {
		return m.PendingPerpetualOrders
	}
	return nil
}

type QueryPendingSpotOrderForAddressRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Status  Status `protobuf:"varint,2,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
}

func (m *QueryPendingSpotOrderForAddressRequest) Reset() {
	*m = QueryPendingSpotOrderForAddressRequest{}
}
func (m *QueryPendingSpotOrderForAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSpotOrderForAddressRequest) ProtoMessage()    {}
func (*QueryPendingSpotOrderForAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{12}
}
func (m *QueryPendingSpotOrderForAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSpotOrderForAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSpotOrderForAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSpotOrderForAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSpotOrderForAddressRequest.Merge(m, src)
}
func (m *QueryPendingSpotOrderForAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSpotOrderForAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSpotOrderForAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSpotOrderForAddressRequest proto.InternalMessageInfo

func (m *QueryPendingSpotOrderForAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryPendingSpotOrderForAddressRequest) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

type QueryPendingSpotOrderForAddressResponse struct {
	PendingSpotOrders []SpotOrder `protobuf:"bytes,1,rep,name=pending_spot_orders,json=pendingSpotOrders,proto3" json:"pending_spot_orders"`
}

func (m *QueryPendingSpotOrderForAddressResponse) Reset() {
	*m = QueryPendingSpotOrderForAddressResponse{}
}
func (m *QueryPendingSpotOrderForAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingSpotOrderForAddressResponse) ProtoMessage()    {}
func (*QueryPendingSpotOrderForAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b92ce2c2fb85355, []int{13}
}
func (m *QueryPendingSpotOrderForAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingSpotOrderForAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingSpotOrderForAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingSpotOrderForAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingSpotOrderForAddressResponse.Merge(m, src)
}
func (m *QueryPendingSpotOrderForAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingSpotOrderForAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingSpotOrderForAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingSpotOrderForAddressResponse proto.InternalMessageInfo

func (m *QueryPendingSpotOrderForAddressResponse) GetPendingSpotOrders() []SpotOrder {
	if m != nil {
		return m.PendingSpotOrders
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.tradeshield.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.tradeshield.QueryParamsResponse")
	proto.RegisterType((*QueryGetPendingSpotOrderRequest)(nil), "elys.tradeshield.QueryGetPendingSpotOrderRequest")
	proto.RegisterType((*QueryGetPendingSpotOrderResponse)(nil), "elys.tradeshield.QueryGetPendingSpotOrderResponse")
	proto.RegisterType((*QueryAllPendingSpotOrderRequest)(nil), "elys.tradeshield.QueryAllPendingSpotOrderRequest")
	proto.RegisterType((*QueryAllPendingSpotOrderResponse)(nil), "elys.tradeshield.QueryAllPendingSpotOrderResponse")
	proto.RegisterType((*QueryGetPendingPerpetualOrderRequest)(nil), "elys.tradeshield.QueryGetPendingPerpetualOrderRequest")
	proto.RegisterType((*QueryGetPendingPerpetualOrderResponse)(nil), "elys.tradeshield.QueryGetPendingPerpetualOrderResponse")
	proto.RegisterType((*QueryAllPendingPerpetualOrderRequest)(nil), "elys.tradeshield.QueryAllPendingPerpetualOrderRequest")
	proto.RegisterType((*QueryAllPendingPerpetualOrderResponse)(nil), "elys.tradeshield.QueryAllPendingPerpetualOrderResponse")
	proto.RegisterType((*QueryPendingPerpetualOrderForAddressRequest)(nil), "elys.tradeshield.QueryPendingPerpetualOrderForAddressRequest")
	proto.RegisterType((*QueryPendingPerpetualOrderForAddressResponse)(nil), "elys.tradeshield.QueryPendingPerpetualOrderForAddressResponse")
	proto.RegisterType((*QueryPendingSpotOrderForAddressRequest)(nil), "elys.tradeshield.QueryPendingSpotOrderForAddressRequest")
	proto.RegisterType((*QueryPendingSpotOrderForAddressResponse)(nil), "elys.tradeshield.QueryPendingSpotOrderForAddressResponse")
}

func init() { proto.RegisterFile("elys/tradeshield/query.proto", fileDescriptor_0b92ce2c2fb85355) }

var fileDescriptor_0b92ce2c2fb85355 = []byte{
	// 818 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x5f, 0x4b, 0x14, 0x5d,
	0x18, 0xdf, 0x59, 0x7d, 0xf7, 0xe5, 0x7d, 0x04, 0xf1, 0x3d, 0xea, 0xfb, 0x2e, 0x93, 0xad, 0x32,
	0xf8, 0x27, 0x2a, 0x67, 0x5c, 0x85, 0x4d, 0x09, 0x05, 0x0d, 0x94, 0xa2, 0x72, 0x5d, 0xbb, 0xea,
	0xa2, 0x6d, 0xd6, 0x39, 0x8d, 0x43, 0xe3, 0x9c, 0x71, 0xce, 0xd9, 0x6a, 0x31, 0x21, 0x22, 0xe8,
	0x56, 0xe8, 0xc3, 0x44, 0xd0, 0x07, 0x10, 0x22, 0x10, 0xba, 0xe9, 0x2a, 0x62, 0xed, 0x33, 0x74,
	0x1d, 0x7b, 0xe6, 0xac, 0xba, 0xf3, 0xc7, 0xd9, 0xdd, 0xec, 0x6e, 0x66, 0x9e, 0x7f, 0xbf, 0xdf,
	0xf3, 0x9c, 0xf3, 0x7b, 0x18, 0x18, 0xc1, 0x76, 0x8d, 0x6a, 0xcc, 0xd3, 0x0d, 0x4c, 0xb7, 0x2d,
	0x6c, 0x1b, 0xda, 0x6e, 0x15, 0x7b, 0x35, 0xd5, 0xf5, 0x08, 0x23, 0x68, 0xa0, 0x61, 0x55, 0xcf,
	0x58, 0xe5, 0x21, 0x93, 0x98, 0x84, 0x1b, 0xb5, 0xc6, 0x93, 0xef, 0x27, 0x8f, 0x98, 0x84, 0x98,
	0x36, 0xd6, 0x74, 0xd7, 0xd2, 0x74, 0xc7, 0x21, 0x4c, 0x67, 0x16, 0x71, 0xa8, 0xb0, 0x5e, 0xdd,
	0x22, 0x74, 0x87, 0x50, 0xad, 0xa2, 0x53, 0xec, 0xa7, 0xd7, 0x9e, 0xe5, 0x2b, 0x98, 0xe9, 0x79,
	0xcd, 0xd5, 0x4d, 0xcb, 0xe1, 0xce, 0xc2, 0xf7, 0x72, 0x08, 0x8f, 0xab, 0x7b, 0xfa, 0x4e, 0x33,
	0x55, 0x18, 0x2e, 0xab, 0xb9, 0x58, 0x58, 0x95, 0x21, 0x40, 0x1b, 0x8d, 0xf4, 0x45, 0x1e, 0x52,
	0xc2, 0xbb, 0x55, 0x4c, 0x99, 0x72, 0x0f, 0x06, 0x5b, 0xbe, 0x52, 0x97, 0x38, 0x14, 0xa3, 0x02,
	0x64, 0xfc, 0xd4, 0x59, 0x69, 0x4c, 0xba, 0xd2, 0x37, 0x9b, 0x55, 0x83, 0x64, 0x55, 0x3f, 0x62,
	0xa5, 0xf7, 0xf0, 0xdb, 0x68, 0xaa, 0x24, 0xbc, 0x95, 0x3c, 0x8c, 0xf2, 0x74, 0x6b, 0x98, 0x15,
	0xb1, 0x63, 0x58, 0x8e, 0xb9, 0xe9, 0x12, 0xb6, 0xee, 0x19, 0xd8, 0x13, 0x15, 0x51, 0x3f, 0xa4,
	0x2d, 0x83, 0xa7, 0xed, 0x2d, 0xa5, 0x2d, 0x43, 0xa1, 0x30, 0x16, 0x1f, 0x22, 0xe0, 0xac, 0x03,
	0x72, 0x7d, 0x5b, 0x99, 0xba, 0x84, 0x95, 0x49, 0xc3, 0x2a, 0xa0, 0x5d, 0x0a, 0x43, 0x3b, 0x49,
	0x20, 0xd0, 0x0d, 0xb8, 0x81, 0xc4, 0x8a, 0x25, 0x70, 0x2e, 0xdb, 0x76, 0x1c, 0xce, 0x55, 0x80,
	0xd3, 0x01, 0x88, 0x5a, 0x93, 0xaa, 0x3f, 0x2d, 0xb5, 0x31, 0x2d, 0xd5, 0x3f, 0x0c, 0x62, 0x5a,
	0x6a, 0x51, 0x37, 0xb1, 0x88, 0x2d, 0x9d, 0x89, 0x54, 0x3e, 0x4a, 0x82, 0x60, 0x64, 0xad, 0x04,
	0x82, 0x3d, 0x5d, 0x12, 0x44, 0x6b, 0x2d, 0xe8, 0xd3, 0x1c, 0xfd, 0x54, 0x22, 0x7a, 0x1f, 0x4d,
	0x0b, 0xfc, 0x02, 0x8c, 0x07, 0xc6, 0x53, 0xc4, 0x9e, 0x8b, 0x59, 0x55, 0xb7, 0xcf, 0x1d, 0xeb,
	0x5b, 0x09, 0x26, 0x12, 0x02, 0x05, 0xf7, 0x47, 0xf0, 0x7f, 0x93, 0xbb, 0xdb, 0xf4, 0x68, 0x99,
	0xf0, 0x58, 0xc4, 0xe1, 0x6b, 0x49, 0x25, 0xba, 0x30, 0xec, 0x46, 0xd5, 0x51, 0x1c, 0xc1, 0xe0,
	0xb4, 0xff, 0xd1, 0x0c, 0x2e, 0x6a, 0xe0, 0x47, 0x4d, 0xe6, 0xf1, 0x05, 0xdb, 0x61, 0xde, 0xf3,
	0xdb, 0xcc, 0x2f, 0xee, 0x10, 0xd4, 0xe0, 0x9a, 0xaf, 0x12, 0x51, 0x65, 0x56, 0x89, 0xb7, 0x6c,
	0x18, 0x1e, 0xa6, 0x4d, 0x51, 0x41, 0x59, 0xf8, 0x5b, 0xf7, 0xbf, 0xf0, 0x36, 0xfe, 0x53, 0x6a,
	0xbe, 0xa2, 0x19, 0xc8, 0x50, 0xa6, 0xb3, 0x2a, 0xe5, 0x68, 0xfa, 0xa3, 0x74, 0x65, 0x93, 0xdb,
	0x4b, 0xc2, 0x4f, 0x39, 0x90, 0xe0, 0x7a, 0x7b, 0xb5, 0x45, 0x53, 0x1f, 0x43, 0x36, 0xa6, 0xa9,
	0xb4, 0xc3, 0xae, 0xfe, 0x17, 0xd9, 0x55, 0xaa, 0x30, 0x98, 0x3c, 0x8b, 0xe8, 0xe4, 0xd2, 0xfd,
	0xd9, 0x46, 0xbc, 0x84, 0xa9, 0xc4, 0xaa, 0xa2, 0x05, 0x1b, 0x30, 0x18, 0x56, 0x13, 0xda, 0xbe,
	0x9c, 0xfc, 0x1b, 0x94, 0x13, 0x3a, 0xfb, 0xaa, 0x0f, 0xfe, 0xe2, 0xe5, 0xd1, 0x1b, 0x09, 0x32,
	0xbe, 0xf6, 0xa3, 0xf1, 0x70, 0xaa, 0xf0, 0x8a, 0x91, 0x27, 0x12, 0xbc, 0x7c, 0xd0, 0xca, 0xf4,
	0xeb, 0x2f, 0x3f, 0xde, 0xa5, 0xa7, 0xd0, 0x84, 0xd6, 0x70, 0x9f, 0x76, 0x30, 0x7b, 0x4e, 0xbc,
	0xa7, 0x5a, 0xcc, 0xca, 0x43, 0x1f, 0x24, 0x18, 0x08, 0xb6, 0x02, 0xe5, 0x63, 0x4a, 0xc5, 0xaf,
	0x23, 0x79, 0xb6, 0x93, 0x10, 0x01, 0x75, 0x89, 0x43, 0x9d, 0x47, 0x85, 0x24, 0xa8, 0xa1, 0x21,
	0x68, 0x7b, 0x96, 0xb1, 0x8f, 0xde, 0x4b, 0x30, 0x18, 0x4c, 0xbe, 0x6c, 0xdb, 0xb1, 0xf0, 0xe3,
	0xb7, 0x54, 0x2c, 0xfc, 0x73, 0x96, 0x8d, 0xb2, 0xc0, 0xe1, 0xcf, 0xa1, 0x7c, 0xc7, 0xf0, 0xd1,
	0x67, 0x09, 0x86, 0x23, 0x2f, 0x22, 0x2a, 0x24, 0xf6, 0x31, 0x52, 0x75, 0xe5, 0x1b, 0x1d, 0xc7,
	0x09, 0x16, 0xb7, 0x38, 0x8b, 0x45, 0x74, 0xb3, 0x4d, 0x16, 0x01, 0x31, 0xf0, 0x27, 0xf1, 0x49,
	0x82, 0x6c, 0x64, 0x99, 0xc6, 0x38, 0x0a, 0x89, 0xbd, 0xed, 0x8c, 0x52, 0xd2, 0x3e, 0xe8, 0xf8,
	0x5c, 0x05, 0x28, 0xa1, 0x9f, 0x12, 0x8c, 0x26, 0xc8, 0x24, 0x5a, 0x8c, 0xbb, 0x8d, 0x6d, 0x49,
	0xbb, 0xbc, 0xd4, 0x6d, 0xb8, 0xa0, 0xf8, 0x80, 0x53, 0xbc, 0x8f, 0xee, 0x76, 0x47, 0xb1, 0xfc,
	0x84, 0x78, 0x65, 0xa1, 0xa1, 0xda, 0x9e, 0x78, 0xd8, 0x47, 0x75, 0x09, 0xe4, 0x78, 0x5d, 0x44,
	0xf3, 0xe7, 0x83, 0x8e, 0x17, 0x70, 0x79, 0xa1, 0x8b, 0x48, 0xc1, 0x74, 0x9d, 0x33, 0xbd, 0x8d,
	0xd6, 0x3a, 0xbe, 0x65, 0xd1, 0x24, 0x57, 0xee, 0x1c, 0xd6, 0x73, 0xd2, 0x51, 0x3d, 0x27, 0x7d,
	0xaf, 0xe7, 0xa4, 0x83, 0xe3, 0x5c, 0xea, 0xe8, 0x38, 0x97, 0xfa, 0x7a, 0x9c, 0x4b, 0x3d, 0x9c,
	0x31, 0x2d, 0xb6, 0x5d, 0xad, 0xa8, 0x5b, 0x64, 0x27, 0xa2, 0xd8, 0x8b, 0xf0, 0x2f, 0x41, 0x25,
	0xc3, 0xff, 0x09, 0xe6, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xee, 0x89, 0x0e, 0x4f, 0xe2, 0x0c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PendingSpotOrder items.
	PendingSpotOrder(ctx context.Context, in *QueryGetPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingSpotOrderResponse, error)
	PendingSpotOrderAll(ctx context.Context, in *QueryAllPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingSpotOrderResponse, error)
	// Queries a list of PendingPerpetualOrder items.
	PendingPerpetualOrder(ctx context.Context, in *QueryGetPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingPerpetualOrderResponse, error)
	PendingPerpetualOrderAll(ctx context.Context, in *QueryAllPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingPerpetualOrderResponse, error)
	// Queries a list of PendingPerpetualOrderForAddress items.
	PendingPerpetualOrderForAddress(ctx context.Context, in *QueryPendingPerpetualOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingPerpetualOrderForAddressResponse, error)
	// Queries a list of PendingSpotOrderForAddress items.
	PendingSpotOrderForAddress(ctx context.Context, in *QueryPendingSpotOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingSpotOrderForAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrder(ctx context.Context, in *QueryGetPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingSpotOrderResponse, error) {
	out := new(QueryGetPendingSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrderAll(ctx context.Context, in *QueryAllPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingSpotOrderResponse, error) {
	out := new(QueryAllPendingSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrder(ctx context.Context, in *QueryGetPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingPerpetualOrderResponse, error) {
	out := new(QueryGetPendingPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrderAll(ctx context.Context, in *QueryAllPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingPerpetualOrderResponse, error) {
	out := new(QueryAllPendingPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrderForAddress(ctx context.Context, in *QueryPendingPerpetualOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingPerpetualOrderForAddressResponse, error) {
	out := new(QueryPendingPerpetualOrderForAddressResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrderForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrderForAddress(ctx context.Context, in *QueryPendingSpotOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingSpotOrderForAddressResponse, error) {
	out := new(QueryPendingSpotOrderForAddressResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrderForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PendingSpotOrder items.
	PendingSpotOrder(context.Context, *QueryGetPendingSpotOrderRequest) (*QueryGetPendingSpotOrderResponse, error)
	PendingSpotOrderAll(context.Context, *QueryAllPendingSpotOrderRequest) (*QueryAllPendingSpotOrderResponse, error)
	// Queries a list of PendingPerpetualOrder items.
	PendingPerpetualOrder(context.Context, *QueryGetPendingPerpetualOrderRequest) (*QueryGetPendingPerpetualOrderResponse, error)
	PendingPerpetualOrderAll(context.Context, *QueryAllPendingPerpetualOrderRequest) (*QueryAllPendingPerpetualOrderResponse, error)
	// Queries a list of PendingPerpetualOrderForAddress items.
	PendingPerpetualOrderForAddress(context.Context, *QueryPendingPerpetualOrderForAddressRequest) (*QueryPendingPerpetualOrderForAddressResponse, error)
	// Queries a list of PendingSpotOrderForAddress items.
	PendingSpotOrderForAddress(context.Context, *QueryPendingSpotOrderForAddressRequest) (*QueryPendingSpotOrderForAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) PendingSpotOrder(ctx context.Context, req *QueryGetPendingSpotOrderRequest) (*QueryGetPendingSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrder not implemented")
}
func (*UnimplementedQueryServer) PendingSpotOrderAll(ctx context.Context, req *QueryAllPendingSpotOrderRequest) (*QueryAllPendingSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrderAll not implemented")
}
func (*UnimplementedQueryServer) PendingPerpetualOrder(ctx context.Context, req *QueryGetPendingPerpetualOrderRequest) (*QueryGetPendingPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrder not implemented")
}
func (*UnimplementedQueryServer) PendingPerpetualOrderAll(ctx context.Context, req *QueryAllPendingPerpetualOrderRequest) (*QueryAllPendingPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrderAll not implemented")
}
func (*UnimplementedQueryServer) PendingPerpetualOrderForAddress(ctx context.Context, req *QueryPendingPerpetualOrderForAddressRequest) (*QueryPendingPerpetualOrderForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrderForAddress not implemented")
}
func (*UnimplementedQueryServer) PendingSpotOrderForAddress(ctx context.Context, req *QueryPendingSpotOrderForAddressRequest) (*QueryPendingSpotOrderForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrderForAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingSpotOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrder(ctx, req.(*QueryGetPendingSpotOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingSpotOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrderAll(ctx, req.(*QueryAllPendingSpotOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingPerpetualOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrder(ctx, req.(*QueryGetPendingPerpetualOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingPerpetualOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrderAll(ctx, req.(*QueryAllPendingPerpetualOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrderForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingPerpetualOrderForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrderForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrderForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrderForAddress(ctx, req.(*QueryPendingPerpetualOrderForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrderForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSpotOrderForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrderForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrderForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrderForAddress(ctx, req.(*QueryPendingSpotOrderForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tradeshield.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PendingSpotOrder",
			Handler:    _Query_PendingSpotOrder_Handler,
		},
		{
			MethodName: "PendingSpotOrderAll",
			Handler:    _Query_PendingSpotOrderAll_Handler,
		},
		{
			MethodName: "PendingPerpetualOrder",
			Handler:    _Query_PendingPerpetualOrder_Handler,
		},
		{
			MethodName: "PendingPerpetualOrderAll",
			Handler:    _Query_PendingPerpetualOrderAll_Handler,
		},
		{
			MethodName: "PendingPerpetualOrderForAddress",
			Handler:    _Query_PendingPerpetualOrderForAddress_Handler,
		},
		{
			MethodName: "PendingSpotOrderForAddress",
			Handler:    _Query_PendingSpotOrderForAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tradeshield/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingSpotOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingSpotOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingSpotOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingSpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingSpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingSpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingSpotOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingSpotOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingSpotOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingSpotOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingSpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingSpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingSpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingSpotOrder) > 0 {
		for iNdEx := len(m.PendingSpotOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingSpotOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingPerpetualOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingPerpetualOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingPerpetualOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPendingPerpetualOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPendingPerpetualOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPendingPerpetualOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PendingPerpetualOrder.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingPerpetualOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingPerpetualOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingPerpetualOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingPerpetualOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingPerpetualOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingPerpetualOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PendingPerpetualOrder) > 0 {
		for iNdEx := len(m.PendingPerpetualOrder) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingPerpetualOrder[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingPerpetualOrderForAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingPerpetualOrderForAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingPerpetualOrderForAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingPerpetualOrderForAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingPerpetualOrderForAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingPerpetualOrderForAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingPerpetualOrders) > 0 {
		for iNdEx := len(m.PendingPerpetualOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingPerpetualOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSpotOrderForAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSpotOrderForAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSpotOrderForAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingSpotOrderForAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingSpotOrderForAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingSpotOrderForAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingSpotOrders) > 0 {
		for iNdEx := len(m.PendingSpotOrders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingSpotOrders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPendingSpotOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPendingSpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingSpotOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingSpotOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingSpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingSpotOrder) > 0 {
		for _, e := range m.PendingSpotOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPendingPerpetualOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPendingPerpetualOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PendingPerpetualOrder.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPendingPerpetualOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPendingPerpetualOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingPerpetualOrder) > 0 {
		for _, e := range m.PendingPerpetualOrder {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingPerpetualOrderForAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryPendingPerpetualOrderForAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingPerpetualOrders) > 0 {
		for _, e := range m.PendingPerpetualOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingSpotOrderForAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovQuery(uint64(m.Status))
	}
	return n
}

func (m *QueryPendingSpotOrderForAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingSpotOrders) > 0 {
		for _, e := range m.PendingSpotOrders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingSpotOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingSpotOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingSpotOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingSpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingSpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingSpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSpotOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingSpotOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingSpotOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingSpotOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingSpotOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingSpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingSpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingSpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSpotOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingSpotOrder = append(m.PendingSpotOrder, SpotOrder{})
			if err := m.PendingSpotOrder[len(m.PendingSpotOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingPerpetualOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingPerpetualOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingPerpetualOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPendingPerpetualOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPendingPerpetualOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPendingPerpetualOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPerpetualOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingPerpetualOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingPerpetualOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingPerpetualOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingPerpetualOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingPerpetualOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingPerpetualOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingPerpetualOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPerpetualOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingPerpetualOrder = append(m.PendingPerpetualOrder, PerpetualOrder{})
			if err := m.PendingPerpetualOrder[len(m.PendingPerpetualOrder)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingPerpetualOrderForAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingPerpetualOrderForAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingPerpetualOrderForAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingPerpetualOrderForAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingPerpetualOrderForAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingPerpetualOrderForAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPerpetualOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingPerpetualOrders = append(m.PendingPerpetualOrders, PerpetualOrder{})
			if err := m.PendingPerpetualOrders[len(m.PendingPerpetualOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSpotOrderForAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSpotOrderForAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSpotOrderForAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingSpotOrderForAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingSpotOrderForAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingSpotOrderForAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingSpotOrders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingSpotOrders = append(m.PendingSpotOrders, SpotOrder{})
			if err := m.PendingSpotOrders[len(m.PendingSpotOrders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
