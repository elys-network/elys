// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tradeshield/types.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Spot order
type SpotOrderType int32

const (
	SpotOrderType_STOPLOSS  SpotOrderType = 0
	SpotOrderType_LIMITSELL SpotOrderType = 1
	SpotOrderType_LIMITBUY  SpotOrderType = 2
	SpotOrderType_MARKETBUY SpotOrderType = 3
)

var SpotOrderType_name = map[int32]string{
	0: "STOPLOSS",
	1: "LIMITSELL",
	2: "LIMITBUY",
	3: "MARKETBUY",
}

var SpotOrderType_value = map[string]int32{
	"STOPLOSS":  0,
	"LIMITSELL": 1,
	"LIMITBUY":  2,
	"MARKETBUY": 3,
}

func (x SpotOrderType) String() string {
	return proto.EnumName(SpotOrderType_name, int32(x))
}

func (SpotOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{0}
}

type Status int32

const (
	Status_PENDING  Status = 0
	Status_EXECUTED Status = 1
	Status_CANCLED  Status = 2
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "EXECUTED",
	2: "CANCLED",
}

var Status_value = map[string]int32{
	"PENDING":  0,
	"EXECUTED": 1,
	"CANCLED":  2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{1}
}

// Perpetual Order
type PerpetualOrderType int32

const (
	PerpetualOrderType_LIMITOPEN    PerpetualOrderType = 0
	PerpetualOrderType_LIMITCLOSE   PerpetualOrderType = 1
	PerpetualOrderType_MARKETOPEN   PerpetualOrderType = 2
	PerpetualOrderType_MARKETCLOSE  PerpetualOrderType = 3
	PerpetualOrderType_STOPLOSSPERP PerpetualOrderType = 4
)

var PerpetualOrderType_name = map[int32]string{
	0: "LIMITOPEN",
	1: "LIMITCLOSE",
	2: "MARKETOPEN",
	3: "MARKETCLOSE",
	4: "STOPLOSSPERP",
}

var PerpetualOrderType_value = map[string]int32{
	"LIMITOPEN":    0,
	"LIMITCLOSE":   1,
	"MARKETOPEN":   2,
	"MARKETCLOSE":  3,
	"STOPLOSSPERP": 4,
}

func (x PerpetualOrderType) String() string {
	return proto.EnumName(PerpetualOrderType_name, int32(x))
}

func (PerpetualOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{2}
}

type PerpetualPosition int32

const (
	PerpetualPosition_UNSPECIFIED PerpetualPosition = 0
	PerpetualPosition_LONG        PerpetualPosition = 1
	PerpetualPosition_SHORT       PerpetualPosition = 2
)

var PerpetualPosition_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "LONG",
	2: "SHORT",
}

var PerpetualPosition_value = map[string]int32{
	"UNSPECIFIED": 0,
	"LONG":        1,
	"SHORT":       2,
}

func (x PerpetualPosition) String() string {
	return proto.EnumName(PerpetualPosition_name, int32(x))
}

func (PerpetualPosition) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{3}
}

type OrderPrice struct {
	BaseDenom  string                                 `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom string                                 `protobuf:"bytes,2,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	Rate       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate"`
}

func (m *OrderPrice) Reset()         { *m = OrderPrice{} }
func (m *OrderPrice) String() string { return proto.CompactTextString(m) }
func (*OrderPrice) ProtoMessage()    {}
func (*OrderPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{0}
}
func (m *OrderPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderPrice.Merge(m, src)
}
func (m *OrderPrice) XXX_Size() int {
	return m.Size()
}
func (m *OrderPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderPrice.DiscardUnknown(m)
}

var xxx_messageInfo_OrderPrice proto.InternalMessageInfo

func (m *OrderPrice) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *OrderPrice) GetQuoteDenom() string {
	if m != nil {
		return m.QuoteDenom
	}
	return ""
}

type Date struct {
	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{1}
}
func (m *Date) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Date.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return m.Size()
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Date) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SpotOrder struct {
	OrderType        SpotOrderType `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3,enum=elys.tradeshield.SpotOrderType" json:"order_type,omitempty"`
	OrderId          uint64        `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderPrice       *OrderPrice   `protobuf:"bytes,3,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`
	OrderAmount      types.Coin    `protobuf:"bytes,4,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount"`
	OwnerAddress     string        `protobuf:"bytes,5,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderTargetDenom string        `protobuf:"bytes,6,opt,name=order_target_denom,json=orderTargetDenom,proto3" json:"order_target_denom,omitempty"`
	Status           Status        `protobuf:"varint,7,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
	Date             *Date         `protobuf:"bytes,8,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *SpotOrder) Reset()         { *m = SpotOrder{} }
func (m *SpotOrder) String() string { return proto.CompactTextString(m) }
func (*SpotOrder) ProtoMessage()    {}
func (*SpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{2}
}
func (m *SpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotOrder.Merge(m, src)
}
func (m *SpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *SpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SpotOrder proto.InternalMessageInfo

func (m *SpotOrder) GetOrderType() SpotOrderType {
	if m != nil {
		return m.OrderType
	}
	return SpotOrderType_STOPLOSS
}

func (m *SpotOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SpotOrder) GetOrderPrice() *OrderPrice {
	if m != nil {
		return m.OrderPrice
	}
	return nil
}

func (m *SpotOrder) GetOrderAmount() types.Coin {
	if m != nil {
		return m.OrderAmount
	}
	return types.Coin{}
}

func (m *SpotOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *SpotOrder) GetOrderTargetDenom() string {
	if m != nil {
		return m.OrderTargetDenom
	}
	return ""
}

func (m *SpotOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *SpotOrder) GetDate() *Date {
	if m != nil {
		return m.Date
	}
	return nil
}

type PerpetualOrder struct {
	OrderId            uint64                                 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerAddress       string                                 `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	PerpetualOrderType PerpetualOrderType                     `protobuf:"varint,3,opt,name=perpetual_order_type,json=perpetualOrderType,proto3,enum=elys.tradeshield.PerpetualOrderType" json:"perpetual_order_type,omitempty"`
	Position           PerpetualPosition                      `protobuf:"varint,4,opt,name=position,proto3,enum=elys.tradeshield.PerpetualPosition" json:"position,omitempty"`
	TriggerPrice       *OrderPrice                            `protobuf:"bytes,5,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`
	Collateral         types.Coin                             `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral"`
	TradingAsset       string                                 `protobuf:"bytes,7,opt,name=trading_asset,json=tradingAsset,proto3" json:"trading_asset,omitempty"`
	Leverage           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,8,opt,name=leverage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"leverage"`
	TakeProfitPrice    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"take_profit_price"`
	PositionId         uint64                                 `protobuf:"varint,10,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Status             Status                                 `protobuf:"varint,11,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
}

func (m *PerpetualOrder) Reset()         { *m = PerpetualOrder{} }
func (m *PerpetualOrder) String() string { return proto.CompactTextString(m) }
func (*PerpetualOrder) ProtoMessage()    {}
func (*PerpetualOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{3}
}
func (m *PerpetualOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualOrder.Merge(m, src)
}
func (m *PerpetualOrder) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualOrder proto.InternalMessageInfo

func (m *PerpetualOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PerpetualOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *PerpetualOrder) GetPerpetualOrderType() PerpetualOrderType {
	if m != nil {
		return m.PerpetualOrderType
	}
	return PerpetualOrderType_LIMITOPEN
}

func (m *PerpetualOrder) GetPosition() PerpetualPosition {
	if m != nil {
		return m.Position
	}
	return PerpetualPosition_UNSPECIFIED
}

func (m *PerpetualOrder) GetTriggerPrice() *OrderPrice {
	if m != nil {
		return m.TriggerPrice
	}
	return nil
}

func (m *PerpetualOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *PerpetualOrder) GetTradingAsset() string {
	if m != nil {
		return m.TradingAsset
	}
	return ""
}

func (m *PerpetualOrder) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *PerpetualOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func init() {
	proto.RegisterEnum("elys.tradeshield.SpotOrderType", SpotOrderType_name, SpotOrderType_value)
	proto.RegisterEnum("elys.tradeshield.Status", Status_name, Status_value)
	proto.RegisterEnum("elys.tradeshield.PerpetualOrderType", PerpetualOrderType_name, PerpetualOrderType_value)
	proto.RegisterEnum("elys.tradeshield.PerpetualPosition", PerpetualPosition_name, PerpetualPosition_value)
	proto.RegisterType((*OrderPrice)(nil), "elys.tradeshield.OrderPrice")
	proto.RegisterType((*Date)(nil), "elys.tradeshield.Date")
	proto.RegisterType((*SpotOrder)(nil), "elys.tradeshield.SpotOrder")
	proto.RegisterType((*PerpetualOrder)(nil), "elys.tradeshield.PerpetualOrder")
}

func init() { proto.RegisterFile("elys/tradeshield/types.proto", fileDescriptor_f02c7f96dfee8f75) }

var fileDescriptor_f02c7f96dfee8f75 = []byte{
	// 843 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xb7, 0x13, 0x37, 0x8d, 0x4f, 0xd2, 0xce, 0xbb, 0x9a, 0xa6, 0x6c, 0x2a, 0x09, 0xea, 0x10,
	0x42, 0x11, 0xb3, 0xbb, 0xf2, 0x84, 0x04, 0x4c, 0xf9, 0x63, 0x86, 0x47, 0x96, 0x58, 0x76, 0x8a,
	0x60, 0x2f, 0x91, 0x1b, 0xdf, 0xb9, 0x56, 0x13, 0x5f, 0x63, 0xdf, 0x6c, 0xf4, 0x43, 0x20, 0xed,
	0x99, 0x4f, 0xb4, 0xc7, 0x3d, 0x22, 0x1e, 0x26, 0xd4, 0x7e, 0x11, 0x74, 0xcf, 0x75, 0xb2, 0x14,
	0x4f, 0xa8, 0xec, 0x29, 0xf7, 0x9c, 0xdf, 0xf9, 0xfb, 0xfb, 0x9d, 0xc8, 0x70, 0x40, 0x17, 0x17,
	0xb9, 0xc5, 0xb3, 0x20, 0xa4, 0xf9, 0x59, 0x4c, 0x17, 0xa1, 0xc5, 0x2f, 0x52, 0x9a, 0x9b, 0x69,
	0xc6, 0x38, 0x23, 0x86, 0x40, 0xcd, 0x2d, 0xf4, 0xfe, 0x9d, 0x88, 0x45, 0x0c, 0x41, 0x4b, 0xbc,
	0x64, 0xdc, 0xfd, 0xf6, 0x9c, 0xe5, 0x4b, 0x96, 0x5b, 0xa7, 0x41, 0x4e, 0xad, 0x97, 0x8f, 0x4e,
	0x29, 0x0f, 0x1e, 0x59, 0x73, 0x16, 0x27, 0x12, 0x3f, 0x7c, 0xad, 0x02, 0x4c, 0xb2, 0x90, 0x66,
	0x6e, 0x16, 0xcf, 0x29, 0xf9, 0x04, 0x40, 0x44, 0xce, 0x42, 0x9a, 0xb0, 0x65, 0x4b, 0xfd, 0x54,
	0xfd, 0x42, 0xf7, 0x74, 0xe1, 0x19, 0x0a, 0x07, 0xe9, 0x40, 0xe3, 0xd7, 0x15, 0xe3, 0x6b, 0xbc,
	0x82, 0x38, 0xa0, 0x4b, 0x06, 0xf4, 0x41, 0xcb, 0x02, 0x4e, 0x5b, 0x55, 0x81, 0xf4, 0xcd, 0x37,
	0xef, 0x3a, 0xca, 0x5f, 0xef, 0x3a, 0x9f, 0x47, 0x31, 0x3f, 0x5b, 0x9d, 0x9a, 0x73, 0xb6, 0xb4,
	0x8a, 0x79, 0xe4, 0xcf, 0xc3, 0x3c, 0x3c, 0x2f, 0xd6, 0x1a, 0xd2, 0xb9, 0x87, 0xb9, 0x87, 0xdf,
	0x80, 0x36, 0x0c, 0x38, 0x25, 0x77, 0xa1, 0x76, 0x46, 0xe3, 0xe8, 0x8c, 0xe3, 0x1c, 0x9a, 0x57,
	0x58, 0xe4, 0x00, 0x74, 0x1e, 0x2f, 0x69, 0xce, 0x83, 0x65, 0x8a, 0x23, 0x68, 0xde, 0x7b, 0xc7,
	0xe1, 0x1f, 0x55, 0xd0, 0xfd, 0x94, 0x71, 0x5c, 0x8a, 0x7c, 0x07, 0xc0, 0xc4, 0x63, 0x26, 0x9a,
	0x60, 0x9d, 0xfd, 0xe3, 0x8e, 0xf9, 0x6f, 0xee, 0xcc, 0x4d, 0xc2, 0xf4, 0x22, 0xa5, 0x9e, 0xce,
	0xd6, 0x4f, 0x72, 0x0f, 0xea, 0x32, 0x3f, 0x0e, 0x8b, 0x56, 0xbb, 0x68, 0x3b, 0x21, 0xf9, 0x16,
	0x1a, 0x12, 0x4a, 0x05, 0x73, 0xb8, 0x71, 0xe3, 0xf8, 0xa0, 0x5c, 0xfb, 0x3d, 0xbb, 0x9e, 0x9c,
	0x45, 0x32, 0xdd, 0x87, 0xa6, 0x4c, 0x0f, 0x96, 0x6c, 0x95, 0xf0, 0x96, 0x86, 0xf9, 0xf7, 0x4c,
	0x49, 0x8c, 0x29, 0x38, 0x37, 0x0b, 0xbd, 0xcc, 0x01, 0x8b, 0x93, 0xbe, 0x26, 0xc8, 0xf4, 0x64,
	0xcf, 0x1e, 0xe6, 0x90, 0x07, 0xb0, 0xc7, 0x5e, 0x25, 0xa2, 0x46, 0x18, 0x66, 0x34, 0xcf, 0x5b,
	0x3b, 0x28, 0x48, 0x13, 0x9d, 0x3d, 0xe9, 0x23, 0x5f, 0x02, 0x29, 0x28, 0x08, 0xb2, 0x88, 0xf2,
	0x42, 0xba, 0x1a, 0x46, 0x1a, 0x72, 0x53, 0x04, 0xa4, 0x80, 0x47, 0x50, 0xcb, 0x79, 0xc0, 0x57,
	0x79, 0x6b, 0x17, 0xc9, 0x6a, 0x7d, 0x80, 0x2c, 0xc4, 0xbd, 0x22, 0x8e, 0x74, 0x41, 0x0b, 0x85,
	0xe4, 0x75, 0x5c, 0xe0, 0x6e, 0x39, 0x5e, 0x88, 0xe9, 0x61, 0xcc, 0xe1, 0xef, 0x3b, 0xb0, 0xef,
	0xd2, 0x2c, 0xa5, 0x7c, 0x15, 0x2c, 0xa4, 0x42, 0xdb, 0x0c, 0xab, 0xd7, 0x19, 0x2e, 0xad, 0x57,
	0xf9, 0xc0, 0x7a, 0x3f, 0xc1, 0x9d, 0x74, 0x5d, 0x71, 0xb6, 0xa5, 0x75, 0x15, 0xc7, 0xff, 0xac,
	0x3c, 0xce, 0xf5, 0xfe, 0x28, 0x38, 0x49, 0x4b, 0x3e, 0xf2, 0x18, 0xea, 0x29, 0xcb, 0x63, 0x1e,
	0xb3, 0x04, 0xb5, 0xd9, 0x3f, 0x7e, 0xf0, 0x1f, 0xb5, 0xdc, 0x22, 0xd4, 0xdb, 0x24, 0x91, 0x1e,
	0xec, 0xf1, 0x2c, 0x8e, 0xa2, 0xcd, 0x85, 0xec, 0xdc, 0xe0, 0x42, 0x9a, 0x45, 0x8a, 0xbc, 0x91,
	0xc7, 0x00, 0x73, 0xb6, 0x58, 0x04, 0x9c, 0x66, 0xc1, 0x02, 0x25, 0xbb, 0xc1, 0x85, 0x6c, 0xa5,
	0x08, 0x06, 0x45, 0xa3, 0x38, 0x89, 0x66, 0x41, 0x9e, 0x53, 0x8e, 0xa2, 0xea, 0xa2, 0x0b, 0x3a,
	0x7b, 0xc2, 0x47, 0x9e, 0x42, 0x7d, 0x41, 0x5f, 0xd2, 0x2c, 0x88, 0xa4, 0x88, 0xff, 0xff, 0x7f,
	0xbb, 0xc9, 0x27, 0xcf, 0xe1, 0x36, 0x0f, 0xce, 0xe9, 0x2c, 0xcd, 0xd8, 0x8b, 0x98, 0x17, 0x8b,
	0xeb, 0x1f, 0x55, 0xf4, 0x96, 0x28, 0xe4, 0x62, 0x1d, 0xc9, 0x46, 0x07, 0x1a, 0x6b, 0x72, 0xc5,
	0xb1, 0x00, 0x1e, 0x0b, 0xac, 0x5d, 0x4e, 0xb8, 0x75, 0xbb, 0x8d, 0x9b, 0xdd, 0x6e, 0xd7, 0x81,
	0xbd, 0x6b, 0x7f, 0x7d, 0xd2, 0x84, 0xba, 0x3f, 0x9d, 0xb8, 0xa3, 0x89, 0xef, 0x1b, 0x0a, 0xd9,
	0x03, 0x7d, 0xe4, 0x3c, 0x73, 0xa6, 0xbe, 0x3d, 0x1a, 0x19, 0xaa, 0x00, 0xd1, 0xec, 0x9f, 0xfc,
	0x62, 0x54, 0x04, 0xf8, 0xac, 0xe7, 0xfd, 0x68, 0xa3, 0x59, 0xed, 0x1e, 0x41, 0x4d, 0x16, 0x27,
	0x0d, 0xd8, 0x75, 0xed, 0xf1, 0xd0, 0x19, 0x3f, 0x31, 0x14, 0x91, 0x63, 0xff, 0x6c, 0x0f, 0x4e,
	0xa6, 0xf6, 0xd0, 0x50, 0x05, 0x34, 0xe8, 0x8d, 0x07, 0x23, 0x7b, 0x68, 0x54, 0xba, 0x2f, 0x80,
	0x94, 0x6f, 0x71, 0xd3, 0x73, 0xe2, 0xda, 0x63, 0x43, 0x21, 0xfb, 0x00, 0x68, 0x0e, 0x46, 0x13,
	0xdf, 0x36, 0x54, 0x61, 0xcb, 0xae, 0x88, 0x57, 0xc8, 0x2d, 0x68, 0x48, 0x5b, 0x06, 0x54, 0x89,
	0x01, 0xcd, 0xf5, 0x06, 0xae, 0xed, 0xb9, 0x86, 0xd6, 0xfd, 0x1a, 0x6e, 0x97, 0xee, 0x54, 0xe4,
	0x9d, 0x8c, 0x7d, 0xd7, 0x1e, 0x38, 0xdf, 0x3b, 0xf6, 0xd0, 0x50, 0x48, 0x1d, 0xb4, 0xd1, 0x64,
	0xfc, 0xc4, 0x50, 0x89, 0x0e, 0x3b, 0xfe, 0x0f, 0x13, 0x6f, 0x6a, 0x54, 0xfa, 0x4f, 0xdf, 0x5c,
	0xb6, 0xd5, 0xb7, 0x97, 0x6d, 0xf5, 0xef, 0xcb, 0xb6, 0xfa, 0xfa, 0xaa, 0xad, 0xbc, 0xbd, 0x6a,
	0x2b, 0x7f, 0x5e, 0xb5, 0x95, 0xe7, 0x47, 0x5b, 0x2a, 0x0a, 0x96, 0x1f, 0x26, 0x94, 0xbf, 0x62,
	0xd9, 0x39, 0x1a, 0xd6, 0x6f, 0xe5, 0xef, 0xd6, 0x69, 0x0d, 0x3f, 0x38, 0x5f, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x59, 0x45, 0x45, 0x7d, 0xd8, 0x06, 0x00, 0x00,
}

func (m *OrderPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.QuoteDenom) > 0 {
		i -= len(m.QuoteDenom)
		copy(dAtA[i:], m.QuoteDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.QuoteDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Date) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Date) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Date) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != nil {
		{
			size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrderTargetDenom) > 0 {
		i -= len(m.OrderTargetDenom)
		copy(dAtA[i:], m.OrderTargetDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OrderTargetDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.OrderAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.OrderPrice != nil {
		{
			size, err := m.OrderPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.PositionId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TradingAsset) > 0 {
		i -= len(m.TradingAsset)
		copy(dAtA[i:], m.TradingAsset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TradingAsset)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.TriggerPrice != nil {
		{
			size, err := m.TriggerPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Position != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if m.PerpetualOrderType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PerpetualOrderType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OrderPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.QuoteDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Date) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	return n
}

func (m *SpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderType != 0 {
		n += 1 + sovTypes(uint64(m.OrderType))
	}
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	if m.OrderPrice != nil {
		l = m.OrderPrice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.OrderAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OrderTargetDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *PerpetualOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerpetualOrderType != 0 {
		n += 1 + sovTypes(uint64(m.PerpetualOrderType))
	}
	if m.Position != 0 {
		n += 1 + sovTypes(uint64(m.Position))
	}
	if m.TriggerPrice != nil {
		l = m.TriggerPrice.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Collateral.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.TradingAsset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PositionId != 0 {
		n += 1 + sovTypes(uint64(m.PositionId))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OrderPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Date) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Date: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Date: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= SpotOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OrderPrice == nil {
				m.OrderPrice = &OrderPrice{}
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTargetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderTargetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &Date{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOrderType", wireType)
			}
			m.PerpetualOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualOrderType |= PerpetualOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= PerpetualPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TriggerPrice == nil {
				m.TriggerPrice = &OrderPrice{}
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
