// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tradeshield/types.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_PENDING  Status = 0
	Status_EXECUTED Status = 1
	Status_CANCELED Status = 2
	Status_ALL      Status = 3
)

var Status_name = map[int32]string{
	0: "PENDING",
	1: "EXECUTED",
	2: "CANCELED",
	3: "ALL",
}

var Status_value = map[string]int32{
	"PENDING":  0,
	"EXECUTED": 1,
	"CANCELED": 2,
	"ALL":      3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{0}
}

// Perpetual Order
type PerpetualOrderType int32

const (
	PerpetualOrderType_LIMITOPEN    PerpetualOrderType = 0
	PerpetualOrderType_LIMITCLOSE   PerpetualOrderType = 1
	PerpetualOrderType_STOPLOSSPERP PerpetualOrderType = 2
)

var PerpetualOrderType_name = map[int32]string{
	0: "LIMITOPEN",
	1: "LIMITCLOSE",
	2: "STOPLOSSPERP",
}

var PerpetualOrderType_value = map[string]int32{
	"LIMITOPEN":    0,
	"LIMITCLOSE":   1,
	"STOPLOSSPERP": 2,
}

func (x PerpetualOrderType) String() string {
	return proto.EnumName(PerpetualOrderType_name, int32(x))
}

func (PerpetualOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{1}
}

type Date struct {
	Height    uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Date) Reset()         { *m = Date{} }
func (m *Date) String() string { return proto.CompactTextString(m) }
func (*Date) ProtoMessage()    {}
func (*Date) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{0}
}
func (m *Date) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Date) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Date.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Date) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Date.Merge(m, src)
}
func (m *Date) XXX_Size() int {
	return m.Size()
}
func (m *Date) XXX_DiscardUnknown() {
	xxx_messageInfo_Date.DiscardUnknown(m)
}

var xxx_messageInfo_Date proto.InternalMessageInfo

func (m *Date) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Date) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type SpotOrder struct {
	OrderType          SpotOrderType               `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3,enum=elys.tradeshield.SpotOrderType" json:"order_type,omitempty"`
	OrderId            uint64                      `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	LegacyOrderPriceV1 LegacyOrderPriceV1          `protobuf:"bytes,3,opt,name=legacy_order_price_v1,json=legacyOrderPriceV1,proto3" json:"legacy_order_price_v1"`
	OrderPrice         cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=order_price,json=orderPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"order_price"`
	OrderAmount        types.Coin                  `protobuf:"bytes,4,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount"`
	OwnerAddress       string                      `protobuf:"bytes,5,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderTargetDenom   string                      `protobuf:"bytes,6,opt,name=order_target_denom,json=orderTargetDenom,proto3" json:"order_target_denom,omitempty"`
	Status             Status                      `protobuf:"varint,7,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
	Date               *Date                       `protobuf:"bytes,8,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *SpotOrder) Reset()         { *m = SpotOrder{} }
func (m *SpotOrder) String() string { return proto.CompactTextString(m) }
func (*SpotOrder) ProtoMessage()    {}
func (*SpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{1}
}
func (m *SpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotOrder.Merge(m, src)
}
func (m *SpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *SpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SpotOrder proto.InternalMessageInfo

func (m *SpotOrder) GetOrderType() SpotOrderType {
	if m != nil {
		return m.OrderType
	}
	return SpotOrderType_STOPLOSS
}

func (m *SpotOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SpotOrder) GetLegacyOrderPriceV1() LegacyOrderPriceV1 {
	if m != nil {
		return m.LegacyOrderPriceV1
	}
	return LegacyOrderPriceV1{}
}

func (m *SpotOrder) GetOrderAmount() types.Coin {
	if m != nil {
		return m.OrderAmount
	}
	return types.Coin{}
}

func (m *SpotOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *SpotOrder) GetOrderTargetDenom() string {
	if m != nil {
		return m.OrderTargetDenom
	}
	return ""
}

func (m *SpotOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *SpotOrder) GetDate() *Date {
	if m != nil {
		return m.Date
	}
	return nil
}

type PerpetualOrder struct {
	OrderId            uint64                      `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerAddress       string                      `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	PerpetualOrderType PerpetualOrderType          `protobuf:"varint,3,opt,name=perpetual_order_type,json=perpetualOrderType,proto3,enum=elys.tradeshield.PerpetualOrderType" json:"perpetual_order_type,omitempty"`
	Position           PerpetualPosition           `protobuf:"varint,4,opt,name=position,proto3,enum=elys.tradeshield.PerpetualPosition" json:"position,omitempty"`
	TriggerPrice       cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"trigger_price"`
	Collateral         types.Coin                  `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral"`
	Leverage           cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	TakeProfitPrice    cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_profit_price"`
	PositionId         uint64                      `protobuf:"varint,9,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Status             Status                      `protobuf:"varint,10,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
	StopLossPrice      cosmossdk_io_math.LegacyDec `protobuf:"bytes,11,opt,name=stop_loss_price,json=stopLossPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stop_loss_price"`
	PoolId             uint64                      `protobuf:"varint,12,opt,name=poolId,proto3" json:"poolId,omitempty"`
	ClosePercentage    uint64                      `protobuf:"varint,13,opt,name=close_percentage,json=closePercentage,proto3" json:"close_percentage,omitempty"`
}

func (m *PerpetualOrder) Reset()         { *m = PerpetualOrder{} }
func (m *PerpetualOrder) String() string { return proto.CompactTextString(m) }
func (*PerpetualOrder) ProtoMessage()    {}
func (*PerpetualOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{2}
}
func (m *PerpetualOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualOrder.Merge(m, src)
}
func (m *PerpetualOrder) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualOrder proto.InternalMessageInfo

func (m *PerpetualOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *PerpetualOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *PerpetualOrder) GetPerpetualOrderType() PerpetualOrderType {
	if m != nil {
		return m.PerpetualOrderType
	}
	return PerpetualOrderType_LIMITOPEN
}

func (m *PerpetualOrder) GetPosition() PerpetualPosition {
	if m != nil {
		return m.Position
	}
	return PerpetualPosition_UNSPECIFIED
}

func (m *PerpetualOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *PerpetualOrder) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *PerpetualOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *PerpetualOrder) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PerpetualOrder) GetClosePercentage() uint64 {
	if m != nil {
		return m.ClosePercentage
	}
	return 0
}

type PerpetualOrderExtraInfo struct {
	PerpetualOrder     *PerpetualOrder             `protobuf:"bytes,1,opt,name=perpetual_order,json=perpetualOrder,proto3" json:"perpetual_order,omitempty"`
	PositionSize       types.Coin                  `protobuf:"bytes,2,opt,name=position_size,json=positionSize,proto3" json:"position_size"`
	LiquidationPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=liquidation_price,json=liquidationPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"liquidation_price"`
	FundingRate        cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=funding_rate,json=fundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_rate"`
	BorrowInterestRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=borrow_interest_rate,json=borrowInterestRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"borrow_interest_rate"`
}

func (m *PerpetualOrderExtraInfo) Reset()         { *m = PerpetualOrderExtraInfo{} }
func (m *PerpetualOrderExtraInfo) String() string { return proto.CompactTextString(m) }
func (*PerpetualOrderExtraInfo) ProtoMessage()    {}
func (*PerpetualOrderExtraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{3}
}
func (m *PerpetualOrderExtraInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PerpetualOrderExtraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PerpetualOrderExtraInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PerpetualOrderExtraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PerpetualOrderExtraInfo.Merge(m, src)
}
func (m *PerpetualOrderExtraInfo) XXX_Size() int {
	return m.Size()
}
func (m *PerpetualOrderExtraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PerpetualOrderExtraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PerpetualOrderExtraInfo proto.InternalMessageInfo

func (m *PerpetualOrderExtraInfo) GetPerpetualOrder() *PerpetualOrder {
	if m != nil {
		return m.PerpetualOrder
	}
	return nil
}

func (m *PerpetualOrderExtraInfo) GetPositionSize() types.Coin {
	if m != nil {
		return m.PositionSize
	}
	return types.Coin{}
}

type LegacyPerpetualOrder struct {
	OrderId              uint64                      `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OwnerAddress         string                      `protobuf:"bytes,2,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	PerpetualOrderType   PerpetualOrderType          `protobuf:"varint,3,opt,name=perpetual_order_type,json=perpetualOrderType,proto3,enum=elys.tradeshield.PerpetualOrderType" json:"perpetual_order_type,omitempty"`
	Position             PerpetualPosition           `protobuf:"varint,4,opt,name=position,proto3,enum=elys.tradeshield.PerpetualPosition" json:"position,omitempty"`
	LegacyTriggerPriceV1 LegacyTriggerPriceV1        `protobuf:"bytes,5,opt,name=legacy_trigger_price_v1,json=legacyTriggerPriceV1,proto3" json:"legacy_trigger_price_v1"`
	TriggerPrice         cosmossdk_io_math.LegacyDec `protobuf:"bytes,14,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"trigger_price"`
	Collateral           types.Coin                  `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral"`
	TradingAsset         string                      `protobuf:"bytes,7,opt,name=trading_asset,json=tradingAsset,proto3" json:"trading_asset,omitempty"`
	Leverage             cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	TakeProfitPrice      cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_profit_price"`
	PositionId           uint64                      `protobuf:"varint,10,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Status               Status                      `protobuf:"varint,11,opt,name=status,proto3,enum=elys.tradeshield.Status" json:"status,omitempty"`
	StopLossPrice        cosmossdk_io_math.LegacyDec `protobuf:"bytes,12,opt,name=stop_loss_price,json=stopLossPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stop_loss_price"`
	PoolId               uint64                      `protobuf:"varint,13,opt,name=poolId,proto3" json:"poolId,omitempty"`
}

func (m *LegacyPerpetualOrder) Reset()         { *m = LegacyPerpetualOrder{} }
func (m *LegacyPerpetualOrder) String() string { return proto.CompactTextString(m) }
func (*LegacyPerpetualOrder) ProtoMessage()    {}
func (*LegacyPerpetualOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_f02c7f96dfee8f75, []int{4}
}
func (m *LegacyPerpetualOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyPerpetualOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyPerpetualOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyPerpetualOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyPerpetualOrder.Merge(m, src)
}
func (m *LegacyPerpetualOrder) XXX_Size() int {
	return m.Size()
}
func (m *LegacyPerpetualOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyPerpetualOrder.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyPerpetualOrder proto.InternalMessageInfo

func (m *LegacyPerpetualOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *LegacyPerpetualOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *LegacyPerpetualOrder) GetPerpetualOrderType() PerpetualOrderType {
	if m != nil {
		return m.PerpetualOrderType
	}
	return PerpetualOrderType_LIMITOPEN
}

func (m *LegacyPerpetualOrder) GetPosition() PerpetualPosition {
	if m != nil {
		return m.Position
	}
	return PerpetualPosition_UNSPECIFIED
}

func (m *LegacyPerpetualOrder) GetLegacyTriggerPriceV1() LegacyTriggerPriceV1 {
	if m != nil {
		return m.LegacyTriggerPriceV1
	}
	return LegacyTriggerPriceV1{}
}

func (m *LegacyPerpetualOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *LegacyPerpetualOrder) GetTradingAsset() string {
	if m != nil {
		return m.TradingAsset
	}
	return ""
}

func (m *LegacyPerpetualOrder) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *LegacyPerpetualOrder) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_PENDING
}

func (m *LegacyPerpetualOrder) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterEnum("elys.tradeshield.Status", Status_name, Status_value)
	proto.RegisterEnum("elys.tradeshield.PerpetualOrderType", PerpetualOrderType_name, PerpetualOrderType_value)
	proto.RegisterType((*Date)(nil), "elys.tradeshield.Date")
	proto.RegisterType((*SpotOrder)(nil), "elys.tradeshield.SpotOrder")
	proto.RegisterType((*PerpetualOrder)(nil), "elys.tradeshield.PerpetualOrder")
	proto.RegisterType((*PerpetualOrderExtraInfo)(nil), "elys.tradeshield.PerpetualOrderExtraInfo")
	proto.RegisterType((*LegacyPerpetualOrder)(nil), "elys.tradeshield.LegacyPerpetualOrder")
}

func init() { proto.RegisterFile("elys/tradeshield/types.proto", fileDescriptor_f02c7f96dfee8f75) }

var fileDescriptor_f02c7f96dfee8f75 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0x8e, 0x49, 0x08, 0xc9, 0xc9, 0x0f, 0xde, 0x11, 0x65, 0xcd, 0x76, 0x15, 0x10, 0x54, 0x15,
	0x45, 0xdd, 0xb8, 0xb0, 0x52, 0x2f, 0xaa, 0xaa, 0x2b, 0x20, 0x56, 0x15, 0x29, 0x80, 0xe5, 0xa4,
	0xa8, 0xad, 0xb4, 0xb5, 0x06, 0x7b, 0x30, 0x16, 0x8e, 0xc7, 0xf5, 0x4c, 0x60, 0xd9, 0x07, 0xe8,
	0x65, 0xd5, 0x57, 0xe8, 0x3b, 0xf4, 0x15, 0x2a, 0xed, 0xe5, 0xaa, 0x57, 0x55, 0x2f, 0x56, 0x15,
	0xbc, 0x48, 0x35, 0x33, 0x4e, 0x9a, 0x6c, 0xe8, 0x16, 0x45, 0x5d, 0xa9, 0xd2, 0xde, 0x65, 0xce,
	0x39, 0xf3, 0x9d, 0xbf, 0xcf, 0xdf, 0x00, 0x3c, 0x24, 0xd1, 0x15, 0x33, 0x79, 0x8a, 0x7d, 0xc2,
	0xce, 0x42, 0x12, 0xf9, 0x26, 0xbf, 0x4a, 0x08, 0x6b, 0x26, 0x29, 0xe5, 0x14, 0xe9, 0xc2, 0xdb,
	0x1c, 0xf3, 0x3e, 0x58, 0x0a, 0x68, 0x40, 0xa5, 0xd3, 0x14, 0xbf, 0x54, 0xdc, 0x83, 0x86, 0x47,
	0x59, 0x9f, 0x32, 0xf3, 0x04, 0x33, 0x62, 0x5e, 0x6c, 0x9f, 0x10, 0x8e, 0xb7, 0x4d, 0x8f, 0x86,
	0x71, 0xe6, 0x9f, 0xce, 0x42, 0x53, 0x9f, 0xa4, 0x99, 0x77, 0x45, 0xdd, 0x76, 0x15, 0xac, 0x3a,
	0x28, 0xd7, 0xfa, 0xe7, 0x50, 0x68, 0x61, 0x4e, 0xd0, 0x32, 0x14, 0xcf, 0x48, 0x18, 0x9c, 0x71,
	0x43, 0x5b, 0xd3, 0x36, 0x0b, 0x4e, 0x76, 0x42, 0x0f, 0xa1, 0xcc, 0xc3, 0x3e, 0x61, 0x1c, 0xf7,
	0x13, 0x63, 0x4e, 0xba, 0xfe, 0x36, 0xac, 0xff, 0x58, 0x80, 0x72, 0x37, 0xa1, 0xfc, 0x48, 0x24,
	0x43, 0x5f, 0x00, 0xc8, 0xac, 0xae, 0xe8, 0x50, 0xe2, 0xd4, 0x77, 0x56, 0x9b, 0xaf, 0x77, 0xd8,
	0x1c, 0x5d, 0xe8, 0x5d, 0x25, 0xc4, 0x29, 0xd3, 0xe1, 0x4f, 0xb4, 0x02, 0x25, 0x75, 0x3f, 0xf4,
	0xb3, 0x54, 0x0b, 0xf2, 0xdc, 0xf6, 0xd1, 0x53, 0x78, 0x2f, 0x22, 0x01, 0xf6, 0xae, 0x5c, 0x15,
	0x91, 0xa4, 0xa1, 0x47, 0xdc, 0x8b, 0x6d, 0x23, 0xbf, 0xa6, 0x6d, 0x56, 0x76, 0x3e, 0x98, 0xce,
	0xd2, 0x91, 0xe1, 0x32, 0x8f, 0x2d, 0x82, 0x8f, 0xb7, 0xf7, 0x0a, 0x2f, 0x5e, 0xad, 0xe6, 0x1c,
	0x14, 0x4d, 0x79, 0x90, 0x03, 0x95, 0x31, 0x5c, 0xa3, 0xbc, 0xa6, 0x6d, 0x96, 0xf7, 0xb6, 0x45,
	0xf8, 0x1f, 0xaf, 0x56, 0xdf, 0x57, 0x03, 0x63, 0xfe, 0x79, 0x33, 0xa4, 0x66, 0x1f, 0xf3, 0xb3,
	0x0c, 0xbc, 0x45, 0xbc, 0xdf, 0x7e, 0x79, 0x04, 0xd9, 0x3c, 0x5b, 0xc4, 0x73, 0x54, 0xff, 0x12,
	0x15, 0xed, 0x41, 0x55, 0x61, 0xe2, 0x3e, 0x1d, 0xc4, 0xdc, 0x28, 0xc8, 0x4a, 0x57, 0x9a, 0x59,
	0xb8, 0xd8, 0x64, 0x33, 0xdb, 0x64, 0x73, 0x9f, 0x86, 0x71, 0x56, 0x9e, 0x2a, 0x64, 0x57, 0xde,
	0x41, 0x1b, 0x50, 0xa3, 0x97, 0xb1, 0xc0, 0xf0, 0xfd, 0x94, 0x30, 0x66, 0xcc, 0x8b, 0xca, 0x9c,
	0xaa, 0x34, 0xee, 0x2a, 0x1b, 0xfa, 0x18, 0x50, 0x36, 0x76, 0x9c, 0x06, 0x84, 0xbb, 0x3e, 0x89,
	0x69, 0xdf, 0x28, 0xca, 0x48, 0x5d, 0x4d, 0x57, 0x3a, 0x5a, 0xc2, 0x8e, 0x3e, 0x81, 0x22, 0xe3,
	0x98, 0x0f, 0x98, 0xb1, 0x20, 0x17, 0x64, 0xdc, 0xb2, 0x20, 0xe9, 0x77, 0xb2, 0x38, 0xb4, 0x05,
	0x05, 0x1f, 0x73, 0x62, 0x94, 0x64, 0x03, 0xcb, 0xd3, 0xf1, 0x82, 0x40, 0x8e, 0x8c, 0x59, 0xff,
	0xb9, 0x08, 0x75, 0x9b, 0xa4, 0x09, 0xe1, 0x03, 0x1c, 0x29, 0x56, 0x8c, 0x6f, 0x55, 0x9b, 0xdc,
	0xea, 0x54, 0x7b, 0x73, 0xb7, 0xb4, 0x77, 0x0c, 0x4b, 0xc9, 0x10, 0xd1, 0x1d, 0xe3, 0x57, 0x5e,
	0x96, 0x7f, 0xcb, 0xe6, 0x27, 0xf3, 0x4b, 0x92, 0xa1, 0x64, 0xca, 0x86, 0x9e, 0x40, 0x29, 0xa1,
	0x2c, 0xe4, 0x21, 0x8d, 0xe5, 0x6e, 0xea, 0x3b, 0x1b, 0x6f, 0xc0, 0xb2, 0xb3, 0x50, 0x67, 0x74,
	0x09, 0x1d, 0x43, 0x8d, 0xa7, 0x61, 0x10, 0x8c, 0x68, 0x33, 0x3f, 0x2b, 0x6d, 0xaa, 0x19, 0x8e,
	0x22, 0xce, 0x13, 0x00, 0x8f, 0x46, 0x11, 0xe6, 0x24, 0xc5, 0x91, 0xdc, 0xe3, 0x1d, 0x68, 0x33,
	0x76, 0x05, 0x1d, 0x40, 0x29, 0x22, 0x17, 0x24, 0xc5, 0x01, 0x91, 0x4b, 0x9e, 0xa9, 0xa6, 0x11,
	0x04, 0x7a, 0x0a, 0xf7, 0x38, 0x3e, 0x27, 0x42, 0x3d, 0x4e, 0x43, 0x9e, 0xf5, 0x5a, 0x9a, 0x15,
	0x77, 0x51, 0x60, 0xd9, 0x12, 0x4a, 0xb5, 0xbb, 0x0a, 0x95, 0xe1, 0x48, 0x05, 0x45, 0xca, 0x92,
	0x22, 0x30, 0x34, 0xb5, 0xfd, 0x31, 0xc6, 0xc2, 0x1d, 0x19, 0xfb, 0x0d, 0x2c, 0x32, 0x4e, 0x13,
	0x37, 0xa2, 0x8c, 0x65, 0xf5, 0x56, 0x66, 0xad, 0xb7, 0x26, 0x90, 0x3a, 0x94, 0x31, 0x55, 0xed,
	0x32, 0x14, 0x13, 0x4a, 0xa3, 0xb6, 0x6f, 0x54, 0x95, 0x4e, 0xaa, 0x13, 0xfa, 0x08, 0x74, 0x2f,
	0xa2, 0x8c, 0xb8, 0x09, 0x49, 0x3d, 0x12, 0x73, 0x31, 0xfb, 0x9a, 0x8c, 0x58, 0x94, 0x76, 0x7b,
	0x64, 0x5e, 0xff, 0x35, 0x0f, 0xf7, 0x27, 0x39, 0x6a, 0x3d, 0xe3, 0x29, 0x6e, 0xc7, 0xa7, 0x14,
	0xb5, 0x61, 0xf1, 0x35, 0xb2, 0xcb, 0x6f, 0xa6, 0xb2, 0xb3, 0xf6, 0x6f, 0x3c, 0x77, 0xea, 0x93,
	0x1c, 0x47, 0x2d, 0xa8, 0x8d, 0xe6, 0xca, 0xc2, 0xe7, 0x44, 0x7e, 0x5c, 0x77, 0x60, 0x52, 0x75,
	0x78, 0xab, 0x1b, 0x3e, 0x27, 0xe8, 0x3b, 0xb8, 0x17, 0x85, 0xdf, 0x0f, 0x42, 0x1f, 0x4b, 0x20,
	0x35, 0xcc, 0xfc, 0xac, 0xc3, 0xd4, 0xc7, 0xb0, 0xd4, 0x3c, 0x7b, 0x50, 0x3d, 0x1d, 0xc4, 0x7e,
	0x18, 0x07, 0x6e, 0x2a, 0x44, 0xa6, 0x30, 0x2b, 0x74, 0x25, 0x83, 0x71, 0xc4, 0x6b, 0xe6, 0xc1,
	0xd2, 0x09, 0x4d, 0x53, 0x7a, 0xe9, 0x86, 0x31, 0x27, 0x29, 0x61, 0x5c, 0xa1, 0xcf, 0xfc, 0x85,
	0x22, 0x05, 0xd7, 0xce, 0xd0, 0x44, 0x92, 0xf5, 0x1f, 0x16, 0x60, 0x49, 0xc5, 0xbf, 0x2b, 0x8a,
	0xe7, 0xc1, 0xfd, 0xec, 0x15, 0x9e, 0x10, 0x3e, 0xf1, 0x0e, 0xcf, 0x4b, 0x72, 0x7d, 0xf8, 0x4f,
	0xef, 0x70, 0x6f, 0x4c, 0xe0, 0x46, 0x2f, 0xf1, 0x52, 0x74, 0x8b, 0x6f, 0x5a, 0x56, 0xeb, 0xff,
	0x13, 0x59, 0xdd, 0x10, 0x85, 0x61, 0x49, 0x55, 0xcc, 0x18, 0xe1, 0x4a, 0x5b, 0x45, 0x16, 0x69,
	0xdc, 0x15, 0xb6, 0x09, 0xed, 0x2d, 0xbd, 0x25, 0xed, 0x2d, 0xbf, 0x2d, 0xed, 0x85, 0x37, 0x68,
	0x6f, 0x65, 0x76, 0xed, 0xad, 0xfe, 0xe7, 0xda, 0x5b, 0x1b, 0xd7, 0xde, 0xad, 0xcf, 0xa0, 0xa8,
	0x8a, 0x40, 0x15, 0x58, 0xb0, 0xad, 0xc3, 0x56, 0xfb, 0xf0, 0x4b, 0x3d, 0x87, 0xaa, 0x50, 0xb2,
	0xbe, 0xb6, 0xf6, 0xbf, 0xea, 0x59, 0x2d, 0x5d, 0x13, 0xa7, 0xfd, 0xdd, 0xc3, 0x7d, 0xab, 0x63,
	0xb5, 0xf4, 0x39, 0xb4, 0x00, 0xf9, 0xdd, 0x4e, 0x47, 0xcf, 0x6f, 0x59, 0x80, 0xa6, 0xbf, 0x1e,
	0x54, 0x83, 0x72, 0xa7, 0x7d, 0xd0, 0xee, 0x1d, 0xd9, 0xd6, 0xa1, 0x9e, 0x43, 0x75, 0x00, 0x79,
	0xdc, 0xef, 0x1c, 0x75, 0x2d, 0x5d, 0x43, 0x3a, 0x54, 0xbb, 0xbd, 0x23, 0xbb, 0x73, 0xd4, 0xed,
	0xda, 0x96, 0x63, 0xeb, 0x73, 0x7b, 0x07, 0x2f, 0xae, 0x1b, 0xda, 0xcb, 0xeb, 0x86, 0xf6, 0xe7,
	0x75, 0x43, 0xfb, 0xe9, 0xa6, 0x91, 0x7b, 0x79, 0xd3, 0xc8, 0xfd, 0x7e, 0xd3, 0xc8, 0x7d, 0xfb,
	0x38, 0x08, 0xf9, 0xd9, 0xe0, 0xa4, 0xe9, 0xd1, 0xbe, 0x29, 0x66, 0xf7, 0x28, 0x26, 0xfc, 0x92,
	0xa6, 0xe7, 0xf2, 0x60, 0x5e, 0x7c, 0x6a, 0x3e, 0x9b, 0xfe, 0xe7, 0xe0, 0xa4, 0x28, 0xff, 0x38,
	0x7f, 0xfc, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xcd, 0x96, 0xa6, 0x3d, 0x0c, 0x00, 0x00,
}

func (m *Date) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Date) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Date) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Date != nil {
		{
			size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrderTargetDenom) > 0 {
		i -= len(m.OrderTargetDenom)
		copy(dAtA[i:], m.OrderTargetDenom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OrderTargetDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.OrderAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.LegacyOrderPriceV1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if m.OrderType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosePercentage != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ClosePercentage))
		i--
		dAtA[i] = 0x68
	}
	if m.PoolId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.StopLossPrice.Size()
		i -= size
		if _, err := m.StopLossPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if m.PositionId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Position != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if m.PerpetualOrderType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PerpetualOrderType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PerpetualOrderExtraInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PerpetualOrderExtraInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PerpetualOrderExtraInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BorrowInterestRate.Size()
		i -= size
		if _, err := m.BorrowInterestRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.FundingRate.Size()
		i -= size
		if _, err := m.FundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.LiquidationPrice.Size()
		i -= size
		if _, err := m.LiquidationPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PositionSize.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PerpetualOrder != nil {
		{
			size, err := m.PerpetualOrder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LegacyPerpetualOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyPerpetualOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyPerpetualOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.PoolId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.StopLossPrice.Size()
		i -= size
		if _, err := m.StopLossPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x58
	}
	if m.PositionId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x50
	}
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.TradingAsset) > 0 {
		i -= len(m.TradingAsset)
		copy(dAtA[i:], m.TradingAsset)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.TradingAsset)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.LegacyTriggerPriceV1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Position != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x20
	}
	if m.PerpetualOrderType != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PerpetualOrderType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OrderId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Date) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTypes(uint64(m.Height))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTypes(uint64(m.Timestamp))
	}
	return n
}

func (m *SpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderType != 0 {
		n += 1 + sovTypes(uint64(m.OrderType))
	}
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	l = m.LegacyOrderPriceV1.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.OrderAmount.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.OrderTargetDenom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.OrderPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *PerpetualOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerpetualOrderType != 0 {
		n += 1 + sovTypes(uint64(m.PerpetualOrderType))
	}
	if m.Position != 0 {
		n += 1 + sovTypes(uint64(m.Position))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Leverage.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PositionId != 0 {
		n += 1 + sovTypes(uint64(m.PositionId))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = m.StopLossPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTypes(uint64(m.PoolId))
	}
	if m.ClosePercentage != 0 {
		n += 1 + sovTypes(uint64(m.ClosePercentage))
	}
	return n
}

func (m *PerpetualOrderExtraInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PerpetualOrder != nil {
		l = m.PerpetualOrder.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.PositionSize.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.LiquidationPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.FundingRate.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.BorrowInterestRate.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *LegacyPerpetualOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTypes(uint64(m.OrderId))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PerpetualOrderType != 0 {
		n += 1 + sovTypes(uint64(m.PerpetualOrderType))
	}
	if m.Position != 0 {
		n += 1 + sovTypes(uint64(m.Position))
	}
	l = m.LegacyTriggerPriceV1.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.TradingAsset)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PositionId != 0 {
		n += 1 + sovTypes(uint64(m.PositionId))
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = m.StopLossPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTypes(uint64(m.PoolId))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Date) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Date: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Date: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= SpotOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyOrderPriceV1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LegacyOrderPriceV1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTargetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderTargetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &Date{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOrderType", wireType)
			}
			m.PerpetualOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualOrderType |= PerpetualOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= PerpetualPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopLossPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosePercentage", wireType)
			}
			m.ClosePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosePercentage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PerpetualOrderExtraInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PerpetualOrderExtraInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PerpetualOrderExtraInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOrder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerpetualOrder == nil {
				m.PerpetualOrder = &PerpetualOrder{}
			}
			if err := m.PerpetualOrder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionSize", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PositionSize.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowInterestRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyPerpetualOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyPerpetualOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyPerpetualOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOrderType", wireType)
			}
			m.PerpetualOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PerpetualOrderType |= PerpetualOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= PerpetualPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegacyTriggerPriceV1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LegacyTriggerPriceV1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopLossPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
