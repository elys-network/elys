// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tradeshield/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateSpotOrder struct {
	OrderType        SpotOrderType               `protobuf:"varint,1,opt,name=order_type,json=orderType,proto3,enum=elys.tradeshield.SpotOrderType" json:"order_type,omitempty"`
	OrderPrice       cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=order_price,json=orderPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"order_price"`
	OrderAmount      types.Coin                  `protobuf:"bytes,3,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount"`
	OwnerAddress     string                      `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderTargetDenom string                      `protobuf:"bytes,5,opt,name=order_target_denom,json=orderTargetDenom,proto3" json:"order_target_denom,omitempty"`
}

func (m *MsgCreateSpotOrder) Reset()         { *m = MsgCreateSpotOrder{} }
func (m *MsgCreateSpotOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSpotOrder) ProtoMessage()    {}
func (*MsgCreateSpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{0}
}
func (m *MsgCreateSpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSpotOrder.Merge(m, src)
}
func (m *MsgCreateSpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSpotOrder proto.InternalMessageInfo

func (m *MsgCreateSpotOrder) GetOrderType() SpotOrderType {
	if m != nil {
		return m.OrderType
	}
	return SpotOrderType_STOPLOSS
}

func (m *MsgCreateSpotOrder) GetOrderAmount() types.Coin {
	if m != nil {
		return m.OrderAmount
	}
	return types.Coin{}
}

func (m *MsgCreateSpotOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreateSpotOrder) GetOrderTargetDenom() string {
	if m != nil {
		return m.OrderTargetDenom
	}
	return ""
}

type MsgCreateSpotOrderResponse struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCreateSpotOrderResponse) Reset()         { *m = MsgCreateSpotOrderResponse{} }
func (m *MsgCreateSpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateSpotOrderResponse) ProtoMessage()    {}
func (*MsgCreateSpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{1}
}
func (m *MsgCreateSpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateSpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateSpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateSpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateSpotOrderResponse.Merge(m, src)
}
func (m *MsgCreateSpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateSpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateSpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateSpotOrderResponse proto.InternalMessageInfo

func (m *MsgCreateSpotOrderResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgUpdateSpotOrder struct {
	OwnerAddress string                      `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderId      uint64                      `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OrderPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=order_price,json=orderPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"order_price"`
}

func (m *MsgUpdateSpotOrder) Reset()         { *m = MsgUpdateSpotOrder{} }
func (m *MsgUpdateSpotOrder) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSpotOrder) ProtoMessage()    {}
func (*MsgUpdateSpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{2}
}
func (m *MsgUpdateSpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSpotOrder.Merge(m, src)
}
func (m *MsgUpdateSpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSpotOrder proto.InternalMessageInfo

func (m *MsgUpdateSpotOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgUpdateSpotOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgUpdateSpotOrderResponse struct {
}

func (m *MsgUpdateSpotOrderResponse) Reset()         { *m = MsgUpdateSpotOrderResponse{} }
func (m *MsgUpdateSpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSpotOrderResponse) ProtoMessage()    {}
func (*MsgUpdateSpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{3}
}
func (m *MsgUpdateSpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSpotOrderResponse.Merge(m, src)
}
func (m *MsgUpdateSpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSpotOrderResponse proto.InternalMessageInfo

type MsgCancelSpotOrder struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderId      uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelSpotOrder) Reset()         { *m = MsgCancelSpotOrder{} }
func (m *MsgCancelSpotOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSpotOrder) ProtoMessage()    {}
func (*MsgCancelSpotOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{4}
}
func (m *MsgCancelSpotOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSpotOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSpotOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSpotOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSpotOrder.Merge(m, src)
}
func (m *MsgCancelSpotOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSpotOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSpotOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSpotOrder proto.InternalMessageInfo

func (m *MsgCancelSpotOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelSpotOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgCancelSpotOrderResponse struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelSpotOrderResponse) Reset()         { *m = MsgCancelSpotOrderResponse{} }
func (m *MsgCancelSpotOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSpotOrderResponse) ProtoMessage()    {}
func (*MsgCancelSpotOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{5}
}
func (m *MsgCancelSpotOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSpotOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSpotOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSpotOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSpotOrderResponse.Merge(m, src)
}
func (m *MsgCancelSpotOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSpotOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSpotOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSpotOrderResponse proto.InternalMessageInfo

func (m *MsgCancelSpotOrderResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgCancelSpotOrders struct {
	Creator      string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SpotOrderIds []uint64 `protobuf:"varint,2,rep,packed,name=spot_order_ids,json=spotOrderIds,proto3" json:"spot_order_ids,omitempty"`
}

func (m *MsgCancelSpotOrders) Reset()         { *m = MsgCancelSpotOrders{} }
func (m *MsgCancelSpotOrders) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSpotOrders) ProtoMessage()    {}
func (*MsgCancelSpotOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{6}
}
func (m *MsgCancelSpotOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSpotOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSpotOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSpotOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSpotOrders.Merge(m, src)
}
func (m *MsgCancelSpotOrders) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSpotOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSpotOrders.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSpotOrders proto.InternalMessageInfo

func (m *MsgCancelSpotOrders) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelSpotOrders) GetSpotOrderIds() []uint64 {
	if m != nil {
		return m.SpotOrderIds
	}
	return nil
}

type MsgCancelSpotOrdersResponse struct {
}

func (m *MsgCancelSpotOrdersResponse) Reset()         { *m = MsgCancelSpotOrdersResponse{} }
func (m *MsgCancelSpotOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSpotOrdersResponse) ProtoMessage()    {}
func (*MsgCancelSpotOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{7}
}
func (m *MsgCancelSpotOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSpotOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSpotOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSpotOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSpotOrdersResponse.Merge(m, src)
}
func (m *MsgCancelSpotOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSpotOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSpotOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSpotOrdersResponse proto.InternalMessageInfo

type MsgCreatePerpetualOpenOrder struct {
	OwnerAddress    string                      `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	TriggerPrice    cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"trigger_price"`
	Collateral      types.Coin                  `protobuf:"bytes,3,opt,name=collateral,proto3" json:"collateral"`
	TradingAsset    string                      `protobuf:"bytes,4,opt,name=trading_asset,json=tradingAsset,proto3" json:"trading_asset,omitempty"`
	Position        PerpetualPosition           `protobuf:"varint,5,opt,name=position,proto3,enum=elys.tradeshield.PerpetualPosition" json:"position,omitempty"`
	Leverage        cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	TakeProfitPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=take_profit_price,json=takeProfitPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"take_profit_price"`
	StopLossPrice   cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=stop_loss_price,json=stopLossPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"stop_loss_price"`
	PoolId          uint64                      `protobuf:"varint,9,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *MsgCreatePerpetualOpenOrder) Reset()         { *m = MsgCreatePerpetualOpenOrder{} }
func (m *MsgCreatePerpetualOpenOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetualOpenOrder) ProtoMessage()    {}
func (*MsgCreatePerpetualOpenOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{8}
}
func (m *MsgCreatePerpetualOpenOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetualOpenOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetualOpenOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetualOpenOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetualOpenOrder.Merge(m, src)
}
func (m *MsgCreatePerpetualOpenOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetualOpenOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetualOpenOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetualOpenOrder proto.InternalMessageInfo

func (m *MsgCreatePerpetualOpenOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreatePerpetualOpenOrder) GetCollateral() types.Coin {
	if m != nil {
		return m.Collateral
	}
	return types.Coin{}
}

func (m *MsgCreatePerpetualOpenOrder) GetTradingAsset() string {
	if m != nil {
		return m.TradingAsset
	}
	return ""
}

func (m *MsgCreatePerpetualOpenOrder) GetPosition() PerpetualPosition {
	if m != nil {
		return m.Position
	}
	return PerpetualPosition_UNSPECIFIED
}

func (m *MsgCreatePerpetualOpenOrder) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgCreatePerpetualOpenOrderResponse struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCreatePerpetualOpenOrderResponse) Reset()         { *m = MsgCreatePerpetualOpenOrderResponse{} }
func (m *MsgCreatePerpetualOpenOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetualOpenOrderResponse) ProtoMessage()    {}
func (*MsgCreatePerpetualOpenOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{9}
}
func (m *MsgCreatePerpetualOpenOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetualOpenOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetualOpenOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetualOpenOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetualOpenOrderResponse.Merge(m, src)
}
func (m *MsgCreatePerpetualOpenOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetualOpenOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetualOpenOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetualOpenOrderResponse proto.InternalMessageInfo

func (m *MsgCreatePerpetualOpenOrderResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgCreatePerpetualCloseOrder struct {
	OwnerAddress string                      `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	TriggerPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"trigger_price"`
	PositionId   uint64                      `protobuf:"varint,3,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *MsgCreatePerpetualCloseOrder) Reset()         { *m = MsgCreatePerpetualCloseOrder{} }
func (m *MsgCreatePerpetualCloseOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetualCloseOrder) ProtoMessage()    {}
func (*MsgCreatePerpetualCloseOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{10}
}
func (m *MsgCreatePerpetualCloseOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetualCloseOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetualCloseOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetualCloseOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetualCloseOrder.Merge(m, src)
}
func (m *MsgCreatePerpetualCloseOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetualCloseOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetualCloseOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetualCloseOrder proto.InternalMessageInfo

func (m *MsgCreatePerpetualCloseOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCreatePerpetualCloseOrder) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type MsgCreatePerpetualCloseOrderResponse struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCreatePerpetualCloseOrderResponse) Reset()         { *m = MsgCreatePerpetualCloseOrderResponse{} }
func (m *MsgCreatePerpetualCloseOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreatePerpetualCloseOrderResponse) ProtoMessage()    {}
func (*MsgCreatePerpetualCloseOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{11}
}
func (m *MsgCreatePerpetualCloseOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreatePerpetualCloseOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreatePerpetualCloseOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreatePerpetualCloseOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreatePerpetualCloseOrderResponse.Merge(m, src)
}
func (m *MsgCreatePerpetualCloseOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreatePerpetualCloseOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreatePerpetualCloseOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreatePerpetualCloseOrderResponse proto.InternalMessageInfo

func (m *MsgCreatePerpetualCloseOrderResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgUpdatePerpetualOrder struct {
	OwnerAddress string                      `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderId      uint64                      `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	TriggerPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=trigger_price,json=triggerPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"trigger_price"`
}

func (m *MsgUpdatePerpetualOrder) Reset()         { *m = MsgUpdatePerpetualOrder{} }
func (m *MsgUpdatePerpetualOrder) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualOrder) ProtoMessage()    {}
func (*MsgUpdatePerpetualOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{12}
}
func (m *MsgUpdatePerpetualOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualOrder.Merge(m, src)
}
func (m *MsgUpdatePerpetualOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualOrder proto.InternalMessageInfo

func (m *MsgUpdatePerpetualOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgUpdatePerpetualOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgUpdatePerpetualOrderResponse struct {
}

func (m *MsgUpdatePerpetualOrderResponse) Reset()         { *m = MsgUpdatePerpetualOrderResponse{} }
func (m *MsgUpdatePerpetualOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePerpetualOrderResponse) ProtoMessage()    {}
func (*MsgUpdatePerpetualOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{13}
}
func (m *MsgUpdatePerpetualOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePerpetualOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePerpetualOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePerpetualOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePerpetualOrderResponse.Merge(m, src)
}
func (m *MsgUpdatePerpetualOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePerpetualOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePerpetualOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePerpetualOrderResponse proto.InternalMessageInfo

type MsgCancelPerpetualOrder struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderId      uint64 `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelPerpetualOrder) Reset()         { *m = MsgCancelPerpetualOrder{} }
func (m *MsgCancelPerpetualOrder) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPerpetualOrder) ProtoMessage()    {}
func (*MsgCancelPerpetualOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{14}
}
func (m *MsgCancelPerpetualOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPerpetualOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPerpetualOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPerpetualOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPerpetualOrder.Merge(m, src)
}
func (m *MsgCancelPerpetualOrder) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPerpetualOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPerpetualOrder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPerpetualOrder proto.InternalMessageInfo

func (m *MsgCancelPerpetualOrder) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelPerpetualOrder) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgCancelPerpetualOrderResponse struct {
	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (m *MsgCancelPerpetualOrderResponse) Reset()         { *m = MsgCancelPerpetualOrderResponse{} }
func (m *MsgCancelPerpetualOrderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPerpetualOrderResponse) ProtoMessage()    {}
func (*MsgCancelPerpetualOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{15}
}
func (m *MsgCancelPerpetualOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPerpetualOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPerpetualOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPerpetualOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPerpetualOrderResponse.Merge(m, src)
}
func (m *MsgCancelPerpetualOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPerpetualOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPerpetualOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPerpetualOrderResponse proto.InternalMessageInfo

func (m *MsgCancelPerpetualOrderResponse) GetOrderId() uint64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

type MsgCancelPerpetualOrders struct {
	OwnerAddress string   `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
	OrderIds     []uint64 `protobuf:"varint,2,rep,packed,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (m *MsgCancelPerpetualOrders) Reset()         { *m = MsgCancelPerpetualOrders{} }
func (m *MsgCancelPerpetualOrders) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPerpetualOrders) ProtoMessage()    {}
func (*MsgCancelPerpetualOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{16}
}
func (m *MsgCancelPerpetualOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPerpetualOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPerpetualOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPerpetualOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPerpetualOrders.Merge(m, src)
}
func (m *MsgCancelPerpetualOrders) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPerpetualOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPerpetualOrders.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPerpetualOrders proto.InternalMessageInfo

func (m *MsgCancelPerpetualOrders) GetOwnerAddress() string {
	if m != nil {
		return m.OwnerAddress
	}
	return ""
}

func (m *MsgCancelPerpetualOrders) GetOrderIds() []uint64 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

type MsgCancelPerpetualOrdersResponse struct {
}

func (m *MsgCancelPerpetualOrdersResponse) Reset()         { *m = MsgCancelPerpetualOrdersResponse{} }
func (m *MsgCancelPerpetualOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelPerpetualOrdersResponse) ProtoMessage()    {}
func (*MsgCancelPerpetualOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{17}
}
func (m *MsgCancelPerpetualOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelPerpetualOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelPerpetualOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelPerpetualOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelPerpetualOrdersResponse.Merge(m, src)
}
func (m *MsgCancelPerpetualOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelPerpetualOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelPerpetualOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelPerpetualOrdersResponse proto.InternalMessageInfo

type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// NOTE: All parameters must be supplied.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{18}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{19}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

type MsgExecuteOrders struct {
	Creator           string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SpotOrderIds      []uint64 `protobuf:"varint,2,rep,packed,name=spot_order_ids,json=spotOrderIds,proto3" json:"spot_order_ids,omitempty"`
	PerpetualOrderIds []uint64 `protobuf:"varint,3,rep,packed,name=perpetual_order_ids,json=perpetualOrderIds,proto3" json:"perpetual_order_ids,omitempty"`
}

func (m *MsgExecuteOrders) Reset()         { *m = MsgExecuteOrders{} }
func (m *MsgExecuteOrders) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteOrders) ProtoMessage()    {}
func (*MsgExecuteOrders) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{20}
}
func (m *MsgExecuteOrders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteOrders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteOrders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteOrders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteOrders.Merge(m, src)
}
func (m *MsgExecuteOrders) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteOrders) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteOrders.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteOrders proto.InternalMessageInfo

func (m *MsgExecuteOrders) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgExecuteOrders) GetSpotOrderIds() []uint64 {
	if m != nil {
		return m.SpotOrderIds
	}
	return nil
}

func (m *MsgExecuteOrders) GetPerpetualOrderIds() []uint64 {
	if m != nil {
		return m.PerpetualOrderIds
	}
	return nil
}

type MsgExecuteOrdersResponse struct {
}

func (m *MsgExecuteOrdersResponse) Reset()         { *m = MsgExecuteOrdersResponse{} }
func (m *MsgExecuteOrdersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteOrdersResponse) ProtoMessage()    {}
func (*MsgExecuteOrdersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0534a5eaf85a8c0b, []int{21}
}
func (m *MsgExecuteOrdersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteOrdersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteOrdersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteOrdersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteOrdersResponse.Merge(m, src)
}
func (m *MsgExecuteOrdersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteOrdersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteOrdersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteOrdersResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateSpotOrder)(nil), "elys.tradeshield.MsgCreateSpotOrder")
	proto.RegisterType((*MsgCreateSpotOrderResponse)(nil), "elys.tradeshield.MsgCreateSpotOrderResponse")
	proto.RegisterType((*MsgUpdateSpotOrder)(nil), "elys.tradeshield.MsgUpdateSpotOrder")
	proto.RegisterType((*MsgUpdateSpotOrderResponse)(nil), "elys.tradeshield.MsgUpdateSpotOrderResponse")
	proto.RegisterType((*MsgCancelSpotOrder)(nil), "elys.tradeshield.MsgCancelSpotOrder")
	proto.RegisterType((*MsgCancelSpotOrderResponse)(nil), "elys.tradeshield.MsgCancelSpotOrderResponse")
	proto.RegisterType((*MsgCancelSpotOrders)(nil), "elys.tradeshield.MsgCancelSpotOrders")
	proto.RegisterType((*MsgCancelSpotOrdersResponse)(nil), "elys.tradeshield.MsgCancelSpotOrdersResponse")
	proto.RegisterType((*MsgCreatePerpetualOpenOrder)(nil), "elys.tradeshield.MsgCreatePerpetualOpenOrder")
	proto.RegisterType((*MsgCreatePerpetualOpenOrderResponse)(nil), "elys.tradeshield.MsgCreatePerpetualOpenOrderResponse")
	proto.RegisterType((*MsgCreatePerpetualCloseOrder)(nil), "elys.tradeshield.MsgCreatePerpetualCloseOrder")
	proto.RegisterType((*MsgCreatePerpetualCloseOrderResponse)(nil), "elys.tradeshield.MsgCreatePerpetualCloseOrderResponse")
	proto.RegisterType((*MsgUpdatePerpetualOrder)(nil), "elys.tradeshield.MsgUpdatePerpetualOrder")
	proto.RegisterType((*MsgUpdatePerpetualOrderResponse)(nil), "elys.tradeshield.MsgUpdatePerpetualOrderResponse")
	proto.RegisterType((*MsgCancelPerpetualOrder)(nil), "elys.tradeshield.MsgCancelPerpetualOrder")
	proto.RegisterType((*MsgCancelPerpetualOrderResponse)(nil), "elys.tradeshield.MsgCancelPerpetualOrderResponse")
	proto.RegisterType((*MsgCancelPerpetualOrders)(nil), "elys.tradeshield.MsgCancelPerpetualOrders")
	proto.RegisterType((*MsgCancelPerpetualOrdersResponse)(nil), "elys.tradeshield.MsgCancelPerpetualOrdersResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "elys.tradeshield.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "elys.tradeshield.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgExecuteOrders)(nil), "elys.tradeshield.MsgExecuteOrders")
	proto.RegisterType((*MsgExecuteOrdersResponse)(nil), "elys.tradeshield.MsgExecuteOrdersResponse")
}

func init() { proto.RegisterFile("elys/tradeshield/tx.proto", fileDescriptor_0534a5eaf85a8c0b) }

var fileDescriptor_0534a5eaf85a8c0b = []byte{
	// 1267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x4f, 0xdc, 0x46,
	0x14, 0xc6, 0x2c, 0x01, 0xf6, 0x01, 0x81, 0x38, 0x54, 0xec, 0x1a, 0xb2, 0x4b, 0x0c, 0x51, 0x01,
	0x65, 0xbd, 0xb0, 0x55, 0x52, 0x69, 0x9b, 0x26, 0xe5, 0x47, 0x0f, 0x54, 0x41, 0x41, 0x9b, 0xb6,
	0x52, 0xab, 0x56, 0x2b, 0xb3, 0x9e, 0x1a, 0x8b, 0x5d, 0x8f, 0xe5, 0x19, 0x7e, 0xec, 0x2d, 0x6a,
	0x0f, 0x95, 0x7a, 0xca, 0xa1, 0xff, 0x40, 0x0f, 0x3d, 0xf5, 0x50, 0xa4, 0xe6, 0xda, 0x7b, 0xa4,
	0x5e, 0xa2, 0x9c, 0xa2, 0x1e, 0xa2, 0x0a, 0x0e, 0xfc, 0x0d, 0xbd, 0x55, 0x33, 0x63, 0x9b, 0xf5,
	0xda, 0xbb, 0x18, 0x42, 0xa2, 0x5e, 0x12, 0x3c, 0xef, 0x9b, 0xef, 0xbd, 0xef, 0x7b, 0xe3, 0x99,
	0xf1, 0x42, 0x16, 0xd5, 0x9b, 0xa4, 0x48, 0x5d, 0xdd, 0x40, 0x64, 0xdb, 0x42, 0x75, 0xa3, 0x48,
	0x0f, 0x34, 0xc7, 0xc5, 0x14, 0xcb, 0x63, 0x2c, 0xa4, 0xb5, 0x84, 0x94, 0x71, 0x13, 0x9b, 0x98,
	0x07, 0x8b, 0xec, 0x2f, 0x81, 0x53, 0xa6, 0x22, 0x14, 0xd8, 0x35, 0x90, 0xeb, 0x45, 0x6f, 0x44,
	0xa2, 0x8e, 0xee, 0xea, 0x0d, 0xe2, 0x85, 0x73, 0x35, 0x4c, 0x1a, 0x98, 0x14, 0xb7, 0x74, 0x82,
	0x8a, 0x7b, 0x4b, 0x5b, 0x88, 0xea, 0x4b, 0xc5, 0x1a, 0xb6, 0x6c, 0x2f, 0x3e, 0xe1, 0xc5, 0x1b,
	0xc4, 0x2c, 0xee, 0x2d, 0xb1, 0xff, 0xbc, 0xc0, 0x35, 0xbd, 0x61, 0xd9, 0xb8, 0xc8, 0xff, 0xf5,
	0x86, 0xb2, 0x02, 0x5b, 0x15, 0x15, 0x8a, 0x07, 0x11, 0x52, 0x9f, 0xa6, 0x40, 0xde, 0x20, 0xe6,
	0xaa, 0x8b, 0x74, 0x8a, 0x1e, 0x3b, 0x98, 0x3e, 0x62, 0x25, 0xca, 0xf7, 0x01, 0x78, 0xad, 0x55,
	0xda, 0x74, 0x50, 0x46, 0x9a, 0x96, 0xe6, 0xae, 0x96, 0xf2, 0x5a, 0xbb, 0x6e, 0x2d, 0x98, 0xf0,
	0x79, 0xd3, 0x41, 0x95, 0x34, 0xf6, 0xff, 0x94, 0x2b, 0x30, 0x24, 0xe6, 0x3b, 0xae, 0x55, 0x43,
	0x99, 0xde, 0x69, 0x69, 0x2e, 0xbd, 0xb2, 0xf4, 0xfc, 0x75, 0xbe, 0xe7, 0xef, 0xd7, 0xf9, 0x49,
	0x51, 0x01, 0x31, 0x76, 0x34, 0x0b, 0x17, 0x1b, 0x3a, 0xdd, 0xd6, 0x1e, 0x22, 0x53, 0xaf, 0x35,
	0xd7, 0x50, 0xed, 0xe5, 0xb3, 0x02, 0x78, 0x05, 0xae, 0xa1, 0x5a, 0x45, 0x54, 0xb1, 0xc9, 0x48,
	0xe4, 0x15, 0x18, 0x16, 0x9c, 0x7a, 0x03, 0xef, 0xda, 0x34, 0x93, 0x9a, 0x96, 0xe6, 0x86, 0x4a,
	0x59, 0xcd, 0x83, 0x33, 0xa3, 0x34, 0xcf, 0x28, 0x6d, 0x15, 0x5b, 0xf6, 0x4a, 0x1f, 0xcb, 0x57,
	0x11, 0x85, 0x2c, 0xf3, 0x39, 0xf2, 0xc7, 0x30, 0x82, 0xf7, 0x6d, 0xc6, 0x61, 0x18, 0x2e, 0x22,
	0x24, 0xd3, 0xc7, 0x2b, 0xcb, 0xbc, 0x7c, 0x56, 0x18, 0xf7, 0x78, 0x96, 0x45, 0xe4, 0x31, 0x75,
	0x2d, 0xdb, 0xac, 0x0c, 0x73, 0xb8, 0x37, 0x26, 0xdf, 0x06, 0xd9, 0xb3, 0x45, 0x77, 0x4d, 0x44,
	0xab, 0x06, 0xb2, 0x71, 0x23, 0x73, 0x85, 0x71, 0x54, 0xc6, 0x84, 0x7a, 0x1e, 0x58, 0x63, 0xe3,
	0xe5, 0x3b, 0xdf, 0x9f, 0x1c, 0x2e, 0x84, 0xf3, 0xfd, 0x74, 0x72, 0xb8, 0x90, 0x6b, 0xed, 0x79,
	0xd4, 0x7b, 0xf5, 0x43, 0x50, 0xa2, 0xa3, 0x15, 0x44, 0x1c, 0x6c, 0x13, 0x24, 0x67, 0x61, 0x50,
	0x94, 0x60, 0x19, 0xbc, 0x2f, 0x7d, 0x95, 0x01, 0xfe, 0xbc, 0x6e, 0xa8, 0xff, 0x4a, 0xbc, 0x97,
	0x5f, 0x38, 0x46, 0xa8, 0x97, 0x11, 0xcd, 0xd2, 0xb9, 0x34, 0xb7, 0x26, 0xec, 0x0d, 0x25, 0x6c,
	0xef, 0x72, 0xea, 0x12, 0xba, 0x9c, 0xd4, 0xb4, 0x36, 0x91, 0xea, 0x14, 0x37, 0xad, 0x6d, 0xd4,
	0x37, 0x4d, 0xfd, 0x55, 0x38, 0xb3, 0xaa, 0xdb, 0x35, 0x54, 0x7f, 0x07, 0xce, 0x24, 0x6e, 0x7d,
	0xb8, 0x20, 0xbf, 0xf5, 0xe1, 0xd1, 0x24, 0xad, 0xff, 0x45, 0x82, 0xeb, 0xd1, 0x99, 0x44, 0x2e,
	0xc1, 0x40, 0x8d, 0x2d, 0x24, 0xec, 0x9e, 0xa9, 0xcd, 0x07, 0xca, 0xb3, 0x70, 0x95, 0x38, 0x98,
	0x56, 0xfd, 0x5c, 0x24, 0xd3, 0x3b, 0x9d, 0x9a, 0xeb, 0xab, 0x0c, 0x13, 0x9f, 0x77, 0xdd, 0x20,
	0xe5, 0x45, 0xa6, 0xd0, 0x9f, 0xc3, 0xb4, 0xe5, 0xbb, 0x6b, 0x23, 0xea, 0x0d, 0x98, 0x8c, 0x19,
	0x0e, 0x7a, 0xf4, 0xe7, 0x15, 0x11, 0xe7, 0xeb, 0x7e, 0x13, 0xb9, 0x0e, 0xa2, 0xbb, 0x7a, 0xfd,
	0x91, 0x83, 0xec, 0x4b, 0x69, 0xd6, 0x97, 0x30, 0x42, 0x5d, 0xcb, 0x34, 0xdf, 0x7c, 0x4f, 0x1a,
	0xf6, 0x78, 0xc4, 0xae, 0xf4, 0x00, 0xa0, 0x86, 0xeb, 0x75, 0x9d, 0x22, 0x57, 0xaf, 0x27, 0xdd,
	0x93, 0x5a, 0xa6, 0xc8, 0x33, 0xac, 0x30, 0xdd, 0xb0, 0x6c, 0xb3, 0xaa, 0x13, 0x82, 0xa8, 0xd8,
	0x92, 0x58, 0x16, 0x3e, 0xb8, 0xcc, 0xc6, 0xe4, 0x07, 0x30, 0xe8, 0x60, 0x62, 0x51, 0x0b, 0xdb,
	0x7c, 0xbb, 0xb9, 0x5a, 0x9a, 0x89, 0xee, 0xc6, 0x81, 0x69, 0x9b, 0x1e, 0xb4, 0x12, 0x4c, 0x92,
	0x37, 0x60, 0xb0, 0x8e, 0xf6, 0x90, 0xab, 0x9b, 0x28, 0xd3, 0x7f, 0x51, 0xe5, 0x01, 0x85, 0xfc,
	0x2d, 0x5c, 0xa3, 0xfa, 0x0e, 0x62, 0x27, 0xca, 0x77, 0x16, 0xf5, 0x1c, 0x1d, 0xb8, 0x28, 0xef,
	0x28, 0xe3, 0xda, 0xe4, 0x54, 0xc2, 0xd4, 0xaf, 0x60, 0x94, 0x50, 0xec, 0x54, 0xeb, 0x98, 0x10,
	0x8f, 0x7c, 0xf0, 0xa2, 0xe4, 0x23, 0x8c, 0xe9, 0x21, 0x26, 0x44, 0x50, 0x4f, 0xc0, 0x80, 0x83,
	0x71, 0x9d, 0xbd, 0x43, 0x69, 0xfe, 0x0e, 0xf5, 0xb3, 0xc7, 0x75, 0xa3, 0x7c, 0x3f, 0xfe, 0x95,
	0x7d, 0x3f, 0x76, 0xb7, 0x8e, 0xae, 0x4f, 0xf5, 0x13, 0x98, 0xe9, 0x12, 0x4e, 0xf2, 0x12, 0xff,
	0xdc, 0x0b, 0x53, 0x51, 0x8a, 0xd5, 0x3a, 0x26, 0xe8, 0x7f, 0xfd, 0x0a, 0xe4, 0x61, 0xc8, 0x5f,
	0x67, 0x4c, 0x55, 0x8a, 0xab, 0x02, 0x7f, 0x68, 0xdd, 0x28, 0xdf, 0x8b, 0xb7, 0xf6, 0x56, 0xab,
	0xb5, 0x1d, 0x55, 0xab, 0xcb, 0x30, 0xdb, 0xcd, 0x95, 0x24, 0xce, 0xfe, 0xd8, 0x0b, 0x13, 0xc1,
	0xf1, 0x70, 0xda, 0x9c, 0xb7, 0x7c, 0x3c, 0x46, 0xfc, 0x4e, 0x5d, 0x8a, 0xdf, 0xe5, 0x72, 0xbc,
	0x9d, 0x33, 0xb1, 0x47, 0x64, 0x58, 0xad, 0x7a, 0x13, 0xf2, 0x1d, 0x42, 0xc1, 0x46, 0xfc, 0xbb,
	0xc4, 0xcd, 0x12, 0x1b, 0xf5, 0xbb, 0x32, 0x2b, 0xa9, 0xa8, 0xb8, 0xaa, 0xd4, 0x7b, 0x5c, 0x54,
	0x5c, 0x28, 0xc9, 0xe2, 0xf8, 0x43, 0x82, 0x4c, 0x87, 0xe9, 0xe4, 0x4d, 0x05, 0x4f, 0x42, 0xba,
	0xfd, 0x18, 0x1d, 0xc4, 0xfe, 0x11, 0xfa, 0x51, 0xbc, 0xe4, 0xd9, 0x04, 0x92, 0x89, 0xaa, 0xc2,
	0x74, 0xa7, 0x58, 0xd0, 0xc9, 0xdf, 0x24, 0x18, 0x3d, 0xed, 0x36, 0xff, 0xba, 0x90, 0xef, 0x42,
	0x5a, 0xdf, 0xa5, 0xdb, 0xd8, 0xb5, 0x68, 0xf3, 0x4c, 0x31, 0xa7, 0x50, 0x79, 0x11, 0xfa, 0xc5,
	0xf7, 0x09, 0x6f, 0xdc, 0x50, 0x29, 0x13, 0x73, 0xfe, 0xf0, 0x78, 0xc5, 0xc3, 0x95, 0x35, 0x26,
	0xef, 0x94, 0x81, 0x49, 0x9b, 0x8c, 0x5f, 0xa2, 0x1c, 0xaf, 0x66, 0x5b, 0xdf, 0x51, 0x41, 0xe5,
	0x0b, 0xf9, 0x4b, 0x82, 0xb1, 0x0d, 0x62, 0x7e, 0x7a, 0x80, 0x6a, 0xbb, 0x14, 0xbd, 0xed, 0xbb,
	0x8d, 0xac, 0xc1, 0x75, 0xc7, 0xb7, 0xb4, 0x05, 0x9a, 0xe2, 0xd0, 0x6b, 0x4e, 0xc8, 0x6d, 0xd6,
	0xc8, 0x42, 0xfb, 0x5d, 0x68, 0xaa, 0x4d, 0x67, 0xa8, 0x70, 0x55, 0xe1, 0xeb, 0x2d, 0x34, 0xe6,
	0x2b, 0x2d, 0xbd, 0x4a, 0x43, 0x6a, 0x83, 0x98, 0x32, 0x82, 0xd1, 0xf6, 0x6f, 0xb2, 0xd9, 0xa8,
	0xe3, 0xd1, 0xef, 0x04, 0xe5, 0x76, 0x12, 0x54, 0xf0, 0x5a, 0x20, 0x18, 0x6d, 0xff, 0x5c, 0x88,
	0x4f, 0xd3, 0x86, 0xea, 0x90, 0xa6, 0xc3, 0xfd, 0x9b, 0xab, 0x69, 0xbb, 0x7b, 0x77, 0x50, 0x13,
	0x46, 0x75, 0x52, 0xd3, 0xe1, 0x82, 0xbc, 0x0d, 0x63, 0x91, 0x1b, 0xf0, 0xad, 0x24, 0x0c, 0x44,
	0x29, 0x24, 0x82, 0x05, 0x99, 0x9e, 0x48, 0x90, 0xe9, 0x78, 0x53, 0x2d, 0x74, 0x69, 0x41, 0x14,
	0xae, 0xdc, 0x39, 0x17, 0x3c, 0x28, 0xe1, 0x07, 0x09, 0xb2, 0x9d, 0xaf, 0x0a, 0x5a, 0x12, 0xd2,
	0x53, 0xbc, 0x72, 0xf7, 0x7c, 0xf8, 0xa0, 0x0a, 0x0a, 0xe3, 0xb1, 0xa7, 0xea, 0x7c, 0x97, 0xf5,
	0x11, 0x86, 0x2a, 0x4b, 0x89, 0xa1, 0xad, 0x59, 0x63, 0x8f, 0xa7, 0xf9, 0x2e, 0x5d, 0x4c, 0x94,
	0xb5, 0xeb, 0x19, 0xb2, 0x0f, 0xef, 0xc5, 0x1f, 0x12, 0x0b, 0x89, 0xb9, 0x88, 0x52, 0x4a, 0x8e,
	0x0d, 0x12, 0x7f, 0x03, 0xc3, 0xa1, 0x3d, 0xfc, 0x66, 0x37, 0xc7, 0x38, 0x44, 0x99, 0x3f, 0x13,
	0x12, 0xb0, 0x57, 0x61, 0x24, 0xbc, 0xb1, 0xaa, 0xb1, 0x73, 0x43, 0x18, 0x65, 0xe1, 0x6c, 0x8c,
	0x9f, 0x40, 0xb9, 0xf2, 0xe4, 0xe4, 0x70, 0x41, 0x5a, 0xf9, 0xec, 0xf9, 0x51, 0x4e, 0x7a, 0x71,
	0x94, 0x93, 0xfe, 0x39, 0xca, 0x49, 0x4f, 0x8f, 0x73, 0x3d, 0x2f, 0x8e, 0x73, 0x3d, 0xaf, 0x8e,
	0x73, 0x3d, 0x5f, 0x2f, 0x9a, 0x16, 0xdd, 0xde, 0xdd, 0xd2, 0x6a, 0xb8, 0x51, 0x64, 0xb4, 0x05,
	0x1b, 0xd1, 0x7d, 0xec, 0xee, 0xf0, 0x87, 0xe2, 0x41, 0xf8, 0x57, 0xb8, 0xa6, 0x83, 0xc8, 0x56,
	0x3f, 0xff, 0xf5, 0xea, 0x83, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xf9, 0x57, 0x02, 0xa6,
	0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateSpotOrder(ctx context.Context, in *MsgCreateSpotOrder, opts ...grpc.CallOption) (*MsgCreateSpotOrderResponse, error)
	UpdateSpotOrder(ctx context.Context, in *MsgUpdateSpotOrder, opts ...grpc.CallOption) (*MsgUpdateSpotOrderResponse, error)
	CancelSpotOrder(ctx context.Context, in *MsgCancelSpotOrder, opts ...grpc.CallOption) (*MsgCancelSpotOrderResponse, error)
	CancelSpotOrders(ctx context.Context, in *MsgCancelSpotOrders, opts ...grpc.CallOption) (*MsgCancelSpotOrdersResponse, error)
	CreatePerpetualOpenOrder(ctx context.Context, in *MsgCreatePerpetualOpenOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualOpenOrderResponse, error)
	CreatePerpetualCloseOrder(ctx context.Context, in *MsgCreatePerpetualCloseOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualCloseOrderResponse, error)
	UpdatePerpetualOrder(ctx context.Context, in *MsgUpdatePerpetualOrder, opts ...grpc.CallOption) (*MsgUpdatePerpetualOrderResponse, error)
	CancelPerpetualOrder(ctx context.Context, in *MsgCancelPerpetualOrder, opts ...grpc.CallOption) (*MsgCancelPerpetualOrderResponse, error)
	CancelPerpetualOrders(ctx context.Context, in *MsgCancelPerpetualOrders, opts ...grpc.CallOption) (*MsgCancelPerpetualOrdersResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ExecuteOrders(ctx context.Context, in *MsgExecuteOrders, opts ...grpc.CallOption) (*MsgExecuteOrdersResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSpotOrder(ctx context.Context, in *MsgCreateSpotOrder, opts ...grpc.CallOption) (*MsgCreateSpotOrderResponse, error) {
	out := new(MsgCreateSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreateSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSpotOrder(ctx context.Context, in *MsgUpdateSpotOrder, opts ...grpc.CallOption) (*MsgUpdateSpotOrderResponse, error) {
	out := new(MsgUpdateSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdateSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSpotOrder(ctx context.Context, in *MsgCancelSpotOrder, opts ...grpc.CallOption) (*MsgCancelSpotOrderResponse, error) {
	out := new(MsgCancelSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSpotOrders(ctx context.Context, in *MsgCancelSpotOrders, opts ...grpc.CallOption) (*MsgCancelSpotOrdersResponse, error) {
	out := new(MsgCancelSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelSpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetualOpenOrder(ctx context.Context, in *MsgCreatePerpetualOpenOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualOpenOrderResponse, error) {
	out := new(MsgCreatePerpetualOpenOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreatePerpetualOpenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetualCloseOrder(ctx context.Context, in *MsgCreatePerpetualCloseOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualCloseOrderResponse, error) {
	out := new(MsgCreatePerpetualCloseOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreatePerpetualCloseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerpetualOrder(ctx context.Context, in *MsgUpdatePerpetualOrder, opts ...grpc.CallOption) (*MsgUpdatePerpetualOrderResponse, error) {
	out := new(MsgUpdatePerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdatePerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPerpetualOrder(ctx context.Context, in *MsgCancelPerpetualOrder, opts ...grpc.CallOption) (*MsgCancelPerpetualOrderResponse, error) {
	out := new(MsgCancelPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelPerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPerpetualOrders(ctx context.Context, in *MsgCancelPerpetualOrders, opts ...grpc.CallOption) (*MsgCancelPerpetualOrdersResponse, error) {
	out := new(MsgCancelPerpetualOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelPerpetualOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteOrders(ctx context.Context, in *MsgExecuteOrders, opts ...grpc.CallOption) (*MsgExecuteOrdersResponse, error) {
	out := new(MsgExecuteOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/ExecuteOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateSpotOrder(context.Context, *MsgCreateSpotOrder) (*MsgCreateSpotOrderResponse, error)
	UpdateSpotOrder(context.Context, *MsgUpdateSpotOrder) (*MsgUpdateSpotOrderResponse, error)
	CancelSpotOrder(context.Context, *MsgCancelSpotOrder) (*MsgCancelSpotOrderResponse, error)
	CancelSpotOrders(context.Context, *MsgCancelSpotOrders) (*MsgCancelSpotOrdersResponse, error)
	CreatePerpetualOpenOrder(context.Context, *MsgCreatePerpetualOpenOrder) (*MsgCreatePerpetualOpenOrderResponse, error)
	CreatePerpetualCloseOrder(context.Context, *MsgCreatePerpetualCloseOrder) (*MsgCreatePerpetualCloseOrderResponse, error)
	UpdatePerpetualOrder(context.Context, *MsgUpdatePerpetualOrder) (*MsgUpdatePerpetualOrderResponse, error)
	CancelPerpetualOrder(context.Context, *MsgCancelPerpetualOrder) (*MsgCancelPerpetualOrderResponse, error)
	CancelPerpetualOrders(context.Context, *MsgCancelPerpetualOrders) (*MsgCancelPerpetualOrdersResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	ExecuteOrders(context.Context, *MsgExecuteOrders) (*MsgExecuteOrdersResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateSpotOrder(ctx context.Context, req *MsgCreateSpotOrder) (*MsgCreateSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpotOrder not implemented")
}
func (*UnimplementedMsgServer) UpdateSpotOrder(ctx context.Context, req *MsgUpdateSpotOrder) (*MsgUpdateSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpotOrder not implemented")
}
func (*UnimplementedMsgServer) CancelSpotOrder(ctx context.Context, req *MsgCancelSpotOrder) (*MsgCancelSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSpotOrder not implemented")
}
func (*UnimplementedMsgServer) CancelSpotOrders(ctx context.Context, req *MsgCancelSpotOrders) (*MsgCancelSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSpotOrders not implemented")
}
func (*UnimplementedMsgServer) CreatePerpetualOpenOrder(ctx context.Context, req *MsgCreatePerpetualOpenOrder) (*MsgCreatePerpetualOpenOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetualOpenOrder not implemented")
}
func (*UnimplementedMsgServer) CreatePerpetualCloseOrder(ctx context.Context, req *MsgCreatePerpetualCloseOrder) (*MsgCreatePerpetualCloseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetualCloseOrder not implemented")
}
func (*UnimplementedMsgServer) UpdatePerpetualOrder(ctx context.Context, req *MsgUpdatePerpetualOrder) (*MsgUpdatePerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerpetualOrder not implemented")
}
func (*UnimplementedMsgServer) CancelPerpetualOrder(ctx context.Context, req *MsgCancelPerpetualOrder) (*MsgCancelPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPerpetualOrder not implemented")
}
func (*UnimplementedMsgServer) CancelPerpetualOrders(ctx context.Context, req *MsgCancelPerpetualOrders) (*MsgCancelPerpetualOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPerpetualOrders not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) ExecuteOrders(ctx context.Context, req *MsgExecuteOrders) (*MsgExecuteOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOrders not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreateSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSpotOrder(ctx, req.(*MsgCreateSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdateSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSpotOrder(ctx, req.(*MsgUpdateSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSpotOrder(ctx, req.(*MsgCancelSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSpotOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelSpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSpotOrders(ctx, req.(*MsgCancelSpotOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetualOpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerpetualOpenOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetualOpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreatePerpetualOpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetualOpenOrder(ctx, req.(*MsgCreatePerpetualOpenOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetualCloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerpetualCloseOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetualCloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreatePerpetualCloseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetualCloseOrder(ctx, req.(*MsgCreatePerpetualCloseOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerpetualOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdatePerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerpetualOrder(ctx, req.(*MsgUpdatePerpetualOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPerpetualOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelPerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPerpetualOrder(ctx, req.(*MsgCancelPerpetualOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPerpetualOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPerpetualOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPerpetualOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelPerpetualOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPerpetualOrders(ctx, req.(*MsgCancelPerpetualOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/ExecuteOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteOrders(ctx, req.(*MsgExecuteOrders))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tradeshield.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpotOrder",
			Handler:    _Msg_CreateSpotOrder_Handler,
		},
		{
			MethodName: "UpdateSpotOrder",
			Handler:    _Msg_UpdateSpotOrder_Handler,
		},
		{
			MethodName: "CancelSpotOrder",
			Handler:    _Msg_CancelSpotOrder_Handler,
		},
		{
			MethodName: "CancelSpotOrders",
			Handler:    _Msg_CancelSpotOrders_Handler,
		},
		{
			MethodName: "CreatePerpetualOpenOrder",
			Handler:    _Msg_CreatePerpetualOpenOrder_Handler,
		},
		{
			MethodName: "CreatePerpetualCloseOrder",
			Handler:    _Msg_CreatePerpetualCloseOrder_Handler,
		},
		{
			MethodName: "UpdatePerpetualOrder",
			Handler:    _Msg_UpdatePerpetualOrder_Handler,
		},
		{
			MethodName: "CancelPerpetualOrder",
			Handler:    _Msg_CancelPerpetualOrder_Handler,
		},
		{
			MethodName: "CancelPerpetualOrders",
			Handler:    _Msg_CancelPerpetualOrders_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "ExecuteOrders",
			Handler:    _Msg_ExecuteOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tradeshield/tx.proto",
}

func (m *MsgCreateSpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderTargetDenom) > 0 {
		i -= len(m.OrderTargetDenom)
		copy(dAtA[i:], m.OrderTargetDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OrderTargetDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.OrderAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OrderType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateSpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateSpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateSpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OrderPrice.Size()
		i -= size
		if _, err := m.OrderPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelSpotOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSpotOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSpotOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSpotOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSpotOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSpotOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSpotOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSpotOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSpotOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpotOrderIds) > 0 {
		dAtA3 := make([]byte, len(m.SpotOrderIds)*10)
		var j2 int
		for _, num := range m.SpotOrderIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSpotOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSpotOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSpotOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerpetualOpenOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetualOpenOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetualOpenOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.StopLossPrice.Size()
		i -= size
		if _, err := m.StopLossPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.TakeProfitPrice.Size()
		i -= size
		if _, err := m.TakeProfitPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Position != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TradingAsset) > 0 {
		i -= len(m.TradingAsset)
		copy(dAtA[i:], m.TradingAsset)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TradingAsset)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Collateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerpetualOpenOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetualOpenOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetualOpenOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerpetualCloseOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetualCloseOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetualCloseOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreatePerpetualCloseOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreatePerpetualCloseOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreatePerpetualCloseOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TriggerPrice.Size()
		i -= size
		if _, err := m.TriggerPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePerpetualOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePerpetualOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePerpetualOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelPerpetualOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPerpetualOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPerpetualOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelPerpetualOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPerpetualOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPerpetualOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OrderId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OrderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelPerpetualOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPerpetualOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPerpetualOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		dAtA6 := make([]byte, len(m.OrderIds)*10)
		var j5 int
		for _, num := range m.OrderIds {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTx(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelPerpetualOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelPerpetualOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelPerpetualOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteOrders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteOrders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteOrders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PerpetualOrderIds) > 0 {
		dAtA9 := make([]byte, len(m.PerpetualOrderIds)*10)
		var j8 int
		for _, num := range m.PerpetualOrderIds {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTx(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SpotOrderIds) > 0 {
		dAtA11 := make([]byte, len(m.SpotOrderIds)*10)
		var j10 int
		for _, num := range m.SpotOrderIds {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTx(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteOrdersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteOrdersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteOrdersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateSpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderType != 0 {
		n += 1 + sovTx(uint64(m.OrderType))
	}
	l = m.OrderPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OrderAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OrderTargetDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateSpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgUpdateSpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	l = m.OrderPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateSpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelSpotOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCancelSpotOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCancelSpotOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SpotOrderIds) > 0 {
		l = 0
		for _, e := range m.SpotOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgCancelSpotOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreatePerpetualOpenOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Collateral.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.TradingAsset)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovTx(uint64(m.Position))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TakeProfitPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.StopLossPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	return n
}

func (m *MsgCreatePerpetualOpenOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCreatePerpetualCloseOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	return n
}

func (m *MsgCreatePerpetualCloseOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgUpdatePerpetualOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	l = m.TriggerPrice.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdatePerpetualOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelPerpetualOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCancelPerpetualOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OrderId != 0 {
		n += 1 + sovTx(uint64(m.OrderId))
	}
	return n
}

func (m *MsgCancelPerpetualOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.OrderIds) > 0 {
		l = 0
		for _, e := range m.OrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgCancelPerpetualOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteOrders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SpotOrderIds) > 0 {
		l = 0
		for _, e := range m.SpotOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	if len(m.PerpetualOrderIds) > 0 {
		l = 0
		for _, e := range m.PerpetualOrderIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgExecuteOrdersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateSpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= SpotOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderTargetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderTargetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateSpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateSpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateSpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrderPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSpotOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSpotOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSpotOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSpotOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSpotOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSpotOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSpotOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSpotOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSpotOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpotOrderIds = append(m.SpotOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SpotOrderIds) == 0 {
					m.SpotOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpotOrderIds = append(m.SpotOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotOrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSpotOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSpotOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSpotOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerpetualOpenOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetualOpenOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetualOpenOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradingAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradingAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= PerpetualPosition(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakeProfitPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StopLossPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerpetualOpenOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetualOpenOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetualOpenOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerpetualCloseOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetualCloseOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetualCloseOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreatePerpetualCloseOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreatePerpetualCloseOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreatePerpetualCloseOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TriggerPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePerpetualOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePerpetualOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePerpetualOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPerpetualOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPerpetualOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			m.OrderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPerpetualOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderIds = append(m.OrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OrderIds) == 0 {
					m.OrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderIds = append(m.OrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelPerpetualOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelPerpetualOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteOrders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteOrders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteOrders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SpotOrderIds = append(m.SpotOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SpotOrderIds) == 0 {
					m.SpotOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SpotOrderIds = append(m.SpotOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotOrderIds", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PerpetualOrderIds = append(m.PerpetualOrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PerpetualOrderIds) == 0 {
					m.PerpetualOrderIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PerpetualOrderIds = append(m.PerpetualOrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PerpetualOrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteOrdersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteOrdersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteOrdersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
