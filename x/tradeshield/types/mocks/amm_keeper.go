// Code generated by mockery v2.47.0. DO NOT EDIT.

package mocks

import (
	ammtypes "github.com/elys-network/elys/x/amm/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// AmmKeeper is an autogenerated mock type for the AmmKeeper type
type AmmKeeper struct {
	mock.Mock
}

type AmmKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AmmKeeper) EXPECT() *AmmKeeper_Expecter {
	return &AmmKeeper_Expecter{mock: &_m.Mock}
}

// SwapByDenom provides a mock function with given fields: ctx, msg
func (_m *AmmKeeper) SwapByDenom(ctx types.Context, msg *ammtypes.MsgSwapByDenom) (*ammtypes.MsgSwapByDenomResponse, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SwapByDenom")
	}

	var r0 *ammtypes.MsgSwapByDenomResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *ammtypes.MsgSwapByDenom) (*ammtypes.MsgSwapByDenomResponse, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *ammtypes.MsgSwapByDenom) *ammtypes.MsgSwapByDenomResponse); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ammtypes.MsgSwapByDenomResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *ammtypes.MsgSwapByDenom) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AmmKeeper_SwapByDenom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwapByDenom'
type AmmKeeper_SwapByDenom_Call struct {
	*mock.Call
}

// SwapByDenom is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *ammtypes.MsgSwapByDenom
func (_e *AmmKeeper_Expecter) SwapByDenom(ctx interface{}, msg interface{}) *AmmKeeper_SwapByDenom_Call {
	return &AmmKeeper_SwapByDenom_Call{Call: _e.mock.On("SwapByDenom", ctx, msg)}
}

func (_c *AmmKeeper_SwapByDenom_Call) Run(run func(ctx types.Context, msg *ammtypes.MsgSwapByDenom)) *AmmKeeper_SwapByDenom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*ammtypes.MsgSwapByDenom))
	})
	return _c
}

func (_c *AmmKeeper_SwapByDenom_Call) Return(_a0 *ammtypes.MsgSwapByDenomResponse, _a1 error) *AmmKeeper_SwapByDenom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AmmKeeper_SwapByDenom_Call) RunAndReturn(run func(types.Context, *ammtypes.MsgSwapByDenom) (*ammtypes.MsgSwapByDenomResponse, error)) *AmmKeeper_SwapByDenom_Call {
	_c.Call.Return(run)
	return _c
}

// NewAmmKeeper creates a new instance of AmmKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAmmKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *AmmKeeper {
	mock := &AmmKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
