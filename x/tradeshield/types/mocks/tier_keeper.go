// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	math "cosmossdk.io/math"
	tiertypes "github.com/elys-network/elys/x/tier/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// TierKeeper is an autogenerated mock type for the TierKeeper type
type TierKeeper struct {
	mock.Mock
}

type TierKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *TierKeeper) EXPECT() *TierKeeper_Expecter {
	return &TierKeeper_Expecter{mock: &_m.Mock}
}

// CalculateUSDValue provides a mock function with given fields: ctx, denom, amount
func (_m *TierKeeper) CalculateUSDValue(ctx types.Context, denom string, amount math.Int) math.LegacyDec {
	ret := _m.Called(ctx, denom, amount)

	if len(ret) == 0 {
		panic("no return value specified for CalculateUSDValue")
	}

	var r0 math.LegacyDec
	if rf, ok := ret.Get(0).(func(types.Context, string, math.Int) math.LegacyDec); ok {
		r0 = rf(ctx, denom, amount)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	return r0
}

// TierKeeper_CalculateUSDValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateUSDValue'
type TierKeeper_CalculateUSDValue_Call struct {
	*mock.Call
}

// CalculateUSDValue is a helper method to define mock.On call
//   - ctx types.Context
//   - denom string
//   - amount math.Int
func (_e *TierKeeper_Expecter) CalculateUSDValue(ctx interface{}, denom interface{}, amount interface{}) *TierKeeper_CalculateUSDValue_Call {
	return &TierKeeper_CalculateUSDValue_Call{Call: _e.mock.On("CalculateUSDValue", ctx, denom, amount)}
}

func (_c *TierKeeper_CalculateUSDValue_Call) Run(run func(ctx types.Context, denom string, amount math.Int)) *TierKeeper_CalculateUSDValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(string), args[2].(math.Int))
	})
	return _c
}

func (_c *TierKeeper_CalculateUSDValue_Call) Return(_a0 math.LegacyDec) *TierKeeper_CalculateUSDValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TierKeeper_CalculateUSDValue_Call) RunAndReturn(run func(types.Context, string, math.Int) math.LegacyDec) *TierKeeper_CalculateUSDValue_Call {
	_c.Call.Return(run)
	return _c
}

// GetMembershipTier provides a mock function with given fields: ctx, user
func (_m *TierKeeper) GetMembershipTier(ctx types.Context, user types.AccAddress) (math.LegacyDec, tiertypes.MembershipTier) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetMembershipTier")
	}

	var r0 math.LegacyDec
	var r1 tiertypes.MembershipTier
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) (math.LegacyDec, tiertypes.MembershipTier)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) math.LegacyDec); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress) tiertypes.MembershipTier); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Get(1).(tiertypes.MembershipTier)
	}

	return r0, r1
}

// TierKeeper_GetMembershipTier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMembershipTier'
type TierKeeper_GetMembershipTier_Call struct {
	*mock.Call
}

// GetMembershipTier is a helper method to define mock.On call
//   - ctx types.Context
//   - user types.AccAddress
func (_e *TierKeeper_Expecter) GetMembershipTier(ctx interface{}, user interface{}) *TierKeeper_GetMembershipTier_Call {
	return &TierKeeper_GetMembershipTier_Call{Call: _e.mock.On("GetMembershipTier", ctx, user)}
}

func (_c *TierKeeper_GetMembershipTier_Call) Run(run func(ctx types.Context, user types.AccAddress)) *TierKeeper_GetMembershipTier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *TierKeeper_GetMembershipTier_Call) Return(total_portfolio math.LegacyDec, tier tiertypes.MembershipTier) *TierKeeper_GetMembershipTier_Call {
	_c.Call.Return(total_portfolio, tier)
	return _c
}

func (_c *TierKeeper_GetMembershipTier_Call) RunAndReturn(run func(types.Context, types.AccAddress) (math.LegacyDec, tiertypes.MembershipTier)) *TierKeeper_GetMembershipTier_Call {
	_c.Call.Return(run)
	return _c
}

// NewTierKeeper creates a new instance of TierKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTierKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *TierKeeper {
	mock := &TierKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
