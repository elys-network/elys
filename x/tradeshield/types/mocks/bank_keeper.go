// Code generated by mockery v2.46.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// BankKeeper is an autogenerated mock type for the BankKeeper type
type BankKeeper struct {
	mock.Mock
}

type BankKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *BankKeeper) EXPECT() *BankKeeper_Expecter {
	return &BankKeeper_Expecter{mock: &_m.Mock}
}

// SendCoins provides a mock function with given fields: goCtx, fromAddr, toAddr, amt
func (_m *BankKeeper) SendCoins(goCtx context.Context, fromAddr types.AccAddress, toAddr types.AccAddress, amt types.Coins) error {
	ret := _m.Called(goCtx, fromAddr, toAddr, amt)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.AccAddress, types.Coins) error); ok {
		r0 = rf(goCtx, fromAddr, toAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BankKeeper_SendCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendCoins'
type BankKeeper_SendCoins_Call struct {
	*mock.Call
}

// SendCoins is a helper method to define mock.On call
//   - goCtx context.Context
//   - fromAddr types.AccAddress
//   - toAddr types.AccAddress
//   - amt types.Coins
func (_e *BankKeeper_Expecter) SendCoins(goCtx interface{}, fromAddr interface{}, toAddr interface{}, amt interface{}) *BankKeeper_SendCoins_Call {
	return &BankKeeper_SendCoins_Call{Call: _e.mock.On("SendCoins", goCtx, fromAddr, toAddr, amt)}
}

func (_c *BankKeeper_SendCoins_Call) Run(run func(goCtx context.Context, fromAddr types.AccAddress, toAddr types.AccAddress, amt types.Coins)) *BankKeeper_SendCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress), args[2].(types.AccAddress), args[3].(types.Coins))
	})
	return _c
}

func (_c *BankKeeper_SendCoins_Call) Return(_a0 error) *BankKeeper_SendCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SendCoins_Call) RunAndReturn(run func(context.Context, types.AccAddress, types.AccAddress, types.Coins) error) *BankKeeper_SendCoins_Call {
	_c.Call.Return(run)
	return _c
}

// SpendableCoins provides a mock function with given fields: ctx, addr
func (_m *BankKeeper) SpendableCoins(ctx context.Context, addr types.AccAddress) types.Coins {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for SpendableCoins")
	}

	var r0 types.Coins
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) types.Coins); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Coins)
		}
	}

	return r0
}

// BankKeeper_SpendableCoins_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpendableCoins'
type BankKeeper_SpendableCoins_Call struct {
	*mock.Call
}

// SpendableCoins is a helper method to define mock.On call
//   - ctx context.Context
//   - addr types.AccAddress
func (_e *BankKeeper_Expecter) SpendableCoins(ctx interface{}, addr interface{}) *BankKeeper_SpendableCoins_Call {
	return &BankKeeper_SpendableCoins_Call{Call: _e.mock.On("SpendableCoins", ctx, addr)}
}

func (_c *BankKeeper_SpendableCoins_Call) Run(run func(ctx context.Context, addr types.AccAddress)) *BankKeeper_SpendableCoins_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.AccAddress))
	})
	return _c
}

func (_c *BankKeeper_SpendableCoins_Call) Return(_a0 types.Coins) *BankKeeper_SpendableCoins_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BankKeeper_SpendableCoins_Call) RunAndReturn(run func(context.Context, types.AccAddress) types.Coins) *BankKeeper_SpendableCoins_Call {
	_c.Call.Return(run)
	return _c
}

// NewBankKeeper creates a new instance of BankKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBankKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *BankKeeper {
	mock := &BankKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
