// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	perpetualtypes "github.com/elys-network/elys/x/perpetual/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// PerpetualKeeper is an autogenerated mock type for the PerpetualKeeper type
type PerpetualKeeper struct {
	mock.Mock
}

type PerpetualKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *PerpetualKeeper) EXPECT() *PerpetualKeeper_Expecter {
	return &PerpetualKeeper_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx, msg
func (_m *PerpetualKeeper) Close(ctx types.Context, msg *perpetualtypes.MsgClose) (*perpetualtypes.MsgCloseResponse, error) {
	ret := _m.Called(ctx, msg)

	var r0 *perpetualtypes.MsgCloseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *perpetualtypes.MsgClose) (*perpetualtypes.MsgCloseResponse, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *perpetualtypes.MsgClose) *perpetualtypes.MsgCloseResponse); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*perpetualtypes.MsgCloseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *perpetualtypes.MsgClose) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerpetualKeeper_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type PerpetualKeeper_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *perpetualtypes.MsgClose
func (_e *PerpetualKeeper_Expecter) Close(ctx interface{}, msg interface{}) *PerpetualKeeper_Close_Call {
	return &PerpetualKeeper_Close_Call{Call: _e.mock.On("Close", ctx, msg)}
}

func (_c *PerpetualKeeper_Close_Call) Run(run func(ctx types.Context, msg *perpetualtypes.MsgClose)) *PerpetualKeeper_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*perpetualtypes.MsgClose))
	})
	return _c
}

func (_c *PerpetualKeeper_Close_Call) Return(_a0 *perpetualtypes.MsgCloseResponse, _a1 error) *PerpetualKeeper_Close_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerpetualKeeper_Close_Call) RunAndReturn(run func(types.Context, *perpetualtypes.MsgClose) (*perpetualtypes.MsgCloseResponse, error)) *PerpetualKeeper_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Open provides a mock function with given fields: ctx, msg, isBroker
func (_m *PerpetualKeeper) Open(ctx types.Context, msg *perpetualtypes.MsgOpen, isBroker bool) (*perpetualtypes.MsgOpenResponse, error) {
	ret := _m.Called(ctx, msg, isBroker)

	var r0 *perpetualtypes.MsgOpenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, *perpetualtypes.MsgOpen, bool) (*perpetualtypes.MsgOpenResponse, error)); ok {
		return rf(ctx, msg, isBroker)
	}
	if rf, ok := ret.Get(0).(func(types.Context, *perpetualtypes.MsgOpen, bool) *perpetualtypes.MsgOpenResponse); ok {
		r0 = rf(ctx, msg, isBroker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*perpetualtypes.MsgOpenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, *perpetualtypes.MsgOpen, bool) error); ok {
		r1 = rf(ctx, msg, isBroker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PerpetualKeeper_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type PerpetualKeeper_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - ctx types.Context
//   - msg *perpetualtypes.MsgOpen
//   - isBroker bool
func (_e *PerpetualKeeper_Expecter) Open(ctx interface{}, msg interface{}, isBroker interface{}) *PerpetualKeeper_Open_Call {
	return &PerpetualKeeper_Open_Call{Call: _e.mock.On("Open", ctx, msg, isBroker)}
}

func (_c *PerpetualKeeper_Open_Call) Run(run func(ctx types.Context, msg *perpetualtypes.MsgOpen, isBroker bool)) *PerpetualKeeper_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Context), args[1].(*perpetualtypes.MsgOpen), args[2].(bool))
	})
	return _c
}

func (_c *PerpetualKeeper_Open_Call) Return(_a0 *perpetualtypes.MsgOpenResponse, _a1 error) *PerpetualKeeper_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PerpetualKeeper_Open_Call) RunAndReturn(run func(types.Context, *perpetualtypes.MsgOpen, bool) (*perpetualtypes.MsgOpenResponse, error)) *PerpetualKeeper_Open_Call {
	_c.Call.Return(run)
	return _c
}

// NewPerpetualKeeper creates a new instance of PerpetualKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPerpetualKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *PerpetualKeeper {
	mock := &PerpetualKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
