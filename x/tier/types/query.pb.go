// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/tier/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetPortfolioRequest struct {
	User      string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	AssetType string `protobuf:"bytes,2,opt,name=assetType,proto3" json:"assetType,omitempty"`
}

func (m *QueryGetPortfolioRequest) Reset()         { *m = QueryGetPortfolioRequest{} }
func (m *QueryGetPortfolioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPortfolioRequest) ProtoMessage()    {}
func (*QueryGetPortfolioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{2}
}
func (m *QueryGetPortfolioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPortfolioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPortfolioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPortfolioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPortfolioRequest.Merge(m, src)
}
func (m *QueryGetPortfolioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPortfolioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPortfolioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPortfolioRequest proto.InternalMessageInfo

func (m *QueryGetPortfolioRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *QueryGetPortfolioRequest) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

type QueryGetPortfolioResponse struct {
	TotalPortfolio string `protobuf:"bytes,1,opt,name=total_portfolio,json=totalPortfolio,proto3" json:"total_portfolio,omitempty"`
}

func (m *QueryGetPortfolioResponse) Reset()         { *m = QueryGetPortfolioResponse{} }
func (m *QueryGetPortfolioResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPortfolioResponse) ProtoMessage()    {}
func (*QueryGetPortfolioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{3}
}
func (m *QueryGetPortfolioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPortfolioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPortfolioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPortfolioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPortfolioResponse.Merge(m, src)
}
func (m *QueryGetPortfolioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPortfolioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPortfolioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPortfolioResponse proto.InternalMessageInfo

func (m *QueryGetPortfolioResponse) GetTotalPortfolio() string {
	if m != nil {
		return m.TotalPortfolio
	}
	return ""
}

type QueryAllPortfolioRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPortfolioRequest) Reset()         { *m = QueryAllPortfolioRequest{} }
func (m *QueryAllPortfolioRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPortfolioRequest) ProtoMessage()    {}
func (*QueryAllPortfolioRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{4}
}
func (m *QueryAllPortfolioRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPortfolioRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPortfolioRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPortfolioRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPortfolioRequest.Merge(m, src)
}
func (m *QueryAllPortfolioRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPortfolioRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPortfolioRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPortfolioRequest proto.InternalMessageInfo

func (m *QueryAllPortfolioRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPortfolioResponse struct {
	Portfolio  []Portfolio         `protobuf:"bytes,1,rep,name=portfolio,proto3" json:"portfolio"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPortfolioResponse) Reset()         { *m = QueryAllPortfolioResponse{} }
func (m *QueryAllPortfolioResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPortfolioResponse) ProtoMessage()    {}
func (*QueryAllPortfolioResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{5}
}
func (m *QueryAllPortfolioResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPortfolioResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPortfolioResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPortfolioResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPortfolioResponse.Merge(m, src)
}
func (m *QueryAllPortfolioResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPortfolioResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPortfolioResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPortfolioResponse proto.InternalMessageInfo

func (m *QueryAllPortfolioResponse) GetPortfolio() []Portfolio {
	if m != nil {
		return m.Portfolio
	}
	return nil
}

func (m *QueryAllPortfolioResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCalculateDiscountRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryCalculateDiscountRequest) Reset()         { *m = QueryCalculateDiscountRequest{} }
func (m *QueryCalculateDiscountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateDiscountRequest) ProtoMessage()    {}
func (*QueryCalculateDiscountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{6}
}
func (m *QueryCalculateDiscountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateDiscountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateDiscountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateDiscountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateDiscountRequest.Merge(m, src)
}
func (m *QueryCalculateDiscountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateDiscountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateDiscountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateDiscountRequest proto.InternalMessageInfo

func (m *QueryCalculateDiscountRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryCalculateDiscountResponse struct {
	Discount  string `protobuf:"bytes,1,opt,name=discount,proto3" json:"discount,omitempty"`
	Tier      string `protobuf:"bytes,2,opt,name=tier,proto3" json:"tier,omitempty"`
	Portfolio string `protobuf:"bytes,3,opt,name=portfolio,proto3" json:"portfolio,omitempty"`
}

func (m *QueryCalculateDiscountResponse) Reset()         { *m = QueryCalculateDiscountResponse{} }
func (m *QueryCalculateDiscountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCalculateDiscountResponse) ProtoMessage()    {}
func (*QueryCalculateDiscountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{7}
}
func (m *QueryCalculateDiscountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCalculateDiscountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCalculateDiscountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCalculateDiscountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCalculateDiscountResponse.Merge(m, src)
}
func (m *QueryCalculateDiscountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCalculateDiscountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCalculateDiscountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCalculateDiscountResponse proto.InternalMessageInfo

func (m *QueryCalculateDiscountResponse) GetDiscount() string {
	if m != nil {
		return m.Discount
	}
	return ""
}

func (m *QueryCalculateDiscountResponse) GetTier() string {
	if m != nil {
		return m.Tier
	}
	return ""
}

func (m *QueryCalculateDiscountResponse) GetPortfolio() string {
	if m != nil {
		return m.Portfolio
	}
	return ""
}

type QueryLeverageLpTotalRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryLeverageLpTotalRequest) Reset()         { *m = QueryLeverageLpTotalRequest{} }
func (m *QueryLeverageLpTotalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLeverageLpTotalRequest) ProtoMessage()    {}
func (*QueryLeverageLpTotalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{8}
}
func (m *QueryLeverageLpTotalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeverageLpTotalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeverageLpTotalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeverageLpTotalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeverageLpTotalRequest.Merge(m, src)
}
func (m *QueryLeverageLpTotalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeverageLpTotalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeverageLpTotalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeverageLpTotalRequest proto.InternalMessageInfo

func (m *QueryLeverageLpTotalRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryLeverageLpTotalResponse struct {
	Total github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=total,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total"`
}

func (m *QueryLeverageLpTotalResponse) Reset()         { *m = QueryLeverageLpTotalResponse{} }
func (m *QueryLeverageLpTotalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLeverageLpTotalResponse) ProtoMessage()    {}
func (*QueryLeverageLpTotalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{9}
}
func (m *QueryLeverageLpTotalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLeverageLpTotalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLeverageLpTotalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLeverageLpTotalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLeverageLpTotalResponse.Merge(m, src)
}
func (m *QueryLeverageLpTotalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLeverageLpTotalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLeverageLpTotalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLeverageLpTotalResponse proto.InternalMessageInfo

type QueryRewardsTotalRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryRewardsTotalRequest) Reset()         { *m = QueryRewardsTotalRequest{} }
func (m *QueryRewardsTotalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsTotalRequest) ProtoMessage()    {}
func (*QueryRewardsTotalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{10}
}
func (m *QueryRewardsTotalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsTotalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsTotalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsTotalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsTotalRequest.Merge(m, src)
}
func (m *QueryRewardsTotalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsTotalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsTotalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsTotalRequest proto.InternalMessageInfo

func (m *QueryRewardsTotalRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryRewardsTotalResponse struct {
}

func (m *QueryRewardsTotalResponse) Reset()         { *m = QueryRewardsTotalResponse{} }
func (m *QueryRewardsTotalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsTotalResponse) ProtoMessage()    {}
func (*QueryRewardsTotalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{11}
}
func (m *QueryRewardsTotalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsTotalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsTotalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsTotalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsTotalResponse.Merge(m, src)
}
func (m *QueryRewardsTotalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsTotalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsTotalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsTotalResponse proto.InternalMessageInfo

type QueryStakedPoolRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryStakedPoolRequest) Reset()         { *m = QueryStakedPoolRequest{} }
func (m *QueryStakedPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedPoolRequest) ProtoMessage()    {}
func (*QueryStakedPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{12}
}
func (m *QueryStakedPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedPoolRequest.Merge(m, src)
}
func (m *QueryStakedPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedPoolRequest proto.InternalMessageInfo

func (m *QueryStakedPoolRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryStakedPoolResponse struct {
}

func (m *QueryStakedPoolResponse) Reset()         { *m = QueryStakedPoolResponse{} }
func (m *QueryStakedPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedPoolResponse) ProtoMessage()    {}
func (*QueryStakedPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{13}
}
func (m *QueryStakedPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedPoolResponse.Merge(m, src)
}
func (m *QueryStakedPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedPoolResponse proto.InternalMessageInfo

type QueryPerpetualRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryPerpetualRequest) Reset()         { *m = QueryPerpetualRequest{} }
func (m *QueryPerpetualRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualRequest) ProtoMessage()    {}
func (*QueryPerpetualRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{14}
}
func (m *QueryPerpetualRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualRequest.Merge(m, src)
}
func (m *QueryPerpetualRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualRequest proto.InternalMessageInfo

func (m *QueryPerpetualRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryPerpetualResponse struct {
}

func (m *QueryPerpetualResponse) Reset()         { *m = QueryPerpetualResponse{} }
func (m *QueryPerpetualResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPerpetualResponse) ProtoMessage()    {}
func (*QueryPerpetualResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_461504ebf74c9a97, []int{15}
}
func (m *QueryPerpetualResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPerpetualResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPerpetualResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPerpetualResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPerpetualResponse.Merge(m, src)
}
func (m *QueryPerpetualResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPerpetualResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPerpetualResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPerpetualResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "elys.tier.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "elys.tier.QueryParamsResponse")
	proto.RegisterType((*QueryGetPortfolioRequest)(nil), "elys.tier.QueryGetPortfolioRequest")
	proto.RegisterType((*QueryGetPortfolioResponse)(nil), "elys.tier.QueryGetPortfolioResponse")
	proto.RegisterType((*QueryAllPortfolioRequest)(nil), "elys.tier.QueryAllPortfolioRequest")
	proto.RegisterType((*QueryAllPortfolioResponse)(nil), "elys.tier.QueryAllPortfolioResponse")
	proto.RegisterType((*QueryCalculateDiscountRequest)(nil), "elys.tier.QueryCalculateDiscountRequest")
	proto.RegisterType((*QueryCalculateDiscountResponse)(nil), "elys.tier.QueryCalculateDiscountResponse")
	proto.RegisterType((*QueryLeverageLpTotalRequest)(nil), "elys.tier.QueryLeverageLpTotalRequest")
	proto.RegisterType((*QueryLeverageLpTotalResponse)(nil), "elys.tier.QueryLeverageLpTotalResponse")
	proto.RegisterType((*QueryRewardsTotalRequest)(nil), "elys.tier.QueryRewardsTotalRequest")
	proto.RegisterType((*QueryRewardsTotalResponse)(nil), "elys.tier.QueryRewardsTotalResponse")
	proto.RegisterType((*QueryStakedPoolRequest)(nil), "elys.tier.QueryStakedPoolRequest")
	proto.RegisterType((*QueryStakedPoolResponse)(nil), "elys.tier.QueryStakedPoolResponse")
	proto.RegisterType((*QueryPerpetualRequest)(nil), "elys.tier.QueryPerpetualRequest")
	proto.RegisterType((*QueryPerpetualResponse)(nil), "elys.tier.QueryPerpetualResponse")
}

func init() { proto.RegisterFile("elys/tier/query.proto", fileDescriptor_461504ebf74c9a97) }

var fileDescriptor_461504ebf74c9a97 = []byte{
	// 873 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x4f, 0xe3, 0x46,
	0x14, 0xc7, 0x63, 0x76, 0x17, 0x35, 0xb3, 0xab, 0xae, 0x76, 0xca, 0x6e, 0x83, 0x97, 0xf5, 0x82,
	0x5b, 0x41, 0xf8, 0x65, 0x43, 0xe8, 0x01, 0xa9, 0x6a, 0x55, 0x20, 0x82, 0x0b, 0x87, 0x34, 0xe5,
	0xd4, 0x4b, 0x34, 0x49, 0xa6, 0xc6, 0xc2, 0xf1, 0x18, 0xcf, 0x04, 0x1a, 0x21, 0x2e, 0x5c, 0x7a,
	0x6b, 0x2b, 0xf5, 0x5a, 0x71, 0xea, 0xb5, 0xff, 0x07, 0x47, 0xa4, 0x5e, 0xaa, 0x1e, 0x50, 0x05,
	0xfd, 0x43, 0x2a, 0xcf, 0x3c, 0x3b, 0x4e, 0xec, 0x24, 0xec, 0x09, 0x67, 0xe6, 0xfb, 0xbe, 0xef,
	0x33, 0xf3, 0xe6, 0x3d, 0x81, 0x5e, 0x53, 0xaf, 0xc7, 0x6d, 0xe1, 0xd2, 0xd0, 0x3e, 0xed, 0xd2,
	0xb0, 0x67, 0x05, 0x21, 0x13, 0x0c, 0x17, 0xa3, 0x65, 0x2b, 0x5a, 0xd6, 0x67, 0x1c, 0xe6, 0x30,
	0xb9, 0x6a, 0x47, 0x5f, 0x4a, 0xa0, 0xcf, 0x39, 0x8c, 0x39, 0x1e, 0xb5, 0x49, 0xe0, 0xda, 0xc4,
	0xf7, 0x99, 0x20, 0xc2, 0x65, 0x3e, 0x87, 0xdd, 0x95, 0x16, 0xe3, 0x1d, 0xc6, 0xed, 0x26, 0xe1,
	0x54, 0xf9, 0xda, 0x67, 0x9b, 0x4d, 0x2a, 0xc8, 0xa6, 0x1d, 0x10, 0xc7, 0xf5, 0xa5, 0x18, 0xb4,
	0x6f, 0xfa, 0x04, 0x01, 0x09, 0x49, 0x27, 0xf6, 0x98, 0x4d, 0xad, 0xb3, 0x50, 0xfc, 0xc0, 0x3c,
	0x17, 0x92, 0x9b, 0x33, 0x08, 0x7f, 0x1b, 0x99, 0xd6, 0xa4, 0xbe, 0x4e, 0x4f, 0xbb, 0x94, 0x0b,
	0x73, 0x1f, 0x7d, 0x32, 0xb0, 0xca, 0x03, 0xe6, 0x73, 0x8a, 0x6d, 0x34, 0xad, 0x7c, 0x4b, 0xda,
	0xbc, 0x56, 0x7e, 0x5e, 0x79, 0x65, 0x25, 0x67, 0xb3, 0x94, 0x74, 0xf7, 0xe9, 0xcd, 0xdd, 0xfb,
	0x42, 0x1d, 0x64, 0xe6, 0x21, 0x2a, 0x49, 0x9f, 0x03, 0x2a, 0x6a, 0x71, 0x62, 0xc8, 0x81, 0x31,
	0x7a, 0xda, 0xe5, 0x34, 0x94, 0x56, 0xc5, 0xba, 0xfc, 0xc6, 0x73, 0xa8, 0x48, 0x38, 0xa7, 0xe2,
	0xa8, 0x17, 0xd0, 0xd2, 0x94, 0xdc, 0xe8, 0x2f, 0x98, 0x55, 0x34, 0x9b, 0xe3, 0x06, 0x6c, 0x4b,
	0xe8, 0xa5, 0x60, 0x82, 0x78, 0x8d, 0xe4, 0x84, 0xe0, 0xfc, 0xb1, 0x5c, 0x4e, 0x02, 0xcc, 0x26,
	0x30, 0xed, 0x78, 0x5e, 0x86, 0x69, 0x1f, 0xa1, 0xfe, 0xa5, 0xc2, 0x21, 0x17, 0x2d, 0x55, 0x01,
	0x2b, 0xaa, 0x80, 0xa5, 0x2a, 0x0b, 0x15, 0xb0, 0x6a, 0xc4, 0xa1, 0x10, 0x5b, 0x4f, 0x45, 0x9a,
	0xd7, 0x1a, 0xa0, 0x0e, 0x26, 0x01, 0xd4, 0x6d, 0x54, 0x4c, 0x43, 0x3e, 0x29, 0x3f, 0xaf, 0xcc,
	0xa4, 0x6f, 0x32, 0xde, 0x83, 0xcb, 0xec, 0x8b, 0xf1, 0xc1, 0x00, 0xdf, 0x94, 0xe4, 0x5b, 0x9a,
	0xc8, 0xa7, 0xd2, 0x0e, 0x00, 0x6e, 0xa1, 0x77, 0x92, 0x6f, 0x8f, 0x78, 0xad, 0xae, 0x47, 0x04,
	0xad, 0xba, 0xbc, 0xc5, 0xba, 0xbe, 0x18, 0x53, 0x1d, 0xd3, 0x47, 0xc6, 0xa8, 0x20, 0x38, 0x99,
	0x8e, 0x3e, 0x6a, 0xc3, 0x1a, 0x44, 0x26, 0xbf, 0x23, 0xc7, 0xe8, 0x78, 0x50, 0x56, 0xf9, 0x1d,
	0xd5, 0xbb, 0x7f, 0x13, 0x4f, 0x54, 0xbd, 0x93, 0x05, 0x73, 0x13, 0xbd, 0x95, 0xf9, 0x0e, 0xe9,
	0x19, 0x0d, 0x89, 0x43, 0x0f, 0x83, 0xa3, 0xa8, 0x94, 0xe3, 0x10, 0xdb, 0x68, 0x2e, 0x3f, 0x04,
	0x00, 0xab, 0xe8, 0x99, 0x7c, 0x0e, 0x2a, 0x68, 0xd7, 0x8a, 0x2e, 0xf8, 0x9f, 0xbb, 0xf7, 0x8b,
	0x8e, 0x2b, 0x8e, 0xbb, 0x4d, 0xab, 0xc5, 0x3a, 0x36, 0xf4, 0x9b, 0xfa, 0xb3, 0xce, 0xdb, 0x27,
	0xb6, 0xe8, 0x05, 0x94, 0x5b, 0x55, 0xda, 0xaa, 0xab, 0x60, 0xd3, 0x82, 0x27, 0x54, 0xa7, 0xe7,
	0x24, 0x6c, 0xf3, 0x89, 0x54, 0x6f, 0xe1, 0x35, 0x0c, 0xea, 0x15, 0x92, 0xb9, 0x86, 0xde, 0xc8,
	0xcd, 0xef, 0x04, 0x39, 0xa1, 0xed, 0x1a, 0x63, 0x63, 0xad, 0x66, 0xd1, 0xa7, 0x19, 0x35, 0x18,
	0xad, 0xa2, 0xd7, 0xaa, 0x69, 0x69, 0x18, 0x50, 0xd1, 0x1d, 0x8f, 0x54, 0x82, 0xac, 0x29, 0xb1,
	0xb2, 0xa9, 0xfc, 0x51, 0x44, 0xcf, 0xe4, 0x16, 0xee, 0xa1, 0x69, 0xd5, 0xd5, 0xf8, 0x5d, 0xea,
	0x79, 0x66, 0xc7, 0x85, 0x6e, 0x8c, 0xda, 0x06, 0xb2, 0x8d, 0xab, 0xbf, 0xfe, 0xfb, 0x6d, 0x6a,
	0x05, 0x97, 0xed, 0x48, 0xb7, 0xee, 0x53, 0x71, 0xce, 0xc2, 0x13, 0xf9, 0xc3, 0xee, 0xd0, 0x4e,
	0x93, 0x86, 0xfc, 0xd8, 0x0d, 0x52, 0x73, 0x0b, 0x5f, 0x6b, 0xa8, 0x98, 0xf4, 0x01, 0xfe, 0x6c,
	0xd8, 0x3f, 0x67, 0x9e, 0xe8, 0x9f, 0x8f, 0x17, 0x01, 0xca, 0xbe, 0x44, 0xf9, 0x06, 0x7f, 0xfd,
	0x08, 0x94, 0x38, 0xd8, 0xbe, 0x88, 0xae, 0xec, 0xd2, 0xbe, 0x48, 0x46, 0xd1, 0x25, 0xfe, 0x59,
	0x43, 0x2f, 0x12, 0xf7, 0x1d, 0xcf, 0xcb, 0x32, 0xe6, 0xcc, 0x97, 0x2c, 0x63, 0xde, 0x7c, 0x30,
	0xb7, 0x24, 0xe3, 0x3a, 0x5e, 0xfd, 0x00, 0x46, 0xfc, 0xa7, 0x86, 0x5e, 0x65, 0x1a, 0x13, 0x97,
	0x87, 0x13, 0x8e, 0x6a, 0x78, 0x7d, 0xf9, 0x11, 0x4a, 0xe0, 0xdb, 0x93, 0x7c, 0x5f, 0xe1, 0x2f,
	0x27, 0xf3, 0xb5, 0x62, 0x93, 0x46, 0x3c, 0x07, 0xe0, 0x32, 0xf1, 0xef, 0x1a, 0x7a, 0x39, 0xd4,
	0xa5, 0x78, 0x71, 0x98, 0x21, 0xbf, 0xf3, 0xf5, 0xa5, 0x89, 0x3a, 0x20, 0xdd, 0x96, 0xa4, 0x15,
	0xbc, 0x91, 0x43, 0x2a, 0xf9, 0x3c, 0x08, 0x6c, 0x78, 0x41, 0x43, 0xf6, 0x76, 0x8c, 0xf7, 0x8b,
	0x86, 0x5e, 0xa4, 0xdb, 0x35, 0x5b, 0xdf, 0x9c, 0xe6, 0xcf, 0xd6, 0x37, 0xb7, 0xe3, 0xbf, 0x90,
	0x54, 0x16, 0x5e, 0x1b, 0x45, 0x15, 0xaa, 0xa8, 0x41, 0xa2, 0x9f, 0x34, 0x84, 0xfa, 0x5d, 0x8f,
	0x17, 0x86, 0x53, 0x65, 0xe6, 0x87, 0x6e, 0x8e, 0x93, 0x00, 0x4b, 0x45, 0xb2, 0xac, 0xe1, 0x95,
	0x51, 0x2c, 0x5c, 0xc6, 0x34, 0x02, 0xc6, 0x12, 0x92, 0xab, 0xa8, 0x39, 0xe3, 0xb9, 0x81, 0xe7,
	0x33, 0xcd, 0x3f, 0x34, 0x7f, 0xf4, 0x85, 0x31, 0x8a, 0x47, 0x4c, 0x08, 0xf5, 0xd0, 0xe3, 0x10,
	0x80, 0xd8, 0xdd, 0xbb, 0xb9, 0x37, 0xb4, 0xdb, 0x7b, 0x43, 0xfb, 0xf7, 0xde, 0xd0, 0x7e, 0x7d,
	0x30, 0x0a, 0xb7, 0x0f, 0x46, 0xe1, 0xef, 0x07, 0xa3, 0xf0, 0xfd, 0x72, 0x6a, 0x98, 0x67, 0xdd,
	0x7e, 0x54, 0x7e, 0x72, 0xa6, 0x37, 0xa7, 0xe5, 0x3f, 0x41, 0x5b, 0xff, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x9b, 0x93, 0x44, 0x80, 0xbb, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Portfolio items.
	Portfolio(ctx context.Context, in *QueryGetPortfolioRequest, opts ...grpc.CallOption) (*QueryGetPortfolioResponse, error)
	PortfolioAll(ctx context.Context, in *QueryAllPortfolioRequest, opts ...grpc.CallOption) (*QueryAllPortfolioResponse, error)
	// Queries a list of CalculateDiscount items.
	CalculateDiscount(ctx context.Context, in *QueryCalculateDiscountRequest, opts ...grpc.CallOption) (*QueryCalculateDiscountResponse, error)
	// Queries a list of LeverageLpTotal items.
	LeverageLpTotal(ctx context.Context, in *QueryLeverageLpTotalRequest, opts ...grpc.CallOption) (*QueryLeverageLpTotalResponse, error)
	// Queries a list of RewardsTotal items.
	RewardsTotal(ctx context.Context, in *QueryRewardsTotalRequest, opts ...grpc.CallOption) (*QueryRewardsTotalResponse, error)
	// Queries a list of StakedPool items.
	StakedPool(ctx context.Context, in *QueryStakedPoolRequest, opts ...grpc.CallOption) (*QueryStakedPoolResponse, error)
	// Queries a list of Perpetual items.
	Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Portfolio(ctx context.Context, in *QueryGetPortfolioRequest, opts ...grpc.CallOption) (*QueryGetPortfolioResponse, error) {
	out := new(QueryGetPortfolioResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Portfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PortfolioAll(ctx context.Context, in *QueryAllPortfolioRequest, opts ...grpc.CallOption) (*QueryAllPortfolioResponse, error) {
	out := new(QueryAllPortfolioResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/PortfolioAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateDiscount(ctx context.Context, in *QueryCalculateDiscountRequest, opts ...grpc.CallOption) (*QueryCalculateDiscountResponse, error) {
	out := new(QueryCalculateDiscountResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/CalculateDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LeverageLpTotal(ctx context.Context, in *QueryLeverageLpTotalRequest, opts ...grpc.CallOption) (*QueryLeverageLpTotalResponse, error) {
	out := new(QueryLeverageLpTotalResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/LeverageLpTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsTotal(ctx context.Context, in *QueryRewardsTotalRequest, opts ...grpc.CallOption) (*QueryRewardsTotalResponse, error) {
	out := new(QueryRewardsTotalResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/RewardsTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedPool(ctx context.Context, in *QueryStakedPoolRequest, opts ...grpc.CallOption) (*QueryStakedPoolResponse, error) {
	out := new(QueryStakedPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/StakedPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error) {
	out := new(QueryPerpetualResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Perpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Portfolio items.
	Portfolio(context.Context, *QueryGetPortfolioRequest) (*QueryGetPortfolioResponse, error)
	PortfolioAll(context.Context, *QueryAllPortfolioRequest) (*QueryAllPortfolioResponse, error)
	// Queries a list of CalculateDiscount items.
	CalculateDiscount(context.Context, *QueryCalculateDiscountRequest) (*QueryCalculateDiscountResponse, error)
	// Queries a list of LeverageLpTotal items.
	LeverageLpTotal(context.Context, *QueryLeverageLpTotalRequest) (*QueryLeverageLpTotalResponse, error)
	// Queries a list of RewardsTotal items.
	RewardsTotal(context.Context, *QueryRewardsTotalRequest) (*QueryRewardsTotalResponse, error)
	// Queries a list of StakedPool items.
	StakedPool(context.Context, *QueryStakedPoolRequest) (*QueryStakedPoolResponse, error)
	// Queries a list of Perpetual items.
	Perpetual(context.Context, *QueryPerpetualRequest) (*QueryPerpetualResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Portfolio(ctx context.Context, req *QueryGetPortfolioRequest) (*QueryGetPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfolio not implemented")
}
func (*UnimplementedQueryServer) PortfolioAll(ctx context.Context, req *QueryAllPortfolioRequest) (*QueryAllPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortfolioAll not implemented")
}
func (*UnimplementedQueryServer) CalculateDiscount(ctx context.Context, req *QueryCalculateDiscountRequest) (*QueryCalculateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDiscount not implemented")
}
func (*UnimplementedQueryServer) LeverageLpTotal(ctx context.Context, req *QueryLeverageLpTotalRequest) (*QueryLeverageLpTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeverageLpTotal not implemented")
}
func (*UnimplementedQueryServer) RewardsTotal(ctx context.Context, req *QueryRewardsTotalRequest) (*QueryRewardsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsTotal not implemented")
}
func (*UnimplementedQueryServer) StakedPool(ctx context.Context, req *QueryStakedPoolRequest) (*QueryStakedPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedPool not implemented")
}
func (*UnimplementedQueryServer) Perpetual(ctx context.Context, req *QueryPerpetualRequest) (*QueryPerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Perpetual not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Portfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Portfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Portfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Portfolio(ctx, req.(*QueryGetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PortfolioAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PortfolioAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/PortfolioAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PortfolioAll(ctx, req.(*QueryAllPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/CalculateDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateDiscount(ctx, req.(*QueryCalculateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LeverageLpTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLeverageLpTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LeverageLpTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/LeverageLpTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LeverageLpTotal(ctx, req.(*QueryLeverageLpTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/RewardsTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsTotal(ctx, req.(*QueryRewardsTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/StakedPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedPool(ctx, req.(*QueryStakedPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Perpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Perpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Perpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Perpetual(ctx, req.(*QueryPerpetualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tier.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Portfolio",
			Handler:    _Query_Portfolio_Handler,
		},
		{
			MethodName: "PortfolioAll",
			Handler:    _Query_PortfolioAll_Handler,
		},
		{
			MethodName: "CalculateDiscount",
			Handler:    _Query_CalculateDiscount_Handler,
		},
		{
			MethodName: "LeverageLpTotal",
			Handler:    _Query_LeverageLpTotal_Handler,
		},
		{
			MethodName: "RewardsTotal",
			Handler:    _Query_RewardsTotal_Handler,
		},
		{
			MethodName: "StakedPool",
			Handler:    _Query_StakedPool_Handler,
		},
		{
			MethodName: "Perpetual",
			Handler:    _Query_Perpetual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tier/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPortfolioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPortfolioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPortfolioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetType) > 0 {
		i -= len(m.AssetType)
		copy(dAtA[i:], m.AssetType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPortfolioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPortfolioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPortfolioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalPortfolio) > 0 {
		i -= len(m.TotalPortfolio)
		copy(dAtA[i:], m.TotalPortfolio)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalPortfolio)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPortfolioRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPortfolioRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPortfolioRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPortfolioResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPortfolioResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPortfolioResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Portfolio) > 0 {
		for iNdEx := len(m.Portfolio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Portfolio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateDiscountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateDiscountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateDiscountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCalculateDiscountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCalculateDiscountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCalculateDiscountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Portfolio) > 0 {
		i -= len(m.Portfolio)
		copy(dAtA[i:], m.Portfolio)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Portfolio)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tier) > 0 {
		i -= len(m.Tier)
		copy(dAtA[i:], m.Tier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Discount) > 0 {
		i -= len(m.Discount)
		copy(dAtA[i:], m.Discount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Discount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLeverageLpTotalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeverageLpTotalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeverageLpTotalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLeverageLpTotalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLeverageLpTotalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLeverageLpTotalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsTotalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsTotalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsTotalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsTotalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsTotalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsTotalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStakedPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPerpetualResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPerpetualResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPerpetualResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPortfolioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPortfolioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalPortfolio)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPortfolioRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPortfolioResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Portfolio) > 0 {
		for _, e := range m.Portfolio {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCalculateDiscountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCalculateDiscountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Discount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Tier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Portfolio)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLeverageLpTotalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLeverageLpTotalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Total.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsTotalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsTotalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStakedPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPerpetualRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPerpetualResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPortfolioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPortfolioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPortfolioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPortfolioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPortfolioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPortfolioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPortfolio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPortfolio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPortfolioRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPortfolioRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPortfolioRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPortfolioResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPortfolioResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPortfolioResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portfolio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portfolio = append(m.Portfolio, Portfolio{})
			if err := m.Portfolio[len(m.Portfolio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateDiscountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateDiscountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateDiscountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCalculateDiscountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCalculateDiscountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCalculateDiscountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Discount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Discount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portfolio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Portfolio = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeverageLpTotalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLeverageLpTotalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLeverageLpTotalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLeverageLpTotalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLeverageLpTotalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLeverageLpTotalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsTotalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsTotalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsTotalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsTotalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsTotalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsTotalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPerpetualResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPerpetualResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPerpetualResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
