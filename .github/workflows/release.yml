name: Create release

on:
  push:
    tags:
      - v*

permissions:
  contents: write

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.release_tag }}

      - name: Make release
        run: |
          sudo rm -rf dist
          make release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create software upgrade proposal
        run: |
          # helper functions
          extract_txhash() { awk -F 'txhash: ' '/txhash:/{print $2; exit}'; }
          extract_proposal_id() { awk -F 'key: proposal_id|value: ' '/key: proposal_id/ { getline; gsub(/"/, "", $2); print $2; exit }'; }
          extract_and_calc_upgrade_height() { awk -F'"latest_block_height":"' '{ split($2,a,"\""); print a[1]; exit }'; }

          # environment variables
          ELYSD=/tmp/elysd
          NODE=https://rpc.testnet.elys.network:443
          URL=https://github.com/elys-network/elys/releases/download/${{ github.ref_name }}/elysd-${{ github.ref_name }}-linux-amd64
          OPTIONS="--node $NODE --chain-id elystestnet-1 --keyring-backend=test -b=sync --fees=100000uelys --gas=300000 -y"

          # download elysd
          wget $URL -O $ELYSD
          chmod +x $ELYSD

          # recover keys
          echo ${{ secrets.KEY1_MNEMONIC }} | $ELYSD keys add key1 --recover --keyring-backend test
          echo ${{ secrets.KEY2_MNEMONIC }} | $ELYSD keys add key2 --recover --keyring-backend test
          echo ${{ secrets.KEY3_MNEMONIC }} | $ELYSD keys add key3 --recover --keyring-backend test
          echo ${{ secrets.KEY4_MNEMONIC }} | $ELYSD keys add key4 --recover --keyring-backend test

          # get checksum
          checksum=$(wget -qO- "https://github.com/elys-network/elys/releases/download/${{ github.ref_name }}/sha256sum.txt" | awk '/elysd-${{ github.ref_name }}-linux-amd64.tar.gz/ {print $1}')

          # query and upgrade height
          height=$($ELYSD status --node $NODE | extract_and_calc_upgrade_height)

          # create proposal
          txhash=$(
            $ELYSD tx gov submit-legacy-proposal software-upgrade \
              ${{ github.ref_name }} \
              --deposit=10000000uelys \
              --upgrade-height=$height \
              --title="${{ github.ref_name }}" \
              --description="Elys Network ${{ github.ref_name }} released. Focuses on enhancements and codebase improvements." \
              --upgrade-info='{"binaries":{"linux/amd64":"https://github.com/elys-network/elys/releases/download/${{ github.ref_name }}/elysd-${{ github.ref_name }}-linux-amd64.tar.gz?checksum=$checksum"}}' \
              --from=key1 \
              $OPTIONS | extract_txhash
          )
          sleep 10
          proposalid=$($ELYSD q tx $txhash --node $NODE | extract_proposal_id)

          # vote on proposal
          $ELYSD tx gov vote $proposalid yes --from=key1 $OPTIONS
          $ELYSD tx gov vote $proposalid yes --from=key2 $OPTIONS
          $ELYSD tx gov vote $proposalid yes --from=key3 $OPTIONS
          $ELYSD tx gov vote $proposalid yes --from=key4 $OPTIONS
          sleep 10
