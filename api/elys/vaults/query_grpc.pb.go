// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vaults

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Vault queries a vault by its ID.
	Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error)
	// Vaults queries all vaults.
	Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error)
	// VaultValue queries the USD value of a vault.
	VaultValue(ctx context.Context, in *QueryVaultValue, opts ...grpc.CallOption) (*QueryVaultValueResponse, error)
	// VaultPositions queries the positions of a vault.
	VaultPositions(ctx context.Context, in *QueryVaultPositionsRequest, opts ...grpc.CallOption) (*QueryVaultPositionsResponse, error)
	// DepositEstimation queries the estimated deposit amount for a vault.
	DepositEstimation(ctx context.Context, in *QueryDepositEstimationRequest, opts ...grpc.CallOption) (*QueryDepositEstimationResponse, error)
	// WithdrawEstimation queries the estimated withdraw amount for a vault.
	WithdrawEstimation(ctx context.Context, in *QueryWithdrawEstimationRequest, opts ...grpc.CallOption) (*QueryWithdrawEstimationResponse, error)
	// PnL queries the PnL of a user.
	PnL(ctx context.Context, in *QueryPnLRequest, opts ...grpc.CallOption) (*QueryPnLResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vault(ctx context.Context, in *QueryVaultRequest, opts ...grpc.CallOption) (*QueryVaultResponse, error) {
	out := new(QueryVaultResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Vault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vaults(ctx context.Context, in *QueryVaultsRequest, opts ...grpc.CallOption) (*QueryVaultsResponse, error) {
	out := new(QueryVaultsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/Vaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultValue(ctx context.Context, in *QueryVaultValue, opts ...grpc.CallOption) (*QueryVaultValueResponse, error) {
	out := new(QueryVaultValueResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/VaultValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VaultPositions(ctx context.Context, in *QueryVaultPositionsRequest, opts ...grpc.CallOption) (*QueryVaultPositionsResponse, error) {
	out := new(QueryVaultPositionsResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/VaultPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositEstimation(ctx context.Context, in *QueryDepositEstimationRequest, opts ...grpc.CallOption) (*QueryDepositEstimationResponse, error) {
	out := new(QueryDepositEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/DepositEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawEstimation(ctx context.Context, in *QueryWithdrawEstimationRequest, opts ...grpc.CallOption) (*QueryWithdrawEstimationResponse, error) {
	out := new(QueryWithdrawEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/WithdrawEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PnL(ctx context.Context, in *QueryPnLRequest, opts ...grpc.CallOption) (*QueryPnLResponse, error) {
	out := new(QueryPnLResponse)
	err := c.cc.Invoke(ctx, "/elys.vaults.Query/PnL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Vault queries a vault by its ID.
	Vault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error)
	// Vaults queries all vaults.
	Vaults(context.Context, *QueryVaultsRequest) (*QueryVaultsResponse, error)
	// VaultValue queries the USD value of a vault.
	VaultValue(context.Context, *QueryVaultValue) (*QueryVaultValueResponse, error)
	// VaultPositions queries the positions of a vault.
	VaultPositions(context.Context, *QueryVaultPositionsRequest) (*QueryVaultPositionsResponse, error)
	// DepositEstimation queries the estimated deposit amount for a vault.
	DepositEstimation(context.Context, *QueryDepositEstimationRequest) (*QueryDepositEstimationResponse, error)
	// WithdrawEstimation queries the estimated withdraw amount for a vault.
	WithdrawEstimation(context.Context, *QueryWithdrawEstimationRequest) (*QueryWithdrawEstimationResponse, error)
	// PnL queries the PnL of a user.
	PnL(context.Context, *QueryPnLRequest) (*QueryPnLResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Vault(context.Context, *QueryVaultRequest) (*QueryVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vault not implemented")
}
func (UnimplementedQueryServer) Vaults(context.Context, *QueryVaultsRequest) (*QueryVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vaults not implemented")
}
func (UnimplementedQueryServer) VaultValue(context.Context, *QueryVaultValue) (*QueryVaultValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultValue not implemented")
}
func (UnimplementedQueryServer) VaultPositions(context.Context, *QueryVaultPositionsRequest) (*QueryVaultPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultPositions not implemented")
}
func (UnimplementedQueryServer) DepositEstimation(context.Context, *QueryDepositEstimationRequest) (*QueryDepositEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositEstimation not implemented")
}
func (UnimplementedQueryServer) WithdrawEstimation(context.Context, *QueryWithdrawEstimationRequest) (*QueryWithdrawEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawEstimation not implemented")
}
func (UnimplementedQueryServer) PnL(context.Context, *QueryPnLRequest) (*QueryPnLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PnL not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Vault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vault(ctx, req.(*QueryVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/Vaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vaults(ctx, req.(*QueryVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/VaultValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultValue(ctx, req.(*QueryVaultValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VaultPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/VaultPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultPositions(ctx, req.(*QueryVaultPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/DepositEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositEstimation(ctx, req.(*QueryDepositEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/WithdrawEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawEstimation(ctx, req.(*QueryWithdrawEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PnL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPnLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PnL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.vaults.Query/PnL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PnL(ctx, req.(*QueryPnLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.vaults.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Vault",
			Handler:    _Query_Vault_Handler,
		},
		{
			MethodName: "Vaults",
			Handler:    _Query_Vaults_Handler,
		},
		{
			MethodName: "VaultValue",
			Handler:    _Query_VaultValue_Handler,
		},
		{
			MethodName: "VaultPositions",
			Handler:    _Query_VaultPositions_Handler,
		},
		{
			MethodName: "DepositEstimation",
			Handler:    _Query_DepositEstimation_Handler,
		},
		{
			MethodName: "WithdrawEstimation",
			Handler:    _Query_WithdrawEstimation_Handler,
		},
		{
			MethodName: "PnL",
			Handler:    _Query_PnL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/vaults/query.proto",
}
