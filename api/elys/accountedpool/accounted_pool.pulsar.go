// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package accountedpool

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	amm "github.com/elys-network/elys/api/elys/amm"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_LegacyAccountedPool_3_list)(nil)

type _LegacyAccountedPool_3_list struct {
	list *[]*amm.PoolAsset
}

func (x *_LegacyAccountedPool_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LegacyAccountedPool_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_LegacyAccountedPool_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*amm.PoolAsset)
	(*x.list)[i] = concreteValue
}

func (x *_LegacyAccountedPool_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*amm.PoolAsset)
	*x.list = append(*x.list, concreteValue)
}

func (x *_LegacyAccountedPool_3_list) AppendMutable() protoreflect.Value {
	v := new(amm.PoolAsset)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LegacyAccountedPool_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_LegacyAccountedPool_3_list) NewElement() protoreflect.Value {
	v := new(amm.PoolAsset)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LegacyAccountedPool_3_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_LegacyAccountedPool_5_list)(nil)

type _LegacyAccountedPool_5_list struct {
	list *[]*v1beta1.Coin
}

func (x *_LegacyAccountedPool_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LegacyAccountedPool_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_LegacyAccountedPool_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_LegacyAccountedPool_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_LegacyAccountedPool_5_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LegacyAccountedPool_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_LegacyAccountedPool_5_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_LegacyAccountedPool_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_LegacyAccountedPool                     protoreflect.MessageDescriptor
	fd_LegacyAccountedPool_pool_id             protoreflect.FieldDescriptor
	fd_LegacyAccountedPool_total_shares        protoreflect.FieldDescriptor
	fd_LegacyAccountedPool_pool_assets         protoreflect.FieldDescriptor
	fd_LegacyAccountedPool_total_weight        protoreflect.FieldDescriptor
	fd_LegacyAccountedPool_non_amm_pool_tokens protoreflect.FieldDescriptor
)

func init() {
	file_elys_accountedpool_accounted_pool_proto_init()
	md_LegacyAccountedPool = File_elys_accountedpool_accounted_pool_proto.Messages().ByName("LegacyAccountedPool")
	fd_LegacyAccountedPool_pool_id = md_LegacyAccountedPool.Fields().ByName("pool_id")
	fd_LegacyAccountedPool_total_shares = md_LegacyAccountedPool.Fields().ByName("total_shares")
	fd_LegacyAccountedPool_pool_assets = md_LegacyAccountedPool.Fields().ByName("pool_assets")
	fd_LegacyAccountedPool_total_weight = md_LegacyAccountedPool.Fields().ByName("total_weight")
	fd_LegacyAccountedPool_non_amm_pool_tokens = md_LegacyAccountedPool.Fields().ByName("non_amm_pool_tokens")
}

var _ protoreflect.Message = (*fastReflection_LegacyAccountedPool)(nil)

type fastReflection_LegacyAccountedPool LegacyAccountedPool

func (x *LegacyAccountedPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LegacyAccountedPool)(x)
}

func (x *LegacyAccountedPool) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_accountedpool_accounted_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LegacyAccountedPool_messageType fastReflection_LegacyAccountedPool_messageType
var _ protoreflect.MessageType = fastReflection_LegacyAccountedPool_messageType{}

type fastReflection_LegacyAccountedPool_messageType struct{}

func (x fastReflection_LegacyAccountedPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LegacyAccountedPool)(nil)
}
func (x fastReflection_LegacyAccountedPool_messageType) New() protoreflect.Message {
	return new(fastReflection_LegacyAccountedPool)
}
func (x fastReflection_LegacyAccountedPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyAccountedPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LegacyAccountedPool) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyAccountedPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LegacyAccountedPool) Type() protoreflect.MessageType {
	return _fastReflection_LegacyAccountedPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LegacyAccountedPool) New() protoreflect.Message {
	return new(fastReflection_LegacyAccountedPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LegacyAccountedPool) Interface() protoreflect.ProtoMessage {
	return (*LegacyAccountedPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LegacyAccountedPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_LegacyAccountedPool_pool_id, value) {
			return
		}
	}
	if x.TotalShares != nil {
		value := protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
		if !f(fd_LegacyAccountedPool_total_shares, value) {
			return
		}
	}
	if len(x.PoolAssets) != 0 {
		value := protoreflect.ValueOfList(&_LegacyAccountedPool_3_list{list: &x.PoolAssets})
		if !f(fd_LegacyAccountedPool_pool_assets, value) {
			return
		}
	}
	if x.TotalWeight != "" {
		value := protoreflect.ValueOfString(x.TotalWeight)
		if !f(fd_LegacyAccountedPool_total_weight, value) {
			return
		}
	}
	if len(x.NonAmmPoolTokens) != 0 {
		value := protoreflect.ValueOfList(&_LegacyAccountedPool_5_list{list: &x.NonAmmPoolTokens})
		if !f(fd_LegacyAccountedPool_non_amm_pool_tokens, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LegacyAccountedPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		return x.PoolId != uint64(0)
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		return x.TotalShares != nil
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		return len(x.PoolAssets) != 0
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		return x.TotalWeight != ""
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		return len(x.NonAmmPoolTokens) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyAccountedPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		x.PoolId = uint64(0)
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		x.TotalShares = nil
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		x.PoolAssets = nil
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		x.TotalWeight = ""
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		x.NonAmmPoolTokens = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LegacyAccountedPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		if len(x.PoolAssets) == 0 {
			return protoreflect.ValueOfList(&_LegacyAccountedPool_3_list{})
		}
		listValue := &_LegacyAccountedPool_3_list{list: &x.PoolAssets}
		return protoreflect.ValueOfList(listValue)
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		value := x.TotalWeight
		return protoreflect.ValueOfString(value)
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		if len(x.NonAmmPoolTokens) == 0 {
			return protoreflect.ValueOfList(&_LegacyAccountedPool_5_list{})
		}
		listValue := &_LegacyAccountedPool_5_list{list: &x.NonAmmPoolTokens}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyAccountedPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		x.PoolId = value.Uint()
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		x.TotalShares = value.Message().Interface().(*v1beta1.Coin)
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		lv := value.List()
		clv := lv.(*_LegacyAccountedPool_3_list)
		x.PoolAssets = *clv.list
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		x.TotalWeight = value.Interface().(string)
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		lv := value.List()
		clv := lv.(*_LegacyAccountedPool_5_list)
		x.NonAmmPoolTokens = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyAccountedPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		if x.TotalShares == nil {
			x.TotalShares = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		if x.PoolAssets == nil {
			x.PoolAssets = []*amm.PoolAsset{}
		}
		value := &_LegacyAccountedPool_3_list{list: &x.PoolAssets}
		return protoreflect.ValueOfList(value)
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		if x.NonAmmPoolTokens == nil {
			x.NonAmmPoolTokens = []*v1beta1.Coin{}
		}
		value := &_LegacyAccountedPool_5_list{list: &x.NonAmmPoolTokens}
		return protoreflect.ValueOfList(value)
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.accountedpool.LegacyAccountedPool is not mutable"))
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		panic(fmt.Errorf("field total_weight of message elys.accountedpool.LegacyAccountedPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LegacyAccountedPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.accountedpool.LegacyAccountedPool.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.accountedpool.LegacyAccountedPool.total_shares":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "elys.accountedpool.LegacyAccountedPool.pool_assets":
		list := []*amm.PoolAsset{}
		return protoreflect.ValueOfList(&_LegacyAccountedPool_3_list{list: &list})
	case "elys.accountedpool.LegacyAccountedPool.total_weight":
		return protoreflect.ValueOfString("")
	case "elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_LegacyAccountedPool_5_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.LegacyAccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.LegacyAccountedPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LegacyAccountedPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.accountedpool.LegacyAccountedPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LegacyAccountedPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyAccountedPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LegacyAccountedPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LegacyAccountedPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LegacyAccountedPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.TotalShares != nil {
			l = options.Size(x.TotalShares)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PoolAssets) > 0 {
			for _, e := range x.PoolAssets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.TotalWeight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.NonAmmPoolTokens) > 0 {
			for _, e := range x.NonAmmPoolTokens {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LegacyAccountedPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.NonAmmPoolTokens) > 0 {
			for iNdEx := len(x.NonAmmPoolTokens) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.NonAmmPoolTokens[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if len(x.TotalWeight) > 0 {
			i -= len(x.TotalWeight)
			copy(dAtA[i:], x.TotalWeight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalWeight)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PoolAssets) > 0 {
			for iNdEx := len(x.PoolAssets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.PoolAssets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if x.TotalShares != nil {
			encoded, err := options.Marshal(x.TotalShares)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LegacyAccountedPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyAccountedPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyAccountedPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TotalShares == nil {
					x.TotalShares = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalShares); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolAssets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolAssets = append(x.PoolAssets, &amm.PoolAsset{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PoolAssets[len(x.PoolAssets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalWeight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalWeight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonAmmPoolTokens", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NonAmmPoolTokens = append(x.NonAmmPoolTokens, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NonAmmPoolTokens[len(x.NonAmmPoolTokens)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_AccountedPool_2_list)(nil)

type _AccountedPool_2_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AccountedPool_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AccountedPool_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AccountedPool_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AccountedPool_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AccountedPool_2_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccountedPool_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AccountedPool_2_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccountedPool_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_AccountedPool_3_list)(nil)

type _AccountedPool_3_list struct {
	list *[]*v1beta1.Coin
}

func (x *_AccountedPool_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_AccountedPool_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_AccountedPool_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_AccountedPool_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_AccountedPool_3_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccountedPool_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_AccountedPool_3_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_AccountedPool_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_AccountedPool                     protoreflect.MessageDescriptor
	fd_AccountedPool_pool_id             protoreflect.FieldDescriptor
	fd_AccountedPool_total_tokens        protoreflect.FieldDescriptor
	fd_AccountedPool_non_amm_pool_tokens protoreflect.FieldDescriptor
)

func init() {
	file_elys_accountedpool_accounted_pool_proto_init()
	md_AccountedPool = File_elys_accountedpool_accounted_pool_proto.Messages().ByName("AccountedPool")
	fd_AccountedPool_pool_id = md_AccountedPool.Fields().ByName("pool_id")
	fd_AccountedPool_total_tokens = md_AccountedPool.Fields().ByName("total_tokens")
	fd_AccountedPool_non_amm_pool_tokens = md_AccountedPool.Fields().ByName("non_amm_pool_tokens")
}

var _ protoreflect.Message = (*fastReflection_AccountedPool)(nil)

type fastReflection_AccountedPool AccountedPool

func (x *AccountedPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_AccountedPool)(x)
}

func (x *AccountedPool) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_accountedpool_accounted_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_AccountedPool_messageType fastReflection_AccountedPool_messageType
var _ protoreflect.MessageType = fastReflection_AccountedPool_messageType{}

type fastReflection_AccountedPool_messageType struct{}

func (x fastReflection_AccountedPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_AccountedPool)(nil)
}
func (x fastReflection_AccountedPool_messageType) New() protoreflect.Message {
	return new(fastReflection_AccountedPool)
}
func (x fastReflection_AccountedPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_AccountedPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_AccountedPool) Descriptor() protoreflect.MessageDescriptor {
	return md_AccountedPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_AccountedPool) Type() protoreflect.MessageType {
	return _fastReflection_AccountedPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_AccountedPool) New() protoreflect.Message {
	return new(fastReflection_AccountedPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_AccountedPool) Interface() protoreflect.ProtoMessage {
	return (*AccountedPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_AccountedPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_AccountedPool_pool_id, value) {
			return
		}
	}
	if len(x.TotalTokens) != 0 {
		value := protoreflect.ValueOfList(&_AccountedPool_2_list{list: &x.TotalTokens})
		if !f(fd_AccountedPool_total_tokens, value) {
			return
		}
	}
	if len(x.NonAmmPoolTokens) != 0 {
		value := protoreflect.ValueOfList(&_AccountedPool_3_list{list: &x.NonAmmPoolTokens})
		if !f(fd_AccountedPool_non_amm_pool_tokens, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_AccountedPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.accountedpool.AccountedPool.pool_id":
		return x.PoolId != uint64(0)
	case "elys.accountedpool.AccountedPool.total_tokens":
		return len(x.TotalTokens) != 0
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		return len(x.NonAmmPoolTokens) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccountedPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.accountedpool.AccountedPool.pool_id":
		x.PoolId = uint64(0)
	case "elys.accountedpool.AccountedPool.total_tokens":
		x.TotalTokens = nil
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		x.NonAmmPoolTokens = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_AccountedPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.accountedpool.AccountedPool.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.accountedpool.AccountedPool.total_tokens":
		if len(x.TotalTokens) == 0 {
			return protoreflect.ValueOfList(&_AccountedPool_2_list{})
		}
		listValue := &_AccountedPool_2_list{list: &x.TotalTokens}
		return protoreflect.ValueOfList(listValue)
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		if len(x.NonAmmPoolTokens) == 0 {
			return protoreflect.ValueOfList(&_AccountedPool_3_list{})
		}
		listValue := &_AccountedPool_3_list{list: &x.NonAmmPoolTokens}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccountedPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.accountedpool.AccountedPool.pool_id":
		x.PoolId = value.Uint()
	case "elys.accountedpool.AccountedPool.total_tokens":
		lv := value.List()
		clv := lv.(*_AccountedPool_2_list)
		x.TotalTokens = *clv.list
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		lv := value.List()
		clv := lv.(*_AccountedPool_3_list)
		x.NonAmmPoolTokens = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccountedPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.accountedpool.AccountedPool.total_tokens":
		if x.TotalTokens == nil {
			x.TotalTokens = []*v1beta1.Coin{}
		}
		value := &_AccountedPool_2_list{list: &x.TotalTokens}
		return protoreflect.ValueOfList(value)
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		if x.NonAmmPoolTokens == nil {
			x.NonAmmPoolTokens = []*v1beta1.Coin{}
		}
		value := &_AccountedPool_3_list{list: &x.NonAmmPoolTokens}
		return protoreflect.ValueOfList(value)
	case "elys.accountedpool.AccountedPool.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.accountedpool.AccountedPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_AccountedPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.accountedpool.AccountedPool.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.accountedpool.AccountedPool.total_tokens":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AccountedPool_2_list{list: &list})
	case "elys.accountedpool.AccountedPool.non_amm_pool_tokens":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_AccountedPool_3_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.accountedpool.AccountedPool"))
		}
		panic(fmt.Errorf("message elys.accountedpool.AccountedPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_AccountedPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.accountedpool.AccountedPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_AccountedPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_AccountedPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_AccountedPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_AccountedPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*AccountedPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if len(x.TotalTokens) > 0 {
			for _, e := range x.TotalTokens {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.NonAmmPoolTokens) > 0 {
			for _, e := range x.NonAmmPoolTokens {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*AccountedPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.NonAmmPoolTokens) > 0 {
			for iNdEx := len(x.NonAmmPoolTokens) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.NonAmmPoolTokens[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.TotalTokens) > 0 {
			for iNdEx := len(x.TotalTokens) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TotalTokens[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*AccountedPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccountedPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: AccountedPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalTokens", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalTokens = append(x.TotalTokens, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalTokens[len(x.TotalTokens)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NonAmmPoolTokens", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NonAmmPoolTokens = append(x.NonAmmPoolTokens, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.NonAmmPoolTokens[len(x.NonAmmPoolTokens)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/accountedpool/accounted_pool.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LegacyAccountedPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId           uint64           `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TotalShares      *v1beta1.Coin    `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	PoolAssets       []*amm.PoolAsset `protobuf:"bytes,3,rep,name=pool_assets,json=poolAssets,proto3" json:"pool_assets,omitempty"`
	TotalWeight      string           `protobuf:"bytes,4,opt,name=total_weight,json=totalWeight,proto3" json:"total_weight,omitempty"`
	NonAmmPoolTokens []*v1beta1.Coin  `protobuf:"bytes,5,rep,name=non_amm_pool_tokens,json=nonAmmPoolTokens,proto3" json:"non_amm_pool_tokens,omitempty"`
}

func (x *LegacyAccountedPool) Reset() {
	*x = LegacyAccountedPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_accountedpool_accounted_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyAccountedPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyAccountedPool) ProtoMessage() {}

// Deprecated: Use LegacyAccountedPool.ProtoReflect.Descriptor instead.
func (*LegacyAccountedPool) Descriptor() ([]byte, []int) {
	return file_elys_accountedpool_accounted_pool_proto_rawDescGZIP(), []int{0}
}

func (x *LegacyAccountedPool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *LegacyAccountedPool) GetTotalShares() *v1beta1.Coin {
	if x != nil {
		return x.TotalShares
	}
	return nil
}

func (x *LegacyAccountedPool) GetPoolAssets() []*amm.PoolAsset {
	if x != nil {
		return x.PoolAssets
	}
	return nil
}

func (x *LegacyAccountedPool) GetTotalWeight() string {
	if x != nil {
		return x.TotalWeight
	}
	return ""
}

func (x *LegacyAccountedPool) GetNonAmmPoolTokens() []*v1beta1.Coin {
	if x != nil {
		return x.NonAmmPoolTokens
	}
	return nil
}

type AccountedPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId           uint64          `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	TotalTokens      []*v1beta1.Coin `protobuf:"bytes,2,rep,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	NonAmmPoolTokens []*v1beta1.Coin `protobuf:"bytes,3,rep,name=non_amm_pool_tokens,json=nonAmmPoolTokens,proto3" json:"non_amm_pool_tokens,omitempty"`
}

func (x *AccountedPool) Reset() {
	*x = AccountedPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_accountedpool_accounted_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountedPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountedPool) ProtoMessage() {}

// Deprecated: Use AccountedPool.ProtoReflect.Descriptor instead.
func (*AccountedPool) Descriptor() ([]byte, []int) {
	return file_elys_accountedpool_accounted_pool_proto_rawDescGZIP(), []int{1}
}

func (x *AccountedPool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *AccountedPool) GetTotalTokens() []*v1beta1.Coin {
	if x != nil {
		return x.TotalTokens
	}
	return nil
}

func (x *AccountedPool) GetNonAmmPoolTokens() []*v1beta1.Coin {
	if x != nil {
		return x.NonAmmPoolTokens
	}
	return nil
}

var File_elys_accountedpool_accounted_pool_proto protoreflect.FileDescriptor

var file_elys_accountedpool_accounted_pool_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x65, 0x6c, 0x79, 0x73, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x19, 0x65,
	0x6c, 0x79, 0x73, 0x2f, 0x61, 0x6d, 0x6d, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f,
	0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x6d, 0x6d, 0x2e, 0x50,
	0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0a,
	0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x6e, 0x6f,
	0x6e, 0x5f, 0x61, 0x6d, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x41, 0x6d, 0x6d,
	0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x6e, 0x6f, 0x6e,
	0x5f, 0x61, 0x6d, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x6e, 0x41, 0x6d, 0x6d, 0x50,
	0x6f, 0x6f, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0xca, 0x01, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79,
	0x73, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0xa2,
	0x02, 0x03, 0x45, 0x41, 0x58, 0xaa, 0x02, 0x12, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0xca, 0x02, 0x12, 0x45, 0x6c, 0x79,
	0x73, 0x5c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0xe2,
	0x02, 0x1e, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x70, 0x6f, 0x6f, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x13, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_accountedpool_accounted_pool_proto_rawDescOnce sync.Once
	file_elys_accountedpool_accounted_pool_proto_rawDescData = file_elys_accountedpool_accounted_pool_proto_rawDesc
)

func file_elys_accountedpool_accounted_pool_proto_rawDescGZIP() []byte {
	file_elys_accountedpool_accounted_pool_proto_rawDescOnce.Do(func() {
		file_elys_accountedpool_accounted_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_accountedpool_accounted_pool_proto_rawDescData)
	})
	return file_elys_accountedpool_accounted_pool_proto_rawDescData
}

var file_elys_accountedpool_accounted_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_elys_accountedpool_accounted_pool_proto_goTypes = []interface{}{
	(*LegacyAccountedPool)(nil), // 0: elys.accountedpool.LegacyAccountedPool
	(*AccountedPool)(nil),       // 1: elys.accountedpool.AccountedPool
	(*v1beta1.Coin)(nil),        // 2: cosmos.base.v1beta1.Coin
	(*amm.PoolAsset)(nil),       // 3: elys.amm.PoolAsset
}
var file_elys_accountedpool_accounted_pool_proto_depIdxs = []int32{
	2, // 0: elys.accountedpool.LegacyAccountedPool.total_shares:type_name -> cosmos.base.v1beta1.Coin
	3, // 1: elys.accountedpool.LegacyAccountedPool.pool_assets:type_name -> elys.amm.PoolAsset
	2, // 2: elys.accountedpool.LegacyAccountedPool.non_amm_pool_tokens:type_name -> cosmos.base.v1beta1.Coin
	2, // 3: elys.accountedpool.AccountedPool.total_tokens:type_name -> cosmos.base.v1beta1.Coin
	2, // 4: elys.accountedpool.AccountedPool.non_amm_pool_tokens:type_name -> cosmos.base.v1beta1.Coin
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_elys_accountedpool_accounted_pool_proto_init() }
func file_elys_accountedpool_accounted_pool_proto_init() {
	if File_elys_accountedpool_accounted_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_accountedpool_accounted_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyAccountedPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_accountedpool_accounted_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountedPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_accountedpool_accounted_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_accountedpool_accounted_pool_proto_goTypes,
		DependencyIndexes: file_elys_accountedpool_accounted_pool_proto_depIdxs,
		MessageInfos:      file_elys_accountedpool_accounted_pool_proto_msgTypes,
	}.Build()
	File_elys_accountedpool_accounted_pool_proto = out.File
	file_elys_accountedpool_accounted_pool_proto_rawDesc = nil
	file_elys_accountedpool_accounted_pool_proto_goTypes = nil
	file_elys_accountedpool_accounted_pool_proto_depIdxs = nil
}
