// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tier

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Portfolio items.
	Portfolio(ctx context.Context, in *QueryGetPortfolioRequest, opts ...grpc.CallOption) (*QueryGetPortfolioResponse, error)
	PortfolioAll(ctx context.Context, in *QueryAllPortfolioRequest, opts ...grpc.CallOption) (*QueryAllPortfolioResponse, error)
	// Queries a list of CalculateDiscount items.
	CalculateDiscount(ctx context.Context, in *QueryCalculateDiscountRequest, opts ...grpc.CallOption) (*QueryCalculateDiscountResponse, error)
	// Queries a list of LeverageLpTotal items.
	LeverageLpTotal(ctx context.Context, in *QueryLeverageLpTotalRequest, opts ...grpc.CallOption) (*QueryLeverageLpTotalResponse, error)
	// Queries a list of RewardsTotal items.
	RewardsTotal(ctx context.Context, in *QueryRewardsTotalRequest, opts ...grpc.CallOption) (*QueryRewardsTotalResponse, error)
	// Queries a list of StakedPool items.
	StakedPool(ctx context.Context, in *QueryStakedPoolRequest, opts ...grpc.CallOption) (*QueryStakedPoolResponse, error)
	// Queries a list of Perpetual items.
	Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error)
	// Queries a list of LiquidTotal items.
	LiquidTotal(ctx context.Context, in *QueryLiquidTotalRequest, opts ...grpc.CallOption) (*QueryLiquidTotalResponse, error)
	// Queries a list of LockedOrder items.
	LockedOrder(ctx context.Context, in *QueryLockedOrderRequest, opts ...grpc.CallOption) (*QueryLockedOrderResponse, error)
	// Queries a list of GetAmmPrice items.
	GetAmmPrice(ctx context.Context, in *QueryGetAmmPriceRequest, opts ...grpc.CallOption) (*QueryGetAmmPriceResponse, error)
	// Queries a list of GetConsolidatedPrice items.
	GetConsolidatedPrice(ctx context.Context, in *QueryGetConsolidatedPriceRequest, opts ...grpc.CallOption) (*QueryGetConsolidatedPriceResponse, error)
	// Queries a list of Staked items.
	Staked(ctx context.Context, in *QueryStakedRequest, opts ...grpc.CallOption) (*QueryStakedResponse, error)
	// Queries a list of GetUsersPoolData items.
	GetUsersPoolData(ctx context.Context, in *QueryGetUsersPoolDataRequest, opts ...grpc.CallOption) (*QueryGetUsersPoolDataResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Portfolio(ctx context.Context, in *QueryGetPortfolioRequest, opts ...grpc.CallOption) (*QueryGetPortfolioResponse, error) {
	out := new(QueryGetPortfolioResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Portfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PortfolioAll(ctx context.Context, in *QueryAllPortfolioRequest, opts ...grpc.CallOption) (*QueryAllPortfolioResponse, error) {
	out := new(QueryAllPortfolioResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/PortfolioAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CalculateDiscount(ctx context.Context, in *QueryCalculateDiscountRequest, opts ...grpc.CallOption) (*QueryCalculateDiscountResponse, error) {
	out := new(QueryCalculateDiscountResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/CalculateDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LeverageLpTotal(ctx context.Context, in *QueryLeverageLpTotalRequest, opts ...grpc.CallOption) (*QueryLeverageLpTotalResponse, error) {
	out := new(QueryLeverageLpTotalResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/LeverageLpTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsTotal(ctx context.Context, in *QueryRewardsTotalRequest, opts ...grpc.CallOption) (*QueryRewardsTotalResponse, error) {
	out := new(QueryRewardsTotalResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/RewardsTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakedPool(ctx context.Context, in *QueryStakedPoolRequest, opts ...grpc.CallOption) (*QueryStakedPoolResponse, error) {
	out := new(QueryStakedPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/StakedPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Perpetual(ctx context.Context, in *QueryPerpetualRequest, opts ...grpc.CallOption) (*QueryPerpetualResponse, error) {
	out := new(QueryPerpetualResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Perpetual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidTotal(ctx context.Context, in *QueryLiquidTotalRequest, opts ...grpc.CallOption) (*QueryLiquidTotalResponse, error) {
	out := new(QueryLiquidTotalResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/LiquidTotal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedOrder(ctx context.Context, in *QueryLockedOrderRequest, opts ...grpc.CallOption) (*QueryLockedOrderResponse, error) {
	out := new(QueryLockedOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/LockedOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAmmPrice(ctx context.Context, in *QueryGetAmmPriceRequest, opts ...grpc.CallOption) (*QueryGetAmmPriceResponse, error) {
	out := new(QueryGetAmmPriceResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/GetAmmPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetConsolidatedPrice(ctx context.Context, in *QueryGetConsolidatedPriceRequest, opts ...grpc.CallOption) (*QueryGetConsolidatedPriceResponse, error) {
	out := new(QueryGetConsolidatedPriceResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/GetConsolidatedPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Staked(ctx context.Context, in *QueryStakedRequest, opts ...grpc.CallOption) (*QueryStakedResponse, error) {
	out := new(QueryStakedResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/Staked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUsersPoolData(ctx context.Context, in *QueryGetUsersPoolDataRequest, opts ...grpc.CallOption) (*QueryGetUsersPoolDataResponse, error) {
	out := new(QueryGetUsersPoolDataResponse)
	err := c.cc.Invoke(ctx, "/elys.tier.Query/GetUsersPoolData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Portfolio items.
	Portfolio(context.Context, *QueryGetPortfolioRequest) (*QueryGetPortfolioResponse, error)
	PortfolioAll(context.Context, *QueryAllPortfolioRequest) (*QueryAllPortfolioResponse, error)
	// Queries a list of CalculateDiscount items.
	CalculateDiscount(context.Context, *QueryCalculateDiscountRequest) (*QueryCalculateDiscountResponse, error)
	// Queries a list of LeverageLpTotal items.
	LeverageLpTotal(context.Context, *QueryLeverageLpTotalRequest) (*QueryLeverageLpTotalResponse, error)
	// Queries a list of RewardsTotal items.
	RewardsTotal(context.Context, *QueryRewardsTotalRequest) (*QueryRewardsTotalResponse, error)
	// Queries a list of StakedPool items.
	StakedPool(context.Context, *QueryStakedPoolRequest) (*QueryStakedPoolResponse, error)
	// Queries a list of Perpetual items.
	Perpetual(context.Context, *QueryPerpetualRequest) (*QueryPerpetualResponse, error)
	// Queries a list of LiquidTotal items.
	LiquidTotal(context.Context, *QueryLiquidTotalRequest) (*QueryLiquidTotalResponse, error)
	// Queries a list of LockedOrder items.
	LockedOrder(context.Context, *QueryLockedOrderRequest) (*QueryLockedOrderResponse, error)
	// Queries a list of GetAmmPrice items.
	GetAmmPrice(context.Context, *QueryGetAmmPriceRequest) (*QueryGetAmmPriceResponse, error)
	// Queries a list of GetConsolidatedPrice items.
	GetConsolidatedPrice(context.Context, *QueryGetConsolidatedPriceRequest) (*QueryGetConsolidatedPriceResponse, error)
	// Queries a list of Staked items.
	Staked(context.Context, *QueryStakedRequest) (*QueryStakedResponse, error)
	// Queries a list of GetUsersPoolData items.
	GetUsersPoolData(context.Context, *QueryGetUsersPoolDataRequest) (*QueryGetUsersPoolDataResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Portfolio(context.Context, *QueryGetPortfolioRequest) (*QueryGetPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Portfolio not implemented")
}
func (UnimplementedQueryServer) PortfolioAll(context.Context, *QueryAllPortfolioRequest) (*QueryAllPortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PortfolioAll not implemented")
}
func (UnimplementedQueryServer) CalculateDiscount(context.Context, *QueryCalculateDiscountRequest) (*QueryCalculateDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateDiscount not implemented")
}
func (UnimplementedQueryServer) LeverageLpTotal(context.Context, *QueryLeverageLpTotalRequest) (*QueryLeverageLpTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeverageLpTotal not implemented")
}
func (UnimplementedQueryServer) RewardsTotal(context.Context, *QueryRewardsTotalRequest) (*QueryRewardsTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsTotal not implemented")
}
func (UnimplementedQueryServer) StakedPool(context.Context, *QueryStakedPoolRequest) (*QueryStakedPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakedPool not implemented")
}
func (UnimplementedQueryServer) Perpetual(context.Context, *QueryPerpetualRequest) (*QueryPerpetualResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Perpetual not implemented")
}
func (UnimplementedQueryServer) LiquidTotal(context.Context, *QueryLiquidTotalRequest) (*QueryLiquidTotalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidTotal not implemented")
}
func (UnimplementedQueryServer) LockedOrder(context.Context, *QueryLockedOrderRequest) (*QueryLockedOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedOrder not implemented")
}
func (UnimplementedQueryServer) GetAmmPrice(context.Context, *QueryGetAmmPriceRequest) (*QueryGetAmmPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAmmPrice not implemented")
}
func (UnimplementedQueryServer) GetConsolidatedPrice(context.Context, *QueryGetConsolidatedPriceRequest) (*QueryGetConsolidatedPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsolidatedPrice not implemented")
}
func (UnimplementedQueryServer) Staked(context.Context, *QueryStakedRequest) (*QueryStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Staked not implemented")
}
func (UnimplementedQueryServer) GetUsersPoolData(context.Context, *QueryGetUsersPoolDataRequest) (*QueryGetUsersPoolDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersPoolData not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Portfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Portfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Portfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Portfolio(ctx, req.(*QueryGetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PortfolioAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PortfolioAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/PortfolioAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PortfolioAll(ctx, req.(*QueryAllPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CalculateDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCalculateDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CalculateDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/CalculateDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CalculateDiscount(ctx, req.(*QueryCalculateDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LeverageLpTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLeverageLpTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LeverageLpTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/LeverageLpTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LeverageLpTotal(ctx, req.(*QueryLeverageLpTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/RewardsTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsTotal(ctx, req.(*QueryRewardsTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakedPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakedPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/StakedPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakedPool(ctx, req.(*QueryStakedPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Perpetual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Perpetual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Perpetual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Perpetual(ctx, req.(*QueryPerpetualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidTotal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidTotalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidTotal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/LiquidTotal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidTotal(ctx, req.(*QueryLiquidTotalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/LockedOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedOrder(ctx, req.(*QueryLockedOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAmmPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAmmPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAmmPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/GetAmmPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAmmPrice(ctx, req.(*QueryGetAmmPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetConsolidatedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetConsolidatedPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetConsolidatedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/GetConsolidatedPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetConsolidatedPrice(ctx, req.(*QueryGetConsolidatedPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Staked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Staked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/Staked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Staked(ctx, req.(*QueryStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUsersPoolData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUsersPoolDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUsersPoolData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tier.Query/GetUsersPoolData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUsersPoolData(ctx, req.(*QueryGetUsersPoolDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tier.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Portfolio",
			Handler:    _Query_Portfolio_Handler,
		},
		{
			MethodName: "PortfolioAll",
			Handler:    _Query_PortfolioAll_Handler,
		},
		{
			MethodName: "CalculateDiscount",
			Handler:    _Query_CalculateDiscount_Handler,
		},
		{
			MethodName: "LeverageLpTotal",
			Handler:    _Query_LeverageLpTotal_Handler,
		},
		{
			MethodName: "RewardsTotal",
			Handler:    _Query_RewardsTotal_Handler,
		},
		{
			MethodName: "StakedPool",
			Handler:    _Query_StakedPool_Handler,
		},
		{
			MethodName: "Perpetual",
			Handler:    _Query_Perpetual_Handler,
		},
		{
			MethodName: "LiquidTotal",
			Handler:    _Query_LiquidTotal_Handler,
		},
		{
			MethodName: "LockedOrder",
			Handler:    _Query_LockedOrder_Handler,
		},
		{
			MethodName: "GetAmmPrice",
			Handler:    _Query_GetAmmPrice_Handler,
		},
		{
			MethodName: "GetConsolidatedPrice",
			Handler:    _Query_GetConsolidatedPrice_Handler,
		},
		{
			MethodName: "Staked",
			Handler:    _Query_Staked_Handler,
		},
		{
			MethodName: "GetUsersPoolData",
			Handler:    _Query_GetUsersPoolData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tier/query.proto",
}
