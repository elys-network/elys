// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stablestake

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_LegacyParams                        protoreflect.MessageDescriptor
	fd_LegacyParams_deposit_denom          protoreflect.FieldDescriptor
	fd_LegacyParams_redemption_rate        protoreflect.FieldDescriptor
	fd_LegacyParams_epoch_length           protoreflect.FieldDescriptor
	fd_LegacyParams_interest_rate          protoreflect.FieldDescriptor
	fd_LegacyParams_interest_rate_max      protoreflect.FieldDescriptor
	fd_LegacyParams_interest_rate_min      protoreflect.FieldDescriptor
	fd_LegacyParams_interest_rate_increase protoreflect.FieldDescriptor
	fd_LegacyParams_interest_rate_decrease protoreflect.FieldDescriptor
	fd_LegacyParams_health_gain_factor     protoreflect.FieldDescriptor
	fd_LegacyParams_total_value            protoreflect.FieldDescriptor
)

func init() {
	file_elys_stablestake_params_proto_init()
	md_LegacyParams = File_elys_stablestake_params_proto.Messages().ByName("LegacyParams")
	fd_LegacyParams_deposit_denom = md_LegacyParams.Fields().ByName("deposit_denom")
	fd_LegacyParams_redemption_rate = md_LegacyParams.Fields().ByName("redemption_rate")
	fd_LegacyParams_epoch_length = md_LegacyParams.Fields().ByName("epoch_length")
	fd_LegacyParams_interest_rate = md_LegacyParams.Fields().ByName("interest_rate")
	fd_LegacyParams_interest_rate_max = md_LegacyParams.Fields().ByName("interest_rate_max")
	fd_LegacyParams_interest_rate_min = md_LegacyParams.Fields().ByName("interest_rate_min")
	fd_LegacyParams_interest_rate_increase = md_LegacyParams.Fields().ByName("interest_rate_increase")
	fd_LegacyParams_interest_rate_decrease = md_LegacyParams.Fields().ByName("interest_rate_decrease")
	fd_LegacyParams_health_gain_factor = md_LegacyParams.Fields().ByName("health_gain_factor")
	fd_LegacyParams_total_value = md_LegacyParams.Fields().ByName("total_value")
}

var _ protoreflect.Message = (*fastReflection_LegacyParams)(nil)

type fastReflection_LegacyParams LegacyParams

func (x *LegacyParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LegacyParams)(x)
}

func (x *LegacyParams) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_stablestake_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LegacyParams_messageType fastReflection_LegacyParams_messageType
var _ protoreflect.MessageType = fastReflection_LegacyParams_messageType{}

type fastReflection_LegacyParams_messageType struct{}

func (x fastReflection_LegacyParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LegacyParams)(nil)
}
func (x fastReflection_LegacyParams_messageType) New() protoreflect.Message {
	return new(fastReflection_LegacyParams)
}
func (x fastReflection_LegacyParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LegacyParams) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LegacyParams) Type() protoreflect.MessageType {
	return _fastReflection_LegacyParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LegacyParams) New() protoreflect.Message {
	return new(fastReflection_LegacyParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LegacyParams) Interface() protoreflect.ProtoMessage {
	return (*LegacyParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LegacyParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DepositDenom != "" {
		value := protoreflect.ValueOfString(x.DepositDenom)
		if !f(fd_LegacyParams_deposit_denom, value) {
			return
		}
	}
	if x.RedemptionRate != "" {
		value := protoreflect.ValueOfString(x.RedemptionRate)
		if !f(fd_LegacyParams_redemption_rate, value) {
			return
		}
	}
	if x.EpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochLength)
		if !f(fd_LegacyParams_epoch_length, value) {
			return
		}
	}
	if x.InterestRate != "" {
		value := protoreflect.ValueOfString(x.InterestRate)
		if !f(fd_LegacyParams_interest_rate, value) {
			return
		}
	}
	if x.InterestRateMax != "" {
		value := protoreflect.ValueOfString(x.InterestRateMax)
		if !f(fd_LegacyParams_interest_rate_max, value) {
			return
		}
	}
	if x.InterestRateMin != "" {
		value := protoreflect.ValueOfString(x.InterestRateMin)
		if !f(fd_LegacyParams_interest_rate_min, value) {
			return
		}
	}
	if x.InterestRateIncrease != "" {
		value := protoreflect.ValueOfString(x.InterestRateIncrease)
		if !f(fd_LegacyParams_interest_rate_increase, value) {
			return
		}
	}
	if x.InterestRateDecrease != "" {
		value := protoreflect.ValueOfString(x.InterestRateDecrease)
		if !f(fd_LegacyParams_interest_rate_decrease, value) {
			return
		}
	}
	if x.HealthGainFactor != "" {
		value := protoreflect.ValueOfString(x.HealthGainFactor)
		if !f(fd_LegacyParams_health_gain_factor, value) {
			return
		}
	}
	if x.TotalValue != "" {
		value := protoreflect.ValueOfString(x.TotalValue)
		if !f(fd_LegacyParams_total_value, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LegacyParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		return x.DepositDenom != ""
	case "elys.stablestake.LegacyParams.redemption_rate":
		return x.RedemptionRate != ""
	case "elys.stablestake.LegacyParams.epoch_length":
		return x.EpochLength != int64(0)
	case "elys.stablestake.LegacyParams.interest_rate":
		return x.InterestRate != ""
	case "elys.stablestake.LegacyParams.interest_rate_max":
		return x.InterestRateMax != ""
	case "elys.stablestake.LegacyParams.interest_rate_min":
		return x.InterestRateMin != ""
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		return x.InterestRateIncrease != ""
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		return x.InterestRateDecrease != ""
	case "elys.stablestake.LegacyParams.health_gain_factor":
		return x.HealthGainFactor != ""
	case "elys.stablestake.LegacyParams.total_value":
		return x.TotalValue != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		x.DepositDenom = ""
	case "elys.stablestake.LegacyParams.redemption_rate":
		x.RedemptionRate = ""
	case "elys.stablestake.LegacyParams.epoch_length":
		x.EpochLength = int64(0)
	case "elys.stablestake.LegacyParams.interest_rate":
		x.InterestRate = ""
	case "elys.stablestake.LegacyParams.interest_rate_max":
		x.InterestRateMax = ""
	case "elys.stablestake.LegacyParams.interest_rate_min":
		x.InterestRateMin = ""
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		x.InterestRateIncrease = ""
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		x.InterestRateDecrease = ""
	case "elys.stablestake.LegacyParams.health_gain_factor":
		x.HealthGainFactor = ""
	case "elys.stablestake.LegacyParams.total_value":
		x.TotalValue = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LegacyParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		value := x.DepositDenom
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.redemption_rate":
		value := x.RedemptionRate
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.epoch_length":
		value := x.EpochLength
		return protoreflect.ValueOfInt64(value)
	case "elys.stablestake.LegacyParams.interest_rate":
		value := x.InterestRate
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.interest_rate_max":
		value := x.InterestRateMax
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.interest_rate_min":
		value := x.InterestRateMin
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		value := x.InterestRateIncrease
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		value := x.InterestRateDecrease
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.health_gain_factor":
		value := x.HealthGainFactor
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.LegacyParams.total_value":
		value := x.TotalValue
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		x.DepositDenom = value.Interface().(string)
	case "elys.stablestake.LegacyParams.redemption_rate":
		x.RedemptionRate = value.Interface().(string)
	case "elys.stablestake.LegacyParams.epoch_length":
		x.EpochLength = value.Int()
	case "elys.stablestake.LegacyParams.interest_rate":
		x.InterestRate = value.Interface().(string)
	case "elys.stablestake.LegacyParams.interest_rate_max":
		x.InterestRateMax = value.Interface().(string)
	case "elys.stablestake.LegacyParams.interest_rate_min":
		x.InterestRateMin = value.Interface().(string)
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		x.InterestRateIncrease = value.Interface().(string)
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		x.InterestRateDecrease = value.Interface().(string)
	case "elys.stablestake.LegacyParams.health_gain_factor":
		x.HealthGainFactor = value.Interface().(string)
	case "elys.stablestake.LegacyParams.total_value":
		x.TotalValue = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		panic(fmt.Errorf("field deposit_denom of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.redemption_rate":
		panic(fmt.Errorf("field redemption_rate of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.epoch_length":
		panic(fmt.Errorf("field epoch_length of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.interest_rate":
		panic(fmt.Errorf("field interest_rate of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.interest_rate_max":
		panic(fmt.Errorf("field interest_rate_max of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.interest_rate_min":
		panic(fmt.Errorf("field interest_rate_min of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		panic(fmt.Errorf("field interest_rate_increase of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		panic(fmt.Errorf("field interest_rate_decrease of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.health_gain_factor":
		panic(fmt.Errorf("field health_gain_factor of message elys.stablestake.LegacyParams is not mutable"))
	case "elys.stablestake.LegacyParams.total_value":
		panic(fmt.Errorf("field total_value of message elys.stablestake.LegacyParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LegacyParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.stablestake.LegacyParams.deposit_denom":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.redemption_rate":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.stablestake.LegacyParams.interest_rate":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.interest_rate_max":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.interest_rate_min":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.interest_rate_increase":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.interest_rate_decrease":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.health_gain_factor":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.LegacyParams.total_value":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.LegacyParams"))
		}
		panic(fmt.Errorf("message elys.stablestake.LegacyParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LegacyParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.stablestake.LegacyParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LegacyParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LegacyParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LegacyParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LegacyParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.DepositDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RedemptionRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochLength))
		}
		l = len(x.InterestRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InterestRateMax)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InterestRateMin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InterestRateIncrease)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InterestRateDecrease)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HealthGainFactor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LegacyParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalValue) > 0 {
			i -= len(x.TotalValue)
			copy(dAtA[i:], x.TotalValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalValue)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.HealthGainFactor) > 0 {
			i -= len(x.HealthGainFactor)
			copy(dAtA[i:], x.HealthGainFactor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HealthGainFactor)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.InterestRateDecrease) > 0 {
			i -= len(x.InterestRateDecrease)
			copy(dAtA[i:], x.InterestRateDecrease)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRateDecrease)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.InterestRateIncrease) > 0 {
			i -= len(x.InterestRateIncrease)
			copy(dAtA[i:], x.InterestRateIncrease)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRateIncrease)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.InterestRateMin) > 0 {
			i -= len(x.InterestRateMin)
			copy(dAtA[i:], x.InterestRateMin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRateMin)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.InterestRateMax) > 0 {
			i -= len(x.InterestRateMax)
			copy(dAtA[i:], x.InterestRateMax)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRateMax)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.InterestRate) > 0 {
			i -= len(x.InterestRate)
			copy(dAtA[i:], x.InterestRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRate)))
			i--
			dAtA[i] = 0x22
		}
		if x.EpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochLength))
			i--
			dAtA[i] = 0x18
		}
		if len(x.RedemptionRate) > 0 {
			i -= len(x.RedemptionRate)
			copy(dAtA[i:], x.RedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RedemptionRate)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.DepositDenom) > 0 {
			i -= len(x.DepositDenom)
			copy(dAtA[i:], x.DepositDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DepositDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LegacyParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
				}
				x.EpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRateMax", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRateMax = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRateMin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRateMin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRateIncrease", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRateIncrease = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRateDecrease", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRateDecrease = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HealthGainFactor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HealthGainFactor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_Params                               protoreflect.MessageDescriptor
	fd_Params_legacy_deposit_denom          protoreflect.FieldDescriptor
	fd_Params_legacy_redemption_rate        protoreflect.FieldDescriptor
	fd_Params_epoch_length                  protoreflect.FieldDescriptor
	fd_Params_legacy_interest_rate          protoreflect.FieldDescriptor
	fd_Params_legacy_interest_rate_max      protoreflect.FieldDescriptor
	fd_Params_legacy_interest_rate_min      protoreflect.FieldDescriptor
	fd_Params_legacy_interest_rate_increase protoreflect.FieldDescriptor
	fd_Params_legacy_interest_rate_decrease protoreflect.FieldDescriptor
	fd_Params_legacy_health_gain_factor     protoreflect.FieldDescriptor
	fd_Params_total_value                   protoreflect.FieldDescriptor
	fd_Params_legacy_max_leverage_ratio     protoreflect.FieldDescriptor
	fd_Params_legacy_max_withdraw_ratio     protoreflect.FieldDescriptor
)

func init() {
	file_elys_stablestake_params_proto_init()
	md_Params = File_elys_stablestake_params_proto.Messages().ByName("Params")
	fd_Params_legacy_deposit_denom = md_Params.Fields().ByName("legacy_deposit_denom")
	fd_Params_legacy_redemption_rate = md_Params.Fields().ByName("legacy_redemption_rate")
	fd_Params_epoch_length = md_Params.Fields().ByName("epoch_length")
	fd_Params_legacy_interest_rate = md_Params.Fields().ByName("legacy_interest_rate")
	fd_Params_legacy_interest_rate_max = md_Params.Fields().ByName("legacy_interest_rate_max")
	fd_Params_legacy_interest_rate_min = md_Params.Fields().ByName("legacy_interest_rate_min")
	fd_Params_legacy_interest_rate_increase = md_Params.Fields().ByName("legacy_interest_rate_increase")
	fd_Params_legacy_interest_rate_decrease = md_Params.Fields().ByName("legacy_interest_rate_decrease")
	fd_Params_legacy_health_gain_factor = md_Params.Fields().ByName("legacy_health_gain_factor")
	fd_Params_total_value = md_Params.Fields().ByName("total_value")
	fd_Params_legacy_max_leverage_ratio = md_Params.Fields().ByName("legacy_max_leverage_ratio")
	fd_Params_legacy_max_withdraw_ratio = md_Params.Fields().ByName("legacy_max_withdraw_ratio")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_stablestake_params_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LegacyDepositDenom != "" {
		value := protoreflect.ValueOfString(x.LegacyDepositDenom)
		if !f(fd_Params_legacy_deposit_denom, value) {
			return
		}
	}
	if x.LegacyRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.LegacyRedemptionRate)
		if !f(fd_Params_legacy_redemption_rate, value) {
			return
		}
	}
	if x.EpochLength != int64(0) {
		value := protoreflect.ValueOfInt64(x.EpochLength)
		if !f(fd_Params_epoch_length, value) {
			return
		}
	}
	if x.LegacyInterestRate != "" {
		value := protoreflect.ValueOfString(x.LegacyInterestRate)
		if !f(fd_Params_legacy_interest_rate, value) {
			return
		}
	}
	if x.LegacyInterestRateMax != "" {
		value := protoreflect.ValueOfString(x.LegacyInterestRateMax)
		if !f(fd_Params_legacy_interest_rate_max, value) {
			return
		}
	}
	if x.LegacyInterestRateMin != "" {
		value := protoreflect.ValueOfString(x.LegacyInterestRateMin)
		if !f(fd_Params_legacy_interest_rate_min, value) {
			return
		}
	}
	if x.LegacyInterestRateIncrease != "" {
		value := protoreflect.ValueOfString(x.LegacyInterestRateIncrease)
		if !f(fd_Params_legacy_interest_rate_increase, value) {
			return
		}
	}
	if x.LegacyInterestRateDecrease != "" {
		value := protoreflect.ValueOfString(x.LegacyInterestRateDecrease)
		if !f(fd_Params_legacy_interest_rate_decrease, value) {
			return
		}
	}
	if x.LegacyHealthGainFactor != "" {
		value := protoreflect.ValueOfString(x.LegacyHealthGainFactor)
		if !f(fd_Params_legacy_health_gain_factor, value) {
			return
		}
	}
	if x.TotalValue != "" {
		value := protoreflect.ValueOfString(x.TotalValue)
		if !f(fd_Params_total_value, value) {
			return
		}
	}
	if x.LegacyMaxLeverageRatio != "" {
		value := protoreflect.ValueOfString(x.LegacyMaxLeverageRatio)
		if !f(fd_Params_legacy_max_leverage_ratio, value) {
			return
		}
	}
	if x.LegacyMaxWithdrawRatio != "" {
		value := protoreflect.ValueOfString(x.LegacyMaxWithdrawRatio)
		if !f(fd_Params_legacy_max_withdraw_ratio, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		return x.LegacyDepositDenom != ""
	case "elys.stablestake.Params.legacy_redemption_rate":
		return x.LegacyRedemptionRate != ""
	case "elys.stablestake.Params.epoch_length":
		return x.EpochLength != int64(0)
	case "elys.stablestake.Params.legacy_interest_rate":
		return x.LegacyInterestRate != ""
	case "elys.stablestake.Params.legacy_interest_rate_max":
		return x.LegacyInterestRateMax != ""
	case "elys.stablestake.Params.legacy_interest_rate_min":
		return x.LegacyInterestRateMin != ""
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		return x.LegacyInterestRateIncrease != ""
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		return x.LegacyInterestRateDecrease != ""
	case "elys.stablestake.Params.legacy_health_gain_factor":
		return x.LegacyHealthGainFactor != ""
	case "elys.stablestake.Params.total_value":
		return x.TotalValue != ""
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		return x.LegacyMaxLeverageRatio != ""
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		return x.LegacyMaxWithdrawRatio != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		x.LegacyDepositDenom = ""
	case "elys.stablestake.Params.legacy_redemption_rate":
		x.LegacyRedemptionRate = ""
	case "elys.stablestake.Params.epoch_length":
		x.EpochLength = int64(0)
	case "elys.stablestake.Params.legacy_interest_rate":
		x.LegacyInterestRate = ""
	case "elys.stablestake.Params.legacy_interest_rate_max":
		x.LegacyInterestRateMax = ""
	case "elys.stablestake.Params.legacy_interest_rate_min":
		x.LegacyInterestRateMin = ""
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		x.LegacyInterestRateIncrease = ""
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		x.LegacyInterestRateDecrease = ""
	case "elys.stablestake.Params.legacy_health_gain_factor":
		x.LegacyHealthGainFactor = ""
	case "elys.stablestake.Params.total_value":
		x.TotalValue = ""
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		x.LegacyMaxLeverageRatio = ""
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		x.LegacyMaxWithdrawRatio = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		value := x.LegacyDepositDenom
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_redemption_rate":
		value := x.LegacyRedemptionRate
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.epoch_length":
		value := x.EpochLength
		return protoreflect.ValueOfInt64(value)
	case "elys.stablestake.Params.legacy_interest_rate":
		value := x.LegacyInterestRate
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_interest_rate_max":
		value := x.LegacyInterestRateMax
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_interest_rate_min":
		value := x.LegacyInterestRateMin
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		value := x.LegacyInterestRateIncrease
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		value := x.LegacyInterestRateDecrease
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_health_gain_factor":
		value := x.LegacyHealthGainFactor
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.total_value":
		value := x.TotalValue
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		value := x.LegacyMaxLeverageRatio
		return protoreflect.ValueOfString(value)
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		value := x.LegacyMaxWithdrawRatio
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		x.LegacyDepositDenom = value.Interface().(string)
	case "elys.stablestake.Params.legacy_redemption_rate":
		x.LegacyRedemptionRate = value.Interface().(string)
	case "elys.stablestake.Params.epoch_length":
		x.EpochLength = value.Int()
	case "elys.stablestake.Params.legacy_interest_rate":
		x.LegacyInterestRate = value.Interface().(string)
	case "elys.stablestake.Params.legacy_interest_rate_max":
		x.LegacyInterestRateMax = value.Interface().(string)
	case "elys.stablestake.Params.legacy_interest_rate_min":
		x.LegacyInterestRateMin = value.Interface().(string)
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		x.LegacyInterestRateIncrease = value.Interface().(string)
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		x.LegacyInterestRateDecrease = value.Interface().(string)
	case "elys.stablestake.Params.legacy_health_gain_factor":
		x.LegacyHealthGainFactor = value.Interface().(string)
	case "elys.stablestake.Params.total_value":
		x.TotalValue = value.Interface().(string)
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		x.LegacyMaxLeverageRatio = value.Interface().(string)
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		x.LegacyMaxWithdrawRatio = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		panic(fmt.Errorf("field legacy_deposit_denom of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_redemption_rate":
		panic(fmt.Errorf("field legacy_redemption_rate of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.epoch_length":
		panic(fmt.Errorf("field epoch_length of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_interest_rate":
		panic(fmt.Errorf("field legacy_interest_rate of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_interest_rate_max":
		panic(fmt.Errorf("field legacy_interest_rate_max of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_interest_rate_min":
		panic(fmt.Errorf("field legacy_interest_rate_min of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		panic(fmt.Errorf("field legacy_interest_rate_increase of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		panic(fmt.Errorf("field legacy_interest_rate_decrease of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_health_gain_factor":
		panic(fmt.Errorf("field legacy_health_gain_factor of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.total_value":
		panic(fmt.Errorf("field total_value of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		panic(fmt.Errorf("field legacy_max_leverage_ratio of message elys.stablestake.Params is not mutable"))
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		panic(fmt.Errorf("field legacy_max_withdraw_ratio of message elys.stablestake.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.stablestake.Params.legacy_deposit_denom":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_redemption_rate":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.epoch_length":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.stablestake.Params.legacy_interest_rate":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_interest_rate_max":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_interest_rate_min":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_interest_rate_increase":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_interest_rate_decrease":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_health_gain_factor":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.total_value":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_max_leverage_ratio":
		return protoreflect.ValueOfString("")
	case "elys.stablestake.Params.legacy_max_withdraw_ratio":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.stablestake.Params"))
		}
		panic(fmt.Errorf("message elys.stablestake.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.stablestake.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.LegacyDepositDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyRedemptionRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EpochLength != 0 {
			n += 1 + runtime.Sov(uint64(x.EpochLength))
		}
		l = len(x.LegacyInterestRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyInterestRateMax)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyInterestRateMin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyInterestRateIncrease)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyInterestRateDecrease)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyHealthGainFactor)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyMaxLeverageRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LegacyMaxWithdrawRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.LegacyMaxWithdrawRatio) > 0 {
			i -= len(x.LegacyMaxWithdrawRatio)
			copy(dAtA[i:], x.LegacyMaxWithdrawRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyMaxWithdrawRatio)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.LegacyMaxLeverageRatio) > 0 {
			i -= len(x.LegacyMaxLeverageRatio)
			copy(dAtA[i:], x.LegacyMaxLeverageRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyMaxLeverageRatio)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.TotalValue) > 0 {
			i -= len(x.TotalValue)
			copy(dAtA[i:], x.TotalValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalValue)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.LegacyHealthGainFactor) > 0 {
			i -= len(x.LegacyHealthGainFactor)
			copy(dAtA[i:], x.LegacyHealthGainFactor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyHealthGainFactor)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.LegacyInterestRateDecrease) > 0 {
			i -= len(x.LegacyInterestRateDecrease)
			copy(dAtA[i:], x.LegacyInterestRateDecrease)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyInterestRateDecrease)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.LegacyInterestRateIncrease) > 0 {
			i -= len(x.LegacyInterestRateIncrease)
			copy(dAtA[i:], x.LegacyInterestRateIncrease)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyInterestRateIncrease)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.LegacyInterestRateMin) > 0 {
			i -= len(x.LegacyInterestRateMin)
			copy(dAtA[i:], x.LegacyInterestRateMin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyInterestRateMin)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.LegacyInterestRateMax) > 0 {
			i -= len(x.LegacyInterestRateMax)
			copy(dAtA[i:], x.LegacyInterestRateMax)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyInterestRateMax)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.LegacyInterestRate) > 0 {
			i -= len(x.LegacyInterestRate)
			copy(dAtA[i:], x.LegacyInterestRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyInterestRate)))
			i--
			dAtA[i] = 0x22
		}
		if x.EpochLength != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EpochLength))
			i--
			dAtA[i] = 0x18
		}
		if len(x.LegacyRedemptionRate) > 0 {
			i -= len(x.LegacyRedemptionRate)
			copy(dAtA[i:], x.LegacyRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyRedemptionRate)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.LegacyDepositDenom) > 0 {
			i -= len(x.LegacyDepositDenom)
			copy(dAtA[i:], x.LegacyDepositDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LegacyDepositDenom)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyDepositDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyDepositDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EpochLength", wireType)
				}
				x.EpochLength = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EpochLength |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyInterestRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyInterestRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyInterestRateMax", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyInterestRateMax = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyInterestRateMin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyInterestRateMin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyInterestRateIncrease", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyInterestRateIncrease = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyInterestRateDecrease", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyInterestRateDecrease = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyHealthGainFactor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyHealthGainFactor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyMaxLeverageRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyMaxLeverageRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LegacyMaxWithdrawRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LegacyMaxWithdrawRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/stablestake/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LegacyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DepositDenom         string `protobuf:"bytes,1,opt,name=deposit_denom,json=depositDenom,proto3" json:"deposit_denom,omitempty"`
	RedemptionRate       string `protobuf:"bytes,2,opt,name=redemption_rate,json=redemptionRate,proto3" json:"redemption_rate,omitempty"`
	EpochLength          int64  `protobuf:"varint,3,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	InterestRate         string `protobuf:"bytes,4,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	InterestRateMax      string `protobuf:"bytes,5,opt,name=interest_rate_max,json=interestRateMax,proto3" json:"interest_rate_max,omitempty"`
	InterestRateMin      string `protobuf:"bytes,6,opt,name=interest_rate_min,json=interestRateMin,proto3" json:"interest_rate_min,omitempty"`
	InterestRateIncrease string `protobuf:"bytes,7,opt,name=interest_rate_increase,json=interestRateIncrease,proto3" json:"interest_rate_increase,omitempty"`
	InterestRateDecrease string `protobuf:"bytes,8,opt,name=interest_rate_decrease,json=interestRateDecrease,proto3" json:"interest_rate_decrease,omitempty"`
	HealthGainFactor     string `protobuf:"bytes,9,opt,name=health_gain_factor,json=healthGainFactor,proto3" json:"health_gain_factor,omitempty"`
	TotalValue           string `protobuf:"bytes,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
}

func (x *LegacyParams) Reset() {
	*x = LegacyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_stablestake_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyParams) ProtoMessage() {}

// Deprecated: Use LegacyParams.ProtoReflect.Descriptor instead.
func (*LegacyParams) Descriptor() ([]byte, []int) {
	return file_elys_stablestake_params_proto_rawDescGZIP(), []int{0}
}

func (x *LegacyParams) GetDepositDenom() string {
	if x != nil {
		return x.DepositDenom
	}
	return ""
}

func (x *LegacyParams) GetRedemptionRate() string {
	if x != nil {
		return x.RedemptionRate
	}
	return ""
}

func (x *LegacyParams) GetEpochLength() int64 {
	if x != nil {
		return x.EpochLength
	}
	return 0
}

func (x *LegacyParams) GetInterestRate() string {
	if x != nil {
		return x.InterestRate
	}
	return ""
}

func (x *LegacyParams) GetInterestRateMax() string {
	if x != nil {
		return x.InterestRateMax
	}
	return ""
}

func (x *LegacyParams) GetInterestRateMin() string {
	if x != nil {
		return x.InterestRateMin
	}
	return ""
}

func (x *LegacyParams) GetInterestRateIncrease() string {
	if x != nil {
		return x.InterestRateIncrease
	}
	return ""
}

func (x *LegacyParams) GetInterestRateDecrease() string {
	if x != nil {
		return x.InterestRateDecrease
	}
	return ""
}

func (x *LegacyParams) GetHealthGainFactor() string {
	if x != nil {
		return x.HealthGainFactor
	}
	return ""
}

func (x *LegacyParams) GetTotalValue() string {
	if x != nil {
		return x.TotalValue
	}
	return ""
}

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LegacyDepositDenom         string `protobuf:"bytes,1,opt,name=legacy_deposit_denom,json=legacyDepositDenom,proto3" json:"legacy_deposit_denom,omitempty"`
	LegacyRedemptionRate       string `protobuf:"bytes,2,opt,name=legacy_redemption_rate,json=legacyRedemptionRate,proto3" json:"legacy_redemption_rate,omitempty"`
	EpochLength                int64  `protobuf:"varint,3,opt,name=epoch_length,json=epochLength,proto3" json:"epoch_length,omitempty"`
	LegacyInterestRate         string `protobuf:"bytes,4,opt,name=legacy_interest_rate,json=legacyInterestRate,proto3" json:"legacy_interest_rate,omitempty"`
	LegacyInterestRateMax      string `protobuf:"bytes,5,opt,name=legacy_interest_rate_max,json=legacyInterestRateMax,proto3" json:"legacy_interest_rate_max,omitempty"`
	LegacyInterestRateMin      string `protobuf:"bytes,6,opt,name=legacy_interest_rate_min,json=legacyInterestRateMin,proto3" json:"legacy_interest_rate_min,omitempty"`
	LegacyInterestRateIncrease string `protobuf:"bytes,7,opt,name=legacy_interest_rate_increase,json=legacyInterestRateIncrease,proto3" json:"legacy_interest_rate_increase,omitempty"`
	LegacyInterestRateDecrease string `protobuf:"bytes,8,opt,name=legacy_interest_rate_decrease,json=legacyInterestRateDecrease,proto3" json:"legacy_interest_rate_decrease,omitempty"`
	LegacyHealthGainFactor     string `protobuf:"bytes,9,opt,name=legacy_health_gain_factor,json=legacyHealthGainFactor,proto3" json:"legacy_health_gain_factor,omitempty"`
	TotalValue                 string `protobuf:"bytes,10,opt,name=total_value,json=totalValue,proto3" json:"total_value,omitempty"`
	LegacyMaxLeverageRatio     string `protobuf:"bytes,11,opt,name=legacy_max_leverage_ratio,json=legacyMaxLeverageRatio,proto3" json:"legacy_max_leverage_ratio,omitempty"`
	LegacyMaxWithdrawRatio     string `protobuf:"bytes,12,opt,name=legacy_max_withdraw_ratio,json=legacyMaxWithdrawRatio,proto3" json:"legacy_max_withdraw_ratio,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_stablestake_params_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_elys_stablestake_params_proto_rawDescGZIP(), []int{1}
}

func (x *Params) GetLegacyDepositDenom() string {
	if x != nil {
		return x.LegacyDepositDenom
	}
	return ""
}

func (x *Params) GetLegacyRedemptionRate() string {
	if x != nil {
		return x.LegacyRedemptionRate
	}
	return ""
}

func (x *Params) GetEpochLength() int64 {
	if x != nil {
		return x.EpochLength
	}
	return 0
}

func (x *Params) GetLegacyInterestRate() string {
	if x != nil {
		return x.LegacyInterestRate
	}
	return ""
}

func (x *Params) GetLegacyInterestRateMax() string {
	if x != nil {
		return x.LegacyInterestRateMax
	}
	return ""
}

func (x *Params) GetLegacyInterestRateMin() string {
	if x != nil {
		return x.LegacyInterestRateMin
	}
	return ""
}

func (x *Params) GetLegacyInterestRateIncrease() string {
	if x != nil {
		return x.LegacyInterestRateIncrease
	}
	return ""
}

func (x *Params) GetLegacyInterestRateDecrease() string {
	if x != nil {
		return x.LegacyInterestRateDecrease
	}
	return ""
}

func (x *Params) GetLegacyHealthGainFactor() string {
	if x != nil {
		return x.LegacyHealthGainFactor
	}
	return ""
}

func (x *Params) GetTotalValue() string {
	if x != nil {
		return x.TotalValue
	}
	return ""
}

func (x *Params) GetLegacyMaxLeverageRatio() string {
	if x != nil {
		return x.LegacyMaxLeverageRatio
	}
	return ""
}

func (x *Params) GetLegacyMaxWithdrawRatio() string {
	if x != nil {
		return x.LegacyMaxWithdrawRatio
	}
	return ""
}

var File_elys_stablestake_params_proto protoreflect.FileDescriptor

var file_elys_stablestake_params_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc9, 0x06, 0x0a, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x5a, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x5d, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x5d,
	0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x67, 0x0a,
	0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x47, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x4c, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x87,
	0x09, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x67, 0x0a, 0x16, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x14,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x14, 0x6c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x12, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x18,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x52, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x6a, 0x0a, 0x18, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x15, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x4d, 0x69, 0x6e, 0x12, 0x74, 0x0a, 0x1d, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1a,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x1d, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x1a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x6c, 0x0a, 0x19, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x47, 0x61, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6c, 0x0a, 0x19,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x6c, 0x0a, 0x19, 0x6c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x16, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x4d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0xb7, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79,
	0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0xa2, 0x02, 0x03, 0x45, 0x53, 0x58, 0xaa, 0x02, 0x10, 0x45, 0x6c, 0x79, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0xca, 0x02, 0x10, 0x45,
	0x6c, 0x79, 0x73, 0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61, 0x6b, 0x65, 0xe2,
	0x02, 0x1c, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x11, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_stablestake_params_proto_rawDescOnce sync.Once
	file_elys_stablestake_params_proto_rawDescData = file_elys_stablestake_params_proto_rawDesc
)

func file_elys_stablestake_params_proto_rawDescGZIP() []byte {
	file_elys_stablestake_params_proto_rawDescOnce.Do(func() {
		file_elys_stablestake_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_stablestake_params_proto_rawDescData)
	})
	return file_elys_stablestake_params_proto_rawDescData
}

var file_elys_stablestake_params_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_elys_stablestake_params_proto_goTypes = []interface{}{
	(*LegacyParams)(nil), // 0: elys.stablestake.LegacyParams
	(*Params)(nil),       // 1: elys.stablestake.Params
}
var file_elys_stablestake_params_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_elys_stablestake_params_proto_init() }
func file_elys_stablestake_params_proto_init() {
	if File_elys_stablestake_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_stablestake_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_stablestake_params_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_stablestake_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_stablestake_params_proto_goTypes,
		DependencyIndexes: file_elys_stablestake_params_proto_depIdxs,
		MessageInfos:      file_elys_stablestake_params_proto_msgTypes,
	}.Build()
	File_elys_stablestake_params_proto = out.File
	file_elys_stablestake_params_proto_rawDesc = nil
	file_elys_stablestake_params_proto_goTypes = nil
	file_elys_stablestake_params_proto_depIdxs = nil
}
