// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package masterchef

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	ExternalIncentive(ctx context.Context, in *QueryExternalIncentiveRequest, opts ...grpc.CallOption) (*QueryExternalIncentiveResponse, error)
	PoolInfo(ctx context.Context, in *QueryPoolInfoRequest, opts ...grpc.CallOption) (*QueryPoolInfoResponse, error)
	PoolRewardInfo(ctx context.Context, in *QueryPoolRewardInfoRequest, opts ...grpc.CallOption) (*QueryPoolRewardInfoResponse, error)
	UserRewardInfo(ctx context.Context, in *QueryUserRewardInfoRequest, opts ...grpc.CallOption) (*QueryUserRewardInfoResponse, error)
	UserPendingReward(ctx context.Context, in *QueryUserPendingRewardRequest, opts ...grpc.CallOption) (*QueryUserPendingRewardResponse, error)
	StableStakeApr(ctx context.Context, in *QueryStableStakeAprRequest, opts ...grpc.CallOption) (*QueryStableStakeAprResponse, error)
	PoolAprs(ctx context.Context, in *QueryPoolAprsRequest, opts ...grpc.CallOption) (*QueryPoolAprsResponse, error)
	// Queries a list of ShowFeeInfo items.
	ShowFeeInfo(ctx context.Context, in *QueryShowFeeInfoRequest, opts ...grpc.CallOption) (*QueryShowFeeInfoResponse, error)
	// Queries a list of ListFeeInfo items.
	ListFeeInfo(ctx context.Context, in *QueryListFeeInfoRequest, opts ...grpc.CallOption) (*QueryListFeeInfoResponse, error)
	// Calculate APR
	Apr(ctx context.Context, in *QueryAprRequest, opts ...grpc.CallOption) (*QueryAprResponse, error)
	// Calculate APRs
	Aprs(ctx context.Context, in *QueryAprsRequest, opts ...grpc.CallOption) (*QueryAprsResponse, error)
	// Queries PoolReward items
	PoolRewards(ctx context.Context, in *QueryPoolRewardsRequest, opts ...grpc.CallOption) (*QueryPoolRewardsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExternalIncentive(ctx context.Context, in *QueryExternalIncentiveRequest, opts ...grpc.CallOption) (*QueryExternalIncentiveResponse, error) {
	out := new(QueryExternalIncentiveResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ExternalIncentive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolInfo(ctx context.Context, in *QueryPoolInfoRequest, opts ...grpc.CallOption) (*QueryPoolInfoResponse, error) {
	out := new(QueryPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolRewardInfo(ctx context.Context, in *QueryPoolRewardInfoRequest, opts ...grpc.CallOption) (*QueryPoolRewardInfoResponse, error) {
	out := new(QueryPoolRewardInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRewardInfo(ctx context.Context, in *QueryUserRewardInfoRequest, opts ...grpc.CallOption) (*QueryUserRewardInfoResponse, error) {
	out := new(QueryUserRewardInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/UserRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPendingReward(ctx context.Context, in *QueryUserPendingRewardRequest, opts ...grpc.CallOption) (*QueryUserPendingRewardResponse, error) {
	out := new(QueryUserPendingRewardResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/UserPendingReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StableStakeApr(ctx context.Context, in *QueryStableStakeAprRequest, opts ...grpc.CallOption) (*QueryStableStakeAprResponse, error) {
	out := new(QueryStableStakeAprResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/StableStakeApr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAprs(ctx context.Context, in *QueryPoolAprsRequest, opts ...grpc.CallOption) (*QueryPoolAprsResponse, error) {
	out := new(QueryPoolAprsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolAprs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ShowFeeInfo(ctx context.Context, in *QueryShowFeeInfoRequest, opts ...grpc.CallOption) (*QueryShowFeeInfoResponse, error) {
	out := new(QueryShowFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ShowFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListFeeInfo(ctx context.Context, in *QueryListFeeInfoRequest, opts ...grpc.CallOption) (*QueryListFeeInfoResponse, error) {
	out := new(QueryListFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/ListFeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Apr(ctx context.Context, in *QueryAprRequest, opts ...grpc.CallOption) (*QueryAprResponse, error) {
	out := new(QueryAprResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Apr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Aprs(ctx context.Context, in *QueryAprsRequest, opts ...grpc.CallOption) (*QueryAprsResponse, error) {
	out := new(QueryAprsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/Aprs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolRewards(ctx context.Context, in *QueryPoolRewardsRequest, opts ...grpc.CallOption) (*QueryPoolRewardsResponse, error) {
	out := new(QueryPoolRewardsResponse)
	err := c.cc.Invoke(ctx, "/elys.masterchef.Query/PoolRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	ExternalIncentive(context.Context, *QueryExternalIncentiveRequest) (*QueryExternalIncentiveResponse, error)
	PoolInfo(context.Context, *QueryPoolInfoRequest) (*QueryPoolInfoResponse, error)
	PoolRewardInfo(context.Context, *QueryPoolRewardInfoRequest) (*QueryPoolRewardInfoResponse, error)
	UserRewardInfo(context.Context, *QueryUserRewardInfoRequest) (*QueryUserRewardInfoResponse, error)
	UserPendingReward(context.Context, *QueryUserPendingRewardRequest) (*QueryUserPendingRewardResponse, error)
	StableStakeApr(context.Context, *QueryStableStakeAprRequest) (*QueryStableStakeAprResponse, error)
	PoolAprs(context.Context, *QueryPoolAprsRequest) (*QueryPoolAprsResponse, error)
	// Queries a list of ShowFeeInfo items.
	ShowFeeInfo(context.Context, *QueryShowFeeInfoRequest) (*QueryShowFeeInfoResponse, error)
	// Queries a list of ListFeeInfo items.
	ListFeeInfo(context.Context, *QueryListFeeInfoRequest) (*QueryListFeeInfoResponse, error)
	// Calculate APR
	Apr(context.Context, *QueryAprRequest) (*QueryAprResponse, error)
	// Calculate APRs
	Aprs(context.Context, *QueryAprsRequest) (*QueryAprsResponse, error)
	// Queries PoolReward items
	PoolRewards(context.Context, *QueryPoolRewardsRequest) (*QueryPoolRewardsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) ExternalIncentive(context.Context, *QueryExternalIncentiveRequest) (*QueryExternalIncentiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalIncentive not implemented")
}
func (UnimplementedQueryServer) PoolInfo(context.Context, *QueryPoolInfoRequest) (*QueryPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolInfo not implemented")
}
func (UnimplementedQueryServer) PoolRewardInfo(context.Context, *QueryPoolRewardInfoRequest) (*QueryPoolRewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRewardInfo not implemented")
}
func (UnimplementedQueryServer) UserRewardInfo(context.Context, *QueryUserRewardInfoRequest) (*QueryUserRewardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRewardInfo not implemented")
}
func (UnimplementedQueryServer) UserPendingReward(context.Context, *QueryUserPendingRewardRequest) (*QueryUserPendingRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPendingReward not implemented")
}
func (UnimplementedQueryServer) StableStakeApr(context.Context, *QueryStableStakeAprRequest) (*QueryStableStakeAprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StableStakeApr not implemented")
}
func (UnimplementedQueryServer) PoolAprs(context.Context, *QueryPoolAprsRequest) (*QueryPoolAprsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAprs not implemented")
}
func (UnimplementedQueryServer) ShowFeeInfo(context.Context, *QueryShowFeeInfoRequest) (*QueryShowFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowFeeInfo not implemented")
}
func (UnimplementedQueryServer) ListFeeInfo(context.Context, *QueryListFeeInfoRequest) (*QueryListFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeeInfo not implemented")
}
func (UnimplementedQueryServer) Apr(context.Context, *QueryAprRequest) (*QueryAprResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apr not implemented")
}
func (UnimplementedQueryServer) Aprs(context.Context, *QueryAprsRequest) (*QueryAprsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aprs not implemented")
}
func (UnimplementedQueryServer) PoolRewards(context.Context, *QueryPoolRewardsRequest) (*QueryPoolRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRewards not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExternalIncentive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExternalIncentiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExternalIncentive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ExternalIncentive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExternalIncentive(ctx, req.(*QueryExternalIncentiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolInfo(ctx, req.(*QueryPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolRewardInfo(ctx, req.(*QueryPoolRewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRewardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/UserRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRewardInfo(ctx, req.(*QueryUserRewardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPendingReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPendingRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPendingReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/UserPendingReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPendingReward(ctx, req.(*QueryUserPendingRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StableStakeApr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStableStakeAprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StableStakeApr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/StableStakeApr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StableStakeApr(ctx, req.(*QueryStableStakeAprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAprs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolAprsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAprs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolAprs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAprs(ctx, req.(*QueryPoolAprsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ShowFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryShowFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ShowFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ShowFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ShowFeeInfo(ctx, req.(*QueryShowFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListFeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListFeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/ListFeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListFeeInfo(ctx, req.(*QueryListFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Apr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAprRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Apr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Apr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Apr(ctx, req.(*QueryAprRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Aprs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAprsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Aprs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/Aprs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Aprs(ctx, req.(*QueryAprsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.masterchef.Query/PoolRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolRewards(ctx, req.(*QueryPoolRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.masterchef.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ExternalIncentive",
			Handler:    _Query_ExternalIncentive_Handler,
		},
		{
			MethodName: "PoolInfo",
			Handler:    _Query_PoolInfo_Handler,
		},
		{
			MethodName: "PoolRewardInfo",
			Handler:    _Query_PoolRewardInfo_Handler,
		},
		{
			MethodName: "UserRewardInfo",
			Handler:    _Query_UserRewardInfo_Handler,
		},
		{
			MethodName: "UserPendingReward",
			Handler:    _Query_UserPendingReward_Handler,
		},
		{
			MethodName: "StableStakeApr",
			Handler:    _Query_StableStakeApr_Handler,
		},
		{
			MethodName: "PoolAprs",
			Handler:    _Query_PoolAprs_Handler,
		},
		{
			MethodName: "ShowFeeInfo",
			Handler:    _Query_ShowFeeInfo_Handler,
		},
		{
			MethodName: "ListFeeInfo",
			Handler:    _Query_ListFeeInfo_Handler,
		},
		{
			MethodName: "Apr",
			Handler:    _Query_Apr_Handler,
		},
		{
			MethodName: "Aprs",
			Handler:    _Query_Aprs_Handler,
		},
		{
			MethodName: "PoolRewards",
			Handler:    _Query_PoolRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/masterchef/query.proto",
}
