// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package masterchef

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_PoolInfo_8_list)(nil)

type _PoolInfo_8_list struct {
	list *[]string
}

func (x *_PoolInfo_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_PoolInfo_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_PoolInfo_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_PoolInfo_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_PoolInfo_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message PoolInfo at list field ExternalRewardDenoms as it is not of Message kind"))
}

func (x *_PoolInfo_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_PoolInfo_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_PoolInfo_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_PoolInfo                        protoreflect.MessageDescriptor
	fd_PoolInfo_pool_id                protoreflect.FieldDescriptor
	fd_PoolInfo_reward_wallet          protoreflect.FieldDescriptor
	fd_PoolInfo_multiplier             protoreflect.FieldDescriptor
	fd_PoolInfo_eden_apr               protoreflect.FieldDescriptor
	fd_PoolInfo_dex_apr                protoreflect.FieldDescriptor
	fd_PoolInfo_gas_apr                protoreflect.FieldDescriptor
	fd_PoolInfo_external_incentive_apr protoreflect.FieldDescriptor
	fd_PoolInfo_external_reward_denoms protoreflect.FieldDescriptor
	fd_PoolInfo_enable_eden_rewards    protoreflect.FieldDescriptor
)

func init() {
	file_elys_masterchef_pool_proto_init()
	md_PoolInfo = File_elys_masterchef_pool_proto.Messages().ByName("PoolInfo")
	fd_PoolInfo_pool_id = md_PoolInfo.Fields().ByName("pool_id")
	fd_PoolInfo_reward_wallet = md_PoolInfo.Fields().ByName("reward_wallet")
	fd_PoolInfo_multiplier = md_PoolInfo.Fields().ByName("multiplier")
	fd_PoolInfo_eden_apr = md_PoolInfo.Fields().ByName("eden_apr")
	fd_PoolInfo_dex_apr = md_PoolInfo.Fields().ByName("dex_apr")
	fd_PoolInfo_gas_apr = md_PoolInfo.Fields().ByName("gas_apr")
	fd_PoolInfo_external_incentive_apr = md_PoolInfo.Fields().ByName("external_incentive_apr")
	fd_PoolInfo_external_reward_denoms = md_PoolInfo.Fields().ByName("external_reward_denoms")
	fd_PoolInfo_enable_eden_rewards = md_PoolInfo.Fields().ByName("enable_eden_rewards")
}

var _ protoreflect.Message = (*fastReflection_PoolInfo)(nil)

type fastReflection_PoolInfo PoolInfo

func (x *PoolInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolInfo)(x)
}

func (x *PoolInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_masterchef_pool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolInfo_messageType fastReflection_PoolInfo_messageType
var _ protoreflect.MessageType = fastReflection_PoolInfo_messageType{}

type fastReflection_PoolInfo_messageType struct{}

func (x fastReflection_PoolInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolInfo)(nil)
}
func (x fastReflection_PoolInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolInfo)
}
func (x fastReflection_PoolInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolInfo) Type() protoreflect.MessageType {
	return _fastReflection_PoolInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolInfo) New() protoreflect.Message {
	return new(fastReflection_PoolInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolInfo) Interface() protoreflect.ProtoMessage {
	return (*PoolInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_PoolInfo_pool_id, value) {
			return
		}
	}
	if x.RewardWallet != "" {
		value := protoreflect.ValueOfString(x.RewardWallet)
		if !f(fd_PoolInfo_reward_wallet, value) {
			return
		}
	}
	if x.Multiplier != "" {
		value := protoreflect.ValueOfString(x.Multiplier)
		if !f(fd_PoolInfo_multiplier, value) {
			return
		}
	}
	if x.EdenApr != "" {
		value := protoreflect.ValueOfString(x.EdenApr)
		if !f(fd_PoolInfo_eden_apr, value) {
			return
		}
	}
	if x.DexApr != "" {
		value := protoreflect.ValueOfString(x.DexApr)
		if !f(fd_PoolInfo_dex_apr, value) {
			return
		}
	}
	if x.GasApr != "" {
		value := protoreflect.ValueOfString(x.GasApr)
		if !f(fd_PoolInfo_gas_apr, value) {
			return
		}
	}
	if x.ExternalIncentiveApr != "" {
		value := protoreflect.ValueOfString(x.ExternalIncentiveApr)
		if !f(fd_PoolInfo_external_incentive_apr, value) {
			return
		}
	}
	if len(x.ExternalRewardDenoms) != 0 {
		value := protoreflect.ValueOfList(&_PoolInfo_8_list{list: &x.ExternalRewardDenoms})
		if !f(fd_PoolInfo_external_reward_denoms, value) {
			return
		}
	}
	if x.EnableEdenRewards != false {
		value := protoreflect.ValueOfBool(x.EnableEdenRewards)
		if !f(fd_PoolInfo_enable_eden_rewards, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.masterchef.PoolInfo.pool_id":
		return x.PoolId != uint64(0)
	case "elys.masterchef.PoolInfo.reward_wallet":
		return x.RewardWallet != ""
	case "elys.masterchef.PoolInfo.multiplier":
		return x.Multiplier != ""
	case "elys.masterchef.PoolInfo.eden_apr":
		return x.EdenApr != ""
	case "elys.masterchef.PoolInfo.dex_apr":
		return x.DexApr != ""
	case "elys.masterchef.PoolInfo.gas_apr":
		return x.GasApr != ""
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		return x.ExternalIncentiveApr != ""
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		return len(x.ExternalRewardDenoms) != 0
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		return x.EnableEdenRewards != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.masterchef.PoolInfo.pool_id":
		x.PoolId = uint64(0)
	case "elys.masterchef.PoolInfo.reward_wallet":
		x.RewardWallet = ""
	case "elys.masterchef.PoolInfo.multiplier":
		x.Multiplier = ""
	case "elys.masterchef.PoolInfo.eden_apr":
		x.EdenApr = ""
	case "elys.masterchef.PoolInfo.dex_apr":
		x.DexApr = ""
	case "elys.masterchef.PoolInfo.gas_apr":
		x.GasApr = ""
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		x.ExternalIncentiveApr = ""
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		x.ExternalRewardDenoms = nil
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		x.EnableEdenRewards = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.masterchef.PoolInfo.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.PoolInfo.reward_wallet":
		value := x.RewardWallet
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.multiplier":
		value := x.Multiplier
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.eden_apr":
		value := x.EdenApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.dex_apr":
		value := x.DexApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.gas_apr":
		value := x.GasApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		value := x.ExternalIncentiveApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		if len(x.ExternalRewardDenoms) == 0 {
			return protoreflect.ValueOfList(&_PoolInfo_8_list{})
		}
		listValue := &_PoolInfo_8_list{list: &x.ExternalRewardDenoms}
		return protoreflect.ValueOfList(listValue)
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		value := x.EnableEdenRewards
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.masterchef.PoolInfo.pool_id":
		x.PoolId = value.Uint()
	case "elys.masterchef.PoolInfo.reward_wallet":
		x.RewardWallet = value.Interface().(string)
	case "elys.masterchef.PoolInfo.multiplier":
		x.Multiplier = value.Interface().(string)
	case "elys.masterchef.PoolInfo.eden_apr":
		x.EdenApr = value.Interface().(string)
	case "elys.masterchef.PoolInfo.dex_apr":
		x.DexApr = value.Interface().(string)
	case "elys.masterchef.PoolInfo.gas_apr":
		x.GasApr = value.Interface().(string)
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		x.ExternalIncentiveApr = value.Interface().(string)
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		lv := value.List()
		clv := lv.(*_PoolInfo_8_list)
		x.ExternalRewardDenoms = *clv.list
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		x.EnableEdenRewards = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		if x.ExternalRewardDenoms == nil {
			x.ExternalRewardDenoms = []string{}
		}
		value := &_PoolInfo_8_list{list: &x.ExternalRewardDenoms}
		return protoreflect.ValueOfList(value)
	case "elys.masterchef.PoolInfo.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.reward_wallet":
		panic(fmt.Errorf("field reward_wallet of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.multiplier":
		panic(fmt.Errorf("field multiplier of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.eden_apr":
		panic(fmt.Errorf("field eden_apr of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.dex_apr":
		panic(fmt.Errorf("field dex_apr of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.gas_apr":
		panic(fmt.Errorf("field gas_apr of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		panic(fmt.Errorf("field external_incentive_apr of message elys.masterchef.PoolInfo is not mutable"))
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		panic(fmt.Errorf("field enable_eden_rewards of message elys.masterchef.PoolInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolInfo.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.PoolInfo.reward_wallet":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.multiplier":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.eden_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.dex_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.gas_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.external_incentive_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolInfo.external_reward_denoms":
		list := []string{}
		return protoreflect.ValueOfList(&_PoolInfo_8_list{list: &list})
	case "elys.masterchef.PoolInfo.enable_eden_rewards":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.masterchef.PoolInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.RewardWallet)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Multiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EdenApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DexApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExternalIncentiveApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ExternalRewardDenoms) > 0 {
			for _, s := range x.ExternalRewardDenoms {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.EnableEdenRewards {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.EnableEdenRewards {
			i--
			if x.EnableEdenRewards {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if len(x.ExternalRewardDenoms) > 0 {
			for iNdEx := len(x.ExternalRewardDenoms) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ExternalRewardDenoms[iNdEx])
				copy(dAtA[i:], x.ExternalRewardDenoms[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalRewardDenoms[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.ExternalIncentiveApr) > 0 {
			i -= len(x.ExternalIncentiveApr)
			copy(dAtA[i:], x.ExternalIncentiveApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalIncentiveApr)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.GasApr) > 0 {
			i -= len(x.GasApr)
			copy(dAtA[i:], x.GasApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasApr)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.DexApr) > 0 {
			i -= len(x.DexApr)
			copy(dAtA[i:], x.DexApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DexApr)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.EdenApr) > 0 {
			i -= len(x.EdenApr)
			copy(dAtA[i:], x.EdenApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EdenApr)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Multiplier) > 0 {
			i -= len(x.Multiplier)
			copy(dAtA[i:], x.Multiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Multiplier)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RewardWallet) > 0 {
			i -= len(x.RewardWallet)
			copy(dAtA[i:], x.RewardWallet)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardWallet)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardWallet", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardWallet = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Multiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EdenApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DexApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DexApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalIncentiveApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalIncentiveApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalRewardDenoms", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalRewardDenoms = append(x.ExternalRewardDenoms, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EnableEdenRewards", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.EnableEdenRewards = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_LegacyPoolInfo_8_list)(nil)

type _LegacyPoolInfo_8_list struct {
	list *[]string
}

func (x *_LegacyPoolInfo_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_LegacyPoolInfo_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_LegacyPoolInfo_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_LegacyPoolInfo_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_LegacyPoolInfo_8_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message LegacyPoolInfo at list field ExternalRewardDenoms as it is not of Message kind"))
}

func (x *_LegacyPoolInfo_8_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_LegacyPoolInfo_8_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_LegacyPoolInfo_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_LegacyPoolInfo                        protoreflect.MessageDescriptor
	fd_LegacyPoolInfo_pool_id                protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_reward_wallet          protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_multiplier             protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_eden_apr               protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_dex_apr                protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_gas_apr                protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_external_incentive_apr protoreflect.FieldDescriptor
	fd_LegacyPoolInfo_external_reward_denoms protoreflect.FieldDescriptor
)

func init() {
	file_elys_masterchef_pool_proto_init()
	md_LegacyPoolInfo = File_elys_masterchef_pool_proto.Messages().ByName("LegacyPoolInfo")
	fd_LegacyPoolInfo_pool_id = md_LegacyPoolInfo.Fields().ByName("pool_id")
	fd_LegacyPoolInfo_reward_wallet = md_LegacyPoolInfo.Fields().ByName("reward_wallet")
	fd_LegacyPoolInfo_multiplier = md_LegacyPoolInfo.Fields().ByName("multiplier")
	fd_LegacyPoolInfo_eden_apr = md_LegacyPoolInfo.Fields().ByName("eden_apr")
	fd_LegacyPoolInfo_dex_apr = md_LegacyPoolInfo.Fields().ByName("dex_apr")
	fd_LegacyPoolInfo_gas_apr = md_LegacyPoolInfo.Fields().ByName("gas_apr")
	fd_LegacyPoolInfo_external_incentive_apr = md_LegacyPoolInfo.Fields().ByName("external_incentive_apr")
	fd_LegacyPoolInfo_external_reward_denoms = md_LegacyPoolInfo.Fields().ByName("external_reward_denoms")
}

var _ protoreflect.Message = (*fastReflection_LegacyPoolInfo)(nil)

type fastReflection_LegacyPoolInfo LegacyPoolInfo

func (x *LegacyPoolInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LegacyPoolInfo)(x)
}

func (x *LegacyPoolInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_masterchef_pool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LegacyPoolInfo_messageType fastReflection_LegacyPoolInfo_messageType
var _ protoreflect.MessageType = fastReflection_LegacyPoolInfo_messageType{}

type fastReflection_LegacyPoolInfo_messageType struct{}

func (x fastReflection_LegacyPoolInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LegacyPoolInfo)(nil)
}
func (x fastReflection_LegacyPoolInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_LegacyPoolInfo)
}
func (x fastReflection_LegacyPoolInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyPoolInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LegacyPoolInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_LegacyPoolInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LegacyPoolInfo) Type() protoreflect.MessageType {
	return _fastReflection_LegacyPoolInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LegacyPoolInfo) New() protoreflect.Message {
	return new(fastReflection_LegacyPoolInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LegacyPoolInfo) Interface() protoreflect.ProtoMessage {
	return (*LegacyPoolInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LegacyPoolInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_LegacyPoolInfo_pool_id, value) {
			return
		}
	}
	if x.RewardWallet != "" {
		value := protoreflect.ValueOfString(x.RewardWallet)
		if !f(fd_LegacyPoolInfo_reward_wallet, value) {
			return
		}
	}
	if x.Multiplier != "" {
		value := protoreflect.ValueOfString(x.Multiplier)
		if !f(fd_LegacyPoolInfo_multiplier, value) {
			return
		}
	}
	if x.EdenApr != "" {
		value := protoreflect.ValueOfString(x.EdenApr)
		if !f(fd_LegacyPoolInfo_eden_apr, value) {
			return
		}
	}
	if x.DexApr != "" {
		value := protoreflect.ValueOfString(x.DexApr)
		if !f(fd_LegacyPoolInfo_dex_apr, value) {
			return
		}
	}
	if x.GasApr != "" {
		value := protoreflect.ValueOfString(x.GasApr)
		if !f(fd_LegacyPoolInfo_gas_apr, value) {
			return
		}
	}
	if x.ExternalIncentiveApr != "" {
		value := protoreflect.ValueOfString(x.ExternalIncentiveApr)
		if !f(fd_LegacyPoolInfo_external_incentive_apr, value) {
			return
		}
	}
	if len(x.ExternalRewardDenoms) != 0 {
		value := protoreflect.ValueOfList(&_LegacyPoolInfo_8_list{list: &x.ExternalRewardDenoms})
		if !f(fd_LegacyPoolInfo_external_reward_denoms, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LegacyPoolInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		return x.PoolId != uint64(0)
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		return x.RewardWallet != ""
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		return x.Multiplier != ""
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		return x.EdenApr != ""
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		return x.DexApr != ""
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		return x.GasApr != ""
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		return x.ExternalIncentiveApr != ""
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		return len(x.ExternalRewardDenoms) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyPoolInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		x.PoolId = uint64(0)
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		x.RewardWallet = ""
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		x.Multiplier = ""
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		x.EdenApr = ""
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		x.DexApr = ""
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		x.GasApr = ""
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		x.ExternalIncentiveApr = ""
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		x.ExternalRewardDenoms = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LegacyPoolInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		value := x.RewardWallet
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		value := x.Multiplier
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		value := x.EdenApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		value := x.DexApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		value := x.GasApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		value := x.ExternalIncentiveApr
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		if len(x.ExternalRewardDenoms) == 0 {
			return protoreflect.ValueOfList(&_LegacyPoolInfo_8_list{})
		}
		listValue := &_LegacyPoolInfo_8_list{list: &x.ExternalRewardDenoms}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyPoolInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		x.PoolId = value.Uint()
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		x.RewardWallet = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		x.Multiplier = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		x.EdenApr = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		x.DexApr = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		x.GasApr = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		x.ExternalIncentiveApr = value.Interface().(string)
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		lv := value.List()
		clv := lv.(*_LegacyPoolInfo_8_list)
		x.ExternalRewardDenoms = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyPoolInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		if x.ExternalRewardDenoms == nil {
			x.ExternalRewardDenoms = []string{}
		}
		value := &_LegacyPoolInfo_8_list{list: &x.ExternalRewardDenoms}
		return protoreflect.ValueOfList(value)
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		panic(fmt.Errorf("field reward_wallet of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		panic(fmt.Errorf("field multiplier of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		panic(fmt.Errorf("field eden_apr of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		panic(fmt.Errorf("field dex_apr of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		panic(fmt.Errorf("field gas_apr of message elys.masterchef.LegacyPoolInfo is not mutable"))
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		panic(fmt.Errorf("field external_incentive_apr of message elys.masterchef.LegacyPoolInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LegacyPoolInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.LegacyPoolInfo.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.LegacyPoolInfo.reward_wallet":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.multiplier":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.eden_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.dex_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.gas_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.external_incentive_apr":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.LegacyPoolInfo.external_reward_denoms":
		list := []string{}
		return protoreflect.ValueOfList(&_LegacyPoolInfo_8_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.LegacyPoolInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.LegacyPoolInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LegacyPoolInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.masterchef.LegacyPoolInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LegacyPoolInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LegacyPoolInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LegacyPoolInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LegacyPoolInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LegacyPoolInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.RewardWallet)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Multiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EdenApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DexApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ExternalIncentiveApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ExternalRewardDenoms) > 0 {
			for _, s := range x.ExternalRewardDenoms {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LegacyPoolInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExternalRewardDenoms) > 0 {
			for iNdEx := len(x.ExternalRewardDenoms) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ExternalRewardDenoms[iNdEx])
				copy(dAtA[i:], x.ExternalRewardDenoms[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalRewardDenoms[iNdEx])))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.ExternalIncentiveApr) > 0 {
			i -= len(x.ExternalIncentiveApr)
			copy(dAtA[i:], x.ExternalIncentiveApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExternalIncentiveApr)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.GasApr) > 0 {
			i -= len(x.GasApr)
			copy(dAtA[i:], x.GasApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasApr)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.DexApr) > 0 {
			i -= len(x.DexApr)
			copy(dAtA[i:], x.DexApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DexApr)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.EdenApr) > 0 {
			i -= len(x.EdenApr)
			copy(dAtA[i:], x.EdenApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EdenApr)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Multiplier) > 0 {
			i -= len(x.Multiplier)
			copy(dAtA[i:], x.Multiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Multiplier)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RewardWallet) > 0 {
			i -= len(x.RewardWallet)
			copy(dAtA[i:], x.RewardWallet)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardWallet)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LegacyPoolInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyPoolInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LegacyPoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardWallet", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardWallet = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Multiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EdenApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EdenApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DexApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DexApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalIncentiveApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalIncentiveApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExternalRewardDenoms", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExternalRewardDenoms = append(x.ExternalRewardDenoms, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PoolRewardInfo                           protoreflect.MessageDescriptor
	fd_PoolRewardInfo_pool_id                   protoreflect.FieldDescriptor
	fd_PoolRewardInfo_reward_denom              protoreflect.FieldDescriptor
	fd_PoolRewardInfo_pool_acc_reward_per_share protoreflect.FieldDescriptor
	fd_PoolRewardInfo_last_updated_block        protoreflect.FieldDescriptor
)

func init() {
	file_elys_masterchef_pool_proto_init()
	md_PoolRewardInfo = File_elys_masterchef_pool_proto.Messages().ByName("PoolRewardInfo")
	fd_PoolRewardInfo_pool_id = md_PoolRewardInfo.Fields().ByName("pool_id")
	fd_PoolRewardInfo_reward_denom = md_PoolRewardInfo.Fields().ByName("reward_denom")
	fd_PoolRewardInfo_pool_acc_reward_per_share = md_PoolRewardInfo.Fields().ByName("pool_acc_reward_per_share")
	fd_PoolRewardInfo_last_updated_block = md_PoolRewardInfo.Fields().ByName("last_updated_block")
}

var _ protoreflect.Message = (*fastReflection_PoolRewardInfo)(nil)

type fastReflection_PoolRewardInfo PoolRewardInfo

func (x *PoolRewardInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolRewardInfo)(x)
}

func (x *PoolRewardInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_masterchef_pool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolRewardInfo_messageType fastReflection_PoolRewardInfo_messageType
var _ protoreflect.MessageType = fastReflection_PoolRewardInfo_messageType{}

type fastReflection_PoolRewardInfo_messageType struct{}

func (x fastReflection_PoolRewardInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolRewardInfo)(nil)
}
func (x fastReflection_PoolRewardInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolRewardInfo)
}
func (x fastReflection_PoolRewardInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolRewardInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolRewardInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolRewardInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolRewardInfo) Type() protoreflect.MessageType {
	return _fastReflection_PoolRewardInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolRewardInfo) New() protoreflect.Message {
	return new(fastReflection_PoolRewardInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolRewardInfo) Interface() protoreflect.ProtoMessage {
	return (*PoolRewardInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolRewardInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_PoolRewardInfo_pool_id, value) {
			return
		}
	}
	if x.RewardDenom != "" {
		value := protoreflect.ValueOfString(x.RewardDenom)
		if !f(fd_PoolRewardInfo_reward_denom, value) {
			return
		}
	}
	if x.PoolAccRewardPerShare != "" {
		value := protoreflect.ValueOfString(x.PoolAccRewardPerShare)
		if !f(fd_PoolRewardInfo_pool_acc_reward_per_share, value) {
			return
		}
	}
	if x.LastUpdatedBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastUpdatedBlock)
		if !f(fd_PoolRewardInfo_last_updated_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolRewardInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		return x.PoolId != uint64(0)
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		return x.RewardDenom != ""
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		return x.PoolAccRewardPerShare != ""
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		return x.LastUpdatedBlock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		x.PoolId = uint64(0)
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		x.RewardDenom = ""
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		x.PoolAccRewardPerShare = ""
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		x.LastUpdatedBlock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolRewardInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		value := x.RewardDenom
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		value := x.PoolAccRewardPerShare
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		value := x.LastUpdatedBlock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		x.PoolId = value.Uint()
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		x.RewardDenom = value.Interface().(string)
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		x.PoolAccRewardPerShare = value.Interface().(string)
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		x.LastUpdatedBlock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.masterchef.PoolRewardInfo is not mutable"))
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		panic(fmt.Errorf("field reward_denom of message elys.masterchef.PoolRewardInfo is not mutable"))
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		panic(fmt.Errorf("field pool_acc_reward_per_share of message elys.masterchef.PoolRewardInfo is not mutable"))
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		panic(fmt.Errorf("field last_updated_block of message elys.masterchef.PoolRewardInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolRewardInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardInfo.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.PoolRewardInfo.reward_denom":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolRewardInfo.pool_acc_reward_per_share":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolRewardInfo.last_updated_block":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolRewardInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.masterchef.PoolRewardInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolRewardInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolRewardInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolRewardInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolRewardInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.RewardDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PoolAccRewardPerShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastUpdatedBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.LastUpdatedBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolRewardInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastUpdatedBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastUpdatedBlock))
			i--
			dAtA[i] = 0x20
		}
		if len(x.PoolAccRewardPerShare) > 0 {
			i -= len(x.PoolAccRewardPerShare)
			copy(dAtA[i:], x.PoolAccRewardPerShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolAccRewardPerShare)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RewardDenom) > 0 {
			i -= len(x.RewardDenom)
			copy(dAtA[i:], x.RewardDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDenom)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolRewardInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolRewardInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolAccRewardPerShare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolAccRewardPerShare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUpdatedBlock", wireType)
				}
				x.LastUpdatedBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastUpdatedBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_UserRewardInfo                protoreflect.MessageDescriptor
	fd_UserRewardInfo_user           protoreflect.FieldDescriptor
	fd_UserRewardInfo_pool_id        protoreflect.FieldDescriptor
	fd_UserRewardInfo_reward_denom   protoreflect.FieldDescriptor
	fd_UserRewardInfo_reward_debt    protoreflect.FieldDescriptor
	fd_UserRewardInfo_reward_pending protoreflect.FieldDescriptor
)

func init() {
	file_elys_masterchef_pool_proto_init()
	md_UserRewardInfo = File_elys_masterchef_pool_proto.Messages().ByName("UserRewardInfo")
	fd_UserRewardInfo_user = md_UserRewardInfo.Fields().ByName("user")
	fd_UserRewardInfo_pool_id = md_UserRewardInfo.Fields().ByName("pool_id")
	fd_UserRewardInfo_reward_denom = md_UserRewardInfo.Fields().ByName("reward_denom")
	fd_UserRewardInfo_reward_debt = md_UserRewardInfo.Fields().ByName("reward_debt")
	fd_UserRewardInfo_reward_pending = md_UserRewardInfo.Fields().ByName("reward_pending")
}

var _ protoreflect.Message = (*fastReflection_UserRewardInfo)(nil)

type fastReflection_UserRewardInfo UserRewardInfo

func (x *UserRewardInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserRewardInfo)(x)
}

func (x *UserRewardInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_masterchef_pool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserRewardInfo_messageType fastReflection_UserRewardInfo_messageType
var _ protoreflect.MessageType = fastReflection_UserRewardInfo_messageType{}

type fastReflection_UserRewardInfo_messageType struct{}

func (x fastReflection_UserRewardInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserRewardInfo)(nil)
}
func (x fastReflection_UserRewardInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_UserRewardInfo)
}
func (x fastReflection_UserRewardInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserRewardInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserRewardInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_UserRewardInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserRewardInfo) Type() protoreflect.MessageType {
	return _fastReflection_UserRewardInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserRewardInfo) New() protoreflect.Message {
	return new(fastReflection_UserRewardInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserRewardInfo) Interface() protoreflect.ProtoMessage {
	return (*UserRewardInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserRewardInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.User != "" {
		value := protoreflect.ValueOfString(x.User)
		if !f(fd_UserRewardInfo_user, value) {
			return
		}
	}
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_UserRewardInfo_pool_id, value) {
			return
		}
	}
	if x.RewardDenom != "" {
		value := protoreflect.ValueOfString(x.RewardDenom)
		if !f(fd_UserRewardInfo_reward_denom, value) {
			return
		}
	}
	if x.RewardDebt != "" {
		value := protoreflect.ValueOfString(x.RewardDebt)
		if !f(fd_UserRewardInfo_reward_debt, value) {
			return
		}
	}
	if x.RewardPending != "" {
		value := protoreflect.ValueOfString(x.RewardPending)
		if !f(fd_UserRewardInfo_reward_pending, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserRewardInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		return x.User != ""
	case "elys.masterchef.UserRewardInfo.pool_id":
		return x.PoolId != uint64(0)
	case "elys.masterchef.UserRewardInfo.reward_denom":
		return x.RewardDenom != ""
	case "elys.masterchef.UserRewardInfo.reward_debt":
		return x.RewardDebt != ""
	case "elys.masterchef.UserRewardInfo.reward_pending":
		return x.RewardPending != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserRewardInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		x.User = ""
	case "elys.masterchef.UserRewardInfo.pool_id":
		x.PoolId = uint64(0)
	case "elys.masterchef.UserRewardInfo.reward_denom":
		x.RewardDenom = ""
	case "elys.masterchef.UserRewardInfo.reward_debt":
		x.RewardDebt = ""
	case "elys.masterchef.UserRewardInfo.reward_pending":
		x.RewardPending = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserRewardInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		value := x.User
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.UserRewardInfo.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.UserRewardInfo.reward_denom":
		value := x.RewardDenom
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.UserRewardInfo.reward_debt":
		value := x.RewardDebt
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.UserRewardInfo.reward_pending":
		value := x.RewardPending
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserRewardInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		x.User = value.Interface().(string)
	case "elys.masterchef.UserRewardInfo.pool_id":
		x.PoolId = value.Uint()
	case "elys.masterchef.UserRewardInfo.reward_denom":
		x.RewardDenom = value.Interface().(string)
	case "elys.masterchef.UserRewardInfo.reward_debt":
		x.RewardDebt = value.Interface().(string)
	case "elys.masterchef.UserRewardInfo.reward_pending":
		x.RewardPending = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserRewardInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		panic(fmt.Errorf("field user of message elys.masterchef.UserRewardInfo is not mutable"))
	case "elys.masterchef.UserRewardInfo.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.masterchef.UserRewardInfo is not mutable"))
	case "elys.masterchef.UserRewardInfo.reward_denom":
		panic(fmt.Errorf("field reward_denom of message elys.masterchef.UserRewardInfo is not mutable"))
	case "elys.masterchef.UserRewardInfo.reward_debt":
		panic(fmt.Errorf("field reward_debt of message elys.masterchef.UserRewardInfo is not mutable"))
	case "elys.masterchef.UserRewardInfo.reward_pending":
		panic(fmt.Errorf("field reward_pending of message elys.masterchef.UserRewardInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserRewardInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.UserRewardInfo.user":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.UserRewardInfo.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.UserRewardInfo.reward_denom":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.UserRewardInfo.reward_debt":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.UserRewardInfo.reward_pending":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.UserRewardInfo"))
		}
		panic(fmt.Errorf("message elys.masterchef.UserRewardInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserRewardInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.masterchef.UserRewardInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserRewardInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserRewardInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserRewardInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserRewardInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserRewardInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.User)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.RewardDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardDebt)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardPending)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserRewardInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RewardPending) > 0 {
			i -= len(x.RewardPending)
			copy(dAtA[i:], x.RewardPending)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardPending)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.RewardDebt) > 0 {
			i -= len(x.RewardDebt)
			copy(dAtA[i:], x.RewardDebt)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDebt)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RewardDenom) > 0 {
			i -= len(x.RewardDenom)
			copy(dAtA[i:], x.RewardDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.User) > 0 {
			i -= len(x.User)
			copy(dAtA[i:], x.User)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.User)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserRewardInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserRewardInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserRewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.User = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDebt", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDebt = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardPending", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardPending = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PoolRewardsAccum              protoreflect.MessageDescriptor
	fd_PoolRewardsAccum_pool_id      protoreflect.FieldDescriptor
	fd_PoolRewardsAccum_block_height protoreflect.FieldDescriptor
	fd_PoolRewardsAccum_timestamp    protoreflect.FieldDescriptor
	fd_PoolRewardsAccum_dex_reward   protoreflect.FieldDescriptor
	fd_PoolRewardsAccum_gas_reward   protoreflect.FieldDescriptor
	fd_PoolRewardsAccum_eden_reward  protoreflect.FieldDescriptor
)

func init() {
	file_elys_masterchef_pool_proto_init()
	md_PoolRewardsAccum = File_elys_masterchef_pool_proto.Messages().ByName("PoolRewardsAccum")
	fd_PoolRewardsAccum_pool_id = md_PoolRewardsAccum.Fields().ByName("pool_id")
	fd_PoolRewardsAccum_block_height = md_PoolRewardsAccum.Fields().ByName("block_height")
	fd_PoolRewardsAccum_timestamp = md_PoolRewardsAccum.Fields().ByName("timestamp")
	fd_PoolRewardsAccum_dex_reward = md_PoolRewardsAccum.Fields().ByName("dex_reward")
	fd_PoolRewardsAccum_gas_reward = md_PoolRewardsAccum.Fields().ByName("gas_reward")
	fd_PoolRewardsAccum_eden_reward = md_PoolRewardsAccum.Fields().ByName("eden_reward")
}

var _ protoreflect.Message = (*fastReflection_PoolRewardsAccum)(nil)

type fastReflection_PoolRewardsAccum PoolRewardsAccum

func (x *PoolRewardsAccum) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PoolRewardsAccum)(x)
}

func (x *PoolRewardsAccum) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_masterchef_pool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PoolRewardsAccum_messageType fastReflection_PoolRewardsAccum_messageType
var _ protoreflect.MessageType = fastReflection_PoolRewardsAccum_messageType{}

type fastReflection_PoolRewardsAccum_messageType struct{}

func (x fastReflection_PoolRewardsAccum_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PoolRewardsAccum)(nil)
}
func (x fastReflection_PoolRewardsAccum_messageType) New() protoreflect.Message {
	return new(fastReflection_PoolRewardsAccum)
}
func (x fastReflection_PoolRewardsAccum_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolRewardsAccum
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PoolRewardsAccum) Descriptor() protoreflect.MessageDescriptor {
	return md_PoolRewardsAccum
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PoolRewardsAccum) Type() protoreflect.MessageType {
	return _fastReflection_PoolRewardsAccum_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PoolRewardsAccum) New() protoreflect.Message {
	return new(fastReflection_PoolRewardsAccum)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PoolRewardsAccum) Interface() protoreflect.ProtoMessage {
	return (*PoolRewardsAccum)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PoolRewardsAccum) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_PoolRewardsAccum_pool_id, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_PoolRewardsAccum_block_height, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_PoolRewardsAccum_timestamp, value) {
			return
		}
	}
	if x.DexReward != "" {
		value := protoreflect.ValueOfString(x.DexReward)
		if !f(fd_PoolRewardsAccum_dex_reward, value) {
			return
		}
	}
	if x.GasReward != "" {
		value := protoreflect.ValueOfString(x.GasReward)
		if !f(fd_PoolRewardsAccum_gas_reward, value) {
			return
		}
	}
	if x.EdenReward != "" {
		value := protoreflect.ValueOfString(x.EdenReward)
		if !f(fd_PoolRewardsAccum_eden_reward, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PoolRewardsAccum) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		return x.PoolId != uint64(0)
	case "elys.masterchef.PoolRewardsAccum.block_height":
		return x.BlockHeight != int64(0)
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		return x.Timestamp != uint64(0)
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		return x.DexReward != ""
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		return x.GasReward != ""
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		return x.EdenReward != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardsAccum) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		x.PoolId = uint64(0)
	case "elys.masterchef.PoolRewardsAccum.block_height":
		x.BlockHeight = int64(0)
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		x.Timestamp = uint64(0)
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		x.DexReward = ""
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		x.GasReward = ""
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		x.EdenReward = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PoolRewardsAccum) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.PoolRewardsAccum.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		value := x.DexReward
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		value := x.GasReward
		return protoreflect.ValueOfString(value)
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		value := x.EdenReward
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardsAccum) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		x.PoolId = value.Uint()
	case "elys.masterchef.PoolRewardsAccum.block_height":
		x.BlockHeight = value.Int()
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		x.Timestamp = value.Uint()
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		x.DexReward = value.Interface().(string)
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		x.GasReward = value.Interface().(string)
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		x.EdenReward = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardsAccum) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.masterchef.PoolRewardsAccum is not mutable"))
	case "elys.masterchef.PoolRewardsAccum.block_height":
		panic(fmt.Errorf("field block_height of message elys.masterchef.PoolRewardsAccum is not mutable"))
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		panic(fmt.Errorf("field timestamp of message elys.masterchef.PoolRewardsAccum is not mutable"))
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		panic(fmt.Errorf("field dex_reward of message elys.masterchef.PoolRewardsAccum is not mutable"))
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		panic(fmt.Errorf("field gas_reward of message elys.masterchef.PoolRewardsAccum is not mutable"))
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		panic(fmt.Errorf("field eden_reward of message elys.masterchef.PoolRewardsAccum is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PoolRewardsAccum) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.masterchef.PoolRewardsAccum.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.PoolRewardsAccum.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.masterchef.PoolRewardsAccum.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.masterchef.PoolRewardsAccum.dex_reward":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolRewardsAccum.gas_reward":
		return protoreflect.ValueOfString("")
	case "elys.masterchef.PoolRewardsAccum.eden_reward":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.masterchef.PoolRewardsAccum"))
		}
		panic(fmt.Errorf("message elys.masterchef.PoolRewardsAccum does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PoolRewardsAccum) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.masterchef.PoolRewardsAccum", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PoolRewardsAccum) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PoolRewardsAccum) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PoolRewardsAccum) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PoolRewardsAccum) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PoolRewardsAccum)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		l = len(x.DexReward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.GasReward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.EdenReward)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PoolRewardsAccum)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.EdenReward) > 0 {
			i -= len(x.EdenReward)
			copy(dAtA[i:], x.EdenReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EdenReward)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.GasReward) > 0 {
			i -= len(x.GasReward)
			copy(dAtA[i:], x.GasReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.GasReward)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DexReward) > 0 {
			i -= len(x.DexReward)
			copy(dAtA[i:], x.DexReward)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DexReward)))
			i--
			dAtA[i] = 0x22
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x18
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PoolRewardsAccum)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolRewardsAccum: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PoolRewardsAccum: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DexReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DexReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GasReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.GasReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EdenReward", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EdenReward = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/masterchef/pool.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// reward wallet address
	RewardWallet string `protobuf:"bytes,2,opt,name=reward_wallet,json=rewardWallet,proto3" json:"reward_wallet,omitempty"`
	// multiplier for lp rewards
	Multiplier string `protobuf:"bytes,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Eden APR, updated at every distribution
	EdenApr string `protobuf:"bytes,4,opt,name=eden_apr,json=edenApr,proto3" json:"eden_apr,omitempty"`
	// Dex APR, updated based on 24hr accumulation
	DexApr string `protobuf:"bytes,5,opt,name=dex_apr,json=dexApr,proto3" json:"dex_apr,omitempty"`
	// Gas APR, updated based on 24hr accumulation
	GasApr string `protobuf:"bytes,6,opt,name=gas_apr,json=gasApr,proto3" json:"gas_apr,omitempty"`
	// External Incentive APR, updated at every distribution
	ExternalIncentiveApr string `protobuf:"bytes,7,opt,name=external_incentive_apr,json=externalIncentiveApr,proto3" json:"external_incentive_apr,omitempty"`
	// external reward denoms on the pool
	ExternalRewardDenoms []string `protobuf:"bytes,8,rep,name=external_reward_denoms,json=externalRewardDenoms,proto3" json:"external_reward_denoms,omitempty"`
	// Enable or disable eden rewards
	EnableEdenRewards bool `protobuf:"varint,9,opt,name=enable_eden_rewards,json=enableEdenRewards,proto3" json:"enable_eden_rewards,omitempty"`
}

func (x *PoolInfo) Reset() {
	*x = PoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_masterchef_pool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolInfo) ProtoMessage() {}

// Deprecated: Use PoolInfo.ProtoReflect.Descriptor instead.
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return file_elys_masterchef_pool_proto_rawDescGZIP(), []int{0}
}

func (x *PoolInfo) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PoolInfo) GetRewardWallet() string {
	if x != nil {
		return x.RewardWallet
	}
	return ""
}

func (x *PoolInfo) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *PoolInfo) GetEdenApr() string {
	if x != nil {
		return x.EdenApr
	}
	return ""
}

func (x *PoolInfo) GetDexApr() string {
	if x != nil {
		return x.DexApr
	}
	return ""
}

func (x *PoolInfo) GetGasApr() string {
	if x != nil {
		return x.GasApr
	}
	return ""
}

func (x *PoolInfo) GetExternalIncentiveApr() string {
	if x != nil {
		return x.ExternalIncentiveApr
	}
	return ""
}

func (x *PoolInfo) GetExternalRewardDenoms() []string {
	if x != nil {
		return x.ExternalRewardDenoms
	}
	return nil
}

func (x *PoolInfo) GetEnableEdenRewards() bool {
	if x != nil {
		return x.EnableEdenRewards
	}
	return false
}

type LegacyPoolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// reward wallet address
	RewardWallet string `protobuf:"bytes,2,opt,name=reward_wallet,json=rewardWallet,proto3" json:"reward_wallet,omitempty"`
	// multiplier for lp rewards
	Multiplier string `protobuf:"bytes,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	// Eden APR, updated at every distribution
	EdenApr string `protobuf:"bytes,4,opt,name=eden_apr,json=edenApr,proto3" json:"eden_apr,omitempty"`
	// Dex APR, updated based on 24hr accumulation
	DexApr string `protobuf:"bytes,5,opt,name=dex_apr,json=dexApr,proto3" json:"dex_apr,omitempty"`
	// Gas APR, updated based on 24hr accumulation
	GasApr string `protobuf:"bytes,6,opt,name=gas_apr,json=gasApr,proto3" json:"gas_apr,omitempty"`
	// External Incentive APR, updated at every distribution
	ExternalIncentiveApr string `protobuf:"bytes,7,opt,name=external_incentive_apr,json=externalIncentiveApr,proto3" json:"external_incentive_apr,omitempty"`
	// external reward denoms on the pool
	ExternalRewardDenoms []string `protobuf:"bytes,8,rep,name=external_reward_denoms,json=externalRewardDenoms,proto3" json:"external_reward_denoms,omitempty"`
}

func (x *LegacyPoolInfo) Reset() {
	*x = LegacyPoolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_masterchef_pool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyPoolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyPoolInfo) ProtoMessage() {}

// Deprecated: Use LegacyPoolInfo.ProtoReflect.Descriptor instead.
func (*LegacyPoolInfo) Descriptor() ([]byte, []int) {
	return file_elys_masterchef_pool_proto_rawDescGZIP(), []int{1}
}

func (x *LegacyPoolInfo) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *LegacyPoolInfo) GetRewardWallet() string {
	if x != nil {
		return x.RewardWallet
	}
	return ""
}

func (x *LegacyPoolInfo) GetMultiplier() string {
	if x != nil {
		return x.Multiplier
	}
	return ""
}

func (x *LegacyPoolInfo) GetEdenApr() string {
	if x != nil {
		return x.EdenApr
	}
	return ""
}

func (x *LegacyPoolInfo) GetDexApr() string {
	if x != nil {
		return x.DexApr
	}
	return ""
}

func (x *LegacyPoolInfo) GetGasApr() string {
	if x != nil {
		return x.GasApr
	}
	return ""
}

func (x *LegacyPoolInfo) GetExternalIncentiveApr() string {
	if x != nil {
		return x.ExternalIncentiveApr
	}
	return ""
}

func (x *LegacyPoolInfo) GetExternalRewardDenoms() []string {
	if x != nil {
		return x.ExternalRewardDenoms
	}
	return nil
}

type PoolRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId                uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom           string `protobuf:"bytes,2,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	PoolAccRewardPerShare string `protobuf:"bytes,3,opt,name=pool_acc_reward_per_share,json=poolAccRewardPerShare,proto3" json:"pool_acc_reward_per_share,omitempty"`
	LastUpdatedBlock      uint64 `protobuf:"varint,4,opt,name=last_updated_block,json=lastUpdatedBlock,proto3" json:"last_updated_block,omitempty"`
}

func (x *PoolRewardInfo) Reset() {
	*x = PoolRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_masterchef_pool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRewardInfo) ProtoMessage() {}

// Deprecated: Use PoolRewardInfo.ProtoReflect.Descriptor instead.
func (*PoolRewardInfo) Descriptor() ([]byte, []int) {
	return file_elys_masterchef_pool_proto_rawDescGZIP(), []int{2}
}

func (x *PoolRewardInfo) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PoolRewardInfo) GetRewardDenom() string {
	if x != nil {
		return x.RewardDenom
	}
	return ""
}

func (x *PoolRewardInfo) GetPoolAccRewardPerShare() string {
	if x != nil {
		return x.PoolAccRewardPerShare
	}
	return ""
}

func (x *PoolRewardInfo) GetLastUpdatedBlock() uint64 {
	if x != nil {
		return x.LastUpdatedBlock
	}
	return 0
}

type UserRewardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User          string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	PoolId        uint64 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RewardDenom   string `protobuf:"bytes,3,opt,name=reward_denom,json=rewardDenom,proto3" json:"reward_denom,omitempty"`
	RewardDebt    string `protobuf:"bytes,4,opt,name=reward_debt,json=rewardDebt,proto3" json:"reward_debt,omitempty"`
	RewardPending string `protobuf:"bytes,5,opt,name=reward_pending,json=rewardPending,proto3" json:"reward_pending,omitempty"`
}

func (x *UserRewardInfo) Reset() {
	*x = UserRewardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_masterchef_pool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRewardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRewardInfo) ProtoMessage() {}

// Deprecated: Use UserRewardInfo.ProtoReflect.Descriptor instead.
func (*UserRewardInfo) Descriptor() ([]byte, []int) {
	return file_elys_masterchef_pool_proto_rawDescGZIP(), []int{3}
}

func (x *UserRewardInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserRewardInfo) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *UserRewardInfo) GetRewardDenom() string {
	if x != nil {
		return x.RewardDenom
	}
	return ""
}

func (x *UserRewardInfo) GetRewardDebt() string {
	if x != nil {
		return x.RewardDebt
	}
	return ""
}

func (x *UserRewardInfo) GetRewardPending() string {
	if x != nil {
		return x.RewardPending
	}
	return ""
}

type PoolRewardsAccum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId      uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Timestamp   uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	DexReward   string `protobuf:"bytes,4,opt,name=dex_reward,json=dexReward,proto3" json:"dex_reward,omitempty"`
	GasReward   string `protobuf:"bytes,5,opt,name=gas_reward,json=gasReward,proto3" json:"gas_reward,omitempty"`
	EdenReward  string `protobuf:"bytes,6,opt,name=eden_reward,json=edenReward,proto3" json:"eden_reward,omitempty"`
}

func (x *PoolRewardsAccum) Reset() {
	*x = PoolRewardsAccum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_masterchef_pool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoolRewardsAccum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolRewardsAccum) ProtoMessage() {}

// Deprecated: Use PoolRewardsAccum.ProtoReflect.Descriptor instead.
func (*PoolRewardsAccum) Descriptor() ([]byte, []int) {
	return file_elys_masterchef_pool_proto_rawDescGZIP(), []int{4}
}

func (x *PoolRewardsAccum) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *PoolRewardsAccum) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *PoolRewardsAccum) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PoolRewardsAccum) GetDexReward() string {
	if x != nil {
		return x.DexReward
	}
	return ""
}

func (x *PoolRewardsAccum) GetGasReward() string {
	if x != nil {
		return x.GasReward
	}
	return ""
}

func (x *PoolRewardsAccum) GetEdenReward() string {
	if x != nil {
		return x.EdenReward
	}
	return ""
}

var File_elys_masterchef_pool_proto protoreflect.FileDescriptor

var file_elys_masterchef_pool_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65,
	0x66, 0x2f, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x65, 0x6c,
	0x79, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0,
	0x04, 0x0a, 0x08, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08,
	0x65, 0x64, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x07, 0x65, 0x64, 0x65, 0x6e, 0x41, 0x70, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x65,
	0x78, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x06,
	0x64, 0x65, 0x78, 0x41, 0x70, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x70,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x06, 0x67, 0x61, 0x73, 0x41,
	0x70, 0x72, 0x12, 0x67, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76, 0x65, 0x41, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x73, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x64, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x22, 0xa6, 0x04, 0x0a, 0x0e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x12, 0x51, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x65, 0x64, 0x65, 0x6e, 0x5f, 0x61, 0x70,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x65, 0x64, 0x65, 0x6e,
	0x41, 0x70, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x64, 0x65, 0x78, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x06, 0x64, 0x65, 0x78, 0x41, 0x70, 0x72, 0x12,
	0x4a, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x06, 0x67, 0x61, 0x73, 0x41, 0x70, 0x72, 0x12, 0x67, 0x0a, 0x16, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x14,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x70, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x6b, 0x0a, 0x19, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x15, 0x70, 0x6f, 0x6f, 0x6c, 0x41, 0x63, 0x63, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65,
	0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x8e, 0x02, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f,
	0x6f, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x64, 0x65, 0x62, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x62, 0x74, 0x12, 0x58, 0x0a, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xe4, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x63, 0x63, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0a, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x67,
	0x61, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x0b, 0x65, 0x64, 0x65, 0x6e,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x0a, 0x65, 0x64, 0x65, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x42, 0xaf, 0x01, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x63, 0x68, 0x65, 0x66, 0x42, 0x09, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c,
	0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63,
	0x68, 0x65, 0x66, 0xa2, 0x02, 0x03, 0x45, 0x4d, 0x58, 0xaa, 0x02, 0x0f, 0x45, 0x6c, 0x79, 0x73,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0xca, 0x02, 0x0f, 0x45, 0x6c,
	0x79, 0x73, 0x5c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0xe2, 0x02, 0x1b,
	0x45, 0x6c, 0x79, 0x73, 0x5c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x45, 0x6c,
	0x79, 0x73, 0x3a, 0x3a, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x68, 0x65, 0x66, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_masterchef_pool_proto_rawDescOnce sync.Once
	file_elys_masterchef_pool_proto_rawDescData = file_elys_masterchef_pool_proto_rawDesc
)

func file_elys_masterchef_pool_proto_rawDescGZIP() []byte {
	file_elys_masterchef_pool_proto_rawDescOnce.Do(func() {
		file_elys_masterchef_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_masterchef_pool_proto_rawDescData)
	})
	return file_elys_masterchef_pool_proto_rawDescData
}

var file_elys_masterchef_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_elys_masterchef_pool_proto_goTypes = []interface{}{
	(*PoolInfo)(nil),         // 0: elys.masterchef.PoolInfo
	(*LegacyPoolInfo)(nil),   // 1: elys.masterchef.LegacyPoolInfo
	(*PoolRewardInfo)(nil),   // 2: elys.masterchef.PoolRewardInfo
	(*UserRewardInfo)(nil),   // 3: elys.masterchef.UserRewardInfo
	(*PoolRewardsAccum)(nil), // 4: elys.masterchef.PoolRewardsAccum
}
var file_elys_masterchef_pool_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_elys_masterchef_pool_proto_init() }
func file_elys_masterchef_pool_proto_init() {
	if File_elys_masterchef_pool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_masterchef_pool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_masterchef_pool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyPoolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_masterchef_pool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_masterchef_pool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRewardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_masterchef_pool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoolRewardsAccum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_masterchef_pool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_masterchef_pool_proto_goTypes,
		DependencyIndexes: file_elys_masterchef_pool_proto_depIdxs,
		MessageInfos:      file_elys_masterchef_pool_proto_msgTypes,
	}.Build()
	File_elys_masterchef_pool_proto = out.File
	file_elys_masterchef_pool_proto_rawDesc = nil
	file_elys_masterchef_pool_proto_goTypes = nil
	file_elys_masterchef_pool_proto_depIdxs = nil
}
