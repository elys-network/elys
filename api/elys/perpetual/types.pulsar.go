// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package perpetual

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_MTP                                  protoreflect.MessageDescriptor
	fd_MTP_address                          protoreflect.FieldDescriptor
	fd_MTP_collateral_asset                 protoreflect.FieldDescriptor
	fd_MTP_trading_asset                    protoreflect.FieldDescriptor
	fd_MTP_liabilities_asset                protoreflect.FieldDescriptor
	fd_MTP_custody_asset                    protoreflect.FieldDescriptor
	fd_MTP_collateral                       protoreflect.FieldDescriptor
	fd_MTP_liabilities                      protoreflect.FieldDescriptor
	fd_MTP_borrow_interest_paid_custody     protoreflect.FieldDescriptor
	fd_MTP_borrow_interest_unpaid_liability protoreflect.FieldDescriptor
	fd_MTP_custody                          protoreflect.FieldDescriptor
	fd_MTP_take_profit_liabilities          protoreflect.FieldDescriptor
	fd_MTP_take_profit_custody              protoreflect.FieldDescriptor
	fd_MTP_mtp_health                       protoreflect.FieldDescriptor
	fd_MTP_position                         protoreflect.FieldDescriptor
	fd_MTP_id                               protoreflect.FieldDescriptor
	fd_MTP_amm_pool_id                      protoreflect.FieldDescriptor
	fd_MTP_take_profit_price                protoreflect.FieldDescriptor
	fd_MTP_take_profit_borrow_factor        protoreflect.FieldDescriptor
	fd_MTP_funding_fee_paid_custody         protoreflect.FieldDescriptor
	fd_MTP_funding_fee_received_custody     protoreflect.FieldDescriptor
	fd_MTP_open_price                       protoreflect.FieldDescriptor
	fd_MTP_stop_loss_price                  protoreflect.FieldDescriptor
	fd_MTP_last_interest_calc_time          protoreflect.FieldDescriptor
	fd_MTP_last_interest_calc_block         protoreflect.FieldDescriptor
	fd_MTP_last_funding_calc_time           protoreflect.FieldDescriptor
	fd_MTP_last_funding_calc_block          protoreflect.FieldDescriptor
)

func init() {
	file_elys_perpetual_types_proto_init()
	md_MTP = File_elys_perpetual_types_proto.Messages().ByName("MTP")
	fd_MTP_address = md_MTP.Fields().ByName("address")
	fd_MTP_collateral_asset = md_MTP.Fields().ByName("collateral_asset")
	fd_MTP_trading_asset = md_MTP.Fields().ByName("trading_asset")
	fd_MTP_liabilities_asset = md_MTP.Fields().ByName("liabilities_asset")
	fd_MTP_custody_asset = md_MTP.Fields().ByName("custody_asset")
	fd_MTP_collateral = md_MTP.Fields().ByName("collateral")
	fd_MTP_liabilities = md_MTP.Fields().ByName("liabilities")
	fd_MTP_borrow_interest_paid_custody = md_MTP.Fields().ByName("borrow_interest_paid_custody")
	fd_MTP_borrow_interest_unpaid_liability = md_MTP.Fields().ByName("borrow_interest_unpaid_liability")
	fd_MTP_custody = md_MTP.Fields().ByName("custody")
	fd_MTP_take_profit_liabilities = md_MTP.Fields().ByName("take_profit_liabilities")
	fd_MTP_take_profit_custody = md_MTP.Fields().ByName("take_profit_custody")
	fd_MTP_mtp_health = md_MTP.Fields().ByName("mtp_health")
	fd_MTP_position = md_MTP.Fields().ByName("position")
	fd_MTP_id = md_MTP.Fields().ByName("id")
	fd_MTP_amm_pool_id = md_MTP.Fields().ByName("amm_pool_id")
	fd_MTP_take_profit_price = md_MTP.Fields().ByName("take_profit_price")
	fd_MTP_take_profit_borrow_factor = md_MTP.Fields().ByName("take_profit_borrow_factor")
	fd_MTP_funding_fee_paid_custody = md_MTP.Fields().ByName("funding_fee_paid_custody")
	fd_MTP_funding_fee_received_custody = md_MTP.Fields().ByName("funding_fee_received_custody")
	fd_MTP_open_price = md_MTP.Fields().ByName("open_price")
	fd_MTP_stop_loss_price = md_MTP.Fields().ByName("stop_loss_price")
	fd_MTP_last_interest_calc_time = md_MTP.Fields().ByName("last_interest_calc_time")
	fd_MTP_last_interest_calc_block = md_MTP.Fields().ByName("last_interest_calc_block")
	fd_MTP_last_funding_calc_time = md_MTP.Fields().ByName("last_funding_calc_time")
	fd_MTP_last_funding_calc_block = md_MTP.Fields().ByName("last_funding_calc_block")
}

var _ protoreflect.Message = (*fastReflection_MTP)(nil)

type fastReflection_MTP MTP

func (x *MTP) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MTP)(x)
}

func (x *MTP) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_perpetual_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MTP_messageType fastReflection_MTP_messageType
var _ protoreflect.MessageType = fastReflection_MTP_messageType{}

type fastReflection_MTP_messageType struct{}

func (x fastReflection_MTP_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MTP)(nil)
}
func (x fastReflection_MTP_messageType) New() protoreflect.Message {
	return new(fastReflection_MTP)
}
func (x fastReflection_MTP_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MTP
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MTP) Descriptor() protoreflect.MessageDescriptor {
	return md_MTP
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MTP) Type() protoreflect.MessageType {
	return _fastReflection_MTP_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MTP) New() protoreflect.Message {
	return new(fastReflection_MTP)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MTP) Interface() protoreflect.ProtoMessage {
	return (*MTP)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MTP) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_MTP_address, value) {
			return
		}
	}
	if x.CollateralAsset != "" {
		value := protoreflect.ValueOfString(x.CollateralAsset)
		if !f(fd_MTP_collateral_asset, value) {
			return
		}
	}
	if x.TradingAsset != "" {
		value := protoreflect.ValueOfString(x.TradingAsset)
		if !f(fd_MTP_trading_asset, value) {
			return
		}
	}
	if x.LiabilitiesAsset != "" {
		value := protoreflect.ValueOfString(x.LiabilitiesAsset)
		if !f(fd_MTP_liabilities_asset, value) {
			return
		}
	}
	if x.CustodyAsset != "" {
		value := protoreflect.ValueOfString(x.CustodyAsset)
		if !f(fd_MTP_custody_asset, value) {
			return
		}
	}
	if x.Collateral != "" {
		value := protoreflect.ValueOfString(x.Collateral)
		if !f(fd_MTP_collateral, value) {
			return
		}
	}
	if x.Liabilities != "" {
		value := protoreflect.ValueOfString(x.Liabilities)
		if !f(fd_MTP_liabilities, value) {
			return
		}
	}
	if x.BorrowInterestPaidCustody != "" {
		value := protoreflect.ValueOfString(x.BorrowInterestPaidCustody)
		if !f(fd_MTP_borrow_interest_paid_custody, value) {
			return
		}
	}
	if x.BorrowInterestUnpaidLiability != "" {
		value := protoreflect.ValueOfString(x.BorrowInterestUnpaidLiability)
		if !f(fd_MTP_borrow_interest_unpaid_liability, value) {
			return
		}
	}
	if x.Custody != "" {
		value := protoreflect.ValueOfString(x.Custody)
		if !f(fd_MTP_custody, value) {
			return
		}
	}
	if x.TakeProfitLiabilities != "" {
		value := protoreflect.ValueOfString(x.TakeProfitLiabilities)
		if !f(fd_MTP_take_profit_liabilities, value) {
			return
		}
	}
	if x.TakeProfitCustody != "" {
		value := protoreflect.ValueOfString(x.TakeProfitCustody)
		if !f(fd_MTP_take_profit_custody, value) {
			return
		}
	}
	if x.MtpHealth != "" {
		value := protoreflect.ValueOfString(x.MtpHealth)
		if !f(fd_MTP_mtp_health, value) {
			return
		}
	}
	if x.Position != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Position))
		if !f(fd_MTP_position, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_MTP_id, value) {
			return
		}
	}
	if x.AmmPoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AmmPoolId)
		if !f(fd_MTP_amm_pool_id, value) {
			return
		}
	}
	if x.TakeProfitPrice != "" {
		value := protoreflect.ValueOfString(x.TakeProfitPrice)
		if !f(fd_MTP_take_profit_price, value) {
			return
		}
	}
	if x.TakeProfitBorrowFactor != "" {
		value := protoreflect.ValueOfString(x.TakeProfitBorrowFactor)
		if !f(fd_MTP_take_profit_borrow_factor, value) {
			return
		}
	}
	if x.FundingFeePaidCustody != "" {
		value := protoreflect.ValueOfString(x.FundingFeePaidCustody)
		if !f(fd_MTP_funding_fee_paid_custody, value) {
			return
		}
	}
	if x.FundingFeeReceivedCustody != "" {
		value := protoreflect.ValueOfString(x.FundingFeeReceivedCustody)
		if !f(fd_MTP_funding_fee_received_custody, value) {
			return
		}
	}
	if x.OpenPrice != "" {
		value := protoreflect.ValueOfString(x.OpenPrice)
		if !f(fd_MTP_open_price, value) {
			return
		}
	}
	if x.StopLossPrice != "" {
		value := protoreflect.ValueOfString(x.StopLossPrice)
		if !f(fd_MTP_stop_loss_price, value) {
			return
		}
	}
	if x.LastInterestCalcTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastInterestCalcTime)
		if !f(fd_MTP_last_interest_calc_time, value) {
			return
		}
	}
	if x.LastInterestCalcBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastInterestCalcBlock)
		if !f(fd_MTP_last_interest_calc_block, value) {
			return
		}
	}
	if x.LastFundingCalcTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastFundingCalcTime)
		if !f(fd_MTP_last_funding_calc_time, value) {
			return
		}
	}
	if x.LastFundingCalcBlock != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LastFundingCalcBlock)
		if !f(fd_MTP_last_funding_calc_block, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MTP) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.perpetual.MTP.address":
		return x.Address != ""
	case "elys.perpetual.MTP.collateral_asset":
		return x.CollateralAsset != ""
	case "elys.perpetual.MTP.trading_asset":
		return x.TradingAsset != ""
	case "elys.perpetual.MTP.liabilities_asset":
		return x.LiabilitiesAsset != ""
	case "elys.perpetual.MTP.custody_asset":
		return x.CustodyAsset != ""
	case "elys.perpetual.MTP.collateral":
		return x.Collateral != ""
	case "elys.perpetual.MTP.liabilities":
		return x.Liabilities != ""
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		return x.BorrowInterestPaidCustody != ""
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		return x.BorrowInterestUnpaidLiability != ""
	case "elys.perpetual.MTP.custody":
		return x.Custody != ""
	case "elys.perpetual.MTP.take_profit_liabilities":
		return x.TakeProfitLiabilities != ""
	case "elys.perpetual.MTP.take_profit_custody":
		return x.TakeProfitCustody != ""
	case "elys.perpetual.MTP.mtp_health":
		return x.MtpHealth != ""
	case "elys.perpetual.MTP.position":
		return x.Position != 0
	case "elys.perpetual.MTP.id":
		return x.Id != uint64(0)
	case "elys.perpetual.MTP.amm_pool_id":
		return x.AmmPoolId != uint64(0)
	case "elys.perpetual.MTP.take_profit_price":
		return x.TakeProfitPrice != ""
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		return x.TakeProfitBorrowFactor != ""
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		return x.FundingFeePaidCustody != ""
	case "elys.perpetual.MTP.funding_fee_received_custody":
		return x.FundingFeeReceivedCustody != ""
	case "elys.perpetual.MTP.open_price":
		return x.OpenPrice != ""
	case "elys.perpetual.MTP.stop_loss_price":
		return x.StopLossPrice != ""
	case "elys.perpetual.MTP.last_interest_calc_time":
		return x.LastInterestCalcTime != uint64(0)
	case "elys.perpetual.MTP.last_interest_calc_block":
		return x.LastInterestCalcBlock != uint64(0)
	case "elys.perpetual.MTP.last_funding_calc_time":
		return x.LastFundingCalcTime != uint64(0)
	case "elys.perpetual.MTP.last_funding_calc_block":
		return x.LastFundingCalcBlock != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MTP) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.perpetual.MTP.address":
		x.Address = ""
	case "elys.perpetual.MTP.collateral_asset":
		x.CollateralAsset = ""
	case "elys.perpetual.MTP.trading_asset":
		x.TradingAsset = ""
	case "elys.perpetual.MTP.liabilities_asset":
		x.LiabilitiesAsset = ""
	case "elys.perpetual.MTP.custody_asset":
		x.CustodyAsset = ""
	case "elys.perpetual.MTP.collateral":
		x.Collateral = ""
	case "elys.perpetual.MTP.liabilities":
		x.Liabilities = ""
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		x.BorrowInterestPaidCustody = ""
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		x.BorrowInterestUnpaidLiability = ""
	case "elys.perpetual.MTP.custody":
		x.Custody = ""
	case "elys.perpetual.MTP.take_profit_liabilities":
		x.TakeProfitLiabilities = ""
	case "elys.perpetual.MTP.take_profit_custody":
		x.TakeProfitCustody = ""
	case "elys.perpetual.MTP.mtp_health":
		x.MtpHealth = ""
	case "elys.perpetual.MTP.position":
		x.Position = 0
	case "elys.perpetual.MTP.id":
		x.Id = uint64(0)
	case "elys.perpetual.MTP.amm_pool_id":
		x.AmmPoolId = uint64(0)
	case "elys.perpetual.MTP.take_profit_price":
		x.TakeProfitPrice = ""
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		x.TakeProfitBorrowFactor = ""
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		x.FundingFeePaidCustody = ""
	case "elys.perpetual.MTP.funding_fee_received_custody":
		x.FundingFeeReceivedCustody = ""
	case "elys.perpetual.MTP.open_price":
		x.OpenPrice = ""
	case "elys.perpetual.MTP.stop_loss_price":
		x.StopLossPrice = ""
	case "elys.perpetual.MTP.last_interest_calc_time":
		x.LastInterestCalcTime = uint64(0)
	case "elys.perpetual.MTP.last_interest_calc_block":
		x.LastInterestCalcBlock = uint64(0)
	case "elys.perpetual.MTP.last_funding_calc_time":
		x.LastFundingCalcTime = uint64(0)
	case "elys.perpetual.MTP.last_funding_calc_block":
		x.LastFundingCalcBlock = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MTP) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.perpetual.MTP.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.collateral_asset":
		value := x.CollateralAsset
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.trading_asset":
		value := x.TradingAsset
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.liabilities_asset":
		value := x.LiabilitiesAsset
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.custody_asset":
		value := x.CustodyAsset
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.collateral":
		value := x.Collateral
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.liabilities":
		value := x.Liabilities
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		value := x.BorrowInterestPaidCustody
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		value := x.BorrowInterestUnpaidLiability
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.custody":
		value := x.Custody
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.take_profit_liabilities":
		value := x.TakeProfitLiabilities
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.take_profit_custody":
		value := x.TakeProfitCustody
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.mtp_health":
		value := x.MtpHealth
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.position":
		value := x.Position
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "elys.perpetual.MTP.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "elys.perpetual.MTP.amm_pool_id":
		value := x.AmmPoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.perpetual.MTP.take_profit_price":
		value := x.TakeProfitPrice
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		value := x.TakeProfitBorrowFactor
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		value := x.FundingFeePaidCustody
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.funding_fee_received_custody":
		value := x.FundingFeeReceivedCustody
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.open_price":
		value := x.OpenPrice
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.stop_loss_price":
		value := x.StopLossPrice
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.MTP.last_interest_calc_time":
		value := x.LastInterestCalcTime
		return protoreflect.ValueOfUint64(value)
	case "elys.perpetual.MTP.last_interest_calc_block":
		value := x.LastInterestCalcBlock
		return protoreflect.ValueOfUint64(value)
	case "elys.perpetual.MTP.last_funding_calc_time":
		value := x.LastFundingCalcTime
		return protoreflect.ValueOfUint64(value)
	case "elys.perpetual.MTP.last_funding_calc_block":
		value := x.LastFundingCalcBlock
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MTP) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.perpetual.MTP.address":
		x.Address = value.Interface().(string)
	case "elys.perpetual.MTP.collateral_asset":
		x.CollateralAsset = value.Interface().(string)
	case "elys.perpetual.MTP.trading_asset":
		x.TradingAsset = value.Interface().(string)
	case "elys.perpetual.MTP.liabilities_asset":
		x.LiabilitiesAsset = value.Interface().(string)
	case "elys.perpetual.MTP.custody_asset":
		x.CustodyAsset = value.Interface().(string)
	case "elys.perpetual.MTP.collateral":
		x.Collateral = value.Interface().(string)
	case "elys.perpetual.MTP.liabilities":
		x.Liabilities = value.Interface().(string)
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		x.BorrowInterestPaidCustody = value.Interface().(string)
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		x.BorrowInterestUnpaidLiability = value.Interface().(string)
	case "elys.perpetual.MTP.custody":
		x.Custody = value.Interface().(string)
	case "elys.perpetual.MTP.take_profit_liabilities":
		x.TakeProfitLiabilities = value.Interface().(string)
	case "elys.perpetual.MTP.take_profit_custody":
		x.TakeProfitCustody = value.Interface().(string)
	case "elys.perpetual.MTP.mtp_health":
		x.MtpHealth = value.Interface().(string)
	case "elys.perpetual.MTP.position":
		x.Position = (Position)(value.Enum())
	case "elys.perpetual.MTP.id":
		x.Id = value.Uint()
	case "elys.perpetual.MTP.amm_pool_id":
		x.AmmPoolId = value.Uint()
	case "elys.perpetual.MTP.take_profit_price":
		x.TakeProfitPrice = value.Interface().(string)
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		x.TakeProfitBorrowFactor = value.Interface().(string)
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		x.FundingFeePaidCustody = value.Interface().(string)
	case "elys.perpetual.MTP.funding_fee_received_custody":
		x.FundingFeeReceivedCustody = value.Interface().(string)
	case "elys.perpetual.MTP.open_price":
		x.OpenPrice = value.Interface().(string)
	case "elys.perpetual.MTP.stop_loss_price":
		x.StopLossPrice = value.Interface().(string)
	case "elys.perpetual.MTP.last_interest_calc_time":
		x.LastInterestCalcTime = value.Uint()
	case "elys.perpetual.MTP.last_interest_calc_block":
		x.LastInterestCalcBlock = value.Uint()
	case "elys.perpetual.MTP.last_funding_calc_time":
		x.LastFundingCalcTime = value.Uint()
	case "elys.perpetual.MTP.last_funding_calc_block":
		x.LastFundingCalcBlock = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MTP) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.MTP.address":
		panic(fmt.Errorf("field address of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.collateral_asset":
		panic(fmt.Errorf("field collateral_asset of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.trading_asset":
		panic(fmt.Errorf("field trading_asset of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.liabilities_asset":
		panic(fmt.Errorf("field liabilities_asset of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.custody_asset":
		panic(fmt.Errorf("field custody_asset of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.collateral":
		panic(fmt.Errorf("field collateral of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.liabilities":
		panic(fmt.Errorf("field liabilities of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		panic(fmt.Errorf("field borrow_interest_paid_custody of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		panic(fmt.Errorf("field borrow_interest_unpaid_liability of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.custody":
		panic(fmt.Errorf("field custody of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.take_profit_liabilities":
		panic(fmt.Errorf("field take_profit_liabilities of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.take_profit_custody":
		panic(fmt.Errorf("field take_profit_custody of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.mtp_health":
		panic(fmt.Errorf("field mtp_health of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.position":
		panic(fmt.Errorf("field position of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.id":
		panic(fmt.Errorf("field id of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.amm_pool_id":
		panic(fmt.Errorf("field amm_pool_id of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.take_profit_price":
		panic(fmt.Errorf("field take_profit_price of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		panic(fmt.Errorf("field take_profit_borrow_factor of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		panic(fmt.Errorf("field funding_fee_paid_custody of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.funding_fee_received_custody":
		panic(fmt.Errorf("field funding_fee_received_custody of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.open_price":
		panic(fmt.Errorf("field open_price of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.stop_loss_price":
		panic(fmt.Errorf("field stop_loss_price of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.last_interest_calc_time":
		panic(fmt.Errorf("field last_interest_calc_time of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.last_interest_calc_block":
		panic(fmt.Errorf("field last_interest_calc_block of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.last_funding_calc_time":
		panic(fmt.Errorf("field last_funding_calc_time of message elys.perpetual.MTP is not mutable"))
	case "elys.perpetual.MTP.last_funding_calc_block":
		panic(fmt.Errorf("field last_funding_calc_block of message elys.perpetual.MTP is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MTP) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.MTP.address":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.collateral_asset":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.trading_asset":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.liabilities_asset":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.custody_asset":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.collateral":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.liabilities":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.borrow_interest_paid_custody":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.borrow_interest_unpaid_liability":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.custody":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.take_profit_liabilities":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.take_profit_custody":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.mtp_health":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.position":
		return protoreflect.ValueOfEnum(0)
	case "elys.perpetual.MTP.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.perpetual.MTP.amm_pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.perpetual.MTP.take_profit_price":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.take_profit_borrow_factor":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.funding_fee_paid_custody":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.funding_fee_received_custody":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.open_price":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.stop_loss_price":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.MTP.last_interest_calc_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.perpetual.MTP.last_interest_calc_block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.perpetual.MTP.last_funding_calc_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.perpetual.MTP.last_funding_calc_block":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.MTP"))
		}
		panic(fmt.Errorf("message elys.perpetual.MTP does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MTP) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.perpetual.MTP", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MTP) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MTP) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MTP) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MTP) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MTP)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CollateralAsset)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TradingAsset)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LiabilitiesAsset)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CustodyAsset)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Collateral)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Liabilities)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BorrowInterestPaidCustody)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BorrowInterestUnpaidLiability)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Custody)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TakeProfitLiabilities)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TakeProfitCustody)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MtpHealth)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Position != 0 {
			n += 1 + runtime.Sov(uint64(x.Position))
		}
		if x.Id != 0 {
			n += 2 + runtime.Sov(uint64(x.Id))
		}
		if x.AmmPoolId != 0 {
			n += 2 + runtime.Sov(uint64(x.AmmPoolId))
		}
		l = len(x.TakeProfitPrice)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TakeProfitBorrowFactor)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundingFeePaidCustody)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundingFeeReceivedCustody)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OpenPrice)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StopLossPrice)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.LastInterestCalcTime != 0 {
			n += 2 + runtime.Sov(uint64(x.LastInterestCalcTime))
		}
		if x.LastInterestCalcBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.LastInterestCalcBlock))
		}
		if x.LastFundingCalcTime != 0 {
			n += 2 + runtime.Sov(uint64(x.LastFundingCalcTime))
		}
		if x.LastFundingCalcBlock != 0 {
			n += 2 + runtime.Sov(uint64(x.LastFundingCalcBlock))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MTP)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastFundingCalcBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastFundingCalcBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd8
		}
		if x.LastFundingCalcTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastFundingCalcTime))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd0
		}
		if x.LastInterestCalcBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastInterestCalcBlock))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc8
		}
		if x.LastInterestCalcTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LastInterestCalcTime))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc0
		}
		if len(x.StopLossPrice) > 0 {
			i -= len(x.StopLossPrice)
			copy(dAtA[i:], x.StopLossPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StopLossPrice)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
		if len(x.OpenPrice) > 0 {
			i -= len(x.OpenPrice)
			copy(dAtA[i:], x.OpenPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OpenPrice)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if len(x.FundingFeeReceivedCustody) > 0 {
			i -= len(x.FundingFeeReceivedCustody)
			copy(dAtA[i:], x.FundingFeeReceivedCustody)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingFeeReceivedCustody)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if len(x.FundingFeePaidCustody) > 0 {
			i -= len(x.FundingFeePaidCustody)
			copy(dAtA[i:], x.FundingFeePaidCustody)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingFeePaidCustody)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if len(x.TakeProfitBorrowFactor) > 0 {
			i -= len(x.TakeProfitBorrowFactor)
			copy(dAtA[i:], x.TakeProfitBorrowFactor)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TakeProfitBorrowFactor)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
		if len(x.TakeProfitPrice) > 0 {
			i -= len(x.TakeProfitPrice)
			copy(dAtA[i:], x.TakeProfitPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TakeProfitPrice)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if x.AmmPoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AmmPoolId))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.Position != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Position))
			i--
			dAtA[i] = 0x78
		}
		if len(x.MtpHealth) > 0 {
			i -= len(x.MtpHealth)
			copy(dAtA[i:], x.MtpHealth)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MtpHealth)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.TakeProfitCustody) > 0 {
			i -= len(x.TakeProfitCustody)
			copy(dAtA[i:], x.TakeProfitCustody)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TakeProfitCustody)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.TakeProfitLiabilities) > 0 {
			i -= len(x.TakeProfitLiabilities)
			copy(dAtA[i:], x.TakeProfitLiabilities)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TakeProfitLiabilities)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.Custody) > 0 {
			i -= len(x.Custody)
			copy(dAtA[i:], x.Custody)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Custody)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.BorrowInterestUnpaidLiability) > 0 {
			i -= len(x.BorrowInterestUnpaidLiability)
			copy(dAtA[i:], x.BorrowInterestUnpaidLiability)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BorrowInterestUnpaidLiability)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.BorrowInterestPaidCustody) > 0 {
			i -= len(x.BorrowInterestPaidCustody)
			copy(dAtA[i:], x.BorrowInterestPaidCustody)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BorrowInterestPaidCustody)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Liabilities) > 0 {
			i -= len(x.Liabilities)
			copy(dAtA[i:], x.Liabilities)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Liabilities)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Collateral) > 0 {
			i -= len(x.Collateral)
			copy(dAtA[i:], x.Collateral)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Collateral)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.CustodyAsset) > 0 {
			i -= len(x.CustodyAsset)
			copy(dAtA[i:], x.CustodyAsset)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CustodyAsset)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.LiabilitiesAsset) > 0 {
			i -= len(x.LiabilitiesAsset)
			copy(dAtA[i:], x.LiabilitiesAsset)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiabilitiesAsset)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TradingAsset) > 0 {
			i -= len(x.TradingAsset)
			copy(dAtA[i:], x.TradingAsset)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TradingAsset)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.CollateralAsset) > 0 {
			i -= len(x.CollateralAsset)
			copy(dAtA[i:], x.CollateralAsset)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CollateralAsset)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MTP)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MTP: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MTP: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CollateralAsset", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CollateralAsset = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradingAsset", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradingAsset = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiabilitiesAsset", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiabilitiesAsset = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CustodyAsset", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CustodyAsset = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Collateral = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Liabilities", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Liabilities = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestPaidCustody", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BorrowInterestPaidCustody = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BorrowInterestUnpaidLiability", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BorrowInterestUnpaidLiability = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Custody", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Custody = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TakeProfitLiabilities", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TakeProfitLiabilities = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TakeProfitCustody", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TakeProfitCustody = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MtpHealth", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MtpHealth = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
				}
				x.Position = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Position |= Position(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmmPoolId", wireType)
				}
				x.AmmPoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AmmPoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TakeProfitPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TakeProfitPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TakeProfitBorrowFactor", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TakeProfitBorrowFactor = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingFeePaidCustody", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingFeePaidCustody = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingFeeReceivedCustody", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingFeeReceivedCustody = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OpenPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OpenPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StopLossPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StopLossPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 24:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastInterestCalcTime", wireType)
				}
				x.LastInterestCalcTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastInterestCalcTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 25:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastInterestCalcBlock", wireType)
				}
				x.LastInterestCalcBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastInterestCalcBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 26:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastFundingCalcTime", wireType)
				}
				x.LastFundingCalcTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastFundingCalcTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 27:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastFundingCalcBlock", wireType)
				}
				x.LastFundingCalcBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LastFundingCalcBlock |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_InterestBlock               protoreflect.MessageDescriptor
	fd_InterestBlock_interest_rate protoreflect.FieldDescriptor
	fd_InterestBlock_block_height  protoreflect.FieldDescriptor
	fd_InterestBlock_block_time    protoreflect.FieldDescriptor
)

func init() {
	file_elys_perpetual_types_proto_init()
	md_InterestBlock = File_elys_perpetual_types_proto.Messages().ByName("InterestBlock")
	fd_InterestBlock_interest_rate = md_InterestBlock.Fields().ByName("interest_rate")
	fd_InterestBlock_block_height = md_InterestBlock.Fields().ByName("block_height")
	fd_InterestBlock_block_time = md_InterestBlock.Fields().ByName("block_time")
}

var _ protoreflect.Message = (*fastReflection_InterestBlock)(nil)

type fastReflection_InterestBlock InterestBlock

func (x *InterestBlock) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InterestBlock)(x)
}

func (x *InterestBlock) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_perpetual_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_InterestBlock_messageType fastReflection_InterestBlock_messageType
var _ protoreflect.MessageType = fastReflection_InterestBlock_messageType{}

type fastReflection_InterestBlock_messageType struct{}

func (x fastReflection_InterestBlock_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InterestBlock)(nil)
}
func (x fastReflection_InterestBlock_messageType) New() protoreflect.Message {
	return new(fastReflection_InterestBlock)
}
func (x fastReflection_InterestBlock_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InterestBlock
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InterestBlock) Descriptor() protoreflect.MessageDescriptor {
	return md_InterestBlock
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InterestBlock) Type() protoreflect.MessageType {
	return _fastReflection_InterestBlock_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InterestBlock) New() protoreflect.Message {
	return new(fastReflection_InterestBlock)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InterestBlock) Interface() protoreflect.ProtoMessage {
	return (*InterestBlock)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InterestBlock) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.InterestRate != "" {
		value := protoreflect.ValueOfString(x.InterestRate)
		if !f(fd_InterestBlock_interest_rate, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_InterestBlock_block_height, value) {
			return
		}
	}
	if x.BlockTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockTime)
		if !f(fd_InterestBlock_block_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InterestBlock) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		return x.InterestRate != ""
	case "elys.perpetual.InterestBlock.block_height":
		return x.BlockHeight != int64(0)
	case "elys.perpetual.InterestBlock.block_time":
		return x.BlockTime != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InterestBlock) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		x.InterestRate = ""
	case "elys.perpetual.InterestBlock.block_height":
		x.BlockHeight = int64(0)
	case "elys.perpetual.InterestBlock.block_time":
		x.BlockTime = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InterestBlock) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		value := x.InterestRate
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.InterestBlock.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "elys.perpetual.InterestBlock.block_time":
		value := x.BlockTime
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InterestBlock) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		x.InterestRate = value.Interface().(string)
	case "elys.perpetual.InterestBlock.block_height":
		x.BlockHeight = value.Int()
	case "elys.perpetual.InterestBlock.block_time":
		x.BlockTime = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InterestBlock) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		panic(fmt.Errorf("field interest_rate of message elys.perpetual.InterestBlock is not mutable"))
	case "elys.perpetual.InterestBlock.block_height":
		panic(fmt.Errorf("field block_height of message elys.perpetual.InterestBlock is not mutable"))
	case "elys.perpetual.InterestBlock.block_time":
		panic(fmt.Errorf("field block_time of message elys.perpetual.InterestBlock is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InterestBlock) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.InterestBlock.interest_rate":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.InterestBlock.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.perpetual.InterestBlock.block_time":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.InterestBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.InterestBlock does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InterestBlock) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.perpetual.InterestBlock", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InterestBlock) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InterestBlock) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InterestBlock) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InterestBlock) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InterestBlock)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.InterestRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.BlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockTime))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InterestBlock)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockTime))
			i--
			dAtA[i] = 0x18
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x10
		}
		if len(x.InterestRate) > 0 {
			i -= len(x.InterestRate)
			copy(dAtA[i:], x.InterestRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InterestRate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InterestBlock)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InterestBlock: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InterestBlock: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InterestRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InterestRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
				}
				x.BlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FundingRateBlock                      protoreflect.MessageDescriptor
	fd_FundingRateBlock_funding_rate_long    protoreflect.FieldDescriptor
	fd_FundingRateBlock_funding_rate_short   protoreflect.FieldDescriptor
	fd_FundingRateBlock_funding_amount_short protoreflect.FieldDescriptor
	fd_FundingRateBlock_funding_amount_long  protoreflect.FieldDescriptor
	fd_FundingRateBlock_block_height         protoreflect.FieldDescriptor
	fd_FundingRateBlock_block_time           protoreflect.FieldDescriptor
)

func init() {
	file_elys_perpetual_types_proto_init()
	md_FundingRateBlock = File_elys_perpetual_types_proto.Messages().ByName("FundingRateBlock")
	fd_FundingRateBlock_funding_rate_long = md_FundingRateBlock.Fields().ByName("funding_rate_long")
	fd_FundingRateBlock_funding_rate_short = md_FundingRateBlock.Fields().ByName("funding_rate_short")
	fd_FundingRateBlock_funding_amount_short = md_FundingRateBlock.Fields().ByName("funding_amount_short")
	fd_FundingRateBlock_funding_amount_long = md_FundingRateBlock.Fields().ByName("funding_amount_long")
	fd_FundingRateBlock_block_height = md_FundingRateBlock.Fields().ByName("block_height")
	fd_FundingRateBlock_block_time = md_FundingRateBlock.Fields().ByName("block_time")
}

var _ protoreflect.Message = (*fastReflection_FundingRateBlock)(nil)

type fastReflection_FundingRateBlock FundingRateBlock

func (x *FundingRateBlock) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FundingRateBlock)(x)
}

func (x *FundingRateBlock) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_perpetual_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FundingRateBlock_messageType fastReflection_FundingRateBlock_messageType
var _ protoreflect.MessageType = fastReflection_FundingRateBlock_messageType{}

type fastReflection_FundingRateBlock_messageType struct{}

func (x fastReflection_FundingRateBlock_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FundingRateBlock)(nil)
}
func (x fastReflection_FundingRateBlock_messageType) New() protoreflect.Message {
	return new(fastReflection_FundingRateBlock)
}
func (x fastReflection_FundingRateBlock_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FundingRateBlock
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FundingRateBlock) Descriptor() protoreflect.MessageDescriptor {
	return md_FundingRateBlock
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FundingRateBlock) Type() protoreflect.MessageType {
	return _fastReflection_FundingRateBlock_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FundingRateBlock) New() protoreflect.Message {
	return new(fastReflection_FundingRateBlock)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FundingRateBlock) Interface() protoreflect.ProtoMessage {
	return (*FundingRateBlock)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FundingRateBlock) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FundingRateLong != "" {
		value := protoreflect.ValueOfString(x.FundingRateLong)
		if !f(fd_FundingRateBlock_funding_rate_long, value) {
			return
		}
	}
	if x.FundingRateShort != "" {
		value := protoreflect.ValueOfString(x.FundingRateShort)
		if !f(fd_FundingRateBlock_funding_rate_short, value) {
			return
		}
	}
	if x.FundingAmountShort != "" {
		value := protoreflect.ValueOfString(x.FundingAmountShort)
		if !f(fd_FundingRateBlock_funding_amount_short, value) {
			return
		}
	}
	if x.FundingAmountLong != "" {
		value := protoreflect.ValueOfString(x.FundingAmountLong)
		if !f(fd_FundingRateBlock_funding_amount_long, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_FundingRateBlock_block_height, value) {
			return
		}
	}
	if x.BlockTime != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockTime)
		if !f(fd_FundingRateBlock_block_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FundingRateBlock) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		return x.FundingRateLong != ""
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		return x.FundingRateShort != ""
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		return x.FundingAmountShort != ""
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		return x.FundingAmountLong != ""
	case "elys.perpetual.FundingRateBlock.block_height":
		return x.BlockHeight != int64(0)
	case "elys.perpetual.FundingRateBlock.block_time":
		return x.BlockTime != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRateBlock) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		x.FundingRateLong = ""
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		x.FundingRateShort = ""
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		x.FundingAmountShort = ""
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		x.FundingAmountLong = ""
	case "elys.perpetual.FundingRateBlock.block_height":
		x.BlockHeight = int64(0)
	case "elys.perpetual.FundingRateBlock.block_time":
		x.BlockTime = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FundingRateBlock) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		value := x.FundingRateLong
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		value := x.FundingRateShort
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		value := x.FundingAmountShort
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		value := x.FundingAmountLong
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.FundingRateBlock.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "elys.perpetual.FundingRateBlock.block_time":
		value := x.BlockTime
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRateBlock) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		x.FundingRateLong = value.Interface().(string)
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		x.FundingRateShort = value.Interface().(string)
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		x.FundingAmountShort = value.Interface().(string)
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		x.FundingAmountLong = value.Interface().(string)
	case "elys.perpetual.FundingRateBlock.block_height":
		x.BlockHeight = value.Int()
	case "elys.perpetual.FundingRateBlock.block_time":
		x.BlockTime = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRateBlock) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		panic(fmt.Errorf("field funding_rate_long of message elys.perpetual.FundingRateBlock is not mutable"))
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		panic(fmt.Errorf("field funding_rate_short of message elys.perpetual.FundingRateBlock is not mutable"))
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		panic(fmt.Errorf("field funding_amount_short of message elys.perpetual.FundingRateBlock is not mutable"))
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		panic(fmt.Errorf("field funding_amount_long of message elys.perpetual.FundingRateBlock is not mutable"))
	case "elys.perpetual.FundingRateBlock.block_height":
		panic(fmt.Errorf("field block_height of message elys.perpetual.FundingRateBlock is not mutable"))
	case "elys.perpetual.FundingRateBlock.block_time":
		panic(fmt.Errorf("field block_time of message elys.perpetual.FundingRateBlock is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FundingRateBlock) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.FundingRateBlock.funding_rate_long":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.FundingRateBlock.funding_rate_short":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.FundingRateBlock.funding_amount_short":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.FundingRateBlock.funding_amount_long":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.FundingRateBlock.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.perpetual.FundingRateBlock.block_time":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.FundingRateBlock"))
		}
		panic(fmt.Errorf("message elys.perpetual.FundingRateBlock does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FundingRateBlock) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.perpetual.FundingRateBlock", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FundingRateBlock) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRateBlock) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FundingRateBlock) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FundingRateBlock) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FundingRateBlock)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.FundingRateLong)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundingRateShort)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundingAmountShort)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FundingAmountLong)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.BlockTime != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockTime))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FundingRateBlock)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockTime))
			i--
			dAtA[i] = 0x30
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x28
		}
		if len(x.FundingAmountLong) > 0 {
			i -= len(x.FundingAmountLong)
			copy(dAtA[i:], x.FundingAmountLong)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingAmountLong)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.FundingAmountShort) > 0 {
			i -= len(x.FundingAmountShort)
			copy(dAtA[i:], x.FundingAmountShort)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingAmountShort)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.FundingRateShort) > 0 {
			i -= len(x.FundingRateShort)
			copy(dAtA[i:], x.FundingRateShort)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingRateShort)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.FundingRateLong) > 0 {
			i -= len(x.FundingRateLong)
			copy(dAtA[i:], x.FundingRateLong)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FundingRateLong)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FundingRateBlock)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FundingRateBlock: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FundingRateBlock: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingRateLong", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingRateLong = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingRateShort", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingRateShort = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingAmountShort", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingAmountShort = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingAmountLong", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FundingAmountLong = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
				}
				x.BlockTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockTime |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_WhiteList_1_list)(nil)

type _WhiteList_1_list struct {
	list *[]string
}

func (x *_WhiteList_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_WhiteList_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_WhiteList_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_WhiteList_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_WhiteList_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message WhiteList at list field ValidatorList as it is not of Message kind"))
}

func (x *_WhiteList_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_WhiteList_1_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_WhiteList_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_WhiteList                protoreflect.MessageDescriptor
	fd_WhiteList_validator_list protoreflect.FieldDescriptor
)

func init() {
	file_elys_perpetual_types_proto_init()
	md_WhiteList = File_elys_perpetual_types_proto.Messages().ByName("WhiteList")
	fd_WhiteList_validator_list = md_WhiteList.Fields().ByName("validator_list")
}

var _ protoreflect.Message = (*fastReflection_WhiteList)(nil)

type fastReflection_WhiteList WhiteList

func (x *WhiteList) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WhiteList)(x)
}

func (x *WhiteList) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_perpetual_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WhiteList_messageType fastReflection_WhiteList_messageType
var _ protoreflect.MessageType = fastReflection_WhiteList_messageType{}

type fastReflection_WhiteList_messageType struct{}

func (x fastReflection_WhiteList_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WhiteList)(nil)
}
func (x fastReflection_WhiteList_messageType) New() protoreflect.Message {
	return new(fastReflection_WhiteList)
}
func (x fastReflection_WhiteList_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WhiteList
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WhiteList) Descriptor() protoreflect.MessageDescriptor {
	return md_WhiteList
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WhiteList) Type() protoreflect.MessageType {
	return _fastReflection_WhiteList_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WhiteList) New() protoreflect.Message {
	return new(fastReflection_WhiteList)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WhiteList) Interface() protoreflect.ProtoMessage {
	return (*WhiteList)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WhiteList) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.ValidatorList) != 0 {
		value := protoreflect.ValueOfList(&_WhiteList_1_list{list: &x.ValidatorList})
		if !f(fd_WhiteList_validator_list, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WhiteList) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		return len(x.ValidatorList) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhiteList) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		x.ValidatorList = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WhiteList) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		if len(x.ValidatorList) == 0 {
			return protoreflect.ValueOfList(&_WhiteList_1_list{})
		}
		listValue := &_WhiteList_1_list{list: &x.ValidatorList}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhiteList) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		lv := value.List()
		clv := lv.(*_WhiteList_1_list)
		x.ValidatorList = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhiteList) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		if x.ValidatorList == nil {
			x.ValidatorList = []string{}
		}
		value := &_WhiteList_1_list{list: &x.ValidatorList}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WhiteList) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.WhiteList.validator_list":
		list := []string{}
		return protoreflect.ValueOfList(&_WhiteList_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.WhiteList"))
		}
		panic(fmt.Errorf("message elys.perpetual.WhiteList does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WhiteList) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.perpetual.WhiteList", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WhiteList) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WhiteList) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WhiteList) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WhiteList) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WhiteList)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.ValidatorList) > 0 {
			for _, s := range x.ValidatorList {
				l = len(s)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WhiteList)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ValidatorList) > 0 {
			for iNdEx := len(x.ValidatorList) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ValidatorList[iNdEx])
				copy(dAtA[i:], x.ValidatorList[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ValidatorList[iNdEx])))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WhiteList)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WhiteList: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WhiteList: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorList", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ValidatorList = append(x.ValidatorList, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PositionRequest         protoreflect.MessageDescriptor
	fd_PositionRequest_address protoreflect.FieldDescriptor
	fd_PositionRequest_id      protoreflect.FieldDescriptor
)

func init() {
	file_elys_perpetual_types_proto_init()
	md_PositionRequest = File_elys_perpetual_types_proto.Messages().ByName("PositionRequest")
	fd_PositionRequest_address = md_PositionRequest.Fields().ByName("address")
	fd_PositionRequest_id = md_PositionRequest.Fields().ByName("id")
}

var _ protoreflect.Message = (*fastReflection_PositionRequest)(nil)

type fastReflection_PositionRequest PositionRequest

func (x *PositionRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PositionRequest)(x)
}

func (x *PositionRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_perpetual_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PositionRequest_messageType fastReflection_PositionRequest_messageType
var _ protoreflect.MessageType = fastReflection_PositionRequest_messageType{}

type fastReflection_PositionRequest_messageType struct{}

func (x fastReflection_PositionRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PositionRequest)(nil)
}
func (x fastReflection_PositionRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_PositionRequest)
}
func (x fastReflection_PositionRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PositionRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PositionRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_PositionRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PositionRequest) Type() protoreflect.MessageType {
	return _fastReflection_PositionRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PositionRequest) New() protoreflect.Message {
	return new(fastReflection_PositionRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PositionRequest) Interface() protoreflect.ProtoMessage {
	return (*PositionRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PositionRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Address != "" {
		value := protoreflect.ValueOfString(x.Address)
		if !f(fd_PositionRequest_address, value) {
			return
		}
	}
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_PositionRequest_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PositionRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.perpetual.PositionRequest.address":
		return x.Address != ""
	case "elys.perpetual.PositionRequest.id":
		return x.Id != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PositionRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.perpetual.PositionRequest.address":
		x.Address = ""
	case "elys.perpetual.PositionRequest.id":
		x.Id = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PositionRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.perpetual.PositionRequest.address":
		value := x.Address
		return protoreflect.ValueOfString(value)
	case "elys.perpetual.PositionRequest.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PositionRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.perpetual.PositionRequest.address":
		x.Address = value.Interface().(string)
	case "elys.perpetual.PositionRequest.id":
		x.Id = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PositionRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.PositionRequest.address":
		panic(fmt.Errorf("field address of message elys.perpetual.PositionRequest is not mutable"))
	case "elys.perpetual.PositionRequest.id":
		panic(fmt.Errorf("field id of message elys.perpetual.PositionRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PositionRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.perpetual.PositionRequest.address":
		return protoreflect.ValueOfString("")
	case "elys.perpetual.PositionRequest.id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.perpetual.PositionRequest"))
		}
		panic(fmt.Errorf("message elys.perpetual.PositionRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PositionRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.perpetual.PositionRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PositionRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PositionRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PositionRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PositionRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PositionRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PositionRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PositionRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PositionRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/perpetual/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Position int32

const (
	Position_UNSPECIFIED Position = 0
	Position_LONG        Position = 1
	Position_SHORT       Position = 2
)

// Enum value maps for Position.
var (
	Position_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LONG",
		2: "SHORT",
	}
	Position_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LONG":        1,
		"SHORT":       2,
	}
)

func (x Position) Enum() *Position {
	p := new(Position)
	*p = x
	return p
}

func (x Position) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Position) Descriptor() protoreflect.EnumDescriptor {
	return file_elys_perpetual_types_proto_enumTypes[0].Descriptor()
}

func (Position) Type() protoreflect.EnumType {
	return &file_elys_perpetual_types_proto_enumTypes[0]
}

func (x Position) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Position.Descriptor instead.
func (Position) EnumDescriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{0}
}

type MTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address                       string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CollateralAsset               string   `protobuf:"bytes,2,opt,name=collateral_asset,json=collateralAsset,proto3" json:"collateral_asset,omitempty"`
	TradingAsset                  string   `protobuf:"bytes,3,opt,name=trading_asset,json=tradingAsset,proto3" json:"trading_asset,omitempty"`
	LiabilitiesAsset              string   `protobuf:"bytes,4,opt,name=liabilities_asset,json=liabilitiesAsset,proto3" json:"liabilities_asset,omitempty"`
	CustodyAsset                  string   `protobuf:"bytes,5,opt,name=custody_asset,json=custodyAsset,proto3" json:"custody_asset,omitempty"`
	Collateral                    string   `protobuf:"bytes,6,opt,name=collateral,proto3" json:"collateral,omitempty"`
	Liabilities                   string   `protobuf:"bytes,7,opt,name=liabilities,proto3" json:"liabilities,omitempty"`
	BorrowInterestPaidCustody     string   `protobuf:"bytes,8,opt,name=borrow_interest_paid_custody,json=borrowInterestPaidCustody,proto3" json:"borrow_interest_paid_custody,omitempty"`
	BorrowInterestUnpaidLiability string   `protobuf:"bytes,10,opt,name=borrow_interest_unpaid_liability,json=borrowInterestUnpaidLiability,proto3" json:"borrow_interest_unpaid_liability,omitempty"`
	Custody                       string   `protobuf:"bytes,11,opt,name=custody,proto3" json:"custody,omitempty"`
	TakeProfitLiabilities         string   `protobuf:"bytes,12,opt,name=take_profit_liabilities,json=takeProfitLiabilities,proto3" json:"take_profit_liabilities,omitempty"`
	TakeProfitCustody             string   `protobuf:"bytes,13,opt,name=take_profit_custody,json=takeProfitCustody,proto3" json:"take_profit_custody,omitempty"`
	MtpHealth                     string   `protobuf:"bytes,14,opt,name=mtp_health,json=mtpHealth,proto3" json:"mtp_health,omitempty"`
	Position                      Position `protobuf:"varint,15,opt,name=position,proto3,enum=elys.perpetual.Position" json:"position,omitempty"`
	Id                            uint64   `protobuf:"varint,16,opt,name=id,proto3" json:"id,omitempty"`
	AmmPoolId                     uint64   `protobuf:"varint,17,opt,name=amm_pool_id,json=ammPoolId,proto3" json:"amm_pool_id,omitempty"`
	TakeProfitPrice               string   `protobuf:"bytes,18,opt,name=take_profit_price,json=takeProfitPrice,proto3" json:"take_profit_price,omitempty"`
	TakeProfitBorrowFactor        string   `protobuf:"bytes,19,opt,name=take_profit_borrow_factor,json=takeProfitBorrowFactor,proto3" json:"take_profit_borrow_factor,omitempty"`
	FundingFeePaidCustody         string   `protobuf:"bytes,20,opt,name=funding_fee_paid_custody,json=fundingFeePaidCustody,proto3" json:"funding_fee_paid_custody,omitempty"`
	FundingFeeReceivedCustody     string   `protobuf:"bytes,21,opt,name=funding_fee_received_custody,json=fundingFeeReceivedCustody,proto3" json:"funding_fee_received_custody,omitempty"`
	OpenPrice                     string   `protobuf:"bytes,22,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	StopLossPrice                 string   `protobuf:"bytes,23,opt,name=stop_loss_price,json=stopLossPrice,proto3" json:"stop_loss_price,omitempty"`
	LastInterestCalcTime          uint64   `protobuf:"varint,24,opt,name=last_interest_calc_time,json=lastInterestCalcTime,proto3" json:"last_interest_calc_time,omitempty"`
	LastInterestCalcBlock         uint64   `protobuf:"varint,25,opt,name=last_interest_calc_block,json=lastInterestCalcBlock,proto3" json:"last_interest_calc_block,omitempty"`
	LastFundingCalcTime           uint64   `protobuf:"varint,26,opt,name=last_funding_calc_time,json=lastFundingCalcTime,proto3" json:"last_funding_calc_time,omitempty"`
	LastFundingCalcBlock          uint64   `protobuf:"varint,27,opt,name=last_funding_calc_block,json=lastFundingCalcBlock,proto3" json:"last_funding_calc_block,omitempty"`
}

func (x *MTP) Reset() {
	*x = MTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_perpetual_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MTP) ProtoMessage() {}

// Deprecated: Use MTP.ProtoReflect.Descriptor instead.
func (*MTP) Descriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{0}
}

func (x *MTP) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MTP) GetCollateralAsset() string {
	if x != nil {
		return x.CollateralAsset
	}
	return ""
}

func (x *MTP) GetTradingAsset() string {
	if x != nil {
		return x.TradingAsset
	}
	return ""
}

func (x *MTP) GetLiabilitiesAsset() string {
	if x != nil {
		return x.LiabilitiesAsset
	}
	return ""
}

func (x *MTP) GetCustodyAsset() string {
	if x != nil {
		return x.CustodyAsset
	}
	return ""
}

func (x *MTP) GetCollateral() string {
	if x != nil {
		return x.Collateral
	}
	return ""
}

func (x *MTP) GetLiabilities() string {
	if x != nil {
		return x.Liabilities
	}
	return ""
}

func (x *MTP) GetBorrowInterestPaidCustody() string {
	if x != nil {
		return x.BorrowInterestPaidCustody
	}
	return ""
}

func (x *MTP) GetBorrowInterestUnpaidLiability() string {
	if x != nil {
		return x.BorrowInterestUnpaidLiability
	}
	return ""
}

func (x *MTP) GetCustody() string {
	if x != nil {
		return x.Custody
	}
	return ""
}

func (x *MTP) GetTakeProfitLiabilities() string {
	if x != nil {
		return x.TakeProfitLiabilities
	}
	return ""
}

func (x *MTP) GetTakeProfitCustody() string {
	if x != nil {
		return x.TakeProfitCustody
	}
	return ""
}

func (x *MTP) GetMtpHealth() string {
	if x != nil {
		return x.MtpHealth
	}
	return ""
}

func (x *MTP) GetPosition() Position {
	if x != nil {
		return x.Position
	}
	return Position_UNSPECIFIED
}

func (x *MTP) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MTP) GetAmmPoolId() uint64 {
	if x != nil {
		return x.AmmPoolId
	}
	return 0
}

func (x *MTP) GetTakeProfitPrice() string {
	if x != nil {
		return x.TakeProfitPrice
	}
	return ""
}

func (x *MTP) GetTakeProfitBorrowFactor() string {
	if x != nil {
		return x.TakeProfitBorrowFactor
	}
	return ""
}

func (x *MTP) GetFundingFeePaidCustody() string {
	if x != nil {
		return x.FundingFeePaidCustody
	}
	return ""
}

func (x *MTP) GetFundingFeeReceivedCustody() string {
	if x != nil {
		return x.FundingFeeReceivedCustody
	}
	return ""
}

func (x *MTP) GetOpenPrice() string {
	if x != nil {
		return x.OpenPrice
	}
	return ""
}

func (x *MTP) GetStopLossPrice() string {
	if x != nil {
		return x.StopLossPrice
	}
	return ""
}

func (x *MTP) GetLastInterestCalcTime() uint64 {
	if x != nil {
		return x.LastInterestCalcTime
	}
	return 0
}

func (x *MTP) GetLastInterestCalcBlock() uint64 {
	if x != nil {
		return x.LastInterestCalcBlock
	}
	return 0
}

func (x *MTP) GetLastFundingCalcTime() uint64 {
	if x != nil {
		return x.LastFundingCalcTime
	}
	return 0
}

func (x *MTP) GetLastFundingCalcBlock() uint64 {
	if x != nil {
		return x.LastFundingCalcBlock
	}
	return 0
}

type InterestBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterestRate string `protobuf:"bytes,1,opt,name=interest_rate,json=interestRate,proto3" json:"interest_rate,omitempty"`
	BlockHeight  int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime    int64  `protobuf:"varint,3,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *InterestBlock) Reset() {
	*x = InterestBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_perpetual_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InterestBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InterestBlock) ProtoMessage() {}

// Deprecated: Use InterestBlock.ProtoReflect.Descriptor instead.
func (*InterestBlock) Descriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{1}
}

func (x *InterestBlock) GetInterestRate() string {
	if x != nil {
		return x.InterestRate
	}
	return ""
}

func (x *InterestBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *InterestBlock) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type FundingRateBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FundingRateLong    string `protobuf:"bytes,1,opt,name=funding_rate_long,json=fundingRateLong,proto3" json:"funding_rate_long,omitempty"`
	FundingRateShort   string `protobuf:"bytes,2,opt,name=funding_rate_short,json=fundingRateShort,proto3" json:"funding_rate_short,omitempty"`
	FundingAmountShort string `protobuf:"bytes,3,opt,name=funding_amount_short,json=fundingAmountShort,proto3" json:"funding_amount_short,omitempty"`
	FundingAmountLong  string `protobuf:"bytes,4,opt,name=funding_amount_long,json=fundingAmountLong,proto3" json:"funding_amount_long,omitempty"`
	BlockHeight        int64  `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	BlockTime          int64  `protobuf:"varint,6,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
}

func (x *FundingRateBlock) Reset() {
	*x = FundingRateBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_perpetual_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingRateBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingRateBlock) ProtoMessage() {}

// Deprecated: Use FundingRateBlock.ProtoReflect.Descriptor instead.
func (*FundingRateBlock) Descriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{2}
}

func (x *FundingRateBlock) GetFundingRateLong() string {
	if x != nil {
		return x.FundingRateLong
	}
	return ""
}

func (x *FundingRateBlock) GetFundingRateShort() string {
	if x != nil {
		return x.FundingRateShort
	}
	return ""
}

func (x *FundingRateBlock) GetFundingAmountShort() string {
	if x != nil {
		return x.FundingAmountShort
	}
	return ""
}

func (x *FundingRateBlock) GetFundingAmountLong() string {
	if x != nil {
		return x.FundingAmountLong
	}
	return ""
}

func (x *FundingRateBlock) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *FundingRateBlock) GetBlockTime() int64 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

type WhiteList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorList []string `protobuf:"bytes,1,rep,name=validator_list,json=validatorList,proto3" json:"validator_list,omitempty"`
}

func (x *WhiteList) Reset() {
	*x = WhiteList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_perpetual_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteList) ProtoMessage() {}

// Deprecated: Use WhiteList.ProtoReflect.Descriptor instead.
func (*WhiteList) Descriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{3}
}

func (x *WhiteList) GetValidatorList() []string {
	if x != nil {
		return x.ValidatorList
	}
	return nil
}

type PositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id      uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PositionRequest) Reset() {
	*x = PositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_perpetual_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRequest) ProtoMessage() {}

// Deprecated: Use PositionRequest.ProtoReflect.Descriptor instead.
func (*PositionRequest) Descriptor() ([]byte, []int) {
	return file_elys_perpetual_types_proto_rawDescGZIP(), []int{4}
}

func (x *PositionRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PositionRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_elys_perpetual_types_proto protoreflect.FileDescriptor

var file_elys_perpetual_types_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x65, 0x6c,
	0x79, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x0e,
	0x0a, 0x03, 0x4d, 0x54, 0x50, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x4d,
	0x0a, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0b, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x6c, 0x0a,
	0x1c, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x19, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x74, 0x0a, 0x20, 0x62,
	0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x75,
	0x6e, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0x52, 0x1d, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x55, 0x6e, 0x70, 0x61, 0x69, 0x64, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x07, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x63, 0x0a, 0x17, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x6c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4c, 0x69, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x5b, 0x0a,
	0x13, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x6d, 0x74,
	0x70, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x09, 0x6d, 0x74, 0x70, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x6d, 0x6d, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x6d, 0x6d, 0x50, 0x6f, 0x6f, 0x6c,
	0x49, 0x64, 0x12, 0x5d, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x0f, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x6c, 0x0a, 0x19, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x16, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x42, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x64, 0x0a, 0x18, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x70,
	0x61, 0x69, 0x64, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x15,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x50, 0x61, 0x69, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x64, 0x79, 0x12, 0x6c, 0x0a, 0x1c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x19, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x46, 0x65, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x64, 0x79, 0x12, 0x50, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x33, 0x0a, 0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c,
	0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa9, 0x01, 0x0a,
	0x0d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x56,
	0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x03, 0x0a, 0x10, 0x46, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x5d, 0x0a,
	0x11, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0f, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x12,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x66, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x63, 0x0a,
	0x14, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x12,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x68, 0x6f,
	0x72, 0x74, 0x12, 0x61, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x11, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3b, 0x0a, 0x0f, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x2a, 0x30, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x48, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x42, 0xaa, 0x01, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61,
	0x6c, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79, 0x73,
	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c,
	0xa2, 0x02, 0x03, 0x45, 0x50, 0x58, 0xaa, 0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x50, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0xca, 0x02, 0x0e, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x50,
	0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0xe2, 0x02, 0x1a, 0x45, 0x6c, 0x79, 0x73, 0x5c,
	0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x50, 0x65,
	0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_perpetual_types_proto_rawDescOnce sync.Once
	file_elys_perpetual_types_proto_rawDescData = file_elys_perpetual_types_proto_rawDesc
)

func file_elys_perpetual_types_proto_rawDescGZIP() []byte {
	file_elys_perpetual_types_proto_rawDescOnce.Do(func() {
		file_elys_perpetual_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_perpetual_types_proto_rawDescData)
	})
	return file_elys_perpetual_types_proto_rawDescData
}

var file_elys_perpetual_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_elys_perpetual_types_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_elys_perpetual_types_proto_goTypes = []interface{}{
	(Position)(0),            // 0: elys.perpetual.Position
	(*MTP)(nil),              // 1: elys.perpetual.MTP
	(*InterestBlock)(nil),    // 2: elys.perpetual.InterestBlock
	(*FundingRateBlock)(nil), // 3: elys.perpetual.FundingRateBlock
	(*WhiteList)(nil),        // 4: elys.perpetual.WhiteList
	(*PositionRequest)(nil),  // 5: elys.perpetual.PositionRequest
}
var file_elys_perpetual_types_proto_depIdxs = []int32{
	0, // 0: elys.perpetual.MTP.position:type_name -> elys.perpetual.Position
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_elys_perpetual_types_proto_init() }
func file_elys_perpetual_types_proto_init() {
	if File_elys_perpetual_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_perpetual_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_perpetual_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InterestBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_perpetual_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingRateBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_perpetual_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_perpetual_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_perpetual_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_perpetual_types_proto_goTypes,
		DependencyIndexes: file_elys_perpetual_types_proto_depIdxs,
		EnumInfos:         file_elys_perpetual_types_proto_enumTypes,
		MessageInfos:      file_elys_perpetual_types_proto_msgTypes,
	}.Build()
	File_elys_perpetual_types_proto = out.File
	file_elys_perpetual_types_proto_rawDesc = nil
	file_elys_perpetual_types_proto_goTypes = nil
	file_elys_perpetual_types_proto_depIdxs = nil
}
