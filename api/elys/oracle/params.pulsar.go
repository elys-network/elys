// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package oracle

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_6_list)(nil)

type _Params_6_list struct {
	list *[]*v1beta1.Coin
}

func (x *_Params_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Params_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_Params_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta1.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_6_list) AppendMutable() protoreflect.Value {
	v := new(v1beta1.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_6_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Params_6_list) NewElement() protoreflect.Value {
	v := new(v1beta1.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Params_6_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                     protoreflect.MessageDescriptor
	fd_Params_band_channel_source protoreflect.FieldDescriptor
	fd_Params_oracle_script_id    protoreflect.FieldDescriptor
	fd_Params_multiplier          protoreflect.FieldDescriptor
	fd_Params_ask_count           protoreflect.FieldDescriptor
	fd_Params_min_count           protoreflect.FieldDescriptor
	fd_Params_fee_limit           protoreflect.FieldDescriptor
	fd_Params_prepare_gas         protoreflect.FieldDescriptor
	fd_Params_execute_gas         protoreflect.FieldDescriptor
	fd_Params_client_id           protoreflect.FieldDescriptor
	fd_Params_band_epoch          protoreflect.FieldDescriptor
	fd_Params_price_expiry_time   protoreflect.FieldDescriptor
	fd_Params_life_time_in_blocks protoreflect.FieldDescriptor
)

func init() {
	file_elys_oracle_params_proto_init()
	md_Params = File_elys_oracle_params_proto.Messages().ByName("Params")
	fd_Params_band_channel_source = md_Params.Fields().ByName("band_channel_source")
	fd_Params_oracle_script_id = md_Params.Fields().ByName("oracle_script_id")
	fd_Params_multiplier = md_Params.Fields().ByName("multiplier")
	fd_Params_ask_count = md_Params.Fields().ByName("ask_count")
	fd_Params_min_count = md_Params.Fields().ByName("min_count")
	fd_Params_fee_limit = md_Params.Fields().ByName("fee_limit")
	fd_Params_prepare_gas = md_Params.Fields().ByName("prepare_gas")
	fd_Params_execute_gas = md_Params.Fields().ByName("execute_gas")
	fd_Params_client_id = md_Params.Fields().ByName("client_id")
	fd_Params_band_epoch = md_Params.Fields().ByName("band_epoch")
	fd_Params_price_expiry_time = md_Params.Fields().ByName("price_expiry_time")
	fd_Params_life_time_in_blocks = md_Params.Fields().ByName("life_time_in_blocks")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_oracle_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BandChannelSource != "" {
		value := protoreflect.ValueOfString(x.BandChannelSource)
		if !f(fd_Params_band_channel_source, value) {
			return
		}
	}
	if x.OracleScriptId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OracleScriptId)
		if !f(fd_Params_oracle_script_id, value) {
			return
		}
	}
	if x.Multiplier != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Multiplier)
		if !f(fd_Params_multiplier, value) {
			return
		}
	}
	if x.AskCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.AskCount)
		if !f(fd_Params_ask_count, value) {
			return
		}
	}
	if x.MinCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MinCount)
		if !f(fd_Params_min_count, value) {
			return
		}
	}
	if len(x.FeeLimit) != 0 {
		value := protoreflect.ValueOfList(&_Params_6_list{list: &x.FeeLimit})
		if !f(fd_Params_fee_limit, value) {
			return
		}
	}
	if x.PrepareGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PrepareGas)
		if !f(fd_Params_prepare_gas, value) {
			return
		}
	}
	if x.ExecuteGas != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ExecuteGas)
		if !f(fd_Params_execute_gas, value) {
			return
		}
	}
	if x.ClientId != "" {
		value := protoreflect.ValueOfString(x.ClientId)
		if !f(fd_Params_client_id, value) {
			return
		}
	}
	if x.BandEpoch != "" {
		value := protoreflect.ValueOfString(x.BandEpoch)
		if !f(fd_Params_band_epoch, value) {
			return
		}
	}
	if x.PriceExpiryTime != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PriceExpiryTime)
		if !f(fd_Params_price_expiry_time, value) {
			return
		}
	}
	if x.LifeTimeInBlocks != uint64(0) {
		value := protoreflect.ValueOfUint64(x.LifeTimeInBlocks)
		if !f(fd_Params_life_time_in_blocks, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.oracle.Params.band_channel_source":
		return x.BandChannelSource != ""
	case "elys.oracle.Params.oracle_script_id":
		return x.OracleScriptId != uint64(0)
	case "elys.oracle.Params.multiplier":
		return x.Multiplier != uint64(0)
	case "elys.oracle.Params.ask_count":
		return x.AskCount != uint64(0)
	case "elys.oracle.Params.min_count":
		return x.MinCount != uint64(0)
	case "elys.oracle.Params.fee_limit":
		return len(x.FeeLimit) != 0
	case "elys.oracle.Params.prepare_gas":
		return x.PrepareGas != uint64(0)
	case "elys.oracle.Params.execute_gas":
		return x.ExecuteGas != uint64(0)
	case "elys.oracle.Params.client_id":
		return x.ClientId != ""
	case "elys.oracle.Params.band_epoch":
		return x.BandEpoch != ""
	case "elys.oracle.Params.price_expiry_time":
		return x.PriceExpiryTime != uint64(0)
	case "elys.oracle.Params.life_time_in_blocks":
		return x.LifeTimeInBlocks != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.oracle.Params.band_channel_source":
		x.BandChannelSource = ""
	case "elys.oracle.Params.oracle_script_id":
		x.OracleScriptId = uint64(0)
	case "elys.oracle.Params.multiplier":
		x.Multiplier = uint64(0)
	case "elys.oracle.Params.ask_count":
		x.AskCount = uint64(0)
	case "elys.oracle.Params.min_count":
		x.MinCount = uint64(0)
	case "elys.oracle.Params.fee_limit":
		x.FeeLimit = nil
	case "elys.oracle.Params.prepare_gas":
		x.PrepareGas = uint64(0)
	case "elys.oracle.Params.execute_gas":
		x.ExecuteGas = uint64(0)
	case "elys.oracle.Params.client_id":
		x.ClientId = ""
	case "elys.oracle.Params.band_epoch":
		x.BandEpoch = ""
	case "elys.oracle.Params.price_expiry_time":
		x.PriceExpiryTime = uint64(0)
	case "elys.oracle.Params.life_time_in_blocks":
		x.LifeTimeInBlocks = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.oracle.Params.band_channel_source":
		value := x.BandChannelSource
		return protoreflect.ValueOfString(value)
	case "elys.oracle.Params.oracle_script_id":
		value := x.OracleScriptId
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.multiplier":
		value := x.Multiplier
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.ask_count":
		value := x.AskCount
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.min_count":
		value := x.MinCount
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.fee_limit":
		if len(x.FeeLimit) == 0 {
			return protoreflect.ValueOfList(&_Params_6_list{})
		}
		listValue := &_Params_6_list{list: &x.FeeLimit}
		return protoreflect.ValueOfList(listValue)
	case "elys.oracle.Params.prepare_gas":
		value := x.PrepareGas
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.execute_gas":
		value := x.ExecuteGas
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.client_id":
		value := x.ClientId
		return protoreflect.ValueOfString(value)
	case "elys.oracle.Params.band_epoch":
		value := x.BandEpoch
		return protoreflect.ValueOfString(value)
	case "elys.oracle.Params.price_expiry_time":
		value := x.PriceExpiryTime
		return protoreflect.ValueOfUint64(value)
	case "elys.oracle.Params.life_time_in_blocks":
		value := x.LifeTimeInBlocks
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.oracle.Params.band_channel_source":
		x.BandChannelSource = value.Interface().(string)
	case "elys.oracle.Params.oracle_script_id":
		x.OracleScriptId = value.Uint()
	case "elys.oracle.Params.multiplier":
		x.Multiplier = value.Uint()
	case "elys.oracle.Params.ask_count":
		x.AskCount = value.Uint()
	case "elys.oracle.Params.min_count":
		x.MinCount = value.Uint()
	case "elys.oracle.Params.fee_limit":
		lv := value.List()
		clv := lv.(*_Params_6_list)
		x.FeeLimit = *clv.list
	case "elys.oracle.Params.prepare_gas":
		x.PrepareGas = value.Uint()
	case "elys.oracle.Params.execute_gas":
		x.ExecuteGas = value.Uint()
	case "elys.oracle.Params.client_id":
		x.ClientId = value.Interface().(string)
	case "elys.oracle.Params.band_epoch":
		x.BandEpoch = value.Interface().(string)
	case "elys.oracle.Params.price_expiry_time":
		x.PriceExpiryTime = value.Uint()
	case "elys.oracle.Params.life_time_in_blocks":
		x.LifeTimeInBlocks = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.oracle.Params.fee_limit":
		if x.FeeLimit == nil {
			x.FeeLimit = []*v1beta1.Coin{}
		}
		value := &_Params_6_list{list: &x.FeeLimit}
		return protoreflect.ValueOfList(value)
	case "elys.oracle.Params.band_channel_source":
		panic(fmt.Errorf("field band_channel_source of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.oracle_script_id":
		panic(fmt.Errorf("field oracle_script_id of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.multiplier":
		panic(fmt.Errorf("field multiplier of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.ask_count":
		panic(fmt.Errorf("field ask_count of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.min_count":
		panic(fmt.Errorf("field min_count of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.prepare_gas":
		panic(fmt.Errorf("field prepare_gas of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.execute_gas":
		panic(fmt.Errorf("field execute_gas of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.client_id":
		panic(fmt.Errorf("field client_id of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.band_epoch":
		panic(fmt.Errorf("field band_epoch of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.price_expiry_time":
		panic(fmt.Errorf("field price_expiry_time of message elys.oracle.Params is not mutable"))
	case "elys.oracle.Params.life_time_in_blocks":
		panic(fmt.Errorf("field life_time_in_blocks of message elys.oracle.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.oracle.Params.band_channel_source":
		return protoreflect.ValueOfString("")
	case "elys.oracle.Params.oracle_script_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.multiplier":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.ask_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.min_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.fee_limit":
		list := []*v1beta1.Coin{}
		return protoreflect.ValueOfList(&_Params_6_list{list: &list})
	case "elys.oracle.Params.prepare_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.execute_gas":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.client_id":
		return protoreflect.ValueOfString("")
	case "elys.oracle.Params.band_epoch":
		return protoreflect.ValueOfString("")
	case "elys.oracle.Params.price_expiry_time":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.oracle.Params.life_time_in_blocks":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.oracle.Params"))
		}
		panic(fmt.Errorf("message elys.oracle.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.oracle.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.BandChannelSource)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OracleScriptId != 0 {
			n += 1 + runtime.Sov(uint64(x.OracleScriptId))
		}
		if x.Multiplier != 0 {
			n += 1 + runtime.Sov(uint64(x.Multiplier))
		}
		if x.AskCount != 0 {
			n += 1 + runtime.Sov(uint64(x.AskCount))
		}
		if x.MinCount != 0 {
			n += 1 + runtime.Sov(uint64(x.MinCount))
		}
		if len(x.FeeLimit) > 0 {
			for _, e := range x.FeeLimit {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.PrepareGas != 0 {
			n += 1 + runtime.Sov(uint64(x.PrepareGas))
		}
		if x.ExecuteGas != 0 {
			n += 1 + runtime.Sov(uint64(x.ExecuteGas))
		}
		l = len(x.ClientId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BandEpoch)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PriceExpiryTime != 0 {
			n += 1 + runtime.Sov(uint64(x.PriceExpiryTime))
		}
		if x.LifeTimeInBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.LifeTimeInBlocks))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LifeTimeInBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LifeTimeInBlocks))
			i--
			dAtA[i] = 0x60
		}
		if x.PriceExpiryTime != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PriceExpiryTime))
			i--
			dAtA[i] = 0x58
		}
		if len(x.BandEpoch) > 0 {
			i -= len(x.BandEpoch)
			copy(dAtA[i:], x.BandEpoch)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BandEpoch)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.ClientId) > 0 {
			i -= len(x.ClientId)
			copy(dAtA[i:], x.ClientId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ClientId)))
			i--
			dAtA[i] = 0x4a
		}
		if x.ExecuteGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ExecuteGas))
			i--
			dAtA[i] = 0x40
		}
		if x.PrepareGas != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PrepareGas))
			i--
			dAtA[i] = 0x38
		}
		if len(x.FeeLimit) > 0 {
			for iNdEx := len(x.FeeLimit) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FeeLimit[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x32
			}
		}
		if x.MinCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinCount))
			i--
			dAtA[i] = 0x28
		}
		if x.AskCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.AskCount))
			i--
			dAtA[i] = 0x20
		}
		if x.Multiplier != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Multiplier))
			i--
			dAtA[i] = 0x18
		}
		if x.OracleScriptId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OracleScriptId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.BandChannelSource) > 0 {
			i -= len(x.BandChannelSource)
			copy(dAtA[i:], x.BandChannelSource)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BandChannelSource)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BandChannelSource", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BandChannelSource = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OracleScriptId", wireType)
				}
				x.OracleScriptId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OracleScriptId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
				}
				x.Multiplier = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Multiplier |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AskCount", wireType)
				}
				x.AskCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.AskCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinCount", wireType)
				}
				x.MinCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeLimit", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeLimit = append(x.FeeLimit, &v1beta1.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeLimit[len(x.FeeLimit)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrepareGas", wireType)
				}
				x.PrepareGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PrepareGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExecuteGas", wireType)
				}
				x.ExecuteGas = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ExecuteGas |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ClientId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BandEpoch", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BandEpoch = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PriceExpiryTime", wireType)
				}
				x.PriceExpiryTime = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PriceExpiryTime |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LifeTimeInBlocks", wireType)
				}
				x.LifeTimeInBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LifeTimeInBlocks |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/oracle/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BandChannelSource string          `protobuf:"bytes,1,opt,name=band_channel_source,json=bandChannelSource,proto3" json:"band_channel_source,omitempty"`
	OracleScriptId    uint64          `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	Multiplier        uint64          `protobuf:"varint,3,opt,name=multiplier,proto3" json:"multiplier,omitempty"`
	AskCount          uint64          `protobuf:"varint,4,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	MinCount          uint64          `protobuf:"varint,5,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	FeeLimit          []*v1beta1.Coin `protobuf:"bytes,6,rep,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
	PrepareGas        uint64          `protobuf:"varint,7,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	ExecuteGas        uint64          `protobuf:"varint,8,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	ClientId          string          `protobuf:"bytes,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	BandEpoch         string          `protobuf:"bytes,10,opt,name=band_epoch,json=bandEpoch,proto3" json:"band_epoch,omitempty"`
	PriceExpiryTime   uint64          `protobuf:"varint,11,opt,name=price_expiry_time,json=priceExpiryTime,proto3" json:"price_expiry_time,omitempty"`
	LifeTimeInBlocks  uint64          `protobuf:"varint,12,opt,name=life_time_in_blocks,json=lifeTimeInBlocks,proto3" json:"life_time_in_blocks,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_oracle_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_elys_oracle_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetBandChannelSource() string {
	if x != nil {
		return x.BandChannelSource
	}
	return ""
}

func (x *Params) GetOracleScriptId() uint64 {
	if x != nil {
		return x.OracleScriptId
	}
	return 0
}

func (x *Params) GetMultiplier() uint64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Params) GetAskCount() uint64 {
	if x != nil {
		return x.AskCount
	}
	return 0
}

func (x *Params) GetMinCount() uint64 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *Params) GetFeeLimit() []*v1beta1.Coin {
	if x != nil {
		return x.FeeLimit
	}
	return nil
}

func (x *Params) GetPrepareGas() uint64 {
	if x != nil {
		return x.PrepareGas
	}
	return 0
}

func (x *Params) GetExecuteGas() uint64 {
	if x != nil {
		return x.ExecuteGas
	}
	return 0
}

func (x *Params) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Params) GetBandEpoch() string {
	if x != nil {
		return x.BandEpoch
	}
	return ""
}

func (x *Params) GetPriceExpiryTime() uint64 {
	if x != nil {
		return x.PriceExpiryTime
	}
	return 0
}

func (x *Params) GetLifeTimeInBlocks() uint64 {
	if x != nil {
		return x.LifeTimeInBlocks
	}
	return 0
}

var File_elys_oracle_params_proto protoreflect.FileDescriptor

var file_elys_oracle_params_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x65, 0x6c, 0x79, 0x73,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1, 0x04,
	0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x12, 0xe2, 0xde, 0x1f, 0x0e, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x44, 0x52, 0x0e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x68, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x47, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x61, 0x73, 0x12, 0x29, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xde, 0x1f, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x69, 0x66, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x6c, 0x69, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x42, 0x99, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c,
	0x79, 0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0xa2, 0x02, 0x03, 0x45, 0x4f, 0x58, 0xaa, 0x02, 0x0b, 0x45, 0x6c, 0x79, 0x73, 0x2e,
	0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0xca, 0x02, 0x0b, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x4f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0xe2, 0x02, 0x17, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x4f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x0c, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_oracle_params_proto_rawDescOnce sync.Once
	file_elys_oracle_params_proto_rawDescData = file_elys_oracle_params_proto_rawDesc
)

func file_elys_oracle_params_proto_rawDescGZIP() []byte {
	file_elys_oracle_params_proto_rawDescOnce.Do(func() {
		file_elys_oracle_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_oracle_params_proto_rawDescData)
	})
	return file_elys_oracle_params_proto_rawDescData
}

var file_elys_oracle_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_elys_oracle_params_proto_goTypes = []interface{}{
	(*Params)(nil),       // 0: elys.oracle.Params
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
}
var file_elys_oracle_params_proto_depIdxs = []int32{
	1, // 0: elys.oracle.Params.fee_limit:type_name -> cosmos.base.v1beta1.Coin
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_elys_oracle_params_proto_init() }
func file_elys_oracle_params_proto_init() {
	if File_elys_oracle_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_oracle_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_oracle_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_oracle_params_proto_goTypes,
		DependencyIndexes: file_elys_oracle_params_proto_depIdxs,
		MessageInfos:      file_elys_oracle_params_proto_msgTypes,
	}.Build()
	File_elys_oracle_params_proto = out.File
	file_elys_oracle_params_proto_rawDesc = nil
	file_elys_oracle_params_proto_goTypes = nil
	file_elys_oracle_params_proto_depIdxs = nil
}
