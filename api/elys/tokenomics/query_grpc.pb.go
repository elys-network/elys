// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tokenomics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Airdrop items.
	Airdrop(ctx context.Context, in *QueryGetAirdropRequest, opts ...grpc.CallOption) (*QueryGetAirdropResponse, error)
	AirdropAll(ctx context.Context, in *QueryAllAirdropRequest, opts ...grpc.CallOption) (*QueryAllAirdropResponse, error)
	// Queries a GenesisInflation by index.
	GenesisInflation(ctx context.Context, in *QueryGetGenesisInflationRequest, opts ...grpc.CallOption) (*QueryGetGenesisInflationResponse, error)
	// Queries a list of TimeBasedInflation items.
	TimeBasedInflation(ctx context.Context, in *QueryGetTimeBasedInflationRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedInflationResponse, error)
	TimeBasedInflationAll(ctx context.Context, in *QueryAllTimeBasedInflationRequest, opts ...grpc.CallOption) (*QueryAllTimeBasedInflationResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Airdrop(ctx context.Context, in *QueryGetAirdropRequest, opts ...grpc.CallOption) (*QueryGetAirdropResponse, error) {
	out := new(QueryGetAirdropResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/Airdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AirdropAll(ctx context.Context, in *QueryAllAirdropRequest, opts ...grpc.CallOption) (*QueryAllAirdropResponse, error) {
	out := new(QueryAllAirdropResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/AirdropAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GenesisInflation(ctx context.Context, in *QueryGetGenesisInflationRequest, opts ...grpc.CallOption) (*QueryGetGenesisInflationResponse, error) {
	out := new(QueryGetGenesisInflationResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/GenesisInflation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeBasedInflation(ctx context.Context, in *QueryGetTimeBasedInflationRequest, opts ...grpc.CallOption) (*QueryGetTimeBasedInflationResponse, error) {
	out := new(QueryGetTimeBasedInflationResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/TimeBasedInflation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeBasedInflationAll(ctx context.Context, in *QueryAllTimeBasedInflationRequest, opts ...grpc.CallOption) (*QueryAllTimeBasedInflationResponse, error) {
	out := new(QueryAllTimeBasedInflationResponse)
	err := c.cc.Invoke(ctx, "/elys.tokenomics.Query/TimeBasedInflationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Airdrop items.
	Airdrop(context.Context, *QueryGetAirdropRequest) (*QueryGetAirdropResponse, error)
	AirdropAll(context.Context, *QueryAllAirdropRequest) (*QueryAllAirdropResponse, error)
	// Queries a GenesisInflation by index.
	GenesisInflation(context.Context, *QueryGetGenesisInflationRequest) (*QueryGetGenesisInflationResponse, error)
	// Queries a list of TimeBasedInflation items.
	TimeBasedInflation(context.Context, *QueryGetTimeBasedInflationRequest) (*QueryGetTimeBasedInflationResponse, error)
	TimeBasedInflationAll(context.Context, *QueryAllTimeBasedInflationRequest) (*QueryAllTimeBasedInflationResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Airdrop(context.Context, *QueryGetAirdropRequest) (*QueryGetAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Airdrop not implemented")
}
func (UnimplementedQueryServer) AirdropAll(context.Context, *QueryAllAirdropRequest) (*QueryAllAirdropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropAll not implemented")
}
func (UnimplementedQueryServer) GenesisInflation(context.Context, *QueryGetGenesisInflationRequest) (*QueryGetGenesisInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenesisInflation not implemented")
}
func (UnimplementedQueryServer) TimeBasedInflation(context.Context, *QueryGetTimeBasedInflationRequest) (*QueryGetTimeBasedInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeBasedInflation not implemented")
}
func (UnimplementedQueryServer) TimeBasedInflationAll(context.Context, *QueryAllTimeBasedInflationRequest) (*QueryAllTimeBasedInflationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeBasedInflationAll not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Airdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Airdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/Airdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Airdrop(ctx, req.(*QueryGetAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AirdropAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AirdropAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/AirdropAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AirdropAll(ctx, req.(*QueryAllAirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GenesisInflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGenesisInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GenesisInflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/GenesisInflation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GenesisInflation(ctx, req.(*QueryGetGenesisInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeBasedInflation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTimeBasedInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeBasedInflation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/TimeBasedInflation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeBasedInflation(ctx, req.(*QueryGetTimeBasedInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeBasedInflationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTimeBasedInflationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeBasedInflationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tokenomics.Query/TimeBasedInflationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeBasedInflationAll(ctx, req.(*QueryAllTimeBasedInflationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tokenomics.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Airdrop",
			Handler:    _Query_Airdrop_Handler,
		},
		{
			MethodName: "AirdropAll",
			Handler:    _Query_AirdropAll_Handler,
		},
		{
			MethodName: "GenesisInflation",
			Handler:    _Query_GenesisInflation_Handler,
		},
		{
			MethodName: "TimeBasedInflation",
			Handler:    _Query_TimeBasedInflation_Handler,
		},
		{
			MethodName: "TimeBasedInflationAll",
			Handler:    _Query_TimeBasedInflationAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tokenomics/query.proto",
}
