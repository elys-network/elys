// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package clob

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_PerpetualMarket                             protoreflect.MessageDescriptor
	fd_PerpetualMarket_id                          protoreflect.FieldDescriptor
	fd_PerpetualMarket_base_denom                  protoreflect.FieldDescriptor
	fd_PerpetualMarket_quote_denom                 protoreflect.FieldDescriptor
	fd_PerpetualMarket_initial_margin_ratio        protoreflect.FieldDescriptor
	fd_PerpetualMarket_maintenance_margin_ratio    protoreflect.FieldDescriptor
	fd_PerpetualMarket_maker_fee_rate              protoreflect.FieldDescriptor
	fd_PerpetualMarket_taker_fee_rate              protoreflect.FieldDescriptor
	fd_PerpetualMarket_liquidation_fee_share_rate  protoreflect.FieldDescriptor
	fd_PerpetualMarket_status                      protoreflect.FieldDescriptor
	fd_PerpetualMarket_min_price_tick_size         protoreflect.FieldDescriptor
	fd_PerpetualMarket_min_quantity_tick_size      protoreflect.FieldDescriptor
	fd_PerpetualMarket_min_notional                protoreflect.FieldDescriptor
	fd_PerpetualMarket_admin                       protoreflect.FieldDescriptor
	fd_PerpetualMarket_total_open                  protoreflect.FieldDescriptor
	fd_PerpetualMarket_order_counter               protoreflect.FieldDescriptor
	fd_PerpetualMarket_max_abs_funding_rate        protoreflect.FieldDescriptor
	fd_PerpetualMarket_max_abs_funding_rate_change protoreflect.FieldDescriptor
	fd_PerpetualMarket_twap_prices_window          protoreflect.FieldDescriptor
)

func init() {
	file_elys_clob_market_proto_init()
	md_PerpetualMarket = File_elys_clob_market_proto.Messages().ByName("PerpetualMarket")
	fd_PerpetualMarket_id = md_PerpetualMarket.Fields().ByName("id")
	fd_PerpetualMarket_base_denom = md_PerpetualMarket.Fields().ByName("base_denom")
	fd_PerpetualMarket_quote_denom = md_PerpetualMarket.Fields().ByName("quote_denom")
	fd_PerpetualMarket_initial_margin_ratio = md_PerpetualMarket.Fields().ByName("initial_margin_ratio")
	fd_PerpetualMarket_maintenance_margin_ratio = md_PerpetualMarket.Fields().ByName("maintenance_margin_ratio")
	fd_PerpetualMarket_maker_fee_rate = md_PerpetualMarket.Fields().ByName("maker_fee_rate")
	fd_PerpetualMarket_taker_fee_rate = md_PerpetualMarket.Fields().ByName("taker_fee_rate")
	fd_PerpetualMarket_liquidation_fee_share_rate = md_PerpetualMarket.Fields().ByName("liquidation_fee_share_rate")
	fd_PerpetualMarket_status = md_PerpetualMarket.Fields().ByName("status")
	fd_PerpetualMarket_min_price_tick_size = md_PerpetualMarket.Fields().ByName("min_price_tick_size")
	fd_PerpetualMarket_min_quantity_tick_size = md_PerpetualMarket.Fields().ByName("min_quantity_tick_size")
	fd_PerpetualMarket_min_notional = md_PerpetualMarket.Fields().ByName("min_notional")
	fd_PerpetualMarket_admin = md_PerpetualMarket.Fields().ByName("admin")
	fd_PerpetualMarket_total_open = md_PerpetualMarket.Fields().ByName("total_open")
	fd_PerpetualMarket_order_counter = md_PerpetualMarket.Fields().ByName("order_counter")
	fd_PerpetualMarket_max_abs_funding_rate = md_PerpetualMarket.Fields().ByName("max_abs_funding_rate")
	fd_PerpetualMarket_max_abs_funding_rate_change = md_PerpetualMarket.Fields().ByName("max_abs_funding_rate_change")
	fd_PerpetualMarket_twap_prices_window = md_PerpetualMarket.Fields().ByName("twap_prices_window")
}

var _ protoreflect.Message = (*fastReflection_PerpetualMarket)(nil)

type fastReflection_PerpetualMarket PerpetualMarket

func (x *PerpetualMarket) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PerpetualMarket)(x)
}

func (x *PerpetualMarket) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_clob_market_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PerpetualMarket_messageType fastReflection_PerpetualMarket_messageType
var _ protoreflect.MessageType = fastReflection_PerpetualMarket_messageType{}

type fastReflection_PerpetualMarket_messageType struct{}

func (x fastReflection_PerpetualMarket_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PerpetualMarket)(nil)
}
func (x fastReflection_PerpetualMarket_messageType) New() protoreflect.Message {
	return new(fastReflection_PerpetualMarket)
}
func (x fastReflection_PerpetualMarket_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PerpetualMarket
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PerpetualMarket) Descriptor() protoreflect.MessageDescriptor {
	return md_PerpetualMarket
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PerpetualMarket) Type() protoreflect.MessageType {
	return _fastReflection_PerpetualMarket_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PerpetualMarket) New() protoreflect.Message {
	return new(fastReflection_PerpetualMarket)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PerpetualMarket) Interface() protoreflect.ProtoMessage {
	return (*PerpetualMarket)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PerpetualMarket) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_PerpetualMarket_id, value) {
			return
		}
	}
	if x.BaseDenom != "" {
		value := protoreflect.ValueOfString(x.BaseDenom)
		if !f(fd_PerpetualMarket_base_denom, value) {
			return
		}
	}
	if x.QuoteDenom != "" {
		value := protoreflect.ValueOfString(x.QuoteDenom)
		if !f(fd_PerpetualMarket_quote_denom, value) {
			return
		}
	}
	if x.InitialMarginRatio != "" {
		value := protoreflect.ValueOfString(x.InitialMarginRatio)
		if !f(fd_PerpetualMarket_initial_margin_ratio, value) {
			return
		}
	}
	if x.MaintenanceMarginRatio != "" {
		value := protoreflect.ValueOfString(x.MaintenanceMarginRatio)
		if !f(fd_PerpetualMarket_maintenance_margin_ratio, value) {
			return
		}
	}
	if x.MakerFeeRate != "" {
		value := protoreflect.ValueOfString(x.MakerFeeRate)
		if !f(fd_PerpetualMarket_maker_fee_rate, value) {
			return
		}
	}
	if x.TakerFeeRate != "" {
		value := protoreflect.ValueOfString(x.TakerFeeRate)
		if !f(fd_PerpetualMarket_taker_fee_rate, value) {
			return
		}
	}
	if x.LiquidationFeeShareRate != "" {
		value := protoreflect.ValueOfString(x.LiquidationFeeShareRate)
		if !f(fd_PerpetualMarket_liquidation_fee_share_rate, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_PerpetualMarket_status, value) {
			return
		}
	}
	if x.MinPriceTickSize != "" {
		value := protoreflect.ValueOfString(x.MinPriceTickSize)
		if !f(fd_PerpetualMarket_min_price_tick_size, value) {
			return
		}
	}
	if x.MinQuantityTickSize != "" {
		value := protoreflect.ValueOfString(x.MinQuantityTickSize)
		if !f(fd_PerpetualMarket_min_quantity_tick_size, value) {
			return
		}
	}
	if x.MinNotional != "" {
		value := protoreflect.ValueOfString(x.MinNotional)
		if !f(fd_PerpetualMarket_min_notional, value) {
			return
		}
	}
	if x.Admin != "" {
		value := protoreflect.ValueOfString(x.Admin)
		if !f(fd_PerpetualMarket_admin, value) {
			return
		}
	}
	if x.TotalOpen != "" {
		value := protoreflect.ValueOfString(x.TotalOpen)
		if !f(fd_PerpetualMarket_total_open, value) {
			return
		}
	}
	if x.OrderCounter != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OrderCounter)
		if !f(fd_PerpetualMarket_order_counter, value) {
			return
		}
	}
	if x.MaxAbsFundingRate != "" {
		value := protoreflect.ValueOfString(x.MaxAbsFundingRate)
		if !f(fd_PerpetualMarket_max_abs_funding_rate, value) {
			return
		}
	}
	if x.MaxAbsFundingRateChange != "" {
		value := protoreflect.ValueOfString(x.MaxAbsFundingRateChange)
		if !f(fd_PerpetualMarket_max_abs_funding_rate_change, value) {
			return
		}
	}
	if x.TwapPricesWindow != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TwapPricesWindow)
		if !f(fd_PerpetualMarket_twap_prices_window, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PerpetualMarket) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.clob.PerpetualMarket.id":
		return x.Id != uint64(0)
	case "elys.clob.PerpetualMarket.base_denom":
		return x.BaseDenom != ""
	case "elys.clob.PerpetualMarket.quote_denom":
		return x.QuoteDenom != ""
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		return x.InitialMarginRatio != ""
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		return x.MaintenanceMarginRatio != ""
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		return x.MakerFeeRate != ""
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		return x.TakerFeeRate != ""
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		return x.LiquidationFeeShareRate != ""
	case "elys.clob.PerpetualMarket.status":
		return x.Status != 0
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		return x.MinPriceTickSize != ""
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		return x.MinQuantityTickSize != ""
	case "elys.clob.PerpetualMarket.min_notional":
		return x.MinNotional != ""
	case "elys.clob.PerpetualMarket.admin":
		return x.Admin != ""
	case "elys.clob.PerpetualMarket.total_open":
		return x.TotalOpen != ""
	case "elys.clob.PerpetualMarket.order_counter":
		return x.OrderCounter != uint64(0)
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		return x.MaxAbsFundingRate != ""
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		return x.MaxAbsFundingRateChange != ""
	case "elys.clob.PerpetualMarket.twap_prices_window":
		return x.TwapPricesWindow != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerpetualMarket) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.clob.PerpetualMarket.id":
		x.Id = uint64(0)
	case "elys.clob.PerpetualMarket.base_denom":
		x.BaseDenom = ""
	case "elys.clob.PerpetualMarket.quote_denom":
		x.QuoteDenom = ""
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		x.InitialMarginRatio = ""
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		x.MaintenanceMarginRatio = ""
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		x.MakerFeeRate = ""
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		x.TakerFeeRate = ""
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		x.LiquidationFeeShareRate = ""
	case "elys.clob.PerpetualMarket.status":
		x.Status = 0
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		x.MinPriceTickSize = ""
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		x.MinQuantityTickSize = ""
	case "elys.clob.PerpetualMarket.min_notional":
		x.MinNotional = ""
	case "elys.clob.PerpetualMarket.admin":
		x.Admin = ""
	case "elys.clob.PerpetualMarket.total_open":
		x.TotalOpen = ""
	case "elys.clob.PerpetualMarket.order_counter":
		x.OrderCounter = uint64(0)
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		x.MaxAbsFundingRate = ""
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		x.MaxAbsFundingRateChange = ""
	case "elys.clob.PerpetualMarket.twap_prices_window":
		x.TwapPricesWindow = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PerpetualMarket) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.clob.PerpetualMarket.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.PerpetualMarket.base_denom":
		value := x.BaseDenom
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.quote_denom":
		value := x.QuoteDenom
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		value := x.InitialMarginRatio
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		value := x.MaintenanceMarginRatio
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		value := x.MakerFeeRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		value := x.TakerFeeRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		value := x.LiquidationFeeShareRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		value := x.MinPriceTickSize
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		value := x.MinQuantityTickSize
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.min_notional":
		value := x.MinNotional
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.admin":
		value := x.Admin
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.total_open":
		value := x.TotalOpen
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.order_counter":
		value := x.OrderCounter
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		value := x.MaxAbsFundingRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		value := x.MaxAbsFundingRateChange
		return protoreflect.ValueOfString(value)
	case "elys.clob.PerpetualMarket.twap_prices_window":
		value := x.TwapPricesWindow
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerpetualMarket) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.clob.PerpetualMarket.id":
		x.Id = value.Uint()
	case "elys.clob.PerpetualMarket.base_denom":
		x.BaseDenom = value.Interface().(string)
	case "elys.clob.PerpetualMarket.quote_denom":
		x.QuoteDenom = value.Interface().(string)
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		x.InitialMarginRatio = value.Interface().(string)
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		x.MaintenanceMarginRatio = value.Interface().(string)
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		x.MakerFeeRate = value.Interface().(string)
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		x.TakerFeeRate = value.Interface().(string)
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		x.LiquidationFeeShareRate = value.Interface().(string)
	case "elys.clob.PerpetualMarket.status":
		x.Status = (PerpetualMarketStatus)(value.Enum())
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		x.MinPriceTickSize = value.Interface().(string)
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		x.MinQuantityTickSize = value.Interface().(string)
	case "elys.clob.PerpetualMarket.min_notional":
		x.MinNotional = value.Interface().(string)
	case "elys.clob.PerpetualMarket.admin":
		x.Admin = value.Interface().(string)
	case "elys.clob.PerpetualMarket.total_open":
		x.TotalOpen = value.Interface().(string)
	case "elys.clob.PerpetualMarket.order_counter":
		x.OrderCounter = value.Uint()
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		x.MaxAbsFundingRate = value.Interface().(string)
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		x.MaxAbsFundingRateChange = value.Interface().(string)
	case "elys.clob.PerpetualMarket.twap_prices_window":
		x.TwapPricesWindow = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerpetualMarket) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.PerpetualMarket.id":
		panic(fmt.Errorf("field id of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.base_denom":
		panic(fmt.Errorf("field base_denom of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.quote_denom":
		panic(fmt.Errorf("field quote_denom of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		panic(fmt.Errorf("field initial_margin_ratio of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		panic(fmt.Errorf("field maintenance_margin_ratio of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		panic(fmt.Errorf("field maker_fee_rate of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		panic(fmt.Errorf("field taker_fee_rate of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		panic(fmt.Errorf("field liquidation_fee_share_rate of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.status":
		panic(fmt.Errorf("field status of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		panic(fmt.Errorf("field min_price_tick_size of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		panic(fmt.Errorf("field min_quantity_tick_size of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.min_notional":
		panic(fmt.Errorf("field min_notional of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.admin":
		panic(fmt.Errorf("field admin of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.total_open":
		panic(fmt.Errorf("field total_open of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.order_counter":
		panic(fmt.Errorf("field order_counter of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		panic(fmt.Errorf("field max_abs_funding_rate of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		panic(fmt.Errorf("field max_abs_funding_rate_change of message elys.clob.PerpetualMarket is not mutable"))
	case "elys.clob.PerpetualMarket.twap_prices_window":
		panic(fmt.Errorf("field twap_prices_window of message elys.clob.PerpetualMarket is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PerpetualMarket) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.PerpetualMarket.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.PerpetualMarket.base_denom":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.quote_denom":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.initial_margin_ratio":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.maintenance_margin_ratio":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.maker_fee_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.taker_fee_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.liquidation_fee_share_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.status":
		return protoreflect.ValueOfEnum(0)
	case "elys.clob.PerpetualMarket.min_price_tick_size":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.min_quantity_tick_size":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.min_notional":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.admin":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.total_open":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.order_counter":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.PerpetualMarket.max_abs_funding_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.max_abs_funding_rate_change":
		return protoreflect.ValueOfString("")
	case "elys.clob.PerpetualMarket.twap_prices_window":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.PerpetualMarket"))
		}
		panic(fmt.Errorf("message elys.clob.PerpetualMarket does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PerpetualMarket) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.clob.PerpetualMarket", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PerpetualMarket) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerpetualMarket) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PerpetualMarket) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PerpetualMarket) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PerpetualMarket)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		l = len(x.BaseDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.QuoteDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.InitialMarginRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaintenanceMarginRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MakerFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TakerFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LiquidationFeeShareRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.MinPriceTickSize)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinQuantityTickSize)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinNotional)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Admin)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalOpen)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OrderCounter != 0 {
			n += 1 + runtime.Sov(uint64(x.OrderCounter))
		}
		l = len(x.MaxAbsFundingRate)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxAbsFundingRateChange)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.TwapPricesWindow != 0 {
			n += 2 + runtime.Sov(uint64(x.TwapPricesWindow))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PerpetualMarket)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TwapPricesWindow != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TwapPricesWindow))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if len(x.MaxAbsFundingRateChange) > 0 {
			i -= len(x.MaxAbsFundingRateChange)
			copy(dAtA[i:], x.MaxAbsFundingRateChange)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxAbsFundingRateChange)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.MaxAbsFundingRate) > 0 {
			i -= len(x.MaxAbsFundingRate)
			copy(dAtA[i:], x.MaxAbsFundingRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxAbsFundingRate)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
		if x.OrderCounter != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OrderCounter))
			i--
			dAtA[i] = 0x78
		}
		if len(x.TotalOpen) > 0 {
			i -= len(x.TotalOpen)
			copy(dAtA[i:], x.TotalOpen)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalOpen)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.Admin) > 0 {
			i -= len(x.Admin)
			copy(dAtA[i:], x.Admin)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Admin)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.MinNotional) > 0 {
			i -= len(x.MinNotional)
			copy(dAtA[i:], x.MinNotional)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinNotional)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.MinQuantityTickSize) > 0 {
			i -= len(x.MinQuantityTickSize)
			copy(dAtA[i:], x.MinQuantityTickSize)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinQuantityTickSize)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.MinPriceTickSize) > 0 {
			i -= len(x.MinPriceTickSize)
			copy(dAtA[i:], x.MinPriceTickSize)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinPriceTickSize)))
			i--
			dAtA[i] = 0x52
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x48
		}
		if len(x.LiquidationFeeShareRate) > 0 {
			i -= len(x.LiquidationFeeShareRate)
			copy(dAtA[i:], x.LiquidationFeeShareRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiquidationFeeShareRate)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.TakerFeeRate) > 0 {
			i -= len(x.TakerFeeRate)
			copy(dAtA[i:], x.TakerFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TakerFeeRate)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.MakerFeeRate) > 0 {
			i -= len(x.MakerFeeRate)
			copy(dAtA[i:], x.MakerFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MakerFeeRate)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.MaintenanceMarginRatio) > 0 {
			i -= len(x.MaintenanceMarginRatio)
			copy(dAtA[i:], x.MaintenanceMarginRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaintenanceMarginRatio)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.InitialMarginRatio) > 0 {
			i -= len(x.InitialMarginRatio)
			copy(dAtA[i:], x.InitialMarginRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.InitialMarginRatio)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.QuoteDenom) > 0 {
			i -= len(x.QuoteDenom)
			copy(dAtA[i:], x.QuoteDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QuoteDenom)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.BaseDenom) > 0 {
			i -= len(x.BaseDenom)
			copy(dAtA[i:], x.BaseDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BaseDenom)))
			i--
			dAtA[i] = 0x12
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PerpetualMarket)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PerpetualMarket: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PerpetualMarket: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BaseDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QuoteDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QuoteDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitialMarginRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.InitialMarginRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaintenanceMarginRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaintenanceMarginRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MakerFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MakerFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TakerFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TakerFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidationFeeShareRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidationFeeShareRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= PerpetualMarketStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinPriceTickSize", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinPriceTickSize = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinQuantityTickSize", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinQuantityTickSize = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinNotional", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinNotional = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Admin = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalOpen", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalOpen = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OrderCounter", wireType)
				}
				x.OrderCounter = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OrderCounter |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxAbsFundingRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxAbsFundingRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxAbsFundingRateChange", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxAbsFundingRateChange = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TwapPricesWindow", wireType)
				}
				x.TwapPricesWindow = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TwapPricesWindow |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TwapPrice                     protoreflect.MessageDescriptor
	fd_TwapPrice_market_id           protoreflect.FieldDescriptor
	fd_TwapPrice_block               protoreflect.FieldDescriptor
	fd_TwapPrice_average_trade_price protoreflect.FieldDescriptor
	fd_TwapPrice_total_volume        protoreflect.FieldDescriptor
	fd_TwapPrice_cumulative_price    protoreflect.FieldDescriptor
	fd_TwapPrice_timestamp           protoreflect.FieldDescriptor
)

func init() {
	file_elys_clob_market_proto_init()
	md_TwapPrice = File_elys_clob_market_proto.Messages().ByName("TwapPrice")
	fd_TwapPrice_market_id = md_TwapPrice.Fields().ByName("market_id")
	fd_TwapPrice_block = md_TwapPrice.Fields().ByName("block")
	fd_TwapPrice_average_trade_price = md_TwapPrice.Fields().ByName("average_trade_price")
	fd_TwapPrice_total_volume = md_TwapPrice.Fields().ByName("total_volume")
	fd_TwapPrice_cumulative_price = md_TwapPrice.Fields().ByName("cumulative_price")
	fd_TwapPrice_timestamp = md_TwapPrice.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_TwapPrice)(nil)

type fastReflection_TwapPrice TwapPrice

func (x *TwapPrice) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TwapPrice)(x)
}

func (x *TwapPrice) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_clob_market_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TwapPrice_messageType fastReflection_TwapPrice_messageType
var _ protoreflect.MessageType = fastReflection_TwapPrice_messageType{}

type fastReflection_TwapPrice_messageType struct{}

func (x fastReflection_TwapPrice_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TwapPrice)(nil)
}
func (x fastReflection_TwapPrice_messageType) New() protoreflect.Message {
	return new(fastReflection_TwapPrice)
}
func (x fastReflection_TwapPrice_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TwapPrice
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TwapPrice) Descriptor() protoreflect.MessageDescriptor {
	return md_TwapPrice
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TwapPrice) Type() protoreflect.MessageType {
	return _fastReflection_TwapPrice_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TwapPrice) New() protoreflect.Message {
	return new(fastReflection_TwapPrice)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TwapPrice) Interface() protoreflect.ProtoMessage {
	return (*TwapPrice)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TwapPrice) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MarketId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MarketId)
		if !f(fd_TwapPrice_market_id, value) {
			return
		}
	}
	if x.Block != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Block)
		if !f(fd_TwapPrice_block, value) {
			return
		}
	}
	if x.AverageTradePrice != "" {
		value := protoreflect.ValueOfString(x.AverageTradePrice)
		if !f(fd_TwapPrice_average_trade_price, value) {
			return
		}
	}
	if x.TotalVolume != "" {
		value := protoreflect.ValueOfString(x.TotalVolume)
		if !f(fd_TwapPrice_total_volume, value) {
			return
		}
	}
	if x.CumulativePrice != "" {
		value := protoreflect.ValueOfString(x.CumulativePrice)
		if !f(fd_TwapPrice_cumulative_price, value) {
			return
		}
	}
	if x.Timestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Timestamp)
		if !f(fd_TwapPrice_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TwapPrice) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.clob.TwapPrice.market_id":
		return x.MarketId != uint64(0)
	case "elys.clob.TwapPrice.block":
		return x.Block != uint64(0)
	case "elys.clob.TwapPrice.average_trade_price":
		return x.AverageTradePrice != ""
	case "elys.clob.TwapPrice.total_volume":
		return x.TotalVolume != ""
	case "elys.clob.TwapPrice.cumulative_price":
		return x.CumulativePrice != ""
	case "elys.clob.TwapPrice.timestamp":
		return x.Timestamp != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapPrice) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.clob.TwapPrice.market_id":
		x.MarketId = uint64(0)
	case "elys.clob.TwapPrice.block":
		x.Block = uint64(0)
	case "elys.clob.TwapPrice.average_trade_price":
		x.AverageTradePrice = ""
	case "elys.clob.TwapPrice.total_volume":
		x.TotalVolume = ""
	case "elys.clob.TwapPrice.cumulative_price":
		x.CumulativePrice = ""
	case "elys.clob.TwapPrice.timestamp":
		x.Timestamp = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TwapPrice) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.clob.TwapPrice.market_id":
		value := x.MarketId
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.TwapPrice.block":
		value := x.Block
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.TwapPrice.average_trade_price":
		value := x.AverageTradePrice
		return protoreflect.ValueOfString(value)
	case "elys.clob.TwapPrice.total_volume":
		value := x.TotalVolume
		return protoreflect.ValueOfString(value)
	case "elys.clob.TwapPrice.cumulative_price":
		value := x.CumulativePrice
		return protoreflect.ValueOfString(value)
	case "elys.clob.TwapPrice.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapPrice) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.clob.TwapPrice.market_id":
		x.MarketId = value.Uint()
	case "elys.clob.TwapPrice.block":
		x.Block = value.Uint()
	case "elys.clob.TwapPrice.average_trade_price":
		x.AverageTradePrice = value.Interface().(string)
	case "elys.clob.TwapPrice.total_volume":
		x.TotalVolume = value.Interface().(string)
	case "elys.clob.TwapPrice.cumulative_price":
		x.CumulativePrice = value.Interface().(string)
	case "elys.clob.TwapPrice.timestamp":
		x.Timestamp = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapPrice) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.TwapPrice.market_id":
		panic(fmt.Errorf("field market_id of message elys.clob.TwapPrice is not mutable"))
	case "elys.clob.TwapPrice.block":
		panic(fmt.Errorf("field block of message elys.clob.TwapPrice is not mutable"))
	case "elys.clob.TwapPrice.average_trade_price":
		panic(fmt.Errorf("field average_trade_price of message elys.clob.TwapPrice is not mutable"))
	case "elys.clob.TwapPrice.total_volume":
		panic(fmt.Errorf("field total_volume of message elys.clob.TwapPrice is not mutable"))
	case "elys.clob.TwapPrice.cumulative_price":
		panic(fmt.Errorf("field cumulative_price of message elys.clob.TwapPrice is not mutable"))
	case "elys.clob.TwapPrice.timestamp":
		panic(fmt.Errorf("field timestamp of message elys.clob.TwapPrice is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TwapPrice) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.TwapPrice.market_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.TwapPrice.block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.TwapPrice.average_trade_price":
		return protoreflect.ValueOfString("")
	case "elys.clob.TwapPrice.total_volume":
		return protoreflect.ValueOfString("")
	case "elys.clob.TwapPrice.cumulative_price":
		return protoreflect.ValueOfString("")
	case "elys.clob.TwapPrice.timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.TwapPrice"))
		}
		panic(fmt.Errorf("message elys.clob.TwapPrice does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TwapPrice) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.clob.TwapPrice", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TwapPrice) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TwapPrice) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TwapPrice) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TwapPrice) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TwapPrice)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MarketId != 0 {
			n += 1 + runtime.Sov(uint64(x.MarketId))
		}
		if x.Block != 0 {
			n += 1 + runtime.Sov(uint64(x.Block))
		}
		l = len(x.AverageTradePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalVolume)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CumulativePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TwapPrice)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x30
		}
		if len(x.CumulativePrice) > 0 {
			i -= len(x.CumulativePrice)
			copy(dAtA[i:], x.CumulativePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CumulativePrice)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TotalVolume) > 0 {
			i -= len(x.TotalVolume)
			copy(dAtA[i:], x.TotalVolume)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalVolume)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.AverageTradePrice) > 0 {
			i -= len(x.AverageTradePrice)
			copy(dAtA[i:], x.AverageTradePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AverageTradePrice)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Block != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Block))
			i--
			dAtA[i] = 0x10
		}
		if x.MarketId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MarketId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TwapPrice)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TwapPrice: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TwapPrice: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
				}
				x.MarketId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MarketId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
				}
				x.Block = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Block |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AverageTradePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AverageTradePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalVolume", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalVolume = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CumulativePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CumulativePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FundingRate           protoreflect.MessageDescriptor
	fd_FundingRate_market_id protoreflect.FieldDescriptor
	fd_FundingRate_block     protoreflect.FieldDescriptor
	fd_FundingRate_rate      protoreflect.FieldDescriptor
)

func init() {
	file_elys_clob_market_proto_init()
	md_FundingRate = File_elys_clob_market_proto.Messages().ByName("FundingRate")
	fd_FundingRate_market_id = md_FundingRate.Fields().ByName("market_id")
	fd_FundingRate_block = md_FundingRate.Fields().ByName("block")
	fd_FundingRate_rate = md_FundingRate.Fields().ByName("rate")
}

var _ protoreflect.Message = (*fastReflection_FundingRate)(nil)

type fastReflection_FundingRate FundingRate

func (x *FundingRate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FundingRate)(x)
}

func (x *FundingRate) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_clob_market_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FundingRate_messageType fastReflection_FundingRate_messageType
var _ protoreflect.MessageType = fastReflection_FundingRate_messageType{}

type fastReflection_FundingRate_messageType struct{}

func (x fastReflection_FundingRate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FundingRate)(nil)
}
func (x fastReflection_FundingRate_messageType) New() protoreflect.Message {
	return new(fastReflection_FundingRate)
}
func (x fastReflection_FundingRate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FundingRate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FundingRate) Descriptor() protoreflect.MessageDescriptor {
	return md_FundingRate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FundingRate) Type() protoreflect.MessageType {
	return _fastReflection_FundingRate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FundingRate) New() protoreflect.Message {
	return new(fastReflection_FundingRate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FundingRate) Interface() protoreflect.ProtoMessage {
	return (*FundingRate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FundingRate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.MarketId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MarketId)
		if !f(fd_FundingRate_market_id, value) {
			return
		}
	}
	if x.Block != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Block)
		if !f(fd_FundingRate_block, value) {
			return
		}
	}
	if x.Rate != "" {
		value := protoreflect.ValueOfString(x.Rate)
		if !f(fd_FundingRate_rate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FundingRate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.clob.FundingRate.market_id":
		return x.MarketId != uint64(0)
	case "elys.clob.FundingRate.block":
		return x.Block != uint64(0)
	case "elys.clob.FundingRate.rate":
		return x.Rate != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.clob.FundingRate.market_id":
		x.MarketId = uint64(0)
	case "elys.clob.FundingRate.block":
		x.Block = uint64(0)
	case "elys.clob.FundingRate.rate":
		x.Rate = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FundingRate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.clob.FundingRate.market_id":
		value := x.MarketId
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.FundingRate.block":
		value := x.Block
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.FundingRate.rate":
		value := x.Rate
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.clob.FundingRate.market_id":
		x.MarketId = value.Uint()
	case "elys.clob.FundingRate.block":
		x.Block = value.Uint()
	case "elys.clob.FundingRate.rate":
		x.Rate = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.FundingRate.market_id":
		panic(fmt.Errorf("field market_id of message elys.clob.FundingRate is not mutable"))
	case "elys.clob.FundingRate.block":
		panic(fmt.Errorf("field block of message elys.clob.FundingRate is not mutable"))
	case "elys.clob.FundingRate.rate":
		panic(fmt.Errorf("field rate of message elys.clob.FundingRate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FundingRate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.FundingRate.market_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.FundingRate.block":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.FundingRate.rate":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.FundingRate"))
		}
		panic(fmt.Errorf("message elys.clob.FundingRate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FundingRate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.clob.FundingRate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FundingRate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FundingRate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FundingRate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FundingRate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FundingRate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.MarketId != 0 {
			n += 1 + runtime.Sov(uint64(x.MarketId))
		}
		if x.Block != 0 {
			n += 1 + runtime.Sov(uint64(x.Block))
		}
		l = len(x.Rate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FundingRate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Rate) > 0 {
			i -= len(x.Rate)
			copy(dAtA[i:], x.Rate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Rate)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Block != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Block))
			i--
			dAtA[i] = 0x10
		}
		if x.MarketId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MarketId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FundingRate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FundingRate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FundingRate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
				}
				x.MarketId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MarketId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
				}
				x.Block = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Block |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Rate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/clob/market.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PerpetualMarketStatus int32

const (
	PerpetualMarketStatus_MARKET_STATUS_UNSPECIFIED PerpetualMarketStatus = 0
	PerpetualMarketStatus_MARKET_STATUS_ACTIVE      PerpetualMarketStatus = 1
	PerpetualMarketStatus_MARKET_STATUS_PAUSED      PerpetualMarketStatus = 2
	PerpetualMarketStatus_MARKET_STATUS_DEMOLISHED  PerpetualMarketStatus = 3
	PerpetualMarketStatus_MARKET_STATUS_EXPIRED     PerpetualMarketStatus = 4
)

// Enum value maps for PerpetualMarketStatus.
var (
	PerpetualMarketStatus_name = map[int32]string{
		0: "MARKET_STATUS_UNSPECIFIED",
		1: "MARKET_STATUS_ACTIVE",
		2: "MARKET_STATUS_PAUSED",
		3: "MARKET_STATUS_DEMOLISHED",
		4: "MARKET_STATUS_EXPIRED",
	}
	PerpetualMarketStatus_value = map[string]int32{
		"MARKET_STATUS_UNSPECIFIED": 0,
		"MARKET_STATUS_ACTIVE":      1,
		"MARKET_STATUS_PAUSED":      2,
		"MARKET_STATUS_DEMOLISHED":  3,
		"MARKET_STATUS_EXPIRED":     4,
	}
)

func (x PerpetualMarketStatus) Enum() *PerpetualMarketStatus {
	p := new(PerpetualMarketStatus)
	*p = x
	return p
}

func (x PerpetualMarketStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PerpetualMarketStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_elys_clob_market_proto_enumTypes[0].Descriptor()
}

func (PerpetualMarketStatus) Type() protoreflect.EnumType {
	return &file_elys_clob_market_proto_enumTypes[0]
}

func (x PerpetualMarketStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PerpetualMarketStatus.Descriptor instead.
func (PerpetualMarketStatus) EnumDescriptor() ([]byte, []int) {
	return file_elys_clob_market_proto_rawDescGZIP(), []int{0}
}

type PerpetualMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BaseDenom              string `protobuf:"bytes,2,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	QuoteDenom             string `protobuf:"bytes,3,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	InitialMarginRatio     string `protobuf:"bytes,4,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3" json:"initial_margin_ratio,omitempty"`
	MaintenanceMarginRatio string `protobuf:"bytes,5,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3" json:"maintenance_margin_ratio,omitempty"`
	// maker_fee_rate defines the maker fee rate of a derivative market
	MakerFeeRate string `protobuf:"bytes,6,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the taker fee rate of a derivative market
	TakerFeeRate string `protobuf:"bytes,7,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// relayer_fee_share_rate defines the percentage of the transaction fee shared
	// with the relayer in a derivative market
	LiquidationFeeShareRate string `protobuf:"bytes,8,opt,name=liquidation_fee_share_rate,json=liquidationFeeShareRate,proto3" json:"liquidation_fee_share_rate,omitempty"`
	// Status of the market
	Status PerpetualMarketStatus `protobuf:"varint,9,opt,name=status,proto3,enum=elys.clob.PerpetualMarketStatus" json:"status,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price and margin
	// required for orders in the market
	MinPriceTickSize string `protobuf:"bytes,10,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market
	MinQuantityTickSize string `protobuf:"bytes,11,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional string `protobuf:"bytes,12,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	// current market admin
	Admin                   string `protobuf:"bytes,13,opt,name=admin,proto3" json:"admin,omitempty"`
	TotalOpen               string `protobuf:"bytes,14,opt,name=total_open,json=totalOpen,proto3" json:"total_open,omitempty"`
	OrderCounter            uint64 `protobuf:"varint,15,opt,name=order_counter,json=orderCounter,proto3" json:"order_counter,omitempty"`
	MaxAbsFundingRate       string `protobuf:"bytes,16,opt,name=max_abs_funding_rate,json=maxAbsFundingRate,proto3" json:"max_abs_funding_rate,omitempty"`
	MaxAbsFundingRateChange string `protobuf:"bytes,17,opt,name=max_abs_funding_rate_change,json=maxAbsFundingRateChange,proto3" json:"max_abs_funding_rate_change,omitempty"`
	TwapPricesWindow        uint64 `protobuf:"varint,18,opt,name=twap_prices_window,json=twapPricesWindow,proto3" json:"twap_prices_window,omitempty"`
}

func (x *PerpetualMarket) Reset() {
	*x = PerpetualMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_clob_market_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerpetualMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualMarket) ProtoMessage() {}

// Deprecated: Use PerpetualMarket.ProtoReflect.Descriptor instead.
func (*PerpetualMarket) Descriptor() ([]byte, []int) {
	return file_elys_clob_market_proto_rawDescGZIP(), []int{0}
}

func (x *PerpetualMarket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PerpetualMarket) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *PerpetualMarket) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *PerpetualMarket) GetInitialMarginRatio() string {
	if x != nil {
		return x.InitialMarginRatio
	}
	return ""
}

func (x *PerpetualMarket) GetMaintenanceMarginRatio() string {
	if x != nil {
		return x.MaintenanceMarginRatio
	}
	return ""
}

func (x *PerpetualMarket) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *PerpetualMarket) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *PerpetualMarket) GetLiquidationFeeShareRate() string {
	if x != nil {
		return x.LiquidationFeeShareRate
	}
	return ""
}

func (x *PerpetualMarket) GetStatus() PerpetualMarketStatus {
	if x != nil {
		return x.Status
	}
	return PerpetualMarketStatus_MARKET_STATUS_UNSPECIFIED
}

func (x *PerpetualMarket) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *PerpetualMarket) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *PerpetualMarket) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *PerpetualMarket) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *PerpetualMarket) GetTotalOpen() string {
	if x != nil {
		return x.TotalOpen
	}
	return ""
}

func (x *PerpetualMarket) GetOrderCounter() uint64 {
	if x != nil {
		return x.OrderCounter
	}
	return 0
}

func (x *PerpetualMarket) GetMaxAbsFundingRate() string {
	if x != nil {
		return x.MaxAbsFundingRate
	}
	return ""
}

func (x *PerpetualMarket) GetMaxAbsFundingRateChange() string {
	if x != nil {
		return x.MaxAbsFundingRateChange
	}
	return ""
}

func (x *PerpetualMarket) GetTwapPricesWindow() uint64 {
	if x != nil {
		return x.TwapPricesWindow
	}
	return 0
}

type TwapPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId          uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Block             uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	AverageTradePrice string `protobuf:"bytes,3,opt,name=average_trade_price,json=averageTradePrice,proto3" json:"average_trade_price,omitempty"`
	TotalVolume       string `protobuf:"bytes,4,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"`
	CumulativePrice   string `protobuf:"bytes,5,opt,name=cumulative_price,json=cumulativePrice,proto3" json:"cumulative_price,omitempty"`
	Timestamp         uint64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TwapPrice) Reset() {
	*x = TwapPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_clob_market_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TwapPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TwapPrice) ProtoMessage() {}

// Deprecated: Use TwapPrice.ProtoReflect.Descriptor instead.
func (*TwapPrice) Descriptor() ([]byte, []int) {
	return file_elys_clob_market_proto_rawDescGZIP(), []int{1}
}

func (x *TwapPrice) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *TwapPrice) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *TwapPrice) GetAverageTradePrice() string {
	if x != nil {
		return x.AverageTradePrice
	}
	return ""
}

func (x *TwapPrice) GetTotalVolume() string {
	if x != nil {
		return x.TotalVolume
	}
	return ""
}

func (x *TwapPrice) GetCumulativePrice() string {
	if x != nil {
		return x.CumulativePrice
	}
	return ""
}

func (x *TwapPrice) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type FundingRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketId uint64 `protobuf:"varint,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Block    uint64 `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
	Rate     string `protobuf:"bytes,3,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *FundingRate) Reset() {
	*x = FundingRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_clob_market_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FundingRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FundingRate) ProtoMessage() {}

// Deprecated: Use FundingRate.ProtoReflect.Descriptor instead.
func (*FundingRate) Descriptor() ([]byte, []int) {
	return file_elys_clob_market_proto_rawDescGZIP(), []int{2}
}

func (x *FundingRate) GetMarketId() uint64 {
	if x != nil {
		return x.MarketId
	}
	return 0
}

func (x *FundingRate) GetBlock() uint64 {
	if x != nil {
		return x.Block
	}
	return 0
}

func (x *FundingRate) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

var File_elys_clob_market_proto protoreflect.FileDescriptor

var file_elys_clob_market_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x62, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x0a, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x63, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x6b, 0x0a,
	0x18, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x16, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x57, 0x0a, 0x0e, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65,
	0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6e, 0x0a, 0x1a,
	0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x17, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x65,
	0x6c, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x62, 0x2e, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x13, 0x6d, 0x69, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x54, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x50, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x62, 0x73, 0x5f, 0x66,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x46, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x5f, 0x61,
	0x62, 0x73, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x17, 0x6d, 0x61, 0x78, 0x41, 0x62, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x77, 0x61, 0x70,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x74, 0x77, 0x61, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xf3, 0x02, 0x0a,
	0x09, 0x54, 0x77, 0x61, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x61, 0x0a,
	0x13, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x61,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x54, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x0f, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x2a, 0xa3, 0x01, 0x0a,
	0x15, 0x50, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4d, 0x4f, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44,
	0x10, 0x04, 0x42, 0x8d, 0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e,
	0x63, 0x6c, 0x6f, 0x62, 0x42, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6c, 0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x62, 0xa2,
	0x02, 0x03, 0x45, 0x43, 0x58, 0xaa, 0x02, 0x09, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x6f,
	0x62, 0xca, 0x02, 0x09, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x43, 0x6c, 0x6f, 0x62, 0xe2, 0x02, 0x15,
	0x45, 0x6c, 0x79, 0x73, 0x5c, 0x43, 0x6c, 0x6f, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0a, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x43, 0x6c,
	0x6f, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_clob_market_proto_rawDescOnce sync.Once
	file_elys_clob_market_proto_rawDescData = file_elys_clob_market_proto_rawDesc
)

func file_elys_clob_market_proto_rawDescGZIP() []byte {
	file_elys_clob_market_proto_rawDescOnce.Do(func() {
		file_elys_clob_market_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_clob_market_proto_rawDescData)
	})
	return file_elys_clob_market_proto_rawDescData
}

var file_elys_clob_market_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_elys_clob_market_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_elys_clob_market_proto_goTypes = []interface{}{
	(PerpetualMarketStatus)(0), // 0: elys.clob.PerpetualMarketStatus
	(*PerpetualMarket)(nil),    // 1: elys.clob.PerpetualMarket
	(*TwapPrice)(nil),          // 2: elys.clob.TwapPrice
	(*FundingRate)(nil),        // 3: elys.clob.FundingRate
}
var file_elys_clob_market_proto_depIdxs = []int32{
	0, // 0: elys.clob.PerpetualMarket.status:type_name -> elys.clob.PerpetualMarketStatus
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_elys_clob_market_proto_init() }
func file_elys_clob_market_proto_init() {
	if File_elys_clob_market_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_clob_market_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerpetualMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_clob_market_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TwapPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_clob_market_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FundingRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_clob_market_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_clob_market_proto_goTypes,
		DependencyIndexes: file_elys_clob_market_proto_depIdxs,
		EnumInfos:         file_elys_clob_market_proto_enumTypes,
		MessageInfos:      file_elys_clob_market_proto_msgTypes,
	}.Build()
	File_elys_clob_market_proto = out.File
	file_elys_clob_market_proto_rawDesc = nil
	file_elys_clob_market_proto_goTypes = nil
	file_elys_clob_market_proto_depIdxs = nil
}
