// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package clob

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_Params_19_list)(nil)

type _Params_19_list struct {
	list *[]string
}

func (x *_Params_19_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Params_19_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfString((*x.list)[i])
}

func (x *_Params_19_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Params_19_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.String()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Params_19_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Params at list field ExchangeAdmins as it is not of Message kind"))
}

func (x *_Params_19_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Params_19_list) NewElement() protoreflect.Value {
	v := ""
	return protoreflect.ValueOfString(v)
}

func (x *_Params_19_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Params                                                   protoreflect.MessageDescriptor
	fd_Params_derivative_market_instant_listing_fee             protoreflect.FieldDescriptor
	fd_Params_default_derivative_maker_fee_rate                 protoreflect.FieldDescriptor
	fd_Params_default_derivative_taker_fee_rate                 protoreflect.FieldDescriptor
	fd_Params_default_initial_margin_ratio                      protoreflect.FieldDescriptor
	fd_Params_default_maintenance_margin_ratio                  protoreflect.FieldDescriptor
	fd_Params_default_funding_interval                          protoreflect.FieldDescriptor
	fd_Params_funding_multiple                                  protoreflect.FieldDescriptor
	fd_Params_relayer_fee_share_rate                            protoreflect.FieldDescriptor
	fd_Params_default_hourly_funding_rate_cap                   protoreflect.FieldDescriptor
	fd_Params_default_hourly_interest_rate                      protoreflect.FieldDescriptor
	fd_Params_max_derivative_order_side_count                   protoreflect.FieldDescriptor
	fd_Params_trading_rewards_vesting_duration                  protoreflect.FieldDescriptor
	fd_Params_liquidator_reward_share_rate                      protoreflect.FieldDescriptor
	fd_Params_derivative_atomic_market_order_fee_multiplier     protoreflect.FieldDescriptor
	fd_Params_minimal_protocol_fee_rate                         protoreflect.FieldDescriptor
	fd_Params_is_instant_derivative_market_launch_enabled       protoreflect.FieldDescriptor
	fd_Params_post_only_mode_height_threshold                   protoreflect.FieldDescriptor
	fd_Params_margin_decrease_price_timestamp_threshold_seconds protoreflect.FieldDescriptor
	fd_Params_exchange_admins                                   protoreflect.FieldDescriptor
	fd_Params_max_sub_accounts                                  protoreflect.FieldDescriptor
)

func init() {
	file_elys_clob_params_proto_init()
	md_Params = File_elys_clob_params_proto.Messages().ByName("Params")
	fd_Params_derivative_market_instant_listing_fee = md_Params.Fields().ByName("derivative_market_instant_listing_fee")
	fd_Params_default_derivative_maker_fee_rate = md_Params.Fields().ByName("default_derivative_maker_fee_rate")
	fd_Params_default_derivative_taker_fee_rate = md_Params.Fields().ByName("default_derivative_taker_fee_rate")
	fd_Params_default_initial_margin_ratio = md_Params.Fields().ByName("default_initial_margin_ratio")
	fd_Params_default_maintenance_margin_ratio = md_Params.Fields().ByName("default_maintenance_margin_ratio")
	fd_Params_default_funding_interval = md_Params.Fields().ByName("default_funding_interval")
	fd_Params_funding_multiple = md_Params.Fields().ByName("funding_multiple")
	fd_Params_relayer_fee_share_rate = md_Params.Fields().ByName("relayer_fee_share_rate")
	fd_Params_default_hourly_funding_rate_cap = md_Params.Fields().ByName("default_hourly_funding_rate_cap")
	fd_Params_default_hourly_interest_rate = md_Params.Fields().ByName("default_hourly_interest_rate")
	fd_Params_max_derivative_order_side_count = md_Params.Fields().ByName("max_derivative_order_side_count")
	fd_Params_trading_rewards_vesting_duration = md_Params.Fields().ByName("trading_rewards_vesting_duration")
	fd_Params_liquidator_reward_share_rate = md_Params.Fields().ByName("liquidator_reward_share_rate")
	fd_Params_derivative_atomic_market_order_fee_multiplier = md_Params.Fields().ByName("derivative_atomic_market_order_fee_multiplier")
	fd_Params_minimal_protocol_fee_rate = md_Params.Fields().ByName("minimal_protocol_fee_rate")
	fd_Params_is_instant_derivative_market_launch_enabled = md_Params.Fields().ByName("is_instant_derivative_market_launch_enabled")
	fd_Params_post_only_mode_height_threshold = md_Params.Fields().ByName("post_only_mode_height_threshold")
	fd_Params_margin_decrease_price_timestamp_threshold_seconds = md_Params.Fields().ByName("margin_decrease_price_timestamp_threshold_seconds")
	fd_Params_exchange_admins = md_Params.Fields().ByName("exchange_admins")
	fd_Params_max_sub_accounts = md_Params.Fields().ByName("max_sub_accounts")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_clob_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.DerivativeMarketInstantListingFee != nil {
		value := protoreflect.ValueOfMessage(x.DerivativeMarketInstantListingFee.ProtoReflect())
		if !f(fd_Params_derivative_market_instant_listing_fee, value) {
			return
		}
	}
	if x.DefaultDerivativeMakerFeeRate != "" {
		value := protoreflect.ValueOfString(x.DefaultDerivativeMakerFeeRate)
		if !f(fd_Params_default_derivative_maker_fee_rate, value) {
			return
		}
	}
	if x.DefaultDerivativeTakerFeeRate != "" {
		value := protoreflect.ValueOfString(x.DefaultDerivativeTakerFeeRate)
		if !f(fd_Params_default_derivative_taker_fee_rate, value) {
			return
		}
	}
	if x.DefaultInitialMarginRatio != "" {
		value := protoreflect.ValueOfString(x.DefaultInitialMarginRatio)
		if !f(fd_Params_default_initial_margin_ratio, value) {
			return
		}
	}
	if x.DefaultMaintenanceMarginRatio != "" {
		value := protoreflect.ValueOfString(x.DefaultMaintenanceMarginRatio)
		if !f(fd_Params_default_maintenance_margin_ratio, value) {
			return
		}
	}
	if x.DefaultFundingInterval != int64(0) {
		value := protoreflect.ValueOfInt64(x.DefaultFundingInterval)
		if !f(fd_Params_default_funding_interval, value) {
			return
		}
	}
	if x.FundingMultiple != int64(0) {
		value := protoreflect.ValueOfInt64(x.FundingMultiple)
		if !f(fd_Params_funding_multiple, value) {
			return
		}
	}
	if x.RelayerFeeShareRate != "" {
		value := protoreflect.ValueOfString(x.RelayerFeeShareRate)
		if !f(fd_Params_relayer_fee_share_rate, value) {
			return
		}
	}
	if x.DefaultHourlyFundingRateCap != "" {
		value := protoreflect.ValueOfString(x.DefaultHourlyFundingRateCap)
		if !f(fd_Params_default_hourly_funding_rate_cap, value) {
			return
		}
	}
	if x.DefaultHourlyInterestRate != "" {
		value := protoreflect.ValueOfString(x.DefaultHourlyInterestRate)
		if !f(fd_Params_default_hourly_interest_rate, value) {
			return
		}
	}
	if x.MaxDerivativeOrderSideCount != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxDerivativeOrderSideCount)
		if !f(fd_Params_max_derivative_order_side_count, value) {
			return
		}
	}
	if x.TradingRewardsVestingDuration != int64(0) {
		value := protoreflect.ValueOfInt64(x.TradingRewardsVestingDuration)
		if !f(fd_Params_trading_rewards_vesting_duration, value) {
			return
		}
	}
	if x.LiquidatorRewardShareRate != "" {
		value := protoreflect.ValueOfString(x.LiquidatorRewardShareRate)
		if !f(fd_Params_liquidator_reward_share_rate, value) {
			return
		}
	}
	if x.DerivativeAtomicMarketOrderFeeMultiplier != "" {
		value := protoreflect.ValueOfString(x.DerivativeAtomicMarketOrderFeeMultiplier)
		if !f(fd_Params_derivative_atomic_market_order_fee_multiplier, value) {
			return
		}
	}
	if x.MinimalProtocolFeeRate != "" {
		value := protoreflect.ValueOfString(x.MinimalProtocolFeeRate)
		if !f(fd_Params_minimal_protocol_fee_rate, value) {
			return
		}
	}
	if x.IsInstantDerivativeMarketLaunchEnabled != false {
		value := protoreflect.ValueOfBool(x.IsInstantDerivativeMarketLaunchEnabled)
		if !f(fd_Params_is_instant_derivative_market_launch_enabled, value) {
			return
		}
	}
	if x.PostOnlyModeHeightThreshold != int64(0) {
		value := protoreflect.ValueOfInt64(x.PostOnlyModeHeightThreshold)
		if !f(fd_Params_post_only_mode_height_threshold, value) {
			return
		}
	}
	if x.MarginDecreasePriceTimestampThresholdSeconds != int64(0) {
		value := protoreflect.ValueOfInt64(x.MarginDecreasePriceTimestampThresholdSeconds)
		if !f(fd_Params_margin_decrease_price_timestamp_threshold_seconds, value) {
			return
		}
	}
	if len(x.ExchangeAdmins) != 0 {
		value := protoreflect.ValueOfList(&_Params_19_list{list: &x.ExchangeAdmins})
		if !f(fd_Params_exchange_admins, value) {
			return
		}
	}
	if x.MaxSubAccounts != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxSubAccounts)
		if !f(fd_Params_max_sub_accounts, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		return x.DerivativeMarketInstantListingFee != nil
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		return x.DefaultDerivativeMakerFeeRate != ""
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		return x.DefaultDerivativeTakerFeeRate != ""
	case "elys.clob.Params.default_initial_margin_ratio":
		return x.DefaultInitialMarginRatio != ""
	case "elys.clob.Params.default_maintenance_margin_ratio":
		return x.DefaultMaintenanceMarginRatio != ""
	case "elys.clob.Params.default_funding_interval":
		return x.DefaultFundingInterval != int64(0)
	case "elys.clob.Params.funding_multiple":
		return x.FundingMultiple != int64(0)
	case "elys.clob.Params.relayer_fee_share_rate":
		return x.RelayerFeeShareRate != ""
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		return x.DefaultHourlyFundingRateCap != ""
	case "elys.clob.Params.default_hourly_interest_rate":
		return x.DefaultHourlyInterestRate != ""
	case "elys.clob.Params.max_derivative_order_side_count":
		return x.MaxDerivativeOrderSideCount != uint64(0)
	case "elys.clob.Params.trading_rewards_vesting_duration":
		return x.TradingRewardsVestingDuration != int64(0)
	case "elys.clob.Params.liquidator_reward_share_rate":
		return x.LiquidatorRewardShareRate != ""
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		return x.DerivativeAtomicMarketOrderFeeMultiplier != ""
	case "elys.clob.Params.minimal_protocol_fee_rate":
		return x.MinimalProtocolFeeRate != ""
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		return x.IsInstantDerivativeMarketLaunchEnabled != false
	case "elys.clob.Params.post_only_mode_height_threshold":
		return x.PostOnlyModeHeightThreshold != int64(0)
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		return x.MarginDecreasePriceTimestampThresholdSeconds != int64(0)
	case "elys.clob.Params.exchange_admins":
		return len(x.ExchangeAdmins) != 0
	case "elys.clob.Params.max_sub_accounts":
		return x.MaxSubAccounts != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		x.DerivativeMarketInstantListingFee = nil
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		x.DefaultDerivativeMakerFeeRate = ""
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		x.DefaultDerivativeTakerFeeRate = ""
	case "elys.clob.Params.default_initial_margin_ratio":
		x.DefaultInitialMarginRatio = ""
	case "elys.clob.Params.default_maintenance_margin_ratio":
		x.DefaultMaintenanceMarginRatio = ""
	case "elys.clob.Params.default_funding_interval":
		x.DefaultFundingInterval = int64(0)
	case "elys.clob.Params.funding_multiple":
		x.FundingMultiple = int64(0)
	case "elys.clob.Params.relayer_fee_share_rate":
		x.RelayerFeeShareRate = ""
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		x.DefaultHourlyFundingRateCap = ""
	case "elys.clob.Params.default_hourly_interest_rate":
		x.DefaultHourlyInterestRate = ""
	case "elys.clob.Params.max_derivative_order_side_count":
		x.MaxDerivativeOrderSideCount = uint64(0)
	case "elys.clob.Params.trading_rewards_vesting_duration":
		x.TradingRewardsVestingDuration = int64(0)
	case "elys.clob.Params.liquidator_reward_share_rate":
		x.LiquidatorRewardShareRate = ""
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		x.DerivativeAtomicMarketOrderFeeMultiplier = ""
	case "elys.clob.Params.minimal_protocol_fee_rate":
		x.MinimalProtocolFeeRate = ""
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		x.IsInstantDerivativeMarketLaunchEnabled = false
	case "elys.clob.Params.post_only_mode_height_threshold":
		x.PostOnlyModeHeightThreshold = int64(0)
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		x.MarginDecreasePriceTimestampThresholdSeconds = int64(0)
	case "elys.clob.Params.exchange_admins":
		x.ExchangeAdmins = nil
	case "elys.clob.Params.max_sub_accounts":
		x.MaxSubAccounts = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		value := x.DerivativeMarketInstantListingFee
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		value := x.DefaultDerivativeMakerFeeRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		value := x.DefaultDerivativeTakerFeeRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_initial_margin_ratio":
		value := x.DefaultInitialMarginRatio
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_maintenance_margin_ratio":
		value := x.DefaultMaintenanceMarginRatio
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_funding_interval":
		value := x.DefaultFundingInterval
		return protoreflect.ValueOfInt64(value)
	case "elys.clob.Params.funding_multiple":
		value := x.FundingMultiple
		return protoreflect.ValueOfInt64(value)
	case "elys.clob.Params.relayer_fee_share_rate":
		value := x.RelayerFeeShareRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		value := x.DefaultHourlyFundingRateCap
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.default_hourly_interest_rate":
		value := x.DefaultHourlyInterestRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.max_derivative_order_side_count":
		value := x.MaxDerivativeOrderSideCount
		return protoreflect.ValueOfUint64(value)
	case "elys.clob.Params.trading_rewards_vesting_duration":
		value := x.TradingRewardsVestingDuration
		return protoreflect.ValueOfInt64(value)
	case "elys.clob.Params.liquidator_reward_share_rate":
		value := x.LiquidatorRewardShareRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		value := x.DerivativeAtomicMarketOrderFeeMultiplier
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.minimal_protocol_fee_rate":
		value := x.MinimalProtocolFeeRate
		return protoreflect.ValueOfString(value)
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		value := x.IsInstantDerivativeMarketLaunchEnabled
		return protoreflect.ValueOfBool(value)
	case "elys.clob.Params.post_only_mode_height_threshold":
		value := x.PostOnlyModeHeightThreshold
		return protoreflect.ValueOfInt64(value)
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		value := x.MarginDecreasePriceTimestampThresholdSeconds
		return protoreflect.ValueOfInt64(value)
	case "elys.clob.Params.exchange_admins":
		if len(x.ExchangeAdmins) == 0 {
			return protoreflect.ValueOfList(&_Params_19_list{})
		}
		listValue := &_Params_19_list{list: &x.ExchangeAdmins}
		return protoreflect.ValueOfList(listValue)
	case "elys.clob.Params.max_sub_accounts":
		value := x.MaxSubAccounts
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		x.DerivativeMarketInstantListingFee = value.Message().Interface().(*v1beta1.Coin)
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		x.DefaultDerivativeMakerFeeRate = value.Interface().(string)
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		x.DefaultDerivativeTakerFeeRate = value.Interface().(string)
	case "elys.clob.Params.default_initial_margin_ratio":
		x.DefaultInitialMarginRatio = value.Interface().(string)
	case "elys.clob.Params.default_maintenance_margin_ratio":
		x.DefaultMaintenanceMarginRatio = value.Interface().(string)
	case "elys.clob.Params.default_funding_interval":
		x.DefaultFundingInterval = value.Int()
	case "elys.clob.Params.funding_multiple":
		x.FundingMultiple = value.Int()
	case "elys.clob.Params.relayer_fee_share_rate":
		x.RelayerFeeShareRate = value.Interface().(string)
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		x.DefaultHourlyFundingRateCap = value.Interface().(string)
	case "elys.clob.Params.default_hourly_interest_rate":
		x.DefaultHourlyInterestRate = value.Interface().(string)
	case "elys.clob.Params.max_derivative_order_side_count":
		x.MaxDerivativeOrderSideCount = value.Uint()
	case "elys.clob.Params.trading_rewards_vesting_duration":
		x.TradingRewardsVestingDuration = value.Int()
	case "elys.clob.Params.liquidator_reward_share_rate":
		x.LiquidatorRewardShareRate = value.Interface().(string)
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		x.DerivativeAtomicMarketOrderFeeMultiplier = value.Interface().(string)
	case "elys.clob.Params.minimal_protocol_fee_rate":
		x.MinimalProtocolFeeRate = value.Interface().(string)
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		x.IsInstantDerivativeMarketLaunchEnabled = value.Bool()
	case "elys.clob.Params.post_only_mode_height_threshold":
		x.PostOnlyModeHeightThreshold = value.Int()
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		x.MarginDecreasePriceTimestampThresholdSeconds = value.Int()
	case "elys.clob.Params.exchange_admins":
		lv := value.List()
		clv := lv.(*_Params_19_list)
		x.ExchangeAdmins = *clv.list
	case "elys.clob.Params.max_sub_accounts":
		x.MaxSubAccounts = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		if x.DerivativeMarketInstantListingFee == nil {
			x.DerivativeMarketInstantListingFee = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.DerivativeMarketInstantListingFee.ProtoReflect())
	case "elys.clob.Params.exchange_admins":
		if x.ExchangeAdmins == nil {
			x.ExchangeAdmins = []string{}
		}
		value := &_Params_19_list{list: &x.ExchangeAdmins}
		return protoreflect.ValueOfList(value)
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		panic(fmt.Errorf("field default_derivative_maker_fee_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		panic(fmt.Errorf("field default_derivative_taker_fee_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_initial_margin_ratio":
		panic(fmt.Errorf("field default_initial_margin_ratio of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_maintenance_margin_ratio":
		panic(fmt.Errorf("field default_maintenance_margin_ratio of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_funding_interval":
		panic(fmt.Errorf("field default_funding_interval of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.funding_multiple":
		panic(fmt.Errorf("field funding_multiple of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.relayer_fee_share_rate":
		panic(fmt.Errorf("field relayer_fee_share_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		panic(fmt.Errorf("field default_hourly_funding_rate_cap of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.default_hourly_interest_rate":
		panic(fmt.Errorf("field default_hourly_interest_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.max_derivative_order_side_count":
		panic(fmt.Errorf("field max_derivative_order_side_count of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.trading_rewards_vesting_duration":
		panic(fmt.Errorf("field trading_rewards_vesting_duration of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.liquidator_reward_share_rate":
		panic(fmt.Errorf("field liquidator_reward_share_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		panic(fmt.Errorf("field derivative_atomic_market_order_fee_multiplier of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.minimal_protocol_fee_rate":
		panic(fmt.Errorf("field minimal_protocol_fee_rate of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		panic(fmt.Errorf("field is_instant_derivative_market_launch_enabled of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.post_only_mode_height_threshold":
		panic(fmt.Errorf("field post_only_mode_height_threshold of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		panic(fmt.Errorf("field margin_decrease_price_timestamp_threshold_seconds of message elys.clob.Params is not mutable"))
	case "elys.clob.Params.max_sub_accounts":
		panic(fmt.Errorf("field max_sub_accounts of message elys.clob.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.clob.Params.derivative_market_instant_listing_fee":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "elys.clob.Params.default_derivative_maker_fee_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_derivative_taker_fee_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_initial_margin_ratio":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_maintenance_margin_ratio":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_funding_interval":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.clob.Params.funding_multiple":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.clob.Params.relayer_fee_share_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_hourly_funding_rate_cap":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.default_hourly_interest_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.max_derivative_order_side_count":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.clob.Params.trading_rewards_vesting_duration":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.clob.Params.liquidator_reward_share_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.derivative_atomic_market_order_fee_multiplier":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.minimal_protocol_fee_rate":
		return protoreflect.ValueOfString("")
	case "elys.clob.Params.is_instant_derivative_market_launch_enabled":
		return protoreflect.ValueOfBool(false)
	case "elys.clob.Params.post_only_mode_height_threshold":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.clob.Params.margin_decrease_price_timestamp_threshold_seconds":
		return protoreflect.ValueOfInt64(int64(0))
	case "elys.clob.Params.exchange_admins":
		list := []string{}
		return protoreflect.ValueOfList(&_Params_19_list{list: &list})
	case "elys.clob.Params.max_sub_accounts":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.clob.Params"))
		}
		panic(fmt.Errorf("message elys.clob.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.clob.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.DerivativeMarketInstantListingFee != nil {
			l = options.Size(x.DerivativeMarketInstantListingFee)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultDerivativeMakerFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultDerivativeTakerFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultInitialMarginRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultMaintenanceMarginRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DefaultFundingInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultFundingInterval))
		}
		if x.FundingMultiple != 0 {
			n += 1 + runtime.Sov(uint64(x.FundingMultiple))
		}
		l = len(x.RelayerFeeShareRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultHourlyFundingRateCap)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DefaultHourlyInterestRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxDerivativeOrderSideCount != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxDerivativeOrderSideCount))
		}
		if x.TradingRewardsVestingDuration != 0 {
			n += 1 + runtime.Sov(uint64(x.TradingRewardsVestingDuration))
		}
		l = len(x.LiquidatorRewardShareRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DerivativeAtomicMarketOrderFeeMultiplier)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinimalProtocolFeeRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.IsInstantDerivativeMarketLaunchEnabled {
			n += 3
		}
		if x.PostOnlyModeHeightThreshold != 0 {
			n += 2 + runtime.Sov(uint64(x.PostOnlyModeHeightThreshold))
		}
		if x.MarginDecreasePriceTimestampThresholdSeconds != 0 {
			n += 2 + runtime.Sov(uint64(x.MarginDecreasePriceTimestampThresholdSeconds))
		}
		if len(x.ExchangeAdmins) > 0 {
			for _, s := range x.ExchangeAdmins {
				l = len(s)
				n += 2 + l + runtime.Sov(uint64(l))
			}
		}
		if x.MaxSubAccounts != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxSubAccounts))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxSubAccounts != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxSubAccounts))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if len(x.ExchangeAdmins) > 0 {
			for iNdEx := len(x.ExchangeAdmins) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ExchangeAdmins[iNdEx])
				copy(dAtA[i:], x.ExchangeAdmins[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExchangeAdmins[iNdEx])))
				i--
				dAtA[i] = 0x1
				i--
				dAtA[i] = 0x9a
			}
		}
		if x.MarginDecreasePriceTimestampThresholdSeconds != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MarginDecreasePriceTimestampThresholdSeconds))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.PostOnlyModeHeightThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PostOnlyModeHeightThreshold))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.IsInstantDerivativeMarketLaunchEnabled {
			i--
			if x.IsInstantDerivativeMarketLaunchEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if len(x.MinimalProtocolFeeRate) > 0 {
			i -= len(x.MinimalProtocolFeeRate)
			copy(dAtA[i:], x.MinimalProtocolFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinimalProtocolFeeRate)))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.DerivativeAtomicMarketOrderFeeMultiplier) > 0 {
			i -= len(x.DerivativeAtomicMarketOrderFeeMultiplier)
			copy(dAtA[i:], x.DerivativeAtomicMarketOrderFeeMultiplier)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DerivativeAtomicMarketOrderFeeMultiplier)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.LiquidatorRewardShareRate) > 0 {
			i -= len(x.LiquidatorRewardShareRate)
			copy(dAtA[i:], x.LiquidatorRewardShareRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiquidatorRewardShareRate)))
			i--
			dAtA[i] = 0x6a
		}
		if x.TradingRewardsVestingDuration != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TradingRewardsVestingDuration))
			i--
			dAtA[i] = 0x60
		}
		if x.MaxDerivativeOrderSideCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxDerivativeOrderSideCount))
			i--
			dAtA[i] = 0x58
		}
		if len(x.DefaultHourlyInterestRate) > 0 {
			i -= len(x.DefaultHourlyInterestRate)
			copy(dAtA[i:], x.DefaultHourlyInterestRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultHourlyInterestRate)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.DefaultHourlyFundingRateCap) > 0 {
			i -= len(x.DefaultHourlyFundingRateCap)
			copy(dAtA[i:], x.DefaultHourlyFundingRateCap)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultHourlyFundingRateCap)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.RelayerFeeShareRate) > 0 {
			i -= len(x.RelayerFeeShareRate)
			copy(dAtA[i:], x.RelayerFeeShareRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RelayerFeeShareRate)))
			i--
			dAtA[i] = 0x42
		}
		if x.FundingMultiple != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FundingMultiple))
			i--
			dAtA[i] = 0x38
		}
		if x.DefaultFundingInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultFundingInterval))
			i--
			dAtA[i] = 0x30
		}
		if len(x.DefaultMaintenanceMarginRatio) > 0 {
			i -= len(x.DefaultMaintenanceMarginRatio)
			copy(dAtA[i:], x.DefaultMaintenanceMarginRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultMaintenanceMarginRatio)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.DefaultInitialMarginRatio) > 0 {
			i -= len(x.DefaultInitialMarginRatio)
			copy(dAtA[i:], x.DefaultInitialMarginRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultInitialMarginRatio)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DefaultDerivativeTakerFeeRate) > 0 {
			i -= len(x.DefaultDerivativeTakerFeeRate)
			copy(dAtA[i:], x.DefaultDerivativeTakerFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultDerivativeTakerFeeRate)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.DefaultDerivativeMakerFeeRate) > 0 {
			i -= len(x.DefaultDerivativeMakerFeeRate)
			copy(dAtA[i:], x.DefaultDerivativeMakerFeeRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DefaultDerivativeMakerFeeRate)))
			i--
			dAtA[i] = 0x12
		}
		if x.DerivativeMarketInstantListingFee != nil {
			encoded, err := options.Marshal(x.DerivativeMarketInstantListingFee)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DerivativeMarketInstantListingFee", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DerivativeMarketInstantListingFee == nil {
					x.DerivativeMarketInstantListingFee = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DerivativeMarketInstantListingFee); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeMakerFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultDerivativeMakerFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultDerivativeTakerFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultDerivativeTakerFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultInitialMarginRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultInitialMarginRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultMaintenanceMarginRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultMaintenanceMarginRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultFundingInterval", wireType)
				}
				x.DefaultFundingInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultFundingInterval |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FundingMultiple", wireType)
				}
				x.FundingMultiple = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FundingMultiple |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RelayerFeeShareRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RelayerFeeShareRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyFundingRateCap", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultHourlyFundingRateCap = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultHourlyInterestRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DefaultHourlyInterestRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDerivativeOrderSideCount", wireType)
				}
				x.MaxDerivativeOrderSideCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxDerivativeOrderSideCount |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradingRewardsVestingDuration", wireType)
				}
				x.TradingRewardsVestingDuration = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TradingRewardsVestingDuration |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidatorRewardShareRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidatorRewardShareRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DerivativeAtomicMarketOrderFeeMultiplier", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DerivativeAtomicMarketOrderFeeMultiplier = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinimalProtocolFeeRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinimalProtocolFeeRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsInstantDerivativeMarketLaunchEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsInstantDerivativeMarketLaunchEnabled = bool(v != 0)
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PostOnlyModeHeightThreshold", wireType)
				}
				x.PostOnlyModeHeightThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PostOnlyModeHeightThreshold |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MarginDecreasePriceTimestampThresholdSeconds", wireType)
				}
				x.MarginDecreasePriceTimestampThresholdSeconds = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MarginDecreasePriceTimestampThresholdSeconds |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExchangeAdmins", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExchangeAdmins = append(x.ExchangeAdmins, string(dAtA[iNdEx:postIndex]))
				iNdEx = postIndex
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSubAccounts", wireType)
				}
				x.MaxSubAccounts = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxSubAccounts |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/clob/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// derivative_market_instant_listing_fee defines the expedited fee
	// required to create a derivative market by bypassing governance
	DerivativeMarketInstantListingFee *v1beta1.Coin `protobuf:"bytes,1,opt,name=derivative_market_instant_listing_fee,json=derivativeMarketInstantListingFee,proto3" json:"derivative_market_instant_listing_fee,omitempty"`
	// default_derivative_maker_fee defines the default exchange trade fee for
	// makers on a new derivative market
	DefaultDerivativeMakerFeeRate string `protobuf:"bytes,2,opt,name=default_derivative_maker_fee_rate,json=defaultDerivativeMakerFeeRate,proto3" json:"default_derivative_maker_fee_rate,omitempty"`
	// default_derivative_taker_fee defines the default exchange trade fee for
	// takers on a new derivative market
	DefaultDerivativeTakerFeeRate string `protobuf:"bytes,3,opt,name=default_derivative_taker_fee_rate,json=defaultDerivativeTakerFeeRate,proto3" json:"default_derivative_taker_fee_rate,omitempty"`
	// default_initial_margin_ratio defines the default initial margin ratio on a
	// new derivative market
	DefaultInitialMarginRatio string `protobuf:"bytes,4,opt,name=default_initial_margin_ratio,json=defaultInitialMarginRatio,proto3" json:"default_initial_margin_ratio,omitempty"`
	// default_maintenance_margin_ratio defines the default maintenance margin
	// ratio on a new derivative market
	DefaultMaintenanceMarginRatio string `protobuf:"bytes,5,opt,name=default_maintenance_margin_ratio,json=defaultMaintenanceMarginRatio,proto3" json:"default_maintenance_margin_ratio,omitempty"`
	// default_funding_interval defines the default funding interval on a
	// derivative market
	DefaultFundingInterval int64 `protobuf:"varint,6,opt,name=default_funding_interval,json=defaultFundingInterval,proto3" json:"default_funding_interval,omitempty"`
	// funding_multiple defines the timestamp multiple that the funding timestamp
	// should be a multiple of
	FundingMultiple int64 `protobuf:"varint,7,opt,name=funding_multiple,json=fundingMultiple,proto3" json:"funding_multiple,omitempty"`
	// relayer_fee_share_rate defines the trade fee share percentage that goes to
	// relayers
	RelayerFeeShareRate string `protobuf:"bytes,8,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3" json:"relayer_fee_share_rate,omitempty"`
	// default_hourly_funding_rate_cap defines the default maximum absolute value
	// of the hourly funding rate
	DefaultHourlyFundingRateCap string `protobuf:"bytes,9,opt,name=default_hourly_funding_rate_cap,json=defaultHourlyFundingRateCap,proto3" json:"default_hourly_funding_rate_cap,omitempty"`
	// hourly_interest_rate defines the hourly interest rate
	DefaultHourlyInterestRate string `protobuf:"bytes,10,opt,name=default_hourly_interest_rate,json=defaultHourlyInterestRate,proto3" json:"default_hourly_interest_rate,omitempty"`
	// max_derivative_order_side_count defines the maximum number of derivative
	// active orders a subaccount can have for a given orderbook side
	MaxDerivativeOrderSideCount uint64 `protobuf:"varint,11,opt,name=max_derivative_order_side_count,json=maxDerivativeOrderSideCount,proto3" json:"max_derivative_order_side_count,omitempty"`
	// the trading_rewards_vesting_duration defines the vesting times for trading
	// rewards
	TradingRewardsVestingDuration int64 `protobuf:"varint,12,opt,name=trading_rewards_vesting_duration,json=tradingRewardsVestingDuration,proto3" json:"trading_rewards_vesting_duration,omitempty"`
	// liquidator_reward_share_rate defines the ratio of the split of the surplus
	// collateral that goes to the liquidator
	LiquidatorRewardShareRate string `protobuf:"bytes,13,opt,name=liquidator_reward_share_rate,json=liquidatorRewardShareRate,proto3" json:"liquidator_reward_share_rate,omitempty"`
	// derivative_atomic_market_order_fee_multiplier defines the default
	// multiplier for executing atomic market orders in derivative markets
	DerivativeAtomicMarketOrderFeeMultiplier string `protobuf:"bytes,14,opt,name=derivative_atomic_market_order_fee_multiplier,json=derivativeAtomicMarketOrderFeeMultiplier,proto3" json:"derivative_atomic_market_order_fee_multiplier,omitempty"`
	// minimal_protocol_fee_rate defines the minimal protocol fee rate
	MinimalProtocolFeeRate string `protobuf:"bytes,15,opt,name=minimal_protocol_fee_rate,json=minimalProtocolFeeRate,proto3" json:"minimal_protocol_fee_rate,omitempty"`
	// is_instant_derivative_market_launch_enabled defines whether instant
	// derivative market launch is enabled
	IsInstantDerivativeMarketLaunchEnabled bool  `protobuf:"varint,16,opt,name=is_instant_derivative_market_launch_enabled,json=isInstantDerivativeMarketLaunchEnabled,proto3" json:"is_instant_derivative_market_launch_enabled,omitempty"`
	PostOnlyModeHeightThreshold            int64 `protobuf:"varint,17,opt,name=post_only_mode_height_threshold,json=postOnlyModeHeightThreshold,proto3" json:"post_only_mode_height_threshold,omitempty"`
	// Maximum time in seconds since the last mark price update to allow a
	// decrease in margin
	MarginDecreasePriceTimestampThresholdSeconds int64 `protobuf:"varint,18,opt,name=margin_decrease_price_timestamp_threshold_seconds,json=marginDecreasePriceTimestampThresholdSeconds,proto3" json:"margin_decrease_price_timestamp_threshold_seconds,omitempty"`
	// List of addresses that are allowed to perform exchange admin operations
	ExchangeAdmins []string `protobuf:"bytes,19,rep,name=exchange_admins,json=exchangeAdmins,proto3" json:"exchange_admins,omitempty"`
	MaxSubAccounts uint64   `protobuf:"varint,20,opt,name=max_sub_accounts,json=maxSubAccounts,proto3" json:"max_sub_accounts,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_clob_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_elys_clob_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetDerivativeMarketInstantListingFee() *v1beta1.Coin {
	if x != nil {
		return x.DerivativeMarketInstantListingFee
	}
	return nil
}

func (x *Params) GetDefaultDerivativeMakerFeeRate() string {
	if x != nil {
		return x.DefaultDerivativeMakerFeeRate
	}
	return ""
}

func (x *Params) GetDefaultDerivativeTakerFeeRate() string {
	if x != nil {
		return x.DefaultDerivativeTakerFeeRate
	}
	return ""
}

func (x *Params) GetDefaultInitialMarginRatio() string {
	if x != nil {
		return x.DefaultInitialMarginRatio
	}
	return ""
}

func (x *Params) GetDefaultMaintenanceMarginRatio() string {
	if x != nil {
		return x.DefaultMaintenanceMarginRatio
	}
	return ""
}

func (x *Params) GetDefaultFundingInterval() int64 {
	if x != nil {
		return x.DefaultFundingInterval
	}
	return 0
}

func (x *Params) GetFundingMultiple() int64 {
	if x != nil {
		return x.FundingMultiple
	}
	return 0
}

func (x *Params) GetRelayerFeeShareRate() string {
	if x != nil {
		return x.RelayerFeeShareRate
	}
	return ""
}

func (x *Params) GetDefaultHourlyFundingRateCap() string {
	if x != nil {
		return x.DefaultHourlyFundingRateCap
	}
	return ""
}

func (x *Params) GetDefaultHourlyInterestRate() string {
	if x != nil {
		return x.DefaultHourlyInterestRate
	}
	return ""
}

func (x *Params) GetMaxDerivativeOrderSideCount() uint64 {
	if x != nil {
		return x.MaxDerivativeOrderSideCount
	}
	return 0
}

func (x *Params) GetTradingRewardsVestingDuration() int64 {
	if x != nil {
		return x.TradingRewardsVestingDuration
	}
	return 0
}

func (x *Params) GetLiquidatorRewardShareRate() string {
	if x != nil {
		return x.LiquidatorRewardShareRate
	}
	return ""
}

func (x *Params) GetDerivativeAtomicMarketOrderFeeMultiplier() string {
	if x != nil {
		return x.DerivativeAtomicMarketOrderFeeMultiplier
	}
	return ""
}

func (x *Params) GetMinimalProtocolFeeRate() string {
	if x != nil {
		return x.MinimalProtocolFeeRate
	}
	return ""
}

func (x *Params) GetIsInstantDerivativeMarketLaunchEnabled() bool {
	if x != nil {
		return x.IsInstantDerivativeMarketLaunchEnabled
	}
	return false
}

func (x *Params) GetPostOnlyModeHeightThreshold() int64 {
	if x != nil {
		return x.PostOnlyModeHeightThreshold
	}
	return 0
}

func (x *Params) GetMarginDecreasePriceTimestampThresholdSeconds() int64 {
	if x != nil {
		return x.MarginDecreasePriceTimestampThresholdSeconds
	}
	return 0
}

func (x *Params) GetExchangeAdmins() []string {
	if x != nil {
		return x.ExchangeAdmins
	}
	return nil
}

func (x *Params) GetMaxSubAccounts() uint64 {
	if x != nil {
		return x.MaxSubAccounts
	}
	return 0
}

var File_elys_clob_params_proto protoreflect.FileDescriptor

var file_elys_clob_params_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x62, 0x2f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x63,
	0x6c, 0x6f, 0x62, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x0d, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x71, 0x0a, 0x25, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62,
	0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52,
	0x21, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x65, 0x65, 0x12, 0x75, 0x0a, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66,
	0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x6b,
	0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x75, 0x0a, 0x21, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x6b, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x5e, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x12, 0x66, 0x0a, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x16, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x65, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x63, 0x0a, 0x1f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x6f, 0x75,
	0x72, 0x6c, 0x79, 0x5f, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x63, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x12, 0x5e, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x19, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1b, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x20,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x1c, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x19, 0x6c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x7e, 0x0a, 0x2d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x28, 0x64, 0x65, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x58, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x5b, 0x0a, 0x2b, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x1f,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x70, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x67, 0x0a, 0x31, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x2c, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6d, 0x61, 0x78, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x8d,
	0x01, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x63, 0x6c, 0x6f, 0x62,
	0x42, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6c, 0x79, 0x73,
	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x63, 0x6c, 0x6f, 0x62, 0xa2, 0x02, 0x03, 0x45, 0x43,
	0x58, 0xaa, 0x02, 0x09, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x62, 0xca, 0x02, 0x09,
	0x45, 0x6c, 0x79, 0x73, 0x5c, 0x43, 0x6c, 0x6f, 0x62, 0xe2, 0x02, 0x15, 0x45, 0x6c, 0x79, 0x73,
	0x5c, 0x43, 0x6c, 0x6f, 0x62, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0a, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_clob_params_proto_rawDescOnce sync.Once
	file_elys_clob_params_proto_rawDescData = file_elys_clob_params_proto_rawDesc
)

func file_elys_clob_params_proto_rawDescGZIP() []byte {
	file_elys_clob_params_proto_rawDescOnce.Do(func() {
		file_elys_clob_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_clob_params_proto_rawDescData)
	})
	return file_elys_clob_params_proto_rawDescData
}

var file_elys_clob_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_elys_clob_params_proto_goTypes = []interface{}{
	(*Params)(nil),       // 0: elys.clob.Params
	(*v1beta1.Coin)(nil), // 1: cosmos.base.v1beta1.Coin
}
var file_elys_clob_params_proto_depIdxs = []int32{
	1, // 0: elys.clob.Params.derivative_market_instant_listing_fee:type_name -> cosmos.base.v1beta1.Coin
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_elys_clob_params_proto_init() }
func file_elys_clob_params_proto_init() {
	if File_elys_clob_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_elys_clob_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_clob_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_clob_params_proto_goTypes,
		DependencyIndexes: file_elys_clob_params_proto_depIdxs,
		MessageInfos:      file_elys_clob_params_proto_msgTypes,
	}.Build()
	File_elys_clob_params_proto = out.File
	file_elys_clob_params_proto_rawDesc = nil
	file_elys_clob_params_proto_goTypes = nil
	file_elys_clob_params_proto_depIdxs = nil
}
