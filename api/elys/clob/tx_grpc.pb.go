// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package clob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	CreatePerpetualMarket(ctx context.Context, in *MsgCreatPerpetualMarket, opts ...grpc.CallOption) (*MsgCreatPerpetualMarketResponse, error)
	PlaceLimitOrder(ctx context.Context, in *MsgPlaceLimitOrder, opts ...grpc.CallOption) (*MsgPlaceLimitOrderResponse, error)
	PlaceMarketOrder(ctx context.Context, in *MsgPlaceMarketOrder, opts ...grpc.CallOption) (*MsgPlaceMarketOrderResponse, error)
	LiquidatePositions(ctx context.Context, in *MsgLiquidatePositions, opts ...grpc.CallOption) (*MsgLiquidatePositionsResponse, error)
	MatchAndExecuteOrders(ctx context.Context, in *MsgMatchAndExecuteOrders, opts ...grpc.CallOption) (*MsgMatchAndExecuteOrdersResponse, error)
	ExecuteMatchedOrders(ctx context.Context, in *MsgExecuteMatchedOrders, opts ...grpc.CallOption) (*MsgExecuteMatchedOrdersResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetualMarket(ctx context.Context, in *MsgCreatPerpetualMarket, opts ...grpc.CallOption) (*MsgCreatPerpetualMarketResponse, error) {
	out := new(MsgCreatPerpetualMarketResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/CreatePerpetualMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceLimitOrder(ctx context.Context, in *MsgPlaceLimitOrder, opts ...grpc.CallOption) (*MsgPlaceLimitOrderResponse, error) {
	out := new(MsgPlaceLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/PlaceLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PlaceMarketOrder(ctx context.Context, in *MsgPlaceMarketOrder, opts ...grpc.CallOption) (*MsgPlaceMarketOrderResponse, error) {
	out := new(MsgPlaceMarketOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/PlaceMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LiquidatePositions(ctx context.Context, in *MsgLiquidatePositions, opts ...grpc.CallOption) (*MsgLiquidatePositionsResponse, error) {
	out := new(MsgLiquidatePositionsResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/LiquidatePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MatchAndExecuteOrders(ctx context.Context, in *MsgMatchAndExecuteOrders, opts ...grpc.CallOption) (*MsgMatchAndExecuteOrdersResponse, error) {
	out := new(MsgMatchAndExecuteOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/MatchAndExecuteOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteMatchedOrders(ctx context.Context, in *MsgExecuteMatchedOrders, opts ...grpc.CallOption) (*MsgExecuteMatchedOrdersResponse, error) {
	out := new(MsgExecuteMatchedOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.clob.Msg/ExecuteMatchedOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	CreatePerpetualMarket(context.Context, *MsgCreatPerpetualMarket) (*MsgCreatPerpetualMarketResponse, error)
	PlaceLimitOrder(context.Context, *MsgPlaceLimitOrder) (*MsgPlaceLimitOrderResponse, error)
	PlaceMarketOrder(context.Context, *MsgPlaceMarketOrder) (*MsgPlaceMarketOrderResponse, error)
	LiquidatePositions(context.Context, *MsgLiquidatePositions) (*MsgLiquidatePositionsResponse, error)
	MatchAndExecuteOrders(context.Context, *MsgMatchAndExecuteOrders) (*MsgMatchAndExecuteOrdersResponse, error)
	ExecuteMatchedOrders(context.Context, *MsgExecuteMatchedOrders) (*MsgExecuteMatchedOrdersResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedMsgServer) Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedMsgServer) CreatePerpetualMarket(context.Context, *MsgCreatPerpetualMarket) (*MsgCreatPerpetualMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetualMarket not implemented")
}
func (UnimplementedMsgServer) PlaceLimitOrder(context.Context, *MsgPlaceLimitOrder) (*MsgPlaceLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceLimitOrder not implemented")
}
func (UnimplementedMsgServer) PlaceMarketOrder(context.Context, *MsgPlaceMarketOrder) (*MsgPlaceMarketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceMarketOrder not implemented")
}
func (UnimplementedMsgServer) LiquidatePositions(context.Context, *MsgLiquidatePositions) (*MsgLiquidatePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidatePositions not implemented")
}
func (UnimplementedMsgServer) MatchAndExecuteOrders(context.Context, *MsgMatchAndExecuteOrders) (*MsgMatchAndExecuteOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MatchAndExecuteOrders not implemented")
}
func (UnimplementedMsgServer) ExecuteMatchedOrders(context.Context, *MsgExecuteMatchedOrders) (*MsgExecuteMatchedOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteMatchedOrders not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetualMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatPerpetualMarket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetualMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/CreatePerpetualMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetualMarket(ctx, req.(*MsgCreatPerpetualMarket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceLimitOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/PlaceLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceLimitOrder(ctx, req.(*MsgPlaceLimitOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PlaceMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPlaceMarketOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PlaceMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/PlaceMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PlaceMarketOrder(ctx, req.(*MsgPlaceMarketOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LiquidatePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidatePositions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidatePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/LiquidatePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidatePositions(ctx, req.(*MsgLiquidatePositions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MatchAndExecuteOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMatchAndExecuteOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MatchAndExecuteOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/MatchAndExecuteOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MatchAndExecuteOrders(ctx, req.(*MsgMatchAndExecuteOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteMatchedOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteMatchedOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteMatchedOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.clob.Msg/ExecuteMatchedOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteMatchedOrders(ctx, req.(*MsgExecuteMatchedOrders))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.clob.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "CreatePerpetualMarket",
			Handler:    _Msg_CreatePerpetualMarket_Handler,
		},
		{
			MethodName: "PlaceLimitOrder",
			Handler:    _Msg_PlaceLimitOrder_Handler,
		},
		{
			MethodName: "PlaceMarketOrder",
			Handler:    _Msg_PlaceMarketOrder_Handler,
		},
		{
			MethodName: "LiquidatePositions",
			Handler:    _Msg_LiquidatePositions_Handler,
		},
		{
			MethodName: "MatchAndExecuteOrders",
			Handler:    _Msg_MatchAndExecuteOrders_Handler,
		},
		{
			MethodName: "ExecuteMatchedOrders",
			Handler:    _Msg_ExecuteMatchedOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/clob/tx.proto",
}
