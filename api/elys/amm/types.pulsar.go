// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package amm

import (
	v1beta1 "cosmossdk.io/api/cosmos/base/query/v1beta1"
	v1beta11 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_QueryEarnPoolRequest_1_list)(nil)

type _QueryEarnPoolRequest_1_list struct {
	list *[]uint64
}

func (x *_QueryEarnPoolRequest_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryEarnPoolRequest_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_QueryEarnPoolRequest_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_QueryEarnPoolRequest_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryEarnPoolRequest_1_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message QueryEarnPoolRequest at list field PoolIds as it is not of Message kind"))
}

func (x *_QueryEarnPoolRequest_1_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_QueryEarnPoolRequest_1_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_QueryEarnPoolRequest_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryEarnPoolRequest             protoreflect.MessageDescriptor
	fd_QueryEarnPoolRequest_pool_ids    protoreflect.FieldDescriptor
	fd_QueryEarnPoolRequest_filter_type protoreflect.FieldDescriptor
	fd_QueryEarnPoolRequest_pagination  protoreflect.FieldDescriptor
)

func init() {
	file_elys_amm_types_proto_init()
	md_QueryEarnPoolRequest = File_elys_amm_types_proto.Messages().ByName("QueryEarnPoolRequest")
	fd_QueryEarnPoolRequest_pool_ids = md_QueryEarnPoolRequest.Fields().ByName("pool_ids")
	fd_QueryEarnPoolRequest_filter_type = md_QueryEarnPoolRequest.Fields().ByName("filter_type")
	fd_QueryEarnPoolRequest_pagination = md_QueryEarnPoolRequest.Fields().ByName("pagination")
}

var _ protoreflect.Message = (*fastReflection_QueryEarnPoolRequest)(nil)

type fastReflection_QueryEarnPoolRequest QueryEarnPoolRequest

func (x *QueryEarnPoolRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryEarnPoolRequest)(x)
}

func (x *QueryEarnPoolRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_amm_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryEarnPoolRequest_messageType fastReflection_QueryEarnPoolRequest_messageType
var _ protoreflect.MessageType = fastReflection_QueryEarnPoolRequest_messageType{}

type fastReflection_QueryEarnPoolRequest_messageType struct{}

func (x fastReflection_QueryEarnPoolRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryEarnPoolRequest)(nil)
}
func (x fastReflection_QueryEarnPoolRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryEarnPoolRequest)
}
func (x fastReflection_QueryEarnPoolRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryEarnPoolRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryEarnPoolRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryEarnPoolRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryEarnPoolRequest) Type() protoreflect.MessageType {
	return _fastReflection_QueryEarnPoolRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryEarnPoolRequest) New() protoreflect.Message {
	return new(fastReflection_QueryEarnPoolRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryEarnPoolRequest) Interface() protoreflect.ProtoMessage {
	return (*QueryEarnPoolRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryEarnPoolRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.PoolIds) != 0 {
		value := protoreflect.ValueOfList(&_QueryEarnPoolRequest_1_list{list: &x.PoolIds})
		if !f(fd_QueryEarnPoolRequest_pool_ids, value) {
			return
		}
	}
	if x.FilterType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.FilterType))
		if !f(fd_QueryEarnPoolRequest_filter_type, value) {
			return
		}
	}
	if x.Pagination != nil {
		value := protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
		if !f(fd_QueryEarnPoolRequest_pagination, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryEarnPoolRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		return len(x.PoolIds) != 0
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		return x.FilterType != 0
	case "elys.amm.QueryEarnPoolRequest.pagination":
		return x.Pagination != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		x.PoolIds = nil
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		x.FilterType = 0
	case "elys.amm.QueryEarnPoolRequest.pagination":
		x.Pagination = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryEarnPoolRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		if len(x.PoolIds) == 0 {
			return protoreflect.ValueOfList(&_QueryEarnPoolRequest_1_list{})
		}
		listValue := &_QueryEarnPoolRequest_1_list{list: &x.PoolIds}
		return protoreflect.ValueOfList(listValue)
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		value := x.FilterType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "elys.amm.QueryEarnPoolRequest.pagination":
		value := x.Pagination
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		lv := value.List()
		clv := lv.(*_QueryEarnPoolRequest_1_list)
		x.PoolIds = *clv.list
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		x.FilterType = (FilterType)(value.Enum())
	case "elys.amm.QueryEarnPoolRequest.pagination":
		x.Pagination = value.Message().Interface().(*v1beta1.PageRequest)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		if x.PoolIds == nil {
			x.PoolIds = []uint64{}
		}
		value := &_QueryEarnPoolRequest_1_list{list: &x.PoolIds}
		return protoreflect.ValueOfList(value)
	case "elys.amm.QueryEarnPoolRequest.pagination":
		if x.Pagination == nil {
			x.Pagination = new(v1beta1.PageRequest)
		}
		return protoreflect.ValueOfMessage(x.Pagination.ProtoReflect())
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		panic(fmt.Errorf("field filter_type of message elys.amm.QueryEarnPoolRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryEarnPoolRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolRequest.pool_ids":
		list := []uint64{}
		return protoreflect.ValueOfList(&_QueryEarnPoolRequest_1_list{list: &list})
	case "elys.amm.QueryEarnPoolRequest.filter_type":
		return protoreflect.ValueOfEnum(0)
	case "elys.amm.QueryEarnPoolRequest.pagination":
		m := new(v1beta1.PageRequest)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolRequest"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryEarnPoolRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.amm.QueryEarnPoolRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryEarnPoolRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryEarnPoolRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryEarnPoolRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryEarnPoolRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.PoolIds) > 0 {
			l = 0
			for _, e := range x.PoolIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.FilterType != 0 {
			n += 1 + runtime.Sov(uint64(x.FilterType))
		}
		if x.Pagination != nil {
			l = options.Size(x.Pagination)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryEarnPoolRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Pagination != nil {
			encoded, err := options.Marshal(x.Pagination)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.FilterType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FilterType))
			i--
			dAtA[i] = 0x10
		}
		if len(x.PoolIds) > 0 {
			var pksize2 int
			for _, num := range x.PoolIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.PoolIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryEarnPoolRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryEarnPoolRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryEarnPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.PoolIds = append(x.PoolIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.PoolIds) == 0 {
						x.PoolIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.PoolIds = append(x.PoolIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FilterType", wireType)
				}
				x.FilterType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FilterType |= FilterType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Pagination == nil {
					x.Pagination = &v1beta1.PageRequest{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pagination); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_EarnPool_2_list)(nil)

type _EarnPool_2_list struct {
	list *[]*PoolAsset
}

func (x *_EarnPool_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EarnPool_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EarnPool_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolAsset)
	(*x.list)[i] = concreteValue
}

func (x *_EarnPool_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PoolAsset)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EarnPool_2_list) AppendMutable() protoreflect.Value {
	v := new(PoolAsset)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EarnPool_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EarnPool_2_list) NewElement() protoreflect.Value {
	v := new(PoolAsset)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EarnPool_2_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_EarnPool_11_list)(nil)

type _EarnPool_11_list struct {
	list *[]*v1beta11.Coin
}

func (x *_EarnPool_11_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_EarnPool_11_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_EarnPool_11_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Coin)
	(*x.list)[i] = concreteValue
}

func (x *_EarnPool_11_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*v1beta11.Coin)
	*x.list = append(*x.list, concreteValue)
}

func (x *_EarnPool_11_list) AppendMutable() protoreflect.Value {
	v := new(v1beta11.Coin)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EarnPool_11_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_EarnPool_11_list) NewElement() protoreflect.Value {
	v := new(v1beta11.Coin)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_EarnPool_11_list) IsValid() bool {
	return x.list != nil
}

var (
	md_EarnPool                protoreflect.MessageDescriptor
	fd_EarnPool_pool_id        protoreflect.FieldDescriptor
	fd_EarnPool_assets         protoreflect.FieldDescriptor
	fd_EarnPool_pool_ratio     protoreflect.FieldDescriptor
	fd_EarnPool_rewards_apr    protoreflect.FieldDescriptor
	fd_EarnPool_borrow_apr     protoreflect.FieldDescriptor
	fd_EarnPool_leverage_lp    protoreflect.FieldDescriptor
	fd_EarnPool_perpetual      protoreflect.FieldDescriptor
	fd_EarnPool_tvl            protoreflect.FieldDescriptor
	fd_EarnPool_lp_token_price protoreflect.FieldDescriptor
	fd_EarnPool_rewards_usd    protoreflect.FieldDescriptor
	fd_EarnPool_reward_coins   protoreflect.FieldDescriptor
	fd_EarnPool_total_shares   protoreflect.FieldDescriptor
	fd_EarnPool_swap_fee       protoreflect.FieldDescriptor
	fd_EarnPool_fee_denom      protoreflect.FieldDescriptor
	fd_EarnPool_use_oracle     protoreflect.FieldDescriptor
	fd_EarnPool_is_leveragelp  protoreflect.FieldDescriptor
)

func init() {
	file_elys_amm_types_proto_init()
	md_EarnPool = File_elys_amm_types_proto.Messages().ByName("EarnPool")
	fd_EarnPool_pool_id = md_EarnPool.Fields().ByName("pool_id")
	fd_EarnPool_assets = md_EarnPool.Fields().ByName("assets")
	fd_EarnPool_pool_ratio = md_EarnPool.Fields().ByName("pool_ratio")
	fd_EarnPool_rewards_apr = md_EarnPool.Fields().ByName("rewards_apr")
	fd_EarnPool_borrow_apr = md_EarnPool.Fields().ByName("borrow_apr")
	fd_EarnPool_leverage_lp = md_EarnPool.Fields().ByName("leverage_lp")
	fd_EarnPool_perpetual = md_EarnPool.Fields().ByName("perpetual")
	fd_EarnPool_tvl = md_EarnPool.Fields().ByName("tvl")
	fd_EarnPool_lp_token_price = md_EarnPool.Fields().ByName("lp_token_price")
	fd_EarnPool_rewards_usd = md_EarnPool.Fields().ByName("rewards_usd")
	fd_EarnPool_reward_coins = md_EarnPool.Fields().ByName("reward_coins")
	fd_EarnPool_total_shares = md_EarnPool.Fields().ByName("total_shares")
	fd_EarnPool_swap_fee = md_EarnPool.Fields().ByName("swap_fee")
	fd_EarnPool_fee_denom = md_EarnPool.Fields().ByName("fee_denom")
	fd_EarnPool_use_oracle = md_EarnPool.Fields().ByName("use_oracle")
	fd_EarnPool_is_leveragelp = md_EarnPool.Fields().ByName("is_leveragelp")
}

var _ protoreflect.Message = (*fastReflection_EarnPool)(nil)

type fastReflection_EarnPool EarnPool

func (x *EarnPool) ProtoReflect() protoreflect.Message {
	return (*fastReflection_EarnPool)(x)
}

func (x *EarnPool) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_amm_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_EarnPool_messageType fastReflection_EarnPool_messageType
var _ protoreflect.MessageType = fastReflection_EarnPool_messageType{}

type fastReflection_EarnPool_messageType struct{}

func (x fastReflection_EarnPool_messageType) Zero() protoreflect.Message {
	return (*fastReflection_EarnPool)(nil)
}
func (x fastReflection_EarnPool_messageType) New() protoreflect.Message {
	return new(fastReflection_EarnPool)
}
func (x fastReflection_EarnPool_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_EarnPool
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_EarnPool) Descriptor() protoreflect.MessageDescriptor {
	return md_EarnPool
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_EarnPool) Type() protoreflect.MessageType {
	return _fastReflection_EarnPool_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_EarnPool) New() protoreflect.Message {
	return new(fastReflection_EarnPool)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_EarnPool) Interface() protoreflect.ProtoMessage {
	return (*EarnPool)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_EarnPool) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_EarnPool_pool_id, value) {
			return
		}
	}
	if len(x.Assets) != 0 {
		value := protoreflect.ValueOfList(&_EarnPool_2_list{list: &x.Assets})
		if !f(fd_EarnPool_assets, value) {
			return
		}
	}
	if x.PoolRatio != "" {
		value := protoreflect.ValueOfString(x.PoolRatio)
		if !f(fd_EarnPool_pool_ratio, value) {
			return
		}
	}
	if x.RewardsApr != "" {
		value := protoreflect.ValueOfString(x.RewardsApr)
		if !f(fd_EarnPool_rewards_apr, value) {
			return
		}
	}
	if x.BorrowApr != "" {
		value := protoreflect.ValueOfString(x.BorrowApr)
		if !f(fd_EarnPool_borrow_apr, value) {
			return
		}
	}
	if x.LeverageLp != "" {
		value := protoreflect.ValueOfString(x.LeverageLp)
		if !f(fd_EarnPool_leverage_lp, value) {
			return
		}
	}
	if x.Perpetual != "" {
		value := protoreflect.ValueOfString(x.Perpetual)
		if !f(fd_EarnPool_perpetual, value) {
			return
		}
	}
	if x.Tvl != "" {
		value := protoreflect.ValueOfString(x.Tvl)
		if !f(fd_EarnPool_tvl, value) {
			return
		}
	}
	if x.LpTokenPrice != "" {
		value := protoreflect.ValueOfString(x.LpTokenPrice)
		if !f(fd_EarnPool_lp_token_price, value) {
			return
		}
	}
	if x.RewardsUsd != "" {
		value := protoreflect.ValueOfString(x.RewardsUsd)
		if !f(fd_EarnPool_rewards_usd, value) {
			return
		}
	}
	if len(x.RewardCoins) != 0 {
		value := protoreflect.ValueOfList(&_EarnPool_11_list{list: &x.RewardCoins})
		if !f(fd_EarnPool_reward_coins, value) {
			return
		}
	}
	if x.TotalShares != nil {
		value := protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
		if !f(fd_EarnPool_total_shares, value) {
			return
		}
	}
	if x.SwapFee != "" {
		value := protoreflect.ValueOfString(x.SwapFee)
		if !f(fd_EarnPool_swap_fee, value) {
			return
		}
	}
	if x.FeeDenom != "" {
		value := protoreflect.ValueOfString(x.FeeDenom)
		if !f(fd_EarnPool_fee_denom, value) {
			return
		}
	}
	if x.UseOracle != false {
		value := protoreflect.ValueOfBool(x.UseOracle)
		if !f(fd_EarnPool_use_oracle, value) {
			return
		}
	}
	if x.IsLeveragelp != false {
		value := protoreflect.ValueOfBool(x.IsLeveragelp)
		if !f(fd_EarnPool_is_leveragelp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_EarnPool) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.amm.EarnPool.pool_id":
		return x.PoolId != uint64(0)
	case "elys.amm.EarnPool.assets":
		return len(x.Assets) != 0
	case "elys.amm.EarnPool.pool_ratio":
		return x.PoolRatio != ""
	case "elys.amm.EarnPool.rewards_apr":
		return x.RewardsApr != ""
	case "elys.amm.EarnPool.borrow_apr":
		return x.BorrowApr != ""
	case "elys.amm.EarnPool.leverage_lp":
		return x.LeverageLp != ""
	case "elys.amm.EarnPool.perpetual":
		return x.Perpetual != ""
	case "elys.amm.EarnPool.tvl":
		return x.Tvl != ""
	case "elys.amm.EarnPool.lp_token_price":
		return x.LpTokenPrice != ""
	case "elys.amm.EarnPool.rewards_usd":
		return x.RewardsUsd != ""
	case "elys.amm.EarnPool.reward_coins":
		return len(x.RewardCoins) != 0
	case "elys.amm.EarnPool.total_shares":
		return x.TotalShares != nil
	case "elys.amm.EarnPool.swap_fee":
		return x.SwapFee != ""
	case "elys.amm.EarnPool.fee_denom":
		return x.FeeDenom != ""
	case "elys.amm.EarnPool.use_oracle":
		return x.UseOracle != false
	case "elys.amm.EarnPool.is_leveragelp":
		return x.IsLeveragelp != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarnPool) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.amm.EarnPool.pool_id":
		x.PoolId = uint64(0)
	case "elys.amm.EarnPool.assets":
		x.Assets = nil
	case "elys.amm.EarnPool.pool_ratio":
		x.PoolRatio = ""
	case "elys.amm.EarnPool.rewards_apr":
		x.RewardsApr = ""
	case "elys.amm.EarnPool.borrow_apr":
		x.BorrowApr = ""
	case "elys.amm.EarnPool.leverage_lp":
		x.LeverageLp = ""
	case "elys.amm.EarnPool.perpetual":
		x.Perpetual = ""
	case "elys.amm.EarnPool.tvl":
		x.Tvl = ""
	case "elys.amm.EarnPool.lp_token_price":
		x.LpTokenPrice = ""
	case "elys.amm.EarnPool.rewards_usd":
		x.RewardsUsd = ""
	case "elys.amm.EarnPool.reward_coins":
		x.RewardCoins = nil
	case "elys.amm.EarnPool.total_shares":
		x.TotalShares = nil
	case "elys.amm.EarnPool.swap_fee":
		x.SwapFee = ""
	case "elys.amm.EarnPool.fee_denom":
		x.FeeDenom = ""
	case "elys.amm.EarnPool.use_oracle":
		x.UseOracle = false
	case "elys.amm.EarnPool.is_leveragelp":
		x.IsLeveragelp = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_EarnPool) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.amm.EarnPool.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "elys.amm.EarnPool.assets":
		if len(x.Assets) == 0 {
			return protoreflect.ValueOfList(&_EarnPool_2_list{})
		}
		listValue := &_EarnPool_2_list{list: &x.Assets}
		return protoreflect.ValueOfList(listValue)
	case "elys.amm.EarnPool.pool_ratio":
		value := x.PoolRatio
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.rewards_apr":
		value := x.RewardsApr
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.borrow_apr":
		value := x.BorrowApr
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.leverage_lp":
		value := x.LeverageLp
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.perpetual":
		value := x.Perpetual
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.tvl":
		value := x.Tvl
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.lp_token_price":
		value := x.LpTokenPrice
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.rewards_usd":
		value := x.RewardsUsd
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.reward_coins":
		if len(x.RewardCoins) == 0 {
			return protoreflect.ValueOfList(&_EarnPool_11_list{})
		}
		listValue := &_EarnPool_11_list{list: &x.RewardCoins}
		return protoreflect.ValueOfList(listValue)
	case "elys.amm.EarnPool.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "elys.amm.EarnPool.swap_fee":
		value := x.SwapFee
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.fee_denom":
		value := x.FeeDenom
		return protoreflect.ValueOfString(value)
	case "elys.amm.EarnPool.use_oracle":
		value := x.UseOracle
		return protoreflect.ValueOfBool(value)
	case "elys.amm.EarnPool.is_leveragelp":
		value := x.IsLeveragelp
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarnPool) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.amm.EarnPool.pool_id":
		x.PoolId = value.Uint()
	case "elys.amm.EarnPool.assets":
		lv := value.List()
		clv := lv.(*_EarnPool_2_list)
		x.Assets = *clv.list
	case "elys.amm.EarnPool.pool_ratio":
		x.PoolRatio = value.Interface().(string)
	case "elys.amm.EarnPool.rewards_apr":
		x.RewardsApr = value.Interface().(string)
	case "elys.amm.EarnPool.borrow_apr":
		x.BorrowApr = value.Interface().(string)
	case "elys.amm.EarnPool.leverage_lp":
		x.LeverageLp = value.Interface().(string)
	case "elys.amm.EarnPool.perpetual":
		x.Perpetual = value.Interface().(string)
	case "elys.amm.EarnPool.tvl":
		x.Tvl = value.Interface().(string)
	case "elys.amm.EarnPool.lp_token_price":
		x.LpTokenPrice = value.Interface().(string)
	case "elys.amm.EarnPool.rewards_usd":
		x.RewardsUsd = value.Interface().(string)
	case "elys.amm.EarnPool.reward_coins":
		lv := value.List()
		clv := lv.(*_EarnPool_11_list)
		x.RewardCoins = *clv.list
	case "elys.amm.EarnPool.total_shares":
		x.TotalShares = value.Message().Interface().(*v1beta11.Coin)
	case "elys.amm.EarnPool.swap_fee":
		x.SwapFee = value.Interface().(string)
	case "elys.amm.EarnPool.fee_denom":
		x.FeeDenom = value.Interface().(string)
	case "elys.amm.EarnPool.use_oracle":
		x.UseOracle = value.Bool()
	case "elys.amm.EarnPool.is_leveragelp":
		x.IsLeveragelp = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarnPool) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.EarnPool.assets":
		if x.Assets == nil {
			x.Assets = []*PoolAsset{}
		}
		value := &_EarnPool_2_list{list: &x.Assets}
		return protoreflect.ValueOfList(value)
	case "elys.amm.EarnPool.reward_coins":
		if x.RewardCoins == nil {
			x.RewardCoins = []*v1beta11.Coin{}
		}
		value := &_EarnPool_11_list{list: &x.RewardCoins}
		return protoreflect.ValueOfList(value)
	case "elys.amm.EarnPool.total_shares":
		if x.TotalShares == nil {
			x.TotalShares = new(v1beta11.Coin)
		}
		return protoreflect.ValueOfMessage(x.TotalShares.ProtoReflect())
	case "elys.amm.EarnPool.pool_id":
		panic(fmt.Errorf("field pool_id of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.pool_ratio":
		panic(fmt.Errorf("field pool_ratio of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.rewards_apr":
		panic(fmt.Errorf("field rewards_apr of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.borrow_apr":
		panic(fmt.Errorf("field borrow_apr of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.leverage_lp":
		panic(fmt.Errorf("field leverage_lp of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.perpetual":
		panic(fmt.Errorf("field perpetual of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.tvl":
		panic(fmt.Errorf("field tvl of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.lp_token_price":
		panic(fmt.Errorf("field lp_token_price of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.rewards_usd":
		panic(fmt.Errorf("field rewards_usd of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.swap_fee":
		panic(fmt.Errorf("field swap_fee of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.fee_denom":
		panic(fmt.Errorf("field fee_denom of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.use_oracle":
		panic(fmt.Errorf("field use_oracle of message elys.amm.EarnPool is not mutable"))
	case "elys.amm.EarnPool.is_leveragelp":
		panic(fmt.Errorf("field is_leveragelp of message elys.amm.EarnPool is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_EarnPool) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.EarnPool.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "elys.amm.EarnPool.assets":
		list := []*PoolAsset{}
		return protoreflect.ValueOfList(&_EarnPool_2_list{list: &list})
	case "elys.amm.EarnPool.pool_ratio":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.rewards_apr":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.borrow_apr":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.leverage_lp":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.perpetual":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.tvl":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.lp_token_price":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.rewards_usd":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.reward_coins":
		list := []*v1beta11.Coin{}
		return protoreflect.ValueOfList(&_EarnPool_11_list{list: &list})
	case "elys.amm.EarnPool.total_shares":
		m := new(v1beta11.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "elys.amm.EarnPool.swap_fee":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.fee_denom":
		return protoreflect.ValueOfString("")
	case "elys.amm.EarnPool.use_oracle":
		return protoreflect.ValueOfBool(false)
	case "elys.amm.EarnPool.is_leveragelp":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.EarnPool"))
		}
		panic(fmt.Errorf("message elys.amm.EarnPool does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_EarnPool) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.amm.EarnPool", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_EarnPool) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_EarnPool) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_EarnPool) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_EarnPool) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*EarnPool)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		if len(x.Assets) > 0 {
			for _, e := range x.Assets {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.PoolRatio)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardsApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BorrowApr)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LeverageLp)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Perpetual)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Tvl)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LpTokenPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardsUsd)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.RewardCoins) > 0 {
			for _, e := range x.RewardCoins {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.TotalShares != nil {
			l = options.Size(x.TotalShares)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SwapFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeeDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UseOracle {
			n += 2
		}
		if x.IsLeveragelp {
			n += 3
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*EarnPool)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.IsLeveragelp {
			i--
			if x.IsLeveragelp {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.UseOracle {
			i--
			if x.UseOracle {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if len(x.FeeDenom) > 0 {
			i -= len(x.FeeDenom)
			copy(dAtA[i:], x.FeeDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeDenom)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.SwapFee) > 0 {
			i -= len(x.SwapFee)
			copy(dAtA[i:], x.SwapFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SwapFee)))
			i--
			dAtA[i] = 0x6a
		}
		if x.TotalShares != nil {
			encoded, err := options.Marshal(x.TotalShares)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.RewardCoins) > 0 {
			for iNdEx := len(x.RewardCoins) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.RewardCoins[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x5a
			}
		}
		if len(x.RewardsUsd) > 0 {
			i -= len(x.RewardsUsd)
			copy(dAtA[i:], x.RewardsUsd)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardsUsd)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.LpTokenPrice) > 0 {
			i -= len(x.LpTokenPrice)
			copy(dAtA[i:], x.LpTokenPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LpTokenPrice)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.Tvl) > 0 {
			i -= len(x.Tvl)
			copy(dAtA[i:], x.Tvl)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Tvl)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Perpetual) > 0 {
			i -= len(x.Perpetual)
			copy(dAtA[i:], x.Perpetual)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Perpetual)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.LeverageLp) > 0 {
			i -= len(x.LeverageLp)
			copy(dAtA[i:], x.LeverageLp)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LeverageLp)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.BorrowApr) > 0 {
			i -= len(x.BorrowApr)
			copy(dAtA[i:], x.BorrowApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BorrowApr)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.RewardsApr) > 0 {
			i -= len(x.RewardsApr)
			copy(dAtA[i:], x.RewardsApr)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardsApr)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.PoolRatio) > 0 {
			i -= len(x.PoolRatio)
			copy(dAtA[i:], x.PoolRatio)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PoolRatio)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Assets) > 0 {
			for iNdEx := len(x.Assets) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Assets[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*EarnPool)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EarnPool: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: EarnPool: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Assets = append(x.Assets, &PoolAsset{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Assets[len(x.Assets)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolRatio", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PoolRatio = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardsApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BorrowApr", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BorrowApr = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LeverageLp", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LeverageLp = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Perpetual", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Perpetual = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tvl", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tvl = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LpTokenPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LpTokenPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsUsd", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardsUsd = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardCoins", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardCoins = append(x.RewardCoins, &v1beta11.Coin{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardCoins[len(x.RewardCoins)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TotalShares == nil {
					x.TotalShares = &v1beta11.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TotalShares); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UseOracle", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.UseOracle = bool(v != 0)
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IsLeveragelp", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.IsLeveragelp = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_QueryEarnPoolResponse_1_list)(nil)

type _QueryEarnPoolResponse_1_list struct {
	list *[]*EarnPool
}

func (x *_QueryEarnPoolResponse_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_QueryEarnPoolResponse_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_QueryEarnPoolResponse_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EarnPool)
	(*x.list)[i] = concreteValue
}

func (x *_QueryEarnPoolResponse_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*EarnPool)
	*x.list = append(*x.list, concreteValue)
}

func (x *_QueryEarnPoolResponse_1_list) AppendMutable() protoreflect.Value {
	v := new(EarnPool)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryEarnPoolResponse_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_QueryEarnPoolResponse_1_list) NewElement() protoreflect.Value {
	v := new(EarnPool)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_QueryEarnPoolResponse_1_list) IsValid() bool {
	return x.list != nil
}

var (
	md_QueryEarnPoolResponse       protoreflect.MessageDescriptor
	fd_QueryEarnPoolResponse_pools protoreflect.FieldDescriptor
)

func init() {
	file_elys_amm_types_proto_init()
	md_QueryEarnPoolResponse = File_elys_amm_types_proto.Messages().ByName("QueryEarnPoolResponse")
	fd_QueryEarnPoolResponse_pools = md_QueryEarnPoolResponse.Fields().ByName("pools")
}

var _ protoreflect.Message = (*fastReflection_QueryEarnPoolResponse)(nil)

type fastReflection_QueryEarnPoolResponse QueryEarnPoolResponse

func (x *QueryEarnPoolResponse) ProtoReflect() protoreflect.Message {
	return (*fastReflection_QueryEarnPoolResponse)(x)
}

func (x *QueryEarnPoolResponse) slowProtoReflect() protoreflect.Message {
	mi := &file_elys_amm_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_QueryEarnPoolResponse_messageType fastReflection_QueryEarnPoolResponse_messageType
var _ protoreflect.MessageType = fastReflection_QueryEarnPoolResponse_messageType{}

type fastReflection_QueryEarnPoolResponse_messageType struct{}

func (x fastReflection_QueryEarnPoolResponse_messageType) Zero() protoreflect.Message {
	return (*fastReflection_QueryEarnPoolResponse)(nil)
}
func (x fastReflection_QueryEarnPoolResponse_messageType) New() protoreflect.Message {
	return new(fastReflection_QueryEarnPoolResponse)
}
func (x fastReflection_QueryEarnPoolResponse_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryEarnPoolResponse
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_QueryEarnPoolResponse) Descriptor() protoreflect.MessageDescriptor {
	return md_QueryEarnPoolResponse
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_QueryEarnPoolResponse) Type() protoreflect.MessageType {
	return _fastReflection_QueryEarnPoolResponse_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_QueryEarnPoolResponse) New() protoreflect.Message {
	return new(fastReflection_QueryEarnPoolResponse)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_QueryEarnPoolResponse) Interface() protoreflect.ProtoMessage {
	return (*QueryEarnPoolResponse)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_QueryEarnPoolResponse) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Pools) != 0 {
		value := protoreflect.ValueOfList(&_QueryEarnPoolResponse_1_list{list: &x.Pools})
		if !f(fd_QueryEarnPoolResponse_pools, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_QueryEarnPoolResponse) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		return len(x.Pools) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolResponse) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		x.Pools = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_QueryEarnPoolResponse) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		if len(x.Pools) == 0 {
			return protoreflect.ValueOfList(&_QueryEarnPoolResponse_1_list{})
		}
		listValue := &_QueryEarnPoolResponse_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolResponse) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		lv := value.List()
		clv := lv.(*_QueryEarnPoolResponse_1_list)
		x.Pools = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolResponse) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		if x.Pools == nil {
			x.Pools = []*EarnPool{}
		}
		value := &_QueryEarnPoolResponse_1_list{list: &x.Pools}
		return protoreflect.ValueOfList(value)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_QueryEarnPoolResponse) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "elys.amm.QueryEarnPoolResponse.pools":
		list := []*EarnPool{}
		return protoreflect.ValueOfList(&_QueryEarnPoolResponse_1_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: elys.amm.QueryEarnPoolResponse"))
		}
		panic(fmt.Errorf("message elys.amm.QueryEarnPoolResponse does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_QueryEarnPoolResponse) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in elys.amm.QueryEarnPoolResponse", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_QueryEarnPoolResponse) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_QueryEarnPoolResponse) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_QueryEarnPoolResponse) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_QueryEarnPoolResponse) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*QueryEarnPoolResponse)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.Pools) > 0 {
			for _, e := range x.Pools {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*QueryEarnPoolResponse)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Pools) > 0 {
			for iNdEx := len(x.Pools) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Pools[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*QueryEarnPoolResponse)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryEarnPoolResponse: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: QueryEarnPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Pools = append(x.Pools, &EarnPool{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Pools[len(x.Pools)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: elys/amm/types.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilterType int32

const (
	FilterType_FILTER_ALL            FilterType = 0
	FilterType_FILTER_PERPETUAL      FilterType = 1
	FilterType_FILTER_FIXED_WEIGHT   FilterType = 2
	FilterType_FILTER_DYNAMIC_WEIGHT FilterType = 3
	FilterType_FILTER_LEVERAGE       FilterType = 4
)

// Enum value maps for FilterType.
var (
	FilterType_name = map[int32]string{
		0: "FILTER_ALL",
		1: "FILTER_PERPETUAL",
		2: "FILTER_FIXED_WEIGHT",
		3: "FILTER_DYNAMIC_WEIGHT",
		4: "FILTER_LEVERAGE",
	}
	FilterType_value = map[string]int32{
		"FILTER_ALL":            0,
		"FILTER_PERPETUAL":      1,
		"FILTER_FIXED_WEIGHT":   2,
		"FILTER_DYNAMIC_WEIGHT": 3,
		"FILTER_LEVERAGE":       4,
	}
)

func (x FilterType) Enum() *FilterType {
	p := new(FilterType)
	*p = x
	return p
}

func (x FilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_elys_amm_types_proto_enumTypes[0].Descriptor()
}

func (FilterType) Type() protoreflect.EnumType {
	return &file_elys_amm_types_proto_enumTypes[0]
}

func (x FilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterType.Descriptor instead.
func (FilterType) EnumDescriptor() ([]byte, []int) {
	return file_elys_amm_types_proto_rawDescGZIP(), []int{0}
}

type QueryEarnPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolIds    []uint64             `protobuf:"varint,1,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
	FilterType FilterType           `protobuf:"varint,2,opt,name=filter_type,json=filterType,proto3,enum=elys.amm.FilterType" json:"filter_type,omitempty"`
	Pagination *v1beta1.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *QueryEarnPoolRequest) Reset() {
	*x = QueryEarnPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_amm_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEarnPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEarnPoolRequest) ProtoMessage() {}

// Deprecated: Use QueryEarnPoolRequest.ProtoReflect.Descriptor instead.
func (*QueryEarnPoolRequest) Descriptor() ([]byte, []int) {
	return file_elys_amm_types_proto_rawDescGZIP(), []int{0}
}

func (x *QueryEarnPoolRequest) GetPoolIds() []uint64 {
	if x != nil {
		return x.PoolIds
	}
	return nil
}

func (x *QueryEarnPoolRequest) GetFilterType() FilterType {
	if x != nil {
		return x.FilterType
	}
	return FilterType_FILTER_ALL
}

func (x *QueryEarnPoolRequest) GetPagination() *v1beta1.PageRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type EarnPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolId       uint64           `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Assets       []*PoolAsset     `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	PoolRatio    string           `protobuf:"bytes,3,opt,name=pool_ratio,json=poolRatio,proto3" json:"pool_ratio,omitempty"`
	RewardsApr   string           `protobuf:"bytes,4,opt,name=rewards_apr,json=rewardsApr,proto3" json:"rewards_apr,omitempty"`
	BorrowApr    string           `protobuf:"bytes,5,opt,name=borrow_apr,json=borrowApr,proto3" json:"borrow_apr,omitempty"`
	LeverageLp   string           `protobuf:"bytes,6,opt,name=leverage_lp,json=leverageLp,proto3" json:"leverage_lp,omitempty"`
	Perpetual    string           `protobuf:"bytes,7,opt,name=perpetual,proto3" json:"perpetual,omitempty"`
	Tvl          string           `protobuf:"bytes,8,opt,name=tvl,proto3" json:"tvl,omitempty"`
	LpTokenPrice string           `protobuf:"bytes,9,opt,name=lp_token_price,json=lpTokenPrice,proto3" json:"lp_token_price,omitempty"`
	RewardsUsd   string           `protobuf:"bytes,10,opt,name=rewards_usd,json=rewardsUsd,proto3" json:"rewards_usd,omitempty"`
	RewardCoins  []*v1beta11.Coin `protobuf:"bytes,11,rep,name=reward_coins,json=rewardCoins,proto3" json:"reward_coins,omitempty"`
	TotalShares  *v1beta11.Coin   `protobuf:"bytes,12,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	SwapFee      string           `protobuf:"bytes,13,opt,name=swap_fee,json=swapFee,proto3" json:"swap_fee,omitempty"`
	FeeDenom     string           `protobuf:"bytes,14,opt,name=fee_denom,json=feeDenom,proto3" json:"fee_denom,omitempty"`
	UseOracle    bool             `protobuf:"varint,15,opt,name=use_oracle,json=useOracle,proto3" json:"use_oracle,omitempty"`
	IsLeveragelp bool             `protobuf:"varint,16,opt,name=is_leveragelp,json=isLeveragelp,proto3" json:"is_leveragelp,omitempty"`
}

func (x *EarnPool) Reset() {
	*x = EarnPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_amm_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarnPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarnPool) ProtoMessage() {}

// Deprecated: Use EarnPool.ProtoReflect.Descriptor instead.
func (*EarnPool) Descriptor() ([]byte, []int) {
	return file_elys_amm_types_proto_rawDescGZIP(), []int{1}
}

func (x *EarnPool) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *EarnPool) GetAssets() []*PoolAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *EarnPool) GetPoolRatio() string {
	if x != nil {
		return x.PoolRatio
	}
	return ""
}

func (x *EarnPool) GetRewardsApr() string {
	if x != nil {
		return x.RewardsApr
	}
	return ""
}

func (x *EarnPool) GetBorrowApr() string {
	if x != nil {
		return x.BorrowApr
	}
	return ""
}

func (x *EarnPool) GetLeverageLp() string {
	if x != nil {
		return x.LeverageLp
	}
	return ""
}

func (x *EarnPool) GetPerpetual() string {
	if x != nil {
		return x.Perpetual
	}
	return ""
}

func (x *EarnPool) GetTvl() string {
	if x != nil {
		return x.Tvl
	}
	return ""
}

func (x *EarnPool) GetLpTokenPrice() string {
	if x != nil {
		return x.LpTokenPrice
	}
	return ""
}

func (x *EarnPool) GetRewardsUsd() string {
	if x != nil {
		return x.RewardsUsd
	}
	return ""
}

func (x *EarnPool) GetRewardCoins() []*v1beta11.Coin {
	if x != nil {
		return x.RewardCoins
	}
	return nil
}

func (x *EarnPool) GetTotalShares() *v1beta11.Coin {
	if x != nil {
		return x.TotalShares
	}
	return nil
}

func (x *EarnPool) GetSwapFee() string {
	if x != nil {
		return x.SwapFee
	}
	return ""
}

func (x *EarnPool) GetFeeDenom() string {
	if x != nil {
		return x.FeeDenom
	}
	return ""
}

func (x *EarnPool) GetUseOracle() bool {
	if x != nil {
		return x.UseOracle
	}
	return false
}

func (x *EarnPool) GetIsLeveragelp() bool {
	if x != nil {
		return x.IsLeveragelp
	}
	return false
}

type QueryEarnPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pools []*EarnPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (x *QueryEarnPoolResponse) Reset() {
	*x = QueryEarnPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_elys_amm_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEarnPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEarnPoolResponse) ProtoMessage() {}

// Deprecated: Use QueryEarnPoolResponse.ProtoReflect.Descriptor instead.
func (*QueryEarnPoolResponse) Descriptor() ([]byte, []int) {
	return file_elys_amm_types_proto_rawDescGZIP(), []int{2}
}

func (x *QueryEarnPoolResponse) GetPools() []*EarnPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

var File_elys_amm_types_proto protoreflect.FileDescriptor

var file_elys_amm_types_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x6d, 0x6d, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x6d, 0x6d,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61,
	0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x6d, 0x6d, 0x2f, 0x70, 0x6f, 0x6f,
	0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74,
	0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x61, 0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x07, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x6d, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc0, 0x08, 0x0a, 0x08,
	0x45, 0x61, 0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x6d, 0x6d, 0x2e, 0x50, 0x6f, 0x6f,
	0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x52, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61,
	0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x41, 0x70, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x62, 0x6f, 0x72, 0x72, 0x6f,
	0x77, 0x5f, 0x61, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09,
	0x62, 0x6f, 0x72, 0x72, 0x6f, 0x77, 0x41, 0x70, 0x72, 0x12, 0x52, 0x0a, 0x0b, 0x6c, 0x65, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x70, 0x12, 0x4f, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0x52, 0x09, 0x70, 0x65, 0x72, 0x70, 0x65, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x43,
	0x0a, 0x03, 0x74, 0x76, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x03,
	0x74, 0x76, 0x6c, 0x12, 0x57, 0x0a, 0x0e, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c,
	0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x75, 0x73, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x55, 0x73, 0x64,
	0x12, 0x6e, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x6d, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x4c, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x65, 0x65, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x5f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6c, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x6c, 0x70, 0x22, 0x47,
	0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x61, 0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6c, 0x79, 0x73, 0x2e, 0x61, 0x6d,
	0x6d, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x05, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x2a, 0x7b, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x50, 0x45, 0x52, 0x50, 0x45, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x57, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x44,
	0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x04, 0x42, 0x86, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x6c, 0x79,
	0x73, 0x2e, 0x61, 0x6d, 0x6d, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x65, 0x6c, 0x79, 0x73, 0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x65, 0x6c, 0x79,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6c, 0x79, 0x73, 0x2f, 0x61, 0x6d, 0x6d, 0xa2, 0x02,
	0x03, 0x45, 0x41, 0x58, 0xaa, 0x02, 0x08, 0x45, 0x6c, 0x79, 0x73, 0x2e, 0x41, 0x6d, 0x6d, 0xca,
	0x02, 0x08, 0x45, 0x6c, 0x79, 0x73, 0x5c, 0x41, 0x6d, 0x6d, 0xe2, 0x02, 0x14, 0x45, 0x6c, 0x79,
	0x73, 0x5c, 0x41, 0x6d, 0x6d, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x09, 0x45, 0x6c, 0x79, 0x73, 0x3a, 0x3a, 0x41, 0x6d, 0x6d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_elys_amm_types_proto_rawDescOnce sync.Once
	file_elys_amm_types_proto_rawDescData = file_elys_amm_types_proto_rawDesc
)

func file_elys_amm_types_proto_rawDescGZIP() []byte {
	file_elys_amm_types_proto_rawDescOnce.Do(func() {
		file_elys_amm_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_elys_amm_types_proto_rawDescData)
	})
	return file_elys_amm_types_proto_rawDescData
}

var file_elys_amm_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_elys_amm_types_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_elys_amm_types_proto_goTypes = []interface{}{
	(FilterType)(0),               // 0: elys.amm.FilterType
	(*QueryEarnPoolRequest)(nil),  // 1: elys.amm.QueryEarnPoolRequest
	(*EarnPool)(nil),              // 2: elys.amm.EarnPool
	(*QueryEarnPoolResponse)(nil), // 3: elys.amm.QueryEarnPoolResponse
	(*v1beta1.PageRequest)(nil),   // 4: cosmos.base.query.v1beta1.PageRequest
	(*PoolAsset)(nil),             // 5: elys.amm.PoolAsset
	(*v1beta11.Coin)(nil),         // 6: cosmos.base.v1beta1.Coin
}
var file_elys_amm_types_proto_depIdxs = []int32{
	0, // 0: elys.amm.QueryEarnPoolRequest.filter_type:type_name -> elys.amm.FilterType
	4, // 1: elys.amm.QueryEarnPoolRequest.pagination:type_name -> cosmos.base.query.v1beta1.PageRequest
	5, // 2: elys.amm.EarnPool.assets:type_name -> elys.amm.PoolAsset
	6, // 3: elys.amm.EarnPool.reward_coins:type_name -> cosmos.base.v1beta1.Coin
	6, // 4: elys.amm.EarnPool.total_shares:type_name -> cosmos.base.v1beta1.Coin
	2, // 5: elys.amm.QueryEarnPoolResponse.pools:type_name -> elys.amm.EarnPool
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_elys_amm_types_proto_init() }
func file_elys_amm_types_proto_init() {
	if File_elys_amm_types_proto != nil {
		return
	}
	file_elys_amm_pool_asset_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_elys_amm_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEarnPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_amm_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarnPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_elys_amm_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEarnPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_elys_amm_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_elys_amm_types_proto_goTypes,
		DependencyIndexes: file_elys_amm_types_proto_depIdxs,
		EnumInfos:         file_elys_amm_types_proto_enumTypes,
		MessageInfos:      file_elys_amm_types_proto_msgTypes,
	}.Build()
	File_elys_amm_types_proto = out.File
	file_elys_amm_types_proto_rawDesc = nil
	file_elys_amm_types_proto_goTypes = nil
	file_elys_amm_types_proto_depIdxs = nil
}
