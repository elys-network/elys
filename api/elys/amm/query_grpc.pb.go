// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package amm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error)
	PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error)
	// Queries a list of DenomLiquidity items.
	DenomLiquidity(ctx context.Context, in *QueryGetDenomLiquidityRequest, opts ...grpc.CallOption) (*QueryGetDenomLiquidityResponse, error)
	DenomLiquidityAll(ctx context.Context, in *QueryAllDenomLiquidityRequest, opts ...grpc.CallOption) (*QueryAllDenomLiquidityResponse, error)
	// Queries a list of SwapEstimation items.
	SwapEstimation(ctx context.Context, in *QuerySwapEstimationRequest, opts ...grpc.CallOption) (*QuerySwapEstimationResponse, error)
	// Queries JoinPool estimation
	JoinPoolEstimation(ctx context.Context, in *QueryJoinPoolEstimationRequest, opts ...grpc.CallOption) (*QueryJoinPoolEstimationResponse, error)
	// Queries ExistPool estimation
	ExitPoolEstimation(ctx context.Context, in *QueryExitPoolEstimationRequest, opts ...grpc.CallOption) (*QueryExitPoolEstimationResponse, error)
	// Queries slippage track for a week.
	SlippageTrack(ctx context.Context, in *QuerySlippageTrackRequest, opts ...grpc.CallOption) (*QuerySlippageTrackResponse, error)
	// Queries all slippage tracks for a week.
	SlippageTrackAll(ctx context.Context, in *QuerySlippageTrackAllRequest, opts ...grpc.CallOption) (*QuerySlippageTrackAllResponse, error)
	// Queries a list of Balance items.
	Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error)
	// Queries a list of InRouteByDenom items.
	InRouteByDenom(ctx context.Context, in *QueryInRouteByDenomRequest, opts ...grpc.CallOption) (*QueryInRouteByDenomResponse, error)
	// Queries a list of OutRouteByDenom items.
	OutRouteByDenom(ctx context.Context, in *QueryOutRouteByDenomRequest, opts ...grpc.CallOption) (*QueryOutRouteByDenomResponse, error)
	// Queries a list of SwapEstimationByDenom items.
	SwapEstimationByDenom(ctx context.Context, in *QuerySwapEstimationByDenomRequest, opts ...grpc.CallOption) (*QuerySwapEstimationByDenomResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *QueryGetPoolRequest, opts ...grpc.CallOption) (*QueryGetPoolResponse, error) {
	out := new(QueryGetPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAll(ctx context.Context, in *QueryAllPoolRequest, opts ...grpc.CallOption) (*QueryAllPoolResponse, error) {
	out := new(QueryAllPoolResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/PoolAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomLiquidity(ctx context.Context, in *QueryGetDenomLiquidityRequest, opts ...grpc.CallOption) (*QueryGetDenomLiquidityResponse, error) {
	out := new(QueryGetDenomLiquidityResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/DenomLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomLiquidityAll(ctx context.Context, in *QueryAllDenomLiquidityRequest, opts ...grpc.CallOption) (*QueryAllDenomLiquidityResponse, error) {
	out := new(QueryAllDenomLiquidityResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/DenomLiquidityAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapEstimation(ctx context.Context, in *QuerySwapEstimationRequest, opts ...grpc.CallOption) (*QuerySwapEstimationResponse, error) {
	out := new(QuerySwapEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/SwapEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) JoinPoolEstimation(ctx context.Context, in *QueryJoinPoolEstimationRequest, opts ...grpc.CallOption) (*QueryJoinPoolEstimationResponse, error) {
	out := new(QueryJoinPoolEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/JoinPoolEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExitPoolEstimation(ctx context.Context, in *QueryExitPoolEstimationRequest, opts ...grpc.CallOption) (*QueryExitPoolEstimationResponse, error) {
	out := new(QueryExitPoolEstimationResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/ExitPoolEstimation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlippageTrack(ctx context.Context, in *QuerySlippageTrackRequest, opts ...grpc.CallOption) (*QuerySlippageTrackResponse, error) {
	out := new(QuerySlippageTrackResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/SlippageTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SlippageTrackAll(ctx context.Context, in *QuerySlippageTrackAllRequest, opts ...grpc.CallOption) (*QuerySlippageTrackAllResponse, error) {
	out := new(QuerySlippageTrackAllResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/SlippageTrackAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error) {
	out := new(QueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InRouteByDenom(ctx context.Context, in *QueryInRouteByDenomRequest, opts ...grpc.CallOption) (*QueryInRouteByDenomResponse, error) {
	out := new(QueryInRouteByDenomResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/InRouteByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutRouteByDenom(ctx context.Context, in *QueryOutRouteByDenomRequest, opts ...grpc.CallOption) (*QueryOutRouteByDenomResponse, error) {
	out := new(QueryOutRouteByDenomResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/OutRouteByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SwapEstimationByDenom(ctx context.Context, in *QuerySwapEstimationByDenomRequest, opts ...grpc.CallOption) (*QuerySwapEstimationByDenomResponse, error) {
	out := new(QuerySwapEstimationByDenomResponse)
	err := c.cc.Invoke(ctx, "/elys.amm.Query/SwapEstimationByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Pool items.
	Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error)
	PoolAll(context.Context, *QueryAllPoolRequest) (*QueryAllPoolResponse, error)
	// Queries a list of DenomLiquidity items.
	DenomLiquidity(context.Context, *QueryGetDenomLiquidityRequest) (*QueryGetDenomLiquidityResponse, error)
	DenomLiquidityAll(context.Context, *QueryAllDenomLiquidityRequest) (*QueryAllDenomLiquidityResponse, error)
	// Queries a list of SwapEstimation items.
	SwapEstimation(context.Context, *QuerySwapEstimationRequest) (*QuerySwapEstimationResponse, error)
	// Queries JoinPool estimation
	JoinPoolEstimation(context.Context, *QueryJoinPoolEstimationRequest) (*QueryJoinPoolEstimationResponse, error)
	// Queries ExistPool estimation
	ExitPoolEstimation(context.Context, *QueryExitPoolEstimationRequest) (*QueryExitPoolEstimationResponse, error)
	// Queries slippage track for a week.
	SlippageTrack(context.Context, *QuerySlippageTrackRequest) (*QuerySlippageTrackResponse, error)
	// Queries all slippage tracks for a week.
	SlippageTrackAll(context.Context, *QuerySlippageTrackAllRequest) (*QuerySlippageTrackAllResponse, error)
	// Queries a list of Balance items.
	Balance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error)
	// Queries a list of InRouteByDenom items.
	InRouteByDenom(context.Context, *QueryInRouteByDenomRequest) (*QueryInRouteByDenomResponse, error)
	// Queries a list of OutRouteByDenom items.
	OutRouteByDenom(context.Context, *QueryOutRouteByDenomRequest) (*QueryOutRouteByDenomResponse, error)
	// Queries a list of SwapEstimationByDenom items.
	SwapEstimationByDenom(context.Context, *QuerySwapEstimationByDenomRequest) (*QuerySwapEstimationByDenomResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Pool(context.Context, *QueryGetPoolRequest) (*QueryGetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (UnimplementedQueryServer) PoolAll(context.Context, *QueryAllPoolRequest) (*QueryAllPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAll not implemented")
}
func (UnimplementedQueryServer) DenomLiquidity(context.Context, *QueryGetDenomLiquidityRequest) (*QueryGetDenomLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomLiquidity not implemented")
}
func (UnimplementedQueryServer) DenomLiquidityAll(context.Context, *QueryAllDenomLiquidityRequest) (*QueryAllDenomLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomLiquidityAll not implemented")
}
func (UnimplementedQueryServer) SwapEstimation(context.Context, *QuerySwapEstimationRequest) (*QuerySwapEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapEstimation not implemented")
}
func (UnimplementedQueryServer) JoinPoolEstimation(context.Context, *QueryJoinPoolEstimationRequest) (*QueryJoinPoolEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinPoolEstimation not implemented")
}
func (UnimplementedQueryServer) ExitPoolEstimation(context.Context, *QueryExitPoolEstimationRequest) (*QueryExitPoolEstimationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitPoolEstimation not implemented")
}
func (UnimplementedQueryServer) SlippageTrack(context.Context, *QuerySlippageTrackRequest) (*QuerySlippageTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlippageTrack not implemented")
}
func (UnimplementedQueryServer) SlippageTrackAll(context.Context, *QuerySlippageTrackAllRequest) (*QuerySlippageTrackAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlippageTrackAll not implemented")
}
func (UnimplementedQueryServer) Balance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedQueryServer) InRouteByDenom(context.Context, *QueryInRouteByDenomRequest) (*QueryInRouteByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InRouteByDenom not implemented")
}
func (UnimplementedQueryServer) OutRouteByDenom(context.Context, *QueryOutRouteByDenomRequest) (*QueryOutRouteByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutRouteByDenom not implemented")
}
func (UnimplementedQueryServer) SwapEstimationByDenom(context.Context, *QuerySwapEstimationByDenomRequest) (*QuerySwapEstimationByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapEstimationByDenom not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*QueryGetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/PoolAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAll(ctx, req.(*QueryAllPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDenomLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/DenomLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomLiquidity(ctx, req.(*QueryGetDenomLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomLiquidityAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDenomLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomLiquidityAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/DenomLiquidityAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomLiquidityAll(ctx, req.(*QueryAllDenomLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/SwapEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapEstimation(ctx, req.(*QuerySwapEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_JoinPoolEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryJoinPoolEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).JoinPoolEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/JoinPoolEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).JoinPoolEstimation(ctx, req.(*QueryJoinPoolEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExitPoolEstimation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitPoolEstimationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExitPoolEstimation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/ExitPoolEstimation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExitPoolEstimation(ctx, req.(*QueryExitPoolEstimationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlippageTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlippageTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlippageTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/SlippageTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlippageTrack(ctx, req.(*QuerySlippageTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SlippageTrackAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySlippageTrackAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SlippageTrackAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/SlippageTrackAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SlippageTrackAll(ctx, req.(*QuerySlippageTrackAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balance(ctx, req.(*QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InRouteByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInRouteByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InRouteByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/InRouteByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InRouteByDenom(ctx, req.(*QueryInRouteByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutRouteByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutRouteByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutRouteByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/OutRouteByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutRouteByDenom(ctx, req.(*QueryOutRouteByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SwapEstimationByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySwapEstimationByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SwapEstimationByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.amm.Query/SwapEstimationByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SwapEstimationByDenom(ctx, req.(*QuerySwapEstimationByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.amm.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "PoolAll",
			Handler:    _Query_PoolAll_Handler,
		},
		{
			MethodName: "DenomLiquidity",
			Handler:    _Query_DenomLiquidity_Handler,
		},
		{
			MethodName: "DenomLiquidityAll",
			Handler:    _Query_DenomLiquidityAll_Handler,
		},
		{
			MethodName: "SwapEstimation",
			Handler:    _Query_SwapEstimation_Handler,
		},
		{
			MethodName: "JoinPoolEstimation",
			Handler:    _Query_JoinPoolEstimation_Handler,
		},
		{
			MethodName: "ExitPoolEstimation",
			Handler:    _Query_ExitPoolEstimation_Handler,
		},
		{
			MethodName: "SlippageTrack",
			Handler:    _Query_SlippageTrack_Handler,
		},
		{
			MethodName: "SlippageTrackAll",
			Handler:    _Query_SlippageTrackAll_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Query_Balance_Handler,
		},
		{
			MethodName: "InRouteByDenom",
			Handler:    _Query_InRouteByDenom_Handler,
		},
		{
			MethodName: "OutRouteByDenom",
			Handler:    _Query_OutRouteByDenom_Handler,
		},
		{
			MethodName: "SwapEstimationByDenom",
			Handler:    _Query_SwapEstimationByDenom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/amm/query.proto",
}
