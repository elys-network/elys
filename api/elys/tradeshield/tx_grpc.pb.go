// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tradeshield

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	CreateSpotOrder(ctx context.Context, in *MsgCreateSpotOrder, opts ...grpc.CallOption) (*MsgCreateSpotOrderResponse, error)
	UpdateSpotOrder(ctx context.Context, in *MsgUpdateSpotOrder, opts ...grpc.CallOption) (*MsgUpdateSpotOrderResponse, error)
	CancelSpotOrder(ctx context.Context, in *MsgCancelSpotOrder, opts ...grpc.CallOption) (*MsgCancelSpotOrderResponse, error)
	CancelSpotOrders(ctx context.Context, in *MsgCancelSpotOrders, opts ...grpc.CallOption) (*MsgCancelSpotOrdersResponse, error)
	CreatePerpetualOpenOrder(ctx context.Context, in *MsgCreatePerpetualOpenOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualOpenOrderResponse, error)
	CreatePerpetualCloseOrder(ctx context.Context, in *MsgCreatePerpetualCloseOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualCloseOrderResponse, error)
	UpdatePerpetualOrder(ctx context.Context, in *MsgUpdatePerpetualOrder, opts ...grpc.CallOption) (*MsgUpdatePerpetualOrderResponse, error)
	CancelPerpetualOrder(ctx context.Context, in *MsgCancelPerpetualOrder, opts ...grpc.CallOption) (*MsgCancelPerpetualOrderResponse, error)
	CancelPerpetualOrders(ctx context.Context, in *MsgCancelPerpetualOrders, opts ...grpc.CallOption) (*MsgCancelPerpetualOrdersResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	ExecuteOrders(ctx context.Context, in *MsgExecuteOrders, opts ...grpc.CallOption) (*MsgExecuteOrdersResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateSpotOrder(ctx context.Context, in *MsgCreateSpotOrder, opts ...grpc.CallOption) (*MsgCreateSpotOrderResponse, error) {
	out := new(MsgCreateSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreateSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSpotOrder(ctx context.Context, in *MsgUpdateSpotOrder, opts ...grpc.CallOption) (*MsgUpdateSpotOrderResponse, error) {
	out := new(MsgUpdateSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdateSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSpotOrder(ctx context.Context, in *MsgCancelSpotOrder, opts ...grpc.CallOption) (*MsgCancelSpotOrderResponse, error) {
	out := new(MsgCancelSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelSpotOrders(ctx context.Context, in *MsgCancelSpotOrders, opts ...grpc.CallOption) (*MsgCancelSpotOrdersResponse, error) {
	out := new(MsgCancelSpotOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelSpotOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetualOpenOrder(ctx context.Context, in *MsgCreatePerpetualOpenOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualOpenOrderResponse, error) {
	out := new(MsgCreatePerpetualOpenOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreatePerpetualOpenOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreatePerpetualCloseOrder(ctx context.Context, in *MsgCreatePerpetualCloseOrder, opts ...grpc.CallOption) (*MsgCreatePerpetualCloseOrderResponse, error) {
	out := new(MsgCreatePerpetualCloseOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CreatePerpetualCloseOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePerpetualOrder(ctx context.Context, in *MsgUpdatePerpetualOrder, opts ...grpc.CallOption) (*MsgUpdatePerpetualOrderResponse, error) {
	out := new(MsgUpdatePerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdatePerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPerpetualOrder(ctx context.Context, in *MsgCancelPerpetualOrder, opts ...grpc.CallOption) (*MsgCancelPerpetualOrderResponse, error) {
	out := new(MsgCancelPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelPerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelPerpetualOrders(ctx context.Context, in *MsgCancelPerpetualOrders, opts ...grpc.CallOption) (*MsgCancelPerpetualOrdersResponse, error) {
	out := new(MsgCancelPerpetualOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/CancelPerpetualOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteOrders(ctx context.Context, in *MsgExecuteOrders, opts ...grpc.CallOption) (*MsgExecuteOrdersResponse, error) {
	out := new(MsgExecuteOrdersResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Msg/ExecuteOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	CreateSpotOrder(context.Context, *MsgCreateSpotOrder) (*MsgCreateSpotOrderResponse, error)
	UpdateSpotOrder(context.Context, *MsgUpdateSpotOrder) (*MsgUpdateSpotOrderResponse, error)
	CancelSpotOrder(context.Context, *MsgCancelSpotOrder) (*MsgCancelSpotOrderResponse, error)
	CancelSpotOrders(context.Context, *MsgCancelSpotOrders) (*MsgCancelSpotOrdersResponse, error)
	CreatePerpetualOpenOrder(context.Context, *MsgCreatePerpetualOpenOrder) (*MsgCreatePerpetualOpenOrderResponse, error)
	CreatePerpetualCloseOrder(context.Context, *MsgCreatePerpetualCloseOrder) (*MsgCreatePerpetualCloseOrderResponse, error)
	UpdatePerpetualOrder(context.Context, *MsgUpdatePerpetualOrder) (*MsgUpdatePerpetualOrderResponse, error)
	CancelPerpetualOrder(context.Context, *MsgCancelPerpetualOrder) (*MsgCancelPerpetualOrderResponse, error)
	CancelPerpetualOrders(context.Context, *MsgCancelPerpetualOrders) (*MsgCancelPerpetualOrdersResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	ExecuteOrders(context.Context, *MsgExecuteOrders) (*MsgExecuteOrdersResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) CreateSpotOrder(context.Context, *MsgCreateSpotOrder) (*MsgCreateSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpotOrder not implemented")
}
func (UnimplementedMsgServer) UpdateSpotOrder(context.Context, *MsgUpdateSpotOrder) (*MsgUpdateSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpotOrder not implemented")
}
func (UnimplementedMsgServer) CancelSpotOrder(context.Context, *MsgCancelSpotOrder) (*MsgCancelSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSpotOrder not implemented")
}
func (UnimplementedMsgServer) CancelSpotOrders(context.Context, *MsgCancelSpotOrders) (*MsgCancelSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSpotOrders not implemented")
}
func (UnimplementedMsgServer) CreatePerpetualOpenOrder(context.Context, *MsgCreatePerpetualOpenOrder) (*MsgCreatePerpetualOpenOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetualOpenOrder not implemented")
}
func (UnimplementedMsgServer) CreatePerpetualCloseOrder(context.Context, *MsgCreatePerpetualCloseOrder) (*MsgCreatePerpetualCloseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerpetualCloseOrder not implemented")
}
func (UnimplementedMsgServer) UpdatePerpetualOrder(context.Context, *MsgUpdatePerpetualOrder) (*MsgUpdatePerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerpetualOrder not implemented")
}
func (UnimplementedMsgServer) CancelPerpetualOrder(context.Context, *MsgCancelPerpetualOrder) (*MsgCancelPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPerpetualOrder not implemented")
}
func (UnimplementedMsgServer) CancelPerpetualOrders(context.Context, *MsgCancelPerpetualOrders) (*MsgCancelPerpetualOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPerpetualOrders not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) ExecuteOrders(context.Context, *MsgExecuteOrders) (*MsgExecuteOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteOrders not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_CreateSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreateSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateSpotOrder(ctx, req.(*MsgCreateSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdateSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSpotOrder(ctx, req.(*MsgUpdateSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSpotOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSpotOrder(ctx, req.(*MsgCancelSpotOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelSpotOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelSpotOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelSpotOrders(ctx, req.(*MsgCancelSpotOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetualOpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerpetualOpenOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetualOpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreatePerpetualOpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetualOpenOrder(ctx, req.(*MsgCreatePerpetualOpenOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreatePerpetualCloseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreatePerpetualCloseOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreatePerpetualCloseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CreatePerpetualCloseOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreatePerpetualCloseOrder(ctx, req.(*MsgCreatePerpetualCloseOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePerpetualOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdatePerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePerpetualOrder(ctx, req.(*MsgUpdatePerpetualOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPerpetualOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelPerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPerpetualOrder(ctx, req.(*MsgCancelPerpetualOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelPerpetualOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelPerpetualOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelPerpetualOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/CancelPerpetualOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelPerpetualOrders(ctx, req.(*MsgCancelPerpetualOrders))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteOrders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Msg/ExecuteOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteOrders(ctx, req.(*MsgExecuteOrders))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tradeshield.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpotOrder",
			Handler:    _Msg_CreateSpotOrder_Handler,
		},
		{
			MethodName: "UpdateSpotOrder",
			Handler:    _Msg_UpdateSpotOrder_Handler,
		},
		{
			MethodName: "CancelSpotOrder",
			Handler:    _Msg_CancelSpotOrder_Handler,
		},
		{
			MethodName: "CancelSpotOrders",
			Handler:    _Msg_CancelSpotOrders_Handler,
		},
		{
			MethodName: "CreatePerpetualOpenOrder",
			Handler:    _Msg_CreatePerpetualOpenOrder_Handler,
		},
		{
			MethodName: "CreatePerpetualCloseOrder",
			Handler:    _Msg_CreatePerpetualCloseOrder_Handler,
		},
		{
			MethodName: "UpdatePerpetualOrder",
			Handler:    _Msg_UpdatePerpetualOrder_Handler,
		},
		{
			MethodName: "CancelPerpetualOrder",
			Handler:    _Msg_CancelPerpetualOrder_Handler,
		},
		{
			MethodName: "CancelPerpetualOrders",
			Handler:    _Msg_CancelPerpetualOrders_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "ExecuteOrders",
			Handler:    _Msg_ExecuteOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tradeshield/tx.proto",
}
