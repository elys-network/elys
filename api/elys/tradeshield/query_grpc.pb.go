// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tradeshield

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of PendingSpotOrder items.
	PendingSpotOrder(ctx context.Context, in *QueryGetPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingSpotOrderResponse, error)
	PendingSpotOrderAll(ctx context.Context, in *QueryAllPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingSpotOrderResponse, error)
	// Queries a list of PendingPerpetualOrder items.
	PendingPerpetualOrder(ctx context.Context, in *QueryGetPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingPerpetualOrderResponse, error)
	PendingPerpetualOrderAll(ctx context.Context, in *QueryAllPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingPerpetualOrderResponse, error)
	// Queries a list of PendingPerpetualOrderForAddress items.
	PendingPerpetualOrderForAddress(ctx context.Context, in *QueryPendingPerpetualOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingPerpetualOrderForAddressResponse, error)
	// Queries a list of PendingSpotOrderForAddress items.
	PendingSpotOrderForAddress(ctx context.Context, in *QueryPendingSpotOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingSpotOrderForAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrder(ctx context.Context, in *QueryGetPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingSpotOrderResponse, error) {
	out := new(QueryGetPendingSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrderAll(ctx context.Context, in *QueryAllPendingSpotOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingSpotOrderResponse, error) {
	out := new(QueryAllPendingSpotOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrder(ctx context.Context, in *QueryGetPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryGetPendingPerpetualOrderResponse, error) {
	out := new(QueryGetPendingPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrderAll(ctx context.Context, in *QueryAllPendingPerpetualOrderRequest, opts ...grpc.CallOption) (*QueryAllPendingPerpetualOrderResponse, error) {
	out := new(QueryAllPendingPerpetualOrderResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrderAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingPerpetualOrderForAddress(ctx context.Context, in *QueryPendingPerpetualOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingPerpetualOrderForAddressResponse, error) {
	out := new(QueryPendingPerpetualOrderForAddressResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingPerpetualOrderForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingSpotOrderForAddress(ctx context.Context, in *QueryPendingSpotOrderForAddressRequest, opts ...grpc.CallOption) (*QueryPendingSpotOrderForAddressResponse, error) {
	out := new(QueryPendingSpotOrderForAddressResponse)
	err := c.cc.Invoke(ctx, "/elys.tradeshield.Query/PendingSpotOrderForAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of PendingSpotOrder items.
	PendingSpotOrder(context.Context, *QueryGetPendingSpotOrderRequest) (*QueryGetPendingSpotOrderResponse, error)
	PendingSpotOrderAll(context.Context, *QueryAllPendingSpotOrderRequest) (*QueryAllPendingSpotOrderResponse, error)
	// Queries a list of PendingPerpetualOrder items.
	PendingPerpetualOrder(context.Context, *QueryGetPendingPerpetualOrderRequest) (*QueryGetPendingPerpetualOrderResponse, error)
	PendingPerpetualOrderAll(context.Context, *QueryAllPendingPerpetualOrderRequest) (*QueryAllPendingPerpetualOrderResponse, error)
	// Queries a list of PendingPerpetualOrderForAddress items.
	PendingPerpetualOrderForAddress(context.Context, *QueryPendingPerpetualOrderForAddressRequest) (*QueryPendingPerpetualOrderForAddressResponse, error)
	// Queries a list of PendingSpotOrderForAddress items.
	PendingSpotOrderForAddress(context.Context, *QueryPendingSpotOrderForAddressRequest) (*QueryPendingSpotOrderForAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) PendingSpotOrder(context.Context, *QueryGetPendingSpotOrderRequest) (*QueryGetPendingSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrder not implemented")
}
func (UnimplementedQueryServer) PendingSpotOrderAll(context.Context, *QueryAllPendingSpotOrderRequest) (*QueryAllPendingSpotOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrderAll not implemented")
}
func (UnimplementedQueryServer) PendingPerpetualOrder(context.Context, *QueryGetPendingPerpetualOrderRequest) (*QueryGetPendingPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrder not implemented")
}
func (UnimplementedQueryServer) PendingPerpetualOrderAll(context.Context, *QueryAllPendingPerpetualOrderRequest) (*QueryAllPendingPerpetualOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrderAll not implemented")
}
func (UnimplementedQueryServer) PendingPerpetualOrderForAddress(context.Context, *QueryPendingPerpetualOrderForAddressRequest) (*QueryPendingPerpetualOrderForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingPerpetualOrderForAddress not implemented")
}
func (UnimplementedQueryServer) PendingSpotOrderForAddress(context.Context, *QueryPendingSpotOrderForAddressRequest) (*QueryPendingSpotOrderForAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingSpotOrderForAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingSpotOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrder(ctx, req.(*QueryGetPendingSpotOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingSpotOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrderAll(ctx, req.(*QueryAllPendingSpotOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPendingPerpetualOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrder(ctx, req.(*QueryGetPendingPerpetualOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrderAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingPerpetualOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrderAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrderAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrderAll(ctx, req.(*QueryAllPendingPerpetualOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingPerpetualOrderForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingPerpetualOrderForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingPerpetualOrderForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingPerpetualOrderForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingPerpetualOrderForAddress(ctx, req.(*QueryPendingPerpetualOrderForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingSpotOrderForAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingSpotOrderForAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingSpotOrderForAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elys.tradeshield.Query/PendingSpotOrderForAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingSpotOrderForAddress(ctx, req.(*QueryPendingSpotOrderForAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elys.tradeshield.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "PendingSpotOrder",
			Handler:    _Query_PendingSpotOrder_Handler,
		},
		{
			MethodName: "PendingSpotOrderAll",
			Handler:    _Query_PendingSpotOrderAll_Handler,
		},
		{
			MethodName: "PendingPerpetualOrder",
			Handler:    _Query_PendingPerpetualOrder_Handler,
		},
		{
			MethodName: "PendingPerpetualOrderAll",
			Handler:    _Query_PendingPerpetualOrderAll_Handler,
		},
		{
			MethodName: "PendingPerpetualOrderForAddress",
			Handler:    _Query_PendingPerpetualOrderForAddress_Handler,
		},
		{
			MethodName: "PendingSpotOrderForAddress",
			Handler:    _Query_PendingSpotOrderForAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elys/tradeshield/query.proto",
}
