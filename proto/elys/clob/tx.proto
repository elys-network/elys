syntax = "proto3";

package elys.clob;

option go_package = "github.com/elys-network/elys/v7/x/clob/types";

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "elys/clob/params.proto";
import "elys/clob/order.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "elys/clob/liquidation.proto";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);

  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);

  rpc CreatePerpetualMarket(MsgCreatPerpetualMarket)
      returns (MsgCreatPerpetualMarketResponse);

  rpc PlaceLimitOrder(MsgPlaceLimitOrder) returns (MsgPlaceLimitOrderResponse);

  rpc PlaceMarketOrder(MsgPlaceMarketOrder)
      returns (MsgPlaceMarketOrderResponse);

  rpc LiquidatePositions(MsgLiquidatePositions)
      returns (MsgLiquidatePositionsResponse);

  rpc MatchAndExecuteOrders(MsgMatchAndExecuteOrders)
      returns (MsgMatchAndExecuteOrdersResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "clob/MsgUpdateParams";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Params params = 2 [ (gogoproto.nullable) = false ];
}

message MsgUpdateParamsResponse {}

message MsgDeposit {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "clob/MsgDeposit";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin coin = 2 [ (gogoproto.nullable) = false ];
}

message MsgDepositResponse {}

message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "clob/MsgWithdraw";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin coin = 2 [ (gogoproto.nullable) = false ];
}

message MsgWithdrawResponse {}

message MsgCreatPerpetualMarket {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "clob/MsgCreatPerpetualMarket";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string base_denom = 2;
  string quote_denom = 3;
  string initial_margin_ratio = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string maintenance_margin_ratio = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // maker_fee_rate defines the maker fee rate of a derivative market
  string maker_fee_rate = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // taker_fee_rate defines the taker fee rate of a derivative market
  string taker_fee_rate = 7 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // relayer_fee_share_rate defines the percentage of the transaction fee shared
  // with the relayer in a derivative market
  string liquidation_fee_share_rate = 8 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string min_price_tick_size = 9 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // min_quantity_tick_size defines the minimum tick size of the quantity
  // required for orders in the market
  string min_quantity_tick_size = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // min_notional defines the minimum notional (in quote asset) required for
  // orders in the market
  string min_notional = 11 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  string max_abs_funding_rate = 12 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string max_abs_funding_rate_change = 13 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  uint64 twap_prices_window = 14;
}

message MsgCreatPerpetualMarketResponse {}

message MsgPlaceLimitOrder {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "clob/MsgPlaceLimitOrder";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 market_id = 2;
  string price = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string base_quantity = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  OrderType order_type = 5;
  bool isIsolated = 6;
}

message MsgPlaceLimitOrderResponse {}

message MsgPlaceMarketOrder {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "clob/MsgPlaceMarketOrder";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 market_id = 2;
  string base_quantity = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  OrderType order_type = 4;
  bool isIsolated = 5;
}

message MsgPlaceMarketOrderResponse {}

message MsgLiquidatePositions {
  option (cosmos.msg.v1.signer) = "liquidator";
  option (amino.name) = "clob/MsgLiquidatePositions";
  string liquidator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated LiquidatePosition positions = 2 [ (gogoproto.nullable) = false ];
}

message MsgLiquidatePositionsResponse {}

message MsgMatchAndExecuteOrders {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "clob/MsgMatchAndExecuteOrders";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated OrderKey buy_orders = 2 [ (gogoproto.nullable) = false ];
  repeated OrderKey sell_orders = 3 [ (gogoproto.nullable) = false ];
}

message MsgMatchAndExecuteOrdersResponse {}