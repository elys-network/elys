syntax = "proto3";

package elys.clob;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "elys/clob/params.proto";
import "elys/clob/market.proto";
import "elys/clob/subaccount.proto";
import "elys/clob/order.proto";
import "elys/clob/perpetual.proto";
import "elys/clob/adl.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/elys-network/elys/v7/x/clob/types";

// Query defines the gRPC querier service.
service Query {

  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/elys-network/elys/clob/params";
  }

  rpc AllMarkets(AllMarketsRequest) returns (AllMarketsResponse) {
    option (google.api.http).get = "/elys-network/elys/clob/all-markets";
  }

  rpc Market(MarketRequest) returns (MarketResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/market-info/{market_id}";
  }

  rpc OrderBook(OrderBookRequest) returns (OrderBookResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/order-book/{market_id}/{is_buy}";
  }

  rpc AllPerpetualADL(AllPerpetualADLRequest)
      returns (AllPerpetualADLResponse) {
    option (google.api.http).get = "/elys-network/elys/clob/all-perpetual-adl";
  }

  rpc SubAccounts(SubAccountsRequest) returns (SubAccountsResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/sub-accounts/{address}";
  }

  // set sub_account_id to 0 to get for all subaccounts
  rpc OwnerPerpetuals(OwnerPerpetualsRequest)
      returns (OwnerPerpetualsResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/owner-perpetuals/{address}/{sub_account_id}";
  }

  // set sub_account_id to 0 to get for all subaccounts
  rpc OwnerOrder(OwnerOrdersRequest) returns (OwnerOrdersResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/owner-order/{address}/"
        "{sub_account_id}";
  }

  // if market_id is 0, it will return all perpetual else it will return
  // perpetual for the specified market_id
  rpc AllPerpetuals(AllPerpetualsRequest) returns (AllPerpetualsResponse) {
    option (google.api.http).get =
        "/elys-network/elys/clob/all-perpetuals-with-liquidation-price/"
        "{pagination.key}";
  }
}

message ParamsRequest {}

message ParamsResponse { Params params = 1 [ (gogoproto.nullable) = false ]; }

message SubAccountsRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message SubAccountWithData {
  SubAccount subAccount = 1 [ (gogoproto.nullable) = false ];
  repeated cosmos.base.v1beta1.Coin trading_account_balance = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message SubAccountsResponse {
  cosmos.base.query.v1beta1.PageResponse pagination = 1;
  repeated SubAccountWithData results = 2 [ (gogoproto.nullable) = false ];
}

message OwnerPerpetualsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string address = 2;
  uint64 sub_account_id = 3;
}

message OwnerPerpetualsResponse {
  repeated PerpetualInfo list = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message OwnerOrdersRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  string address = 2;
  uint64 sub_account_id = 3;
}

message OwnerOrdersResponse {
  repeated Order orders = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message OrderBookRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
  uint64 market_id = 2;
  bool is_buy = 3;
}

message OrderBookResponse {
  repeated Order orders = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message MarketRequest { uint64 market_id = 1; }

message MarketResponse {
  PerpetualMarket market = 1 [ (gogoproto.nullable) = false ];
  string current_twap_price = 2 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string last_average_trade_price = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string highest_buy_price = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string lowest_sell_price = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string mid_price = 6 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message AllMarketsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message AllMarketsResponse {
  repeated MarketResponse markets = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message AllPerpetualADLRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message AllPerpetualADLResponse {
  repeated PerpetualADL adl_list = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message AllPerpetualsRequest {
  uint64 market_id = 1; // if 0, it will return all perpetuals
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message AllPerpetualsResponse {
  repeated PerpetualInfo perpetual_infos = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}