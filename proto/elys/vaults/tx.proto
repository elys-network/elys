syntax = "proto3";
package elys.vaults;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "elys/vaults/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "elys/amm/tx.proto";
import "elys/commitment/tx.proto";

option go_package = "github.com/elys-network/elys/x/vaults/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Deposit defines a method for depositing tokens into a vault.
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  // Withdraw defines a method for withdrawing tokens from a vault.
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
  // AddVault defines a method for creating a new vault.
  rpc AddVault(MsgAddVault) returns (MsgAddVaultResponse);
  // PerformAction defines a method for performing an action on a vault.
  rpc PerformAction(MsgPerformAction) returns (MsgPerformActionResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "vaults/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgDeposit is the MsgDeposit request type.
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "depositor";
  option (amino.name) = "vaults/MsgDeposit";

  // depositor is the address of the user depositing the funds.
  string depositor = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to deposit into.
  uint64 vault_id = 2;

  // amount is the amount of tokens to deposit.
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
}

// MsgDepositResponse defines the response structure for deposit
message MsgDepositResponse {
  // vault_id is the ID of the vault that the deposit was made into.
  uint64 vault_id = 1;
  string shares = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgWithdraw is the MsgWithdraw request type.
message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "withdrawer";
  option (amino.name) = "vaults/MsgWithdraw";

  // withdrawer is the address of the user withdrawing the funds.
  string withdrawer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to withdraw from.
  uint64 vault_id = 2;

  string shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgWithdrawResponse defines the response structure for withdrawal
message MsgWithdrawResponse {
  // vault_id is the ID of the vault that the withdrawal was made from.
  uint64 vault_id = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgAddVault is the MsgAddVault request type.
message MsgAddVault {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgAddVault";

  // creator is the address of the user creating the vault.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string deposit_denom = 2;
  // Max amount vault can hold in USD
  string max_amount_usd = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // Coins allowed to trade in the vault
  repeated string allowed_coins = 4;
  repeated string reward_coins = 5;
  // Actions that can be performed on the vault
  repeated uint64 allowed_actions = 6;
  string manager = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string management_fee = 8 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string performance_fee = 9 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// MsgAddVaultResponse defines the response structure for adding vault
message MsgAddVaultResponse {
  // vault_id is the ID of the vault that was created.
  uint64 vault_id = 1;
}

message MsgPerformAction {
  option (cosmos.msg.v1.signer) = "performer";
  option (amino.name) = "vaults/MsgPerformAction";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;

  oneof action {
    // AMM
    elys.amm.MsgJoinPool join_pool = 3;
    elys.amm.MsgExitPool exit_pool = 4;
    elys.amm.MsgSwapByDenom swap_by_denom = 5;
    // Commitment
    elys.commitment.MsgCommitClaimedRewards commit_claimed_rewards = 6;
    elys.commitment.MsgUncommitTokens uncommit_tokens = 7;
    elys.commitment.MsgVest vest = 8;
    elys.commitment.MsgCancelVest cancel_vest = 9;
    elys.commitment.MsgClaimVesting claim_vesting = 10;
    elys.commitment.MsgStake stake = 11;
    elys.commitment.MsgUnstake unstake = 12;
  }
}

message MsgPerformActionResponse { uint64 vault_id = 1; }
