syntax = "proto3";
package elys.vaults;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "elys/vaults/params.proto";
import "cosmos/base/v1beta1/coin.proto";
import "elys/amm/tx.proto";
import "elys/commitment/tx.proto";
import "elys/masterchef/tx.proto";
import "elys/stablestake/tx.proto";

option go_package = "github.com/elys-network/elys/v6/x/vaults/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // Deposit defines a method for depositing tokens into a vault.
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  // Withdraw defines a method for withdrawing tokens from a vault.
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
  // AddVault defines a method for creating a new vault.
  rpc AddVault(MsgAddVault) returns (MsgAddVaultResponse);
  // PerformAction defines a method for performing an action on a vault.
  // rpc PerformAction(MsgPerformAction) returns (MsgPerformActionResponse);
  rpc PerformActionJoinPool(MsgPerformActionJoinPool)
      returns (MsgPerformActionJoinPoolResponse);
  rpc PerformActionExitPool(MsgPerformActionExitPool)
      returns (MsgPerformActionExitPoolResponse);
  rpc PerformActionSwapByDenom(MsgPerformActionSwapByDenom)
      returns (MsgPerformActionSwapByDenomResponse);
  // UpdateVaultCoins defines a method for updating the coins of a vault.
  rpc UpdateVaultCoins(MsgUpdateVaultCoins)
      returns (MsgUpdateVaultCoinsResponse);
  // UpdateVaultFees defines a method for updating the fees of a vault.
  rpc UpdateVaultFees(MsgUpdateVaultFees) returns (MsgUpdateVaultFeesResponse);
  // UpdateVaultLockupPeriod defines a method for updating the lockup period of
  // a vault.
  rpc UpdateVaultLockupPeriod(MsgUpdateVaultLockupPeriod)
      returns (MsgUpdateVaultLockupPeriodResponse);
  // UpdateVaultMaxAmountUsd defines a method for updating the max amount of a
  // vault.
  rpc UpdateVaultMaxAmountUsd(MsgUpdateVaultMaxAmountUsd)
      returns (MsgUpdateVaultMaxAmountUsdResponse);
  // ClaimRewards defines a method for claiming rewards from a vault.
  rpc ClaimRewards(MsgClaimRewards) returns (MsgClaimRewardsResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "vaults/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgDeposit is the MsgDeposit request type.
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "depositor";
  option (amino.name) = "vaults/MsgDeposit";

  // depositor is the address of the user depositing the funds.
  string depositor = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to deposit into.
  uint64 vault_id = 2;

  // amount is the amount of tokens to deposit.
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
}

// MsgDepositResponse defines the response structure for deposit
message MsgDepositResponse {
  // vault_id is the ID of the vault that the deposit was made into.
  uint64 vault_id = 1;
  string shares = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// MsgWithdraw is the MsgWithdraw request type.
message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "withdrawer";
  option (amino.name) = "vaults/MsgWithdraw";

  // withdrawer is the address of the user withdrawing the funds.
  string withdrawer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to withdraw from.
  uint64 vault_id = 2;

  string shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  bool swap_to_deposit_denom = 4;
}

// MsgWithdrawResponse defines the response structure for withdrawal
message MsgWithdrawResponse {
  // vault_id is the ID of the vault that the withdrawal was made from.
  uint64 vault_id = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// MsgAddVault is the MsgAddVault request type.
message MsgAddVault {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgAddVault";

  // creator is the address of the user creating the vault.
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string deposit_denom = 2;
  // Max amount vault can hold in USD
  string max_amount_usd = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  // Coins allowed to trade in the vault
  repeated string allowed_coins = 4;
  repeated string reward_coins = 5;
  string benchmark_coin = 6;
  string manager = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string management_fee = 8 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string performance_fee = 9 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string protocol_fee_share = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  uint64 lockup_period = 11; // in seconds
  string description = 12;
  repeated string allowed_actions = 13; // TODO: enable checks in v1.5
}

// MsgAddVaultResponse defines the response structure for adding vault
message MsgAddVaultResponse {
  // vault_id is the ID of the vault that was created.
  uint64 vault_id = 1;
}

message MsgPerformActionResponse { uint64 vault_id = 1; }

message MsgPerformActionJoinPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgPerformActionJoinPool";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  uint64 pool_id = 3;
  repeated cosmos.base.v1beta1.Coin max_amounts_in = 4
      [ (gogoproto.nullable) = false ];
  string share_amount_out = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgPerformActionJoinPoolResponse {
  string share_amount_out = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgPerformActionExitPool {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgPerformActionExitPool";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  uint64 pool_id = 3;
  repeated cosmos.base.v1beta1.Coin min_amounts_out = 4
      [ (gogoproto.nullable) = false ];
  string share_amount_in = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
  string token_out_denom = 6;
}

message MsgPerformActionExitPoolResponse {
  repeated cosmos.base.v1beta1.Coin token_out = 1
      [ (gogoproto.nullable) = false ];
  string weight_balance_ratio = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string slippage = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message MsgPerformActionSwapByDenom {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgPerformActionSwapByDenom";
  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin min_amount = 4 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin max_amount = 5 [ (gogoproto.nullable) = false ];
  string denom_in = 6;
  string denom_out = 7;
}

message MsgPerformActionSwapByDenomResponse {
  cosmos.base.v1beta1.Coin out_amount = 1 [ (gogoproto.nullable) = false ];
}

message MsgUpdateVaultCoins {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgUpdateVaultCoins";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  repeated string allowed_coins = 3;
  repeated string reward_coins = 4;
}

message MsgUpdateVaultCoinsResponse { uint64 vault_id = 1; }

message MsgUpdateVaultFees {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgUpdateVaultFees";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  string management_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string performance_fee = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
  string protocol_fee_share = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateVaultFeesResponse { uint64 vault_id = 1; }

message MsgUpdateVaultLockupPeriod {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgUpdateVaultLockupPeriod";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  uint64 lockup_period = 3;
}

message MsgUpdateVaultLockupPeriodResponse { uint64 vault_id = 1; }

message MsgUpdateVaultMaxAmountUsd {
  option (cosmos.msg.v1.signer) = "creator";
  option (amino.name) = "vaults/MsgUpdateVaultMaxAmountUsd";

  string creator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 vault_id = 2;
  string max_amount_usd = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

message MsgUpdateVaultMaxAmountUsdResponse { uint64 vault_id = 1; }

message MsgClaimRewards {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "vaults/MsgClaimRewards";
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated uint64 vault_ids = 2;
}

message MsgClaimRewardsResponse {}