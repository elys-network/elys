syntax = "proto3";
package elys.vaults;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "elys/vaults/params.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/elys-network/elys/x/vaults/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "vaults/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgDeposit {
  option (cosmos.msg.v1.signer) = "depositor";
  option (amino.name) = "vaults/MsgDeposit";

  // depositor is the address of the user depositing the funds.
  string depositor = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to deposit into.
  uint64 vault_id = 2;

  // amount is the amount of tokens to deposit.
  cosmos.base.v1beta1.Coin amount = 3 [ (gogoproto.nullable) = false ];
}

message MsgDepositResponse {
  // vault_id is the ID of the vault that the deposit was made into.
  uint64 vault_id = 1;
  string shares = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "withdrawer";
  option (amino.name) = "vaults/MsgWithdraw";

  // withdrawer is the address of the user withdrawing the funds.
  string withdrawer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // vault_id is the ID of the vault to withdraw from.
  uint64 vault_id = 2;

  string shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdrawResponse {
  // vault_id is the ID of the vault that the withdrawal was made from.
  uint64 vault_id = 1;
  repeated cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}