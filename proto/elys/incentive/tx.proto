syntax = "proto3";

package elysnetwork.elys.incentive;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/elys-network/elys/x/incentive/types";

// Msg defines the Msg service.
service Msg {
    
  // WithdrawDelegatorReward defines a method to withdraw rewards of delegator
  // from a single validator.
  rpc WithdrawRewards(MsgWithdrawRewards) returns (MsgWithdrawRewardsResponse);

  // WithdrawValidatorCommission defines a method to withdraw the
  // full commission to the validator address.
  rpc WithdrawValidatorCommission(MsgWithdrawValidatorCommission) returns (MsgWithdrawValidatorCommissionResponse);

}

// MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator
// from a single validator.
message MsgWithdrawRewards {
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  }
  
  // MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward response type.
  message MsgWithdrawRewardsResponse {
  }
  
  // MsgWithdrawValidatorCommission withdraws the full commission to the validator
  // address.
  message MsgWithdrawValidatorCommission {
    option (gogoproto.equal)           = false;
    option (gogoproto.goproto_getters) = false;
  
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  }
  
  // MsgWithdrawValidatorCommissionResponse defines the Msg/WithdrawValidatorCommission response type.
  message MsgWithdrawValidatorCommissionResponse {
  }
  