syntax = "proto3";

package elys.commitment;

import "gogoproto/gogo.proto";

option go_package = "github.com/elys-network/elys/x/commitment/types";

// Msg defines the Msg service.
service Msg {
  // CommitLiquidTokens commit the tokens from user's balance
  rpc CommitLiquidTokens(MsgCommitLiquidTokens) returns (MsgCommitLiquidTokensResponse);
  // CommitUnclaimedRewards commit the tokens on unclaimed store to committed
  rpc CommitUnclaimedRewards(MsgCommitUnclaimedRewards) returns (MsgCommitUnclaimedRewardsResponse);
  // UncommitTokens uncommits the tokens from committed store and make it liquid immediately
  rpc UncommitTokens(MsgUncommitTokens) returns (MsgUncommitTokensResponse    );
  // WithdrawTokens withdraw first from unclaimed and if it requires more, withdraw from committed store
  rpc WithdrawTokens(MsgWithdrawTokens) returns (MsgWithdrawTokensResponse);
  // Vest converts user's commitment to vesting - start with unclaimed rewards and if it's not enough deduct from committed bucket
  // mainly utilized for Eden
  rpc Vest(MsgVest) returns (MsgVestResponse);
  // VestNow provides functionality to get the token immediately but lower amount than original
  // e.g. user can burn 1000 ueden and get 800 uelys when the ratio is 80%
  rpc VestNow(MsgVestNow) returns (MsgVestNowResponse);
  // VestLiquid converts user's balance to vesting to be utilized for normal tokens vesting like ATOM vesting
  rpc VestLiquid(MsgVestLiquid) returns (MsgVestLiquidResponse);
  // CancelVest cancel the user's vesting and the user reject to get vested tokens
  rpc CancelVest(MsgCancelVest) returns (MsgCancelVestResponse);
  // UpdateVestingInfo add/update specific vesting info by denom on Params
  rpc UpdateVestingInfo(MsgUpdateVestingInfo) returns (MsgUpdateVestingInfoResponse );
}

message MsgCommitUnclaimedRewards {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgCommitUnclaimedRewardsResponse {}

message MsgUncommitTokens {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgUncommitTokensResponse {}

message MsgWithdrawTokens {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgWithdrawTokensResponse {}

message MsgCommitLiquidTokens {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
  uint64 minLock = 4; // minimum lock duration to wait until it is claimable
}

message MsgCommitLiquidTokensResponse {}

message MsgVest {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgVestResponse {}

message MsgCancelVest {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgCancelVestResponse {}

message MsgVestNow {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgVestNowResponse {}

message MsgUpdateVestingInfo {
  string authority       = 1;
  string baseDenom       = 2;
  string vestingDenom    = 3;
  string epochIdentifier = 4;
  int64  numEpochs       = 5;
  int64  vestNowFactor   = 6;
  int64  numMaxVestings  = 7;
}

message MsgUpdateVestingInfoResponse {}

message MsgVestLiquid {
  string creator = 1;
  string amount  = 2 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (gogoproto.nullable) = false];
  string denom   = 3;
}

message MsgVestLiquidResponse {}

