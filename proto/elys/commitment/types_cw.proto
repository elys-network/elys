syntax = "proto3";

package elys.commitment;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "elys/commitment/params.proto";
import "elys/commitment/commitments.proto";

option go_package = "github.com/elys-network/elys/x/commitment/types";

message QueryBorrowAmountRequest {
    string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryDelegatorDelegationsRequest {
	// delegator_addr defines the delegator address to query for.
	string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// Delegation represents the bond with tokens held by an account. It is
// owned by one delegator, and is associated with the voting power of one
// validator.
message Delegation {
    // delegator_address is the bech32-encoded address of the delegator.
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_address is the bech32-encoded address of the validator.
    string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // shares define the delegation shares received.
    string shares = 3 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}
  
// DelegationResponse is equivalent to Delegation except that it contains a
// balance in addition to shares which is more suitable for client responses.
message DelegationResponse {
    Delegation delegation = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    cosmos.base.v1beta1.Coin balance = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryDelegatorDelegationsResponse is response message for the
// Query/DelegatorDelegations RPC method.
message QueryDelegatorDelegationsResponse {
    // delegation_responses defines all the delegations' info of a delegator.
    repeated DelegationResponse delegation_responses = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
message UnbondingDelegationEntry {
    // creation_height is the height which the unbonding took place.
    int64 creation_height = 1;
    // completion_time is the unix time for unbonding completion.
    int64 completion_time = 2;
    // initial_balance defines the tokens initially scheduled to receive at completion.
    string initial_balance = 3 [
      (cosmos_proto.scalar)  = "cosmos.Int",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false
    ];
    // balance defines the tokens to receive at completion.
    string balance = 4 [
      (cosmos_proto.scalar)  = "cosmos.Int",
      (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
      (gogoproto.nullable)   = false
    ];
    // Incrementing id that uniquely identifies this entry
    uint64 unbonding_id = 5;
}

// QueryDelegatorUnbondingDelegationsRequest is request message for the
message QueryDelegatorUnbondingDelegationsRequest {
    // delegator_addr defines the delegator address to query for.
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message UnbondingDelegation {
    // delegator_address is the bech32-encoded address of the delegator.
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // validator_address is the bech32-encoded address of the validator.
    string validator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
    // entries are the unbonding delegation entries.
    repeated UnbondingDelegationEntry entries = 3
        [(gogoproto.nullable) = false, (amino.dont_omitempty) = true]; // unbonding delegation entries
}

// QueryUnbondingDelegatorDelegationsResponse is response message for the
// Query/UnbondingDelegatorDelegations RPC method.
message QueryDelegatorUnbondingDelegationsResponse {
    repeated UnbondingDelegation unbonding_responses = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryValidatorsRequest is request message for Query/Validators RPC method.
message QueryValidatorsRequest {
	// status enables to query for validators matching a given status.
    string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegatorValidatorsResponse is response message for the
// Query/DelegatorValidators RPC method.
message QueryDelegatorValidatorsResponse {
	// validators defines the validators' info of a delegator.
    repeated ValidatorDetail validators = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message BalanceAvailable {
    string amount = 1 [
        (cosmos_proto.scalar)  = "cosmos.Int",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.nullable)   = false
    ];
    string usd_amount = 2 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

message StakedAvailable {
    string amount = 1 [
        (cosmos_proto.scalar)  = "cosmos.Int",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
        (gogoproto.nullable)   = false
    ];
    string usd_amount = 2 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
    repeated elys.commitment.Lockup lockups = 3 [ (gogoproto.nullable) = false ];
}

message ValidatorDetail {
    // Validator Identity
    string id = 1;
	// The validator address.
	string address = 2;
	// The validator name.
	string name = 3;
	// Voting power percentage for this validator.
    string voting_power = 4 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
	// Comission percentage for the validator.
    string commission = 5 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
	// The staked amount the user has w/ this validator
	// Only available if there's some and if address.
	// is sent in request object.
	BalanceAvailable staked = 6 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    //Is jailed
    string jailed = 7;
    //The validator status
    string inactive = 8;
}

message StakingValidator {
    // Validator Identity
    string id = 1;
	// The validator address.
	string address = 2;
	// The validator name.
	string name = 3;
	// Voting power percentage for this validator.
    string voting_power = 4 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
	// Comission percentage for the validator.
    string commission = 5 [
        (cosmos_proto.scalar)  = "cosmos.Dec",
        (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
        (gogoproto.nullable)   = false
    ];
}

message StakedPosition {
	// The position ID.
	string id = 1;
	// The validator that's being unstaked from.
	StakingValidator validator = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
	// The amount that's being staked.
	BalanceAvailable staked = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryStakedPositionResponse {
	repeated StakedPosition staked_position = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message UnstakedPosition {
    // The position ID.
	string id = 1;
	// The validator that's being unstaked from.
	StakingValidator validator = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    // Remaining time to unstake in days.
	uint64 remaining_time = 3;
	// The amount that's being staked.
	BalanceAvailable unstaked = 4 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryUnstakedPositionResponse {
	repeated UnstakedPosition unstaked_position = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryVestingInfoRequest {
    string address = 1;
}

message VestingDetail {
    string id = 1;
    // The total vest for the current vest
    BalanceAvailable total_vesting = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    // The balance that's already vested
    BalanceAvailable claimed = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    // The amount vested so far
    BalanceAvailable vested_so_far = 4 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    // Remaining blocks
    int64 remaining_blocks = 5;
}

message QueryVestingInfoResponse {
    BalanceAvailable vesting = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
    repeated VestingDetail vesting_details = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}