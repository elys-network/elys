// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: elys/amm/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type LegacyParams struct {
	PoolCreationFee             cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=pool_creation_fee,json=poolCreationFee,proto3,customtype=cosmossdk.io/math.Int" json:"pool_creation_fee"`
	SlippageTrackDuration       uint64                      `protobuf:"varint,2,opt,name=slippage_track_duration,json=slippageTrackDuration,proto3" json:"slippage_track_duration,omitempty"`
	BaseAssets                  []string                    `protobuf:"bytes,3,rep,name=base_assets,json=baseAssets,proto3" json:"base_assets,omitempty"`
	WeightBreakingFeeExponent   cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=weight_breaking_fee_exponent,json=weightBreakingFeeExponent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_exponent"`
	WeightBreakingFeeMultiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=weight_breaking_fee_multiplier,json=weightBreakingFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_multiplier"`
	WeightBreakingFeePortion    cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=weight_breaking_fee_portion,json=weightBreakingFeePortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_portion"`
	WeightRecoveryFeePortion    cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=weight_recovery_fee_portion,json=weightRecoveryFeePortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_recovery_fee_portion"`
	ThresholdWeightDifference   cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=threshold_weight_difference,json=thresholdWeightDifference,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"threshold_weight_difference"`
	AllowedPoolCreators         []string                    `protobuf:"bytes,9,rep,name=allowed_pool_creators,json=allowedPoolCreators,proto3" json:"allowed_pool_creators,omitempty"`
}

func (m *LegacyParams) Reset()         { *m = LegacyParams{} }
func (m *LegacyParams) String() string { return proto.CompactTextString(m) }
func (*LegacyParams) ProtoMessage()    {}
func (*LegacyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1209ca218537a425, []int{0}
}
func (m *LegacyParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyParams.Merge(m, src)
}
func (m *LegacyParams) XXX_Size() int {
	return m.Size()
}
func (m *LegacyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyParams.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyParams proto.InternalMessageInfo

func (m *LegacyParams) GetSlippageTrackDuration() uint64 {
	if m != nil {
		return m.SlippageTrackDuration
	}
	return 0
}

func (m *LegacyParams) GetBaseAssets() []string {
	if m != nil {
		return m.BaseAssets
	}
	return nil
}

func (m *LegacyParams) GetAllowedPoolCreators() []string {
	if m != nil {
		return m.AllowedPoolCreators
	}
	return nil
}

type Params struct {
	PoolCreationFee                  cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=pool_creation_fee,json=poolCreationFee,proto3,customtype=cosmossdk.io/math.Int" json:"pool_creation_fee"`
	SlippageTrackDuration            uint64                      `protobuf:"varint,2,opt,name=slippage_track_duration,json=slippageTrackDuration,proto3" json:"slippage_track_duration,omitempty"`
	BaseAssets                       []string                    `protobuf:"bytes,3,rep,name=base_assets,json=baseAssets,proto3" json:"base_assets,omitempty"`
	WeightBreakingFeeExponent        cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=weight_breaking_fee_exponent,json=weightBreakingFeeExponent,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_exponent"`
	WeightBreakingFeeMultiplier      cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=weight_breaking_fee_multiplier,json=weightBreakingFeeMultiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_multiplier"`
	WeightBreakingFeePortion         cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=weight_breaking_fee_portion,json=weightBreakingFeePortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_breaking_fee_portion"`
	WeightRecoveryFeePortion         cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=weight_recovery_fee_portion,json=weightRecoveryFeePortion,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"weight_recovery_fee_portion"`
	ThresholdWeightDifference        cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=threshold_weight_difference,json=thresholdWeightDifference,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"threshold_weight_difference"`
	AllowedPoolCreators              []string                    `protobuf:"bytes,9,rep,name=allowed_pool_creators,json=allowedPoolCreators,proto3" json:"allowed_pool_creators,omitempty"`
	ThresholdWeightDifferenceSwapFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=threshold_weight_difference_swap_fee,json=thresholdWeightDifferenceSwapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"threshold_weight_difference_swap_fee"`
	LpLockupDuration                 uint64                      `protobuf:"varint,11,opt,name=lp_lockup_duration,json=lpLockupDuration,proto3" json:"lp_lockup_duration,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1209ca218537a425, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSlippageTrackDuration() uint64 {
	if m != nil {
		return m.SlippageTrackDuration
	}
	return 0
}

func (m *Params) GetBaseAssets() []string {
	if m != nil {
		return m.BaseAssets
	}
	return nil
}

func (m *Params) GetAllowedPoolCreators() []string {
	if m != nil {
		return m.AllowedPoolCreators
	}
	return nil
}

func (m *Params) GetLpLockupDuration() uint64 {
	if m != nil {
		return m.LpLockupDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*LegacyParams)(nil), "elys.amm.LegacyParams")
	proto.RegisterType((*Params)(nil), "elys.amm.Params")
}

func init() { proto.RegisterFile("elys/amm/params.proto", fileDescriptor_1209ca218537a425) }

var fileDescriptor_1209ca218537a425 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0x86, 0xb3, 0xb6, 0xa6, 0xcd, 0x54, 0x50, 0x57, 0x83, 0xdb, 0x46, 0x36, 0xa1, 0x78, 0x08,
	0x68, 0xb3, 0xa8, 0xe0, 0xdd, 0x18, 0x0b, 0x85, 0x0a, 0x21, 0x0a, 0x05, 0x2f, 0xc3, 0x64, 0xf3,
	0x65, 0xb3, 0x64, 0x76, 0xbf, 0x71, 0x66, 0xd2, 0x6d, 0x8e, 0xfe, 0x03, 0x7f, 0x8c, 0xe0, 0x5f,
	0xe8, 0xb1, 0x78, 0x12, 0x0f, 0x45, 0x92, 0x3f, 0x22, 0x3b, 0xbb, 0x49, 0x23, 0xa9, 0x22, 0xe9,
	0x35, 0xb7, 0xcc, 0xf7, 0xc2, 0xf3, 0xbe, 0x93, 0x9d, 0x97, 0x8f, 0x94, 0x81, 0x8f, 0x95, 0xc7,
	0xa2, 0xc8, 0x13, 0x4c, 0xb2, 0x48, 0x35, 0x84, 0x44, 0x8d, 0xf6, 0x76, 0x3a, 0x6e, 0xb0, 0x28,
	0xda, 0x7b, 0x18, 0x60, 0x80, 0x66, 0xe8, 0xa5, 0xbf, 0x32, 0x7d, 0x6f, 0xd7, 0x47, 0x15, 0xa1,
	0xa2, 0x99, 0x90, 0x1d, 0x32, 0x69, 0xff, 0x5b, 0x91, 0xdc, 0x39, 0x86, 0x80, 0xf9, 0xe3, 0xb6,
	0x21, 0xda, 0x27, 0xe4, 0xbe, 0x40, 0xe4, 0xd4, 0x97, 0xc0, 0x74, 0x88, 0x31, 0xed, 0x03, 0x38,
	0x56, 0xcd, 0xaa, 0x97, 0x9a, 0x4f, 0xcf, 0x2f, 0xab, 0x85, 0x9f, 0x97, 0xd5, 0x72, 0x46, 0x50,
	0xbd, 0x61, 0x23, 0x44, 0x2f, 0x62, 0x7a, 0xd0, 0x38, 0x8a, 0xf5, 0xf7, 0xaf, 0x07, 0x24, 0x47,
	0x1f, 0xc5, 0xba, 0x73, 0x37, 0xa5, 0xbc, 0xc9, 0x21, 0x87, 0x00, 0xf6, 0x2b, 0xf2, 0x48, 0xf1,
	0x50, 0x08, 0x16, 0x00, 0xd5, 0x92, 0xf9, 0x43, 0xda, 0x1b, 0x49, 0xa3, 0x3a, 0xb7, 0x6a, 0x56,
	0x7d, 0xb3, 0x53, 0x9e, 0xc9, 0x1f, 0x52, 0xb5, 0x95, 0x8b, 0x76, 0x95, 0xec, 0x74, 0x99, 0x02,
	0xca, 0x94, 0x02, 0xad, 0x9c, 0x8d, 0xda, 0x46, 0xbd, 0xd4, 0x21, 0xe9, 0xe8, 0xb5, 0x99, 0xd8,
	0x92, 0x3c, 0x4e, 0x20, 0x0c, 0x06, 0x9a, 0x76, 0x25, 0xb0, 0x61, 0x18, 0x07, 0x69, 0x66, 0x0a,
	0x67, 0x02, 0x63, 0x88, 0xb5, 0xb3, 0x69, 0xc2, 0x3f, 0xcf, 0xc3, 0x57, 0x96, 0xc3, 0x67, 0xf7,
	0x6f, 0x81, 0xbf, 0x70, 0x85, 0x16, 0xf8, 0x9d, 0xdd, 0x0c, 0xdb, 0xcc, 0xa9, 0x87, 0x00, 0x6f,
	0x73, 0xa6, 0x7d, 0x4a, 0xdc, 0xeb, 0x3c, 0xa3, 0x11, 0xd7, 0xa1, 0xe0, 0x21, 0x48, 0xe7, 0xf6,
	0xaa, 0xae, 0x95, 0x25, 0xd7, 0x77, 0x73, 0xaa, 0x2d, 0x48, 0xe5, 0x3a, 0x5f, 0x81, 0xd2, 0xfc,
	0x91, 0xc5, 0x55, 0x4d, 0x9d, 0x25, 0xd3, 0x76, 0x86, 0x5c, 0x70, 0x94, 0xe0, 0xe3, 0x29, 0xc8,
	0xf1, 0x1f, 0x8e, 0x5b, 0x37, 0x74, 0xec, 0xe4, 0xd0, 0x05, 0xc7, 0x4f, 0xa4, 0xa2, 0x07, 0x12,
	0xd4, 0x00, 0x79, 0x8f, 0xe6, 0xde, 0xbd, 0xb0, 0xdf, 0x07, 0x09, 0xb1, 0x0f, 0xce, 0xf6, 0xca,
	0x9f, 0x73, 0x4e, 0x3d, 0x31, 0xd0, 0xd6, 0x9c, 0x69, 0xbf, 0x20, 0x65, 0xc6, 0x39, 0x26, 0xd0,
	0xa3, 0x57, 0x8f, 0x1f, 0xa5, 0x72, 0x4a, 0xe6, 0xb5, 0x3d, 0xc8, 0xc5, 0xf6, 0xec, 0x49, 0xa3,
	0x54, 0xfb, 0xd3, 0x2d, 0x52, 0x5c, 0x77, 0x66, 0xdd, 0x99, 0x75, 0x67, 0xfe, 0xbb, 0x33, 0xf6,
	0x67, 0x8b, 0x3c, 0xf9, 0x47, 0x4e, 0xaa, 0x12, 0x26, 0x4c, 0x79, 0xc8, 0xaa, 0x81, 0x6b, 0x7f,
	0x0d, 0xfc, 0x3e, 0x61, 0x22, 0xed, 0xd4, 0x33, 0x62, 0x73, 0x41, 0x39, 0xfa, 0xc3, 0x91, 0xb8,
	0xaa, 0xd3, 0x8e, 0xa9, 0xd3, 0x3d, 0x2e, 0x8e, 0x8d, 0x30, 0x6b, 0x52, 0xb3, 0x79, 0x3e, 0x71,
	0xad, 0x8b, 0x89, 0x6b, 0xfd, 0x9a, 0xb8, 0xd6, 0x97, 0xa9, 0x5b, 0xb8, 0x98, 0xba, 0x85, 0x1f,
	0x53, 0xb7, 0xf0, 0xb1, 0x1e, 0x84, 0x7a, 0x30, 0xea, 0x36, 0x7c, 0x8c, 0xbc, 0x74, 0xff, 0x1e,
	0xc4, 0xa0, 0x13, 0x94, 0x43, 0x73, 0xf0, 0xce, 0xcc, 0x96, 0xd6, 0x63, 0x01, 0xaa, 0x5b, 0x34,
	0xab, 0xf6, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0x3a, 0x7a, 0x7c, 0xbe, 0x07, 0x00,
	0x00,
}

func (m *LegacyParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllowedPoolCreators) > 0 {
		for iNdEx := len(m.AllowedPoolCreators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPoolCreators[iNdEx])
			copy(dAtA[i:], m.AllowedPoolCreators[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedPoolCreators[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.ThresholdWeightDifference.Size()
		i -= size
		if _, err := m.ThresholdWeightDifference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.WeightRecoveryFeePortion.Size()
		i -= size
		if _, err := m.WeightRecoveryFeePortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.WeightBreakingFeePortion.Size()
		i -= size
		if _, err := m.WeightBreakingFeePortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.WeightBreakingFeeMultiplier.Size()
		i -= size
		if _, err := m.WeightBreakingFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.WeightBreakingFeeExponent.Size()
		i -= size
		if _, err := m.WeightBreakingFeeExponent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.BaseAssets) > 0 {
		for iNdEx := len(m.BaseAssets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BaseAssets[iNdEx])
			copy(dAtA[i:], m.BaseAssets[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.BaseAssets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SlippageTrackDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SlippageTrackDuration))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.PoolCreationFee.Size()
		i -= size
		if _, err := m.PoolCreationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LpLockupDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.LpLockupDuration))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.ThresholdWeightDifferenceSwapFee.Size()
		i -= size
		if _, err := m.ThresholdWeightDifferenceSwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.AllowedPoolCreators) > 0 {
		for iNdEx := len(m.AllowedPoolCreators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AllowedPoolCreators[iNdEx])
			copy(dAtA[i:], m.AllowedPoolCreators[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.AllowedPoolCreators[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.ThresholdWeightDifference.Size()
		i -= size
		if _, err := m.ThresholdWeightDifference.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.WeightRecoveryFeePortion.Size()
		i -= size
		if _, err := m.WeightRecoveryFeePortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.WeightBreakingFeePortion.Size()
		i -= size
		if _, err := m.WeightBreakingFeePortion.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.WeightBreakingFeeMultiplier.Size()
		i -= size
		if _, err := m.WeightBreakingFeeMultiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.WeightBreakingFeeExponent.Size()
		i -= size
		if _, err := m.WeightBreakingFeeExponent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.BaseAssets) > 0 {
		for iNdEx := len(m.BaseAssets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BaseAssets[iNdEx])
			copy(dAtA[i:], m.BaseAssets[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.BaseAssets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.SlippageTrackDuration != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.SlippageTrackDuration))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.PoolCreationFee.Size()
		i -= size
		if _, err := m.PoolCreationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LegacyParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolCreationFee.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.SlippageTrackDuration != 0 {
		n += 1 + sovParams(uint64(m.SlippageTrackDuration))
	}
	if len(m.BaseAssets) > 0 {
		for _, s := range m.BaseAssets {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.WeightBreakingFeeExponent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightBreakingFeeMultiplier.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightBreakingFeePortion.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightRecoveryFeePortion.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ThresholdWeightDifference.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.AllowedPoolCreators) > 0 {
		for _, s := range m.AllowedPoolCreators {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolCreationFee.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.SlippageTrackDuration != 0 {
		n += 1 + sovParams(uint64(m.SlippageTrackDuration))
	}
	if len(m.BaseAssets) > 0 {
		for _, s := range m.BaseAssets {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.WeightBreakingFeeExponent.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightBreakingFeeMultiplier.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightBreakingFeePortion.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.WeightRecoveryFeePortion.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.ThresholdWeightDifference.Size()
	n += 1 + l + sovParams(uint64(l))
	if len(m.AllowedPoolCreators) > 0 {
		for _, s := range m.AllowedPoolCreators {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = m.ThresholdWeightDifferenceSwapFee.Size()
	n += 1 + l + sovParams(uint64(l))
	if m.LpLockupDuration != 0 {
		n += 1 + sovParams(uint64(m.LpLockupDuration))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LegacyParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTrackDuration", wireType)
			}
			m.SlippageTrackDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTrackDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssets = append(m.BaseAssets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeeExponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeeExponent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeePortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeePortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightRecoveryFeePortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightRecoveryFeePortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdWeightDifference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThresholdWeightDifference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPoolCreators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPoolCreators = append(m.AllowedPoolCreators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolCreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlippageTrackDuration", wireType)
			}
			m.SlippageTrackDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlippageTrackDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssets = append(m.BaseAssets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeeExponent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeeExponent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeeMultiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeeMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightBreakingFeePortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightBreakingFeePortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightRecoveryFeePortion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WeightRecoveryFeePortion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdWeightDifference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThresholdWeightDifference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedPoolCreators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedPoolCreators = append(m.AllowedPoolCreators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThresholdWeightDifferenceSwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThresholdWeightDifferenceSwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LpLockupDuration", wireType)
			}
			m.LpLockupDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LpLockupDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
